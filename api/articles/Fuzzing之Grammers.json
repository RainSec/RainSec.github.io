{"title":"Fuzzing之Grammars","uid":"001f56a1173240fc9f846bb4717903d4","slug":"Fuzzing之Grammers","date":"2022-07-31T08:42:45.000Z","updated":"2023-04-12T02:36:51.355Z","comments":true,"path":"api/articles/Fuzzing之Grammers.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/fuzzinggrammar.jpeg","content":"<h1 id=\"Fuzzing之Grammars\"><a href=\"#Fuzzing之Grammars\" class=\"headerlink\" title=\"Fuzzing之Grammars\"></a>Fuzzing之Grammars</h1><h2 id=\"Fuzzing-input\"><a href=\"#Fuzzing-input\" class=\"headerlink\" title=\"Fuzzing input\"></a>Fuzzing input</h2><p>​  Fuzzing的一大核心思想其实就是通过大量的Input去触发程序的各个分支逻辑，因此Fuzzing的成功与否和Input的生成关系密切。Input的格式多种多样，可以是文件，代码，json数据等等。但是各种各样的数据都有自己的格式，程序的输入也是如此，那么在生成Input的过程中，格式化非常关键，程序无法接受的输入对于Fuzzing来说是毫无意义的。</p>\n<p>​  为了很好的描述一个程序的输入，一个很有必要的事情是为输入制定一些语法规范。比如编译器的输入：python解释器规定了符合python语法的程序才能得以执行，gcc规定了符合C语言语法的程序才能被完成编译进而生成二进制文件。Fuzzing也是如此，为了很好的达到Fuzzing的效果，为程序定义一种输入的语法规范往往是一种不错的选择。</p>\n<p>​  一般而言，对于Fuzzing简单的程序来说，正则表达式往往是一个不错的选择，它所具备的有限状态机属性使得它易于推理进而获得一个满意的Input。但是如果面临的Fuzzing目标需要非常复杂的输入，那么它就会表现的捉襟见肘。</p>\n<p>​  我曾见过为了更好的实现某些功能而专门设计一些语言，从计算机理论的角度这显然是非常有用的，一些特殊功能在特殊语言的加持之下表现出超高的质量，但是对于Fuzzing而言这确实是成本过高了，Grammars其实就是正则表达式和专业语言之间的一个中间地带。它易于理解，并且能很好的完成Fuzzing对它的期望–生成大量合法输入，因为通过Grammars可以规定Inputs的大量属性，完美的表达一个复杂输入的语法结构。</p>\n<h2 id=\"Grammars初探\"><a href=\"#Grammars初探\" class=\"headerlink\" title=\"Grammars初探\"></a>Grammars初探</h2><p>​  Grammar一般由符号和一组表达式组成，例如<code>A = 10 | 9 | 0 |1</code>，符号化使得递归成为可能，假设<code>B = A | AB</code>，这无疑就使得符号所代表的范围倍增。根据这种思想我们可以制作一个算数表达式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;start&gt;   ::= &lt;expr&gt;\n&lt;expr&gt;    ::= &lt;term&gt; + &lt;expr&gt; | &lt;term&gt; - &lt;expr&gt; | &lt;term&gt;\n&lt;term&gt;    ::= &lt;term&gt; * &lt;factor&gt; | &lt;term&gt; / &lt;factor&gt; | &lt;factor&gt;\n&lt;factor&gt;  ::= +&lt;factor&gt; | -&lt;factor&gt; | (&lt;expr&gt;) | &lt;integer&gt; | &lt;integer&gt;.&lt;integer&gt;\n&lt;integer&gt; ::= &lt;digit&gt;&lt;integer&gt; | &lt;digit&gt;\n&lt;digit&gt;   ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么通过对<code>&lt;start&gt;</code>的内部的符号进行逐一扩展，并对过程进行随机化处理，最终就可以得到大量的合法算数表达式。和大多数语法一样，Grammar也应该有自己的Type，以便对其合法性进行校验，以Python 为例子可以对上述的Grammar进行定义：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Option <span class=\"token operator\">=</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Any<span class=\"token punctuation\">]</span>\nExpansion <span class=\"token operator\">=</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Option<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nGrammar <span class=\"token operator\">=</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span>Expansion<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nEXPR_GRAMMAR<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;expr&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;expr&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;term&gt; + &lt;expr&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;term&gt; - &lt;expr&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;term&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;term&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;factor&gt; * &lt;term&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;factor&gt; / &lt;term&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;factor&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;factor&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"+&lt;factor&gt;\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-&lt;factor&gt;\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"(&lt;expr&gt;)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"&lt;integer&gt;.&lt;integer&gt;\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"&lt;integer&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;integer&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digit&gt;&lt;integer&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>前三行代码定义了一个Grammar应该如何在Python中构成。通过代码中的<code>EXPR_GRAMMAR[\"&lt;digit&gt;\"]</code>可以访问当前Grammar的各个组成部分并对其进行操作。</p>\n<h3 id=\"Sample-Grammar-Fuzz\"><a href=\"#Sample-Grammar-Fuzz\" class=\"headerlink\" title=\"Sample Grammar Fuzz\"></a>Sample Grammar Fuzz</h3><p>​  那么该如何对Grammar语法进行解析呢？一种最简单的方式就是通过字符串替换，因为在Grammar中<code>:</code>的左右两侧本身就是一种映射关系，因此利用字符串替换不断迭代是一种最为直观的选择。</p>\n<p>实例代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">START_SYMBOL <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;start&gt;\"</span>\n<span class=\"token comment\"># 一个简单的gramar fuzzer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">simple_grammar_fuzzer</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span> \n                          start_symbol<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> START_SYMBOL<span class=\"token punctuation\">,</span>\n                          max_nonterminals<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                          max_expansion_trials<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                          log<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Produce a string from `grammar`.\n       `start_symbol`: use a start symbol other than `&lt;start&gt;` (default).\n       `max_nonterminals`: the maximum number of nonterminals \n         still left for expansion\n       `max_expansion_trials`: maximum # of attempts to produce a string\n       `log`: print expansion progress if True\"\"\"</span>\n\n    term <span class=\"token operator\">=</span> start_symbol\n    expansion_trials <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nonterminals<span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 判断字符串中是否存在&lt;&gt;，并返回所有被&lt;&gt;包裹的项，注意如果是&lt;dsad&lt;abc&gt;&gt;则返回&lt;abc&gt;</span>\n        symbol_to_expand <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>nonterminals<span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        expansions <span class=\"token operator\">=</span> grammar<span class=\"token punctuation\">[</span>symbol_to_expand<span class=\"token punctuation\">]</span>\n        expansion <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>expansions<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># In later chapters, we allow expansions to be tuples,</span>\n        <span class=\"token comment\"># with the expansion being the first element</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            expansion <span class=\"token operator\">=</span> expansion<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n        new_term <span class=\"token operator\">=</span> term<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>symbol_to_expand<span class=\"token punctuation\">,</span> expansion<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 解析下一个符号</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nonterminals<span class=\"token punctuation\">(</span>new_term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> max_nonterminals<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 每次的可解析符号，必须少于最大单次解析量</span>\n            term <span class=\"token operator\">=</span> new_term\n            <span class=\"token keyword\">if</span> log<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-40s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>symbol_to_expand <span class=\"token operator\">+</span> <span class=\"token string\">\" -&gt; \"</span> <span class=\"token operator\">+</span> expansion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> term<span class=\"token punctuation\">)</span>\n            expansion_trials <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            expansion_trials <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> expansion_trials <span class=\"token operator\">&gt;=</span> max_expansion_trials<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 总的解析次数也存在限制</span>\n                <span class=\"token keyword\">raise</span> ExpansionError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot expand \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> term<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>利用上面的表达式Grammar可以制作一个简单的grammar fuzz，Fuzz的编写过程其实面临着很多的取舍，便利和速度或者各种各样的可行性之间的考虑，以上面的Grammar为例子，我们肯定不希望其陷入类似无限递归或者大量符号解析的情况，而是会限制对字段的提取次数和对符号的解析次数。</p>\n<p>​  但是此类Grammar Fuzz都面临几个问题就是大量的字符串搜索和替换操作导致效率低下，而且可以看出存在Input生成失败的情况（ExpansionError），而且这是一个典型的上下文无关的Fuzz。不过，依赖于上述功能，我们只要编写Grammar就可以很好的对一些Inputs进行大量生成。</p>\n<p>比如URL生成：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">URL_GRAMMAR<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;url&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;url&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;&lt;query&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;scheme&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ftp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ftps\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;authority&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;host&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;host&gt;:&lt;port&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;userinfo&gt;@&lt;host&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;userinfo&gt;@&lt;host&gt;:&lt;port&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;host&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 大部分情况下其实可以指定一个URL</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"cispa.saarland\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"www.google.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fuzzingbook.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;port&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"80\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;nat&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;nat&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;userinfo&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just one</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"user:password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;path&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just a few</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/&lt;id&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;id&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just a few</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;query&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"?&lt;params&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;params&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;param&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;param&gt;&amp;&lt;params&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;param&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just a few</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;id&gt;=&lt;id&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;id&gt;=&lt;nat&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者类似HTTP协议的（但是这个不是为上述Fuzz准备的，只是拿来做个参考）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"&lt;A&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;START_LINE&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;HEADERS&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;BODY&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\\r\\n\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;START_LINE&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;METHOD&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;URI&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;VERSION&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;METHOD&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CONNECT\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"TRACE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"PATCH\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ACL\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"BASELINE-CONTROL\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"BIND\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CHECKIN\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CHECKOUT\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"COPY\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"LABEL\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"LINK\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"LOCK\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"MERGE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"MKACTIVITY\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"MKCALENDAR\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"MKCOL\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"MKREDIRECTREF\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"MKWORKSPACE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"MOVE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ORDERPATCH\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"PRI\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"PROPFIND\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"PROPPATCH\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"REBIND\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"REPORT\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"SEARCH\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UNBIND\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UNCHECKOUT\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UNLINK\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UNLOCK\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UPDATE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UPDATEREDIRECTREF\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"VERSION-CONTROL\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;URI&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;SCHEME&gt;\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;HIER&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;QUERY&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;FRAGMENT&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;SCHEME&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"shttp\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dav\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"attachment\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cid\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ftp\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ssh\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sip\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;HIER&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"//\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;AUTHORITY&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;PATH&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;AUTHORITY&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;USERINFO&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;HOST&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token string\">\"&lt;PATH&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;DIR&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token string\">\"&lt;DIR&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;DIR&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;USERINFO&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;HOST&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"127.0.0.1:8080\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;QUERY&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;CHAR&gt;\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;FRAGMENT&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token string\">\"&lt;VERSION&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"HTTP/0.9\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"HTTP/1.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"HTTP/1.1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"HTTP/2.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"HTTP/3.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;HEADERS&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;HEADER&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;HEADERS&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;HEADER&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;HEADER_FIELD&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;ANY&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;HEADER_FIELD&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A-IM\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept-Charset\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept-Datetime\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept-Encoding\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Request-Method\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Request-Headers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-Encoding\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-MD5\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Expect\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Forwarded\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"From\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"HTTP2-Settings\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"If-Match\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"If-Modified-Since\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"If-None-Match\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"If-Range\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"If-Unmodified-Since\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Max-Forwards\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Origin\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Pragma\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Proxy-Authorization\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Range\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Referer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"TE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Trailer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Transfer-Encoding\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Upgrade\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Via\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Warning\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;BODY&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;ANY&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;DATE&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;HOST&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;URI&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;DATE&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Sat, 29 Oct 1994 19:43:31 GMT\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\n\t<span class=\"token string\">\"&lt;CHAR&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"h\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"j\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"m\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"u\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"v\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"H\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"J\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"K\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"M\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"N\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"O\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Q\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"R\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"U\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"V\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"W\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到此，我们理解了Grammar对于Fuzzing的重要性，一个杰出的Grammar能够有效的生成大量合法输入，不过这只是从输入组成（句法）来看，这毕竟是一个庞大的范围，虽然有时候满足程序的输入格式，但是未必真的对Fuzzing起作用，这种情况非常常见。再一次以编译器为例子，你的程序在满足语言语法的同时更应该具备正确的语义。但是语义很难再以Grammar的形式表达。以URL生成Grammar为例，简单通过Grammar很难定义端口的范围。面对这样的问题，最简单的解决办法其实就是在Fuzz里面而不是在Grammar里面进行限制。以URL Grammar为例，通过Grammar生成的URL在真正的被作为Input给予目标之前，应该在Fuzz系统里面经过URL“合法性”判断，这里的判断可以由作者根据自己的需求来进行限制。</p>\n<h3 id=\"Grammar-Toolbox\"><a href=\"#Grammar-Toolbox\" class=\"headerlink\" title=\"Grammar Toolbox\"></a>Grammar Toolbox</h3><p>​  在Fuzzing项目中对于Grammar的需求并不是一成不变的，因此Grammar的一大需求就是具备可扩展性。以一个简单的Gramar为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">simple_nonterminal_grammar<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;nonterminal&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;nonterminal&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;left-angle&gt;&lt;identifier&gt;&lt;right-angle&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;left-angle&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;right-angle&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;identifier&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># for now</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候我们希望拓展其功能，但是不希望原来的Grammar受到影响（类比编程中的继承）,就是一个很简单的如下操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">nonterminal_grammar <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>simple_nonterminal_grammar<span class=\"token punctuation\">)</span>\nnonterminal_grammar<span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;identifier&gt;\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;idchar&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;identifier&gt;&lt;idchar&gt;\"</span><span class=\"token punctuation\">]</span>\nnonterminal_grammar<span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;idchar&gt;\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># for now</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>总结为一个函数如下，非常简单就不多解释：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">set_opts</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> expansion<span class=\"token punctuation\">:</span> Expansion<span class=\"token punctuation\">,</span> \n             opts<span class=\"token punctuation\">:</span> Option <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Set the options of the given expansion of grammar[symbol] to opts\"\"\"</span>\n    expansions <span class=\"token operator\">=</span> grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> exp <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>expansions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> exp_string<span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> exp_string<span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n\n        new_opts <span class=\"token operator\">=</span> exp_opts<span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> opts <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">or</span> new_opts <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n            new_opts <span class=\"token operator\">=</span> opts\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> opts<span class=\"token punctuation\">:</span>\n                new_opts<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> new_opts <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n            grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> exp_string<span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>exp_string<span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new_opts<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">raise</span> KeyError<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"no expansion \"</span> <span class=\"token operator\">+</span>\n        <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\" -&gt; \"</span> <span class=\"token operator\">+</span>\n        <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>\n            exp_string<span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同时，在写Fuzz的时候肯定不希望不断地写大量的符号和值的对应，因此我们需要一些语法来帮助，这里提供了ENBF的解析方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 解析 ebnf 语法</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">new_symbol</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span> symbol_name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;symbol&gt;\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Return a new symbol for `grammar` based on `symbol_name`\"\"\"</span>\n    <span class=\"token keyword\">if</span> symbol_name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> symbol_name\n\n    count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        tentative_symbol_name <span class=\"token operator\">=</span> symbol_name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&gt;\"</span>\n        <span class=\"token keyword\">if</span> tentative_symbol_name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> tentative_symbol_name\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\"># 提取表达式中符合EBNF语法的部分，? , * , + , ()</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">parenthesized_expressions</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">:</span> Expansion<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    RE_PARENTHESIZED_EXPR <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'\\([^()]*\\)[?+*]'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># In later chapters, we allow expansions to be tuples,</span>\n    <span class=\"token comment\"># with the expansion being the first element</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        expansion <span class=\"token operator\">=</span> expansion<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>RE_PARENTHESIZED_EXPR<span class=\"token punctuation\">,</span> expansion<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对Grammar中的EBNF语法括号进行解析</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_ebnf_parentheses</span><span class=\"token punctuation\">(</span>ebnf_grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Grammar<span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Convert a grammar in extended BNF to BNF\"\"\"</span>\n    grammar <span class=\"token operator\">=</span> extend_grammar<span class=\"token punctuation\">(</span>ebnf_grammar<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> nonterminal <span class=\"token keyword\">in</span> ebnf_grammar<span class=\"token punctuation\">:</span>\n        expansions <span class=\"token operator\">=</span> ebnf_grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>expansions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            expansion <span class=\"token operator\">=</span> expansions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                expansion <span class=\"token operator\">=</span> expansion<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                parenthesized_exprs <span class=\"token operator\">=</span> parenthesized_expressions<span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>parenthesized_exprs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n\n                <span class=\"token keyword\">for</span> expr <span class=\"token keyword\">in</span> parenthesized_exprs<span class=\"token punctuation\">:</span>\n                    operator <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                    contents <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n                    new_sym <span class=\"token operator\">=</span> new_symbol<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">)</span>\n\n                    exp <span class=\"token operator\">=</span> grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    opts <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> exp\n                    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n\n                    expansion <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">,</span> new_sym <span class=\"token operator\">+</span> operator<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> opts<span class=\"token punctuation\">:</span>\n                        grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> expansion\n\n                    grammar<span class=\"token punctuation\">[</span>new_sym<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>contents<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> grammar\n\n<span class=\"token comment\"># ENBF符号扩展</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">extended_nonterminals</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">:</span> Expansion<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    RE_EXTENDED_NONTERMINAL <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'(&lt;[^&lt;&gt; ]*&gt;[?+*])'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># In later chapters, we allow expansions to be tuples,</span>\n    <span class=\"token comment\"># with the expansion being the first element</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        expansion <span class=\"token operator\">=</span> expansion<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span>RE_EXTENDED_NONTERMINAL<span class=\"token punctuation\">,</span> expansion<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># ENBF符号扩展</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_ebnf_operators</span><span class=\"token punctuation\">(</span>ebnf_grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Grammar<span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Convert a grammar in extended BNF to BNF\"\"\"</span>\n    grammar <span class=\"token operator\">=</span> extend_grammar<span class=\"token punctuation\">(</span>ebnf_grammar<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> nonterminal <span class=\"token keyword\">in</span> ebnf_grammar<span class=\"token punctuation\">:</span>\n        expansions <span class=\"token operator\">=</span> ebnf_grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>expansions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            expansion <span class=\"token operator\">=</span> expansions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            extended_symbols <span class=\"token operator\">=</span> extended_nonterminals<span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> extended_symbol <span class=\"token keyword\">in</span> extended_symbols<span class=\"token punctuation\">:</span>\n                operator <span class=\"token operator\">=</span> extended_symbol<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                original_symbol <span class=\"token operator\">=</span> extended_symbol<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">assert</span> original_symbol <span class=\"token keyword\">in</span> ebnf_grammar<span class=\"token punctuation\">,</span> \\\n                    <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>original_symbol<span class=\"token punctuation\">}</span></span><span class=\"token string\"> is not defined in grammar\"</span></span>\n\n                new_sym <span class=\"token operator\">=</span> new_symbol<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> original_symbol<span class=\"token punctuation\">)</span>\n\n                exp <span class=\"token operator\">=</span> grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                opts <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> exp\n                <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n\n                new_exp <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>extended_symbol<span class=\"token punctuation\">,</span> new_sym<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> opts<span class=\"token punctuation\">:</span>\n                    grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>new_exp<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_exp\n\n                <span class=\"token keyword\">if</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">:</span>\n                    grammar<span class=\"token punctuation\">[</span>new_sym<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> original_symbol<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">elif</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n                    grammar<span class=\"token punctuation\">[</span>new_sym<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> original_symbol <span class=\"token operator\">+</span> new_sym<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">elif</span> operator <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">:</span>\n                    grammar<span class=\"token punctuation\">[</span>new_sym<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                        original_symbol<span class=\"token punctuation\">,</span> original_symbol <span class=\"token operator\">+</span> new_sym<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> grammar\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_ebnf_grammar</span><span class=\"token punctuation\">(</span>ebnf_grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Grammar<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> convert_ebnf_operators<span class=\"token punctuation\">(</span>convert_ebnf_parentheses<span class=\"token punctuation\">(</span>ebnf_grammar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于Grammar来言，我们必须要确定它的一个合法性，不然在使用中必然会遇到各种错误问题，因此语法检查是很必要的，就如同编译器的语法检查很重要一样：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 搜索Grammar中的定义的noterminal</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">def_used_nonterminals</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span> start_symbol<span class=\"token punctuation\">:</span> \n                          <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> START_SYMBOL<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Tuple<span class=\"token punctuation\">[</span>Optional<span class=\"token punctuation\">[</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n                                                       Optional<span class=\"token punctuation\">[</span>Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.\n    In case of error, return (`None`, `None`).\"\"\"</span>\n\n    defined_nonterminals <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    used_nonterminals <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>start_symbol<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> defined_nonterminal <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">:</span>\n        defined_nonterminals<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>defined_nonterminal<span class=\"token punctuation\">)</span>\n        expansions <span class=\"token operator\">=</span> grammar<span class=\"token punctuation\">[</span>defined_nonterminal<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>expansions<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>defined_nonterminal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": expansion is not a list\"</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>expansions<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>defined_nonterminal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": expansion list empty\"</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token keyword\">for</span> expansion <span class=\"token keyword\">in</span> expansions<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                expansion <span class=\"token operator\">=</span> expansion<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>defined_nonterminal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span>\n                      <span class=\"token operator\">+</span> <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": not a string\"</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span>\n\n            <span class=\"token keyword\">for</span> used_nonterminal <span class=\"token keyword\">in</span> nonterminals<span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                used_nonterminals<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>used_nonterminal<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> defined_nonterminals<span class=\"token punctuation\">,</span> used_nonterminals\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">reachable_nonterminals</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span>\n                           start_symbol<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> START_SYMBOL<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    reachable <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_find_reachable_nonterminals</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">nonlocal</span> reachable\n        reachable<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> expansion <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> nonterminal <span class=\"token keyword\">in</span> nonterminals<span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nonterminal <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> reachable<span class=\"token punctuation\">:</span>\n                    _find_reachable_nonterminals<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> nonterminal<span class=\"token punctuation\">)</span>\n\n    _find_reachable_nonterminals<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> start_symbol<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> reachable\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unreachable_nonterminals</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span>\n                             start_symbol<span class=\"token operator\">=</span>START_SYMBOL<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> grammar<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> reachable_nonterminals<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> start_symbol<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">opts_used</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    used_opts <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> symbol <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> expansion <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            used_opts <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>exp_opts<span class=\"token punctuation\">(</span>expansion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> used_opts\n\n<span class=\"token comment\"># Grammar的合法性判断，类似于编译器里面的语法检查</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_valid_grammar</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span>\n                     start_symbol<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> START_SYMBOL<span class=\"token punctuation\">,</span> \n                     supported_opts<span class=\"token punctuation\">:</span> Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Check if the given `grammar` is valid.\n       `start_symbol`: optional start symbol (default: `&lt;start&gt;`)\n       `supported_opts`: options supported (default: none)\"\"\"</span>\n\n    defined_nonterminals<span class=\"token punctuation\">,</span> used_nonterminals <span class=\"token operator\">=</span> \\\n        def_used_nonterminals<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> start_symbol<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> defined_nonterminals <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> used_nonterminals <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token comment\"># Do not complain about '&lt;start&gt;' being not used,</span>\n    <span class=\"token comment\"># even if start_symbol is different</span>\n    <span class=\"token keyword\">if</span> START_SYMBOL <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">:</span>\n        used_nonterminals<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>START_SYMBOL<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> unused_nonterminal <span class=\"token keyword\">in</span> defined_nonterminals <span class=\"token operator\">-</span> used_nonterminals<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>unused_nonterminal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": defined, but not used\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> undefined_nonterminal <span class=\"token keyword\">in</span> used_nonterminals <span class=\"token operator\">-</span> defined_nonterminals<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>undefined_nonterminal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": used, but not defined\"</span><span class=\"token punctuation\">,</span>\n              <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Symbols must be reachable either from &lt;start&gt; or given start symbol</span>\n    unreachable <span class=\"token operator\">=</span> unreachable_nonterminals<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> start_symbol<span class=\"token punctuation\">)</span>\n    msg_start_symbol <span class=\"token operator\">=</span> start_symbol\n\n    <span class=\"token keyword\">if</span> START_SYMBOL <span class=\"token keyword\">in</span> grammar<span class=\"token punctuation\">:</span>\n        unreachable <span class=\"token operator\">=</span> unreachable <span class=\"token operator\">-</span> \\\n            reachable_nonterminals<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> START_SYMBOL<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> start_symbol <span class=\"token operator\">!=</span> START_SYMBOL<span class=\"token punctuation\">:</span>\n            msg_start_symbol <span class=\"token operator\">+=</span> <span class=\"token string\">\" or \"</span> <span class=\"token operator\">+</span> START_SYMBOL\n\n    <span class=\"token keyword\">for</span> unreachable_nonterminal <span class=\"token keyword\">in</span> unreachable<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>unreachable_nonterminal<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": unreachable from \"</span> <span class=\"token operator\">+</span> msg_start_symbol<span class=\"token punctuation\">,</span>\n              <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n\n    used_but_not_supported_opts <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>supported_opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        used_but_not_supported_opts <span class=\"token operator\">=</span> opts_used<span class=\"token punctuation\">(</span>\n            grammar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>supported_opts<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> opt <span class=\"token keyword\">in</span> used_but_not_supported_opts<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"warning: option \"</span> <span class=\"token operator\">+</span>\n                <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\" is not supported\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> used_nonterminals <span class=\"token operator\">==</span> defined_nonterminals <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>unreachable<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上列举的是常用的Tools，在Fuzz的编写过程中，要根据实际问题针对性的编写各式各样的工具。</p>\n<h2 id=\"高效Grammars-Fuzz\"><a href=\"#高效Grammars-Fuzz\" class=\"headerlink\" title=\"高效Grammars Fuzz\"></a>高效Grammars Fuzz</h2><p>​  前面提供的simple_grammar_fuzzer其实存在大量的问题，比如性能低下，对于符号的解析次数受限，容易引起报错等，因此需要更加高明的算法。这里选择的是派生树，因为树形结构易于追踪而且易于添加和删除其中分支。关于Fuzz的编写其实就是不断的对派生树进行分析和对子节点的不断扩展。</p>\n<h3 id=\"派生树算法\"><a href=\"#派生树算法\" class=\"headerlink\" title=\"派生树算法\"></a>派生树算法</h3><p>​  从上述的简单算法可以看出，整个的Grammar Fuzz的核心其实就是通过大量的符号扩展形成对应的数据结构，那么用来存储或者拓展符号的数据结构其实尤为重要。派生树的树状结构其实完美的符合了我们的要求，树形结构自上而下的扩展正好和符号的扩展相对应。而且<code>派生树使得我们可以掌控整个扩展过程的状态</code>，比如那些节点已经被扩展，或者某个节点是否需要扩展等，同时，在扩展过程中增加新节点的速度远超把一个符号替换为一个值的过程，因此使用这种数据结构也带来了一定的性能增益。</p>\n<p>​  让我们以下面的Grammar为例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># URL Grammar</span>\nURL_GRAMMAR<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;url&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;url&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;&lt;query&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;scheme&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ftp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ftps\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;authority&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;host&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;host&gt;:&lt;port&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;userinfo&gt;@&lt;host&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;userinfo&gt;@&lt;host&gt;:&lt;port&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;host&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 大部分情况下其实可以指定一个URL</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"cispa.saarland\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"www.google.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fuzzingbook.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;port&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"80\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;nat&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;nat&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;userinfo&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just one</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"user:password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;path&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just a few</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/&lt;id&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;id&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just a few</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;query&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"?&lt;params&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;params&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;param&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;param&gt;&amp;&lt;params&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;param&gt;\"</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Just a few</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;id&gt;=&lt;id&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;id&gt;=&lt;nat&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以派生树算法来看，首先以<code>&lt;start&gt;</code>为初始节点，然后在Grammar中发现其存在对应的表达，所以就会选择<code>&lt;url&gt;</code>作为它的子节点，循环往复知道一个节点不再出现对应的子节点，然后整个的树形结构完成解析，输出对应的结构化数据。</p>\n<p>​  对应的数据表示如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>SYMBOL_NAME<span class=\"token punctuation\">,</span> CHILDREN<span class=\"token punctuation\">)</span>\nDerivationTree <span class=\"token operator\">=</span> Tuple<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>Any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nderivation_tree<span class=\"token punctuation\">:</span> DerivationTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;expr&gt;\"</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;expr&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">(</span><span class=\"token string\">\" + \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;term&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                     <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>SYMBOL_NAME</code>代表的就是符号，CHILDREN代表子节点，表示为具体的数据结构就是：<code>DerivationTree = Tuple[str, Optional[List[Any]]]</code>。其中CHILDREN主要有两种表示：</p>\n<ol>\n<li>None代表当前节点可以继续向下扩展，其含义就是现在节点存在可扩展的符号。</li>\n<li>[]代表的就是没有子节点了</li>\n</ol>\n<p>整个算法都围绕上面的基本原理展开</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">g_rammar_fuzzer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> GrammarFuzzer<span class=\"token punctuation\">(</span>URL_GRAMMAR<span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>fuzz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ProbabilisticGrammarFuzzer\"><a href=\"#ProbabilisticGrammarFuzzer\" class=\"headerlink\" title=\"ProbabilisticGrammarFuzzer\"></a>ProbabilisticGrammarFuzzer</h3><p>​  有时候完全随机的进行表达式展开其实会白白浪费大量的时间和资源，因此可以对表达式附加概率值，这一块涉及到大量的概率学问题，有部分数据来源于世界的统计规律，比如下面给出的<code>leaddigit</code>符号对应的概率，这些就不在深入分析。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">PROBABILISTIC_EXPR_GRAMMAR<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;expr&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;expr&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;term&gt; + &lt;expr&gt;\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;term&gt; - &lt;expr&gt;\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"&lt;term&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;term&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;factor&gt; * &lt;term&gt;\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;factor&gt; / &lt;term&gt;\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token string\">\"&lt;factor&gt;\"</span>\n         <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;factor&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"+&lt;factor&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-&lt;factor&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(&lt;expr&gt;)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"&lt;leadinteger&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;leadinteger&gt;.&lt;integer&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;leadinteger&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;leaddigit&gt;&lt;integer&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;leaddigit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\"># Benford's law: frequency distribution of leading digits</span>\n    <span class=\"token string\">\"&lt;leaddigit&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.301</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.176</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.097</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.079</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.067</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.058</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.051</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">(</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>prob<span class=\"token operator\">=</span><span class=\"token number\">0.046</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\"># Remaining digits are equally distributed</span>\n    <span class=\"token string\">\"&lt;integer&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digit&gt;&lt;integer&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>跟之前的Grammar有很大不同的地方在于，现在的Grammar可以通过增加注释的方式为列表中的值添加随机概率，使得作者可以通过逆向获取其它渠道得到的信息可以在Fuzz中获得利用。那现在问题就显而易见了，如何确定概率？</p>\n<p>​  当Fuzz的作者没办法直接给出一个符号对应的所有项具体的概率的时候，可以遵循的最直接的规则就是下面三个公式：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727074801193.2ln12v05bx40.png\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727074816609.10867094x8k0.png\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727074824325.1vqo9xj0oiw0.png\"></p>\n<p>大致含义也很好理解，就是a代表的是已知概率的项，而u代表的未知概率的项目，已知概率自然可以通过<code>opts</code>的方法给对应项附加概率，未知概率的项则按照概率平分的原则来赋予概率。之后自然是要在Fuzz里面引入概率，使得在生成种子的时候可以对符号解析的选择赋予权重，进而提高Fuzz效率。</p>\n<p>​  就Fuzz的具体实现而言，其实相比于上述的Grammar Fuzz只是增加了一个对于opts注释的访问，以便在随机解析的时候可以附加概率值权重。但是这样带来的优势是很明显的，甚至可以通过控制输入Fuzz目标指定的Func等。但是还有一种情况，我第一次解析Grammar symbol的时候希望它的概率为0.3，但是我第二次解析Grammar symbol的时候希望其概率为0.5，为了实现这一点其实可以利用上下文，在不同的上下文中复制希望赋予其不同概率的symbol，以IP Grammar为例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">IP_ADDRESS_GRAMMAR<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;address&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;address&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;octet&gt;.&lt;octet&gt;.&lt;octet&gt;.&lt;octet&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># [\"0\", \"1\", \"2\", ..., \"255\"]</span>\n    <span class=\"token string\">\"&lt;octet&gt;\"</span><span class=\"token punctuation\">:</span> decrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 其实代表的就是0-256</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了使得每次解析<code>&lt;octet&gt;</code>的时候都使用不同的概率，可以对其扩展，形成下面的语法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">IP_ADDRESS_GRAMMAR<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;address&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;address&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;octet-1&gt;.&lt;octet-2&gt;.&lt;octet-3&gt;.&lt;octet-4&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># [\"0\", \"1\", \"2\", ..., \"255\"]</span>\n    <span class=\"token string\">\"&lt;octet-1&gt;\"</span><span class=\"token punctuation\">:</span> decrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 其实代表的就是0-256</span>\n    <span class=\"token string\">\"&lt;octet-2&gt;\"</span><span class=\"token punctuation\">:</span> decrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 其实代表的就是0-256</span>\n    <span class=\"token string\">\"&lt;octet-3&gt;\"</span><span class=\"token punctuation\">:</span> decrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 其实代表的就是0-256</span>\n    <span class=\"token string\">\"&lt;octet-4&gt;\"</span><span class=\"token punctuation\">:</span> decrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 其实代表的就是0-256</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样在进行解析的时候就完全可以对每次解析附加不同的概率。下面是帮助实现的函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_duplicate_context</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span>\n                       orig_grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span>\n                       symbol<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n                       expansion<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>Expansion<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                       depth<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                       seen<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Helper function for `duplicate_context()`\"\"\"</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> expansion <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> expansion<span class=\"token punctuation\">:</span>\n            new_expansion <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> expansion_to_children<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> s <span class=\"token keyword\">in</span> seen<span class=\"token punctuation\">:</span>                 <span class=\"token comment\"># Duplicated already</span>\n                    new_expansion <span class=\"token operator\">+=</span> seen<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">elif</span> c <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> depth <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># Terminal symbol or end of recursion</span>\n                    new_expansion <span class=\"token operator\">+=</span> s\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>                         <span class=\"token comment\"># Nonterminal symbol - duplicate</span>\n                    <span class=\"token comment\"># Add new symbol with copy of rule</span>\n                    new_s <span class=\"token operator\">=</span> new_symbol<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n                    grammar<span class=\"token punctuation\">[</span>new_s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>orig_grammar<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n                    <span class=\"token comment\"># Duplicate its expansions recursively</span>\n                    <span class=\"token comment\"># {**seen, **{s: new_s}} is seen + {s: new_s}</span>\n                    _duplicate_context<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> orig_grammar<span class=\"token punctuation\">,</span> new_s<span class=\"token punctuation\">,</span> expansion<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                                       depth<span class=\"token operator\">=</span>depth <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> seen<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">**</span>seen<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span><span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">:</span> new_s<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                    new_expansion <span class=\"token operator\">+=</span> new_s\n\n            grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_expansion\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">duplicate_context</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">:</span> Grammar<span class=\"token punctuation\">,</span> \n                      symbol<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span>\n                      expansion<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>Expansion<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> \n                      depth<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Duplicate an expansion within a grammar.\n\n    In the given grammar, take the given expansion of the given `symbol`\n    (if `expansion` is omitted: all symbols), and replace it with a\n    new expansion referring to a duplicate of all originally referenced rules.\n\n    If `depth` is given, limit duplication to `depth` references\n    (default: unlimited)\n    \"\"\"</span>\n    orig_grammar <span class=\"token operator\">=</span> extend_grammar<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">)</span>\n    _duplicate_context<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> orig_grammar<span class=\"token punctuation\">,</span> symbol<span class=\"token punctuation\">,</span>\n                       expansion<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> seen<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># After duplication, we may have unreachable rules; delete them</span>\n    <span class=\"token keyword\">for</span> nonterminal <span class=\"token keyword\">in</span> unreachable_nonterminals<span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">del</span> grammar<span class=\"token punctuation\">[</span>nonterminal<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在完成上下文复制之后就可以通过类似下面的操作得到我们想要的结果：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">set_prob<span class=\"token punctuation\">(</span>probabilistic_ip_address_grammar<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;octet-1&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\nset_prob<span class=\"token punctuation\">(</span>probabilistic_ip_address_grammar<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;octet-2&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>不过这就又引入一个问题，概率在赋予给symbol之后一成不变真的合适吗？在真实世界的Fuzz中随着我们对于目标的不断了解，或者一些其它情况比如长时间未出现想要的结果等，及时改变策略也是非常必要的，但是如果Fuzz可以智能的自己调节调整不同symbol的概率值的话，会减轻很多的负担并获得更好的软件测试效果。一个比较好的办法是让Fuzz通过最开始被给予Inputs种子来学习应该赋予某些symbol多大的一个概率值，这种方法在某些场景下非常有用：</p>\n<ol>\n<li>测试常用功能，因为很多软件测试更希望常用的功能确保安全，但是对于漏洞挖掘研究人员来说可能目标不在于此。</li>\n<li>测试不常用功能，通过规避Inputs中解析到的symbol，Fuzz就会更偏向于测试一些不常用的功能。</li>\n<li>专注于指定的Inputs，一些漏洞挖掘可能希望专注于已有的非常有价值的poc inputs，通过专注于这些inputs，Fuzz可以测试软件的一些薄弱环节从而达到很好的效果。</li>\n</ol>\n<p>​  理论已经存在，那么如何实现呢？第一步肯定是需要将已经存在的Inputs种子恢复成为派生树，然后对派生树种每个Symbol对应的值有多少来计算将来的概率值。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727103008425.4agknyqe2ly0.png\"></p>\n<p>如上图，假设我给与一个<code>127.0.0.1</code>的种子，那么被解析之后，0在<code>&lt;octet&gt;</code>中的概率值就会被限制为<code>50%</code>，127和1分别为<code>25%</code>，那么在Fuzz运行的时候相关的概率值就可以赋予给<code>&lt;octet&gt;</code>。那么如果测试一些不常用功能该怎么办呢？其实就是通过原来测常用功能的Inputs得到相关概率，然后进行概率翻转就行了，比如常用功能的Inputs概率如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[('http', {'prob': 0.2222222222222222}),\n ('https', {'prob': 0.6666666666666666}),\n ('ftp', {'prob': 0.0}),\n ('ftps', {'prob': 0.1111111111111111})]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么经过翻转之后就是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[('http', {'prob': 0.1111111111111111}),\n ('https', {'prob': 0.0}),\n ('ftp', {'prob': 0.6666666666666666}),\n ('ftps', {'prob': 0.2222222222222222})]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述就是之前讲到的专注测试常用功能或者非常用功能的基本思路，从此处引出的另一个比较关键的是通过Inputs帮我们专注于目标的特定功能，它和测试常用功能的区别就是首先要找到一批特殊的Inputs，通过这些Inputs作为seeds就可以对语法解析的过程进行概率分析和限制，使得后续的变异可以一直有较高的目标命中率。</p>\n<h3 id=\"Generator-With-Pre-or-Post-or-order-Func\"><a href=\"#Generator-With-Pre-or-Post-or-order-Func\" class=\"headerlink\" title=\"Generator With Pre or Post or order Func\"></a>Generator With Pre or Post or order Func</h3><p>​  在某些Inputs在生成的时候，Fuzz作者可能希望对他们进行一些限制调整，获取其它的操作，这些都可以通过<code>pre func</code>完成。这类似于hook，那么对于func触发的时机一般就分为两种，在Inputs的生成之前或者是生成之后，在语法里面的表示就是：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">CHARGE_GRAMMAR<span class=\"token punctuation\">:</span> Grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;start&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Charge &lt;amount&gt; to my credit card &lt;credit-card-number&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;amount&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"$&lt;float&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;float&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;integer&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;integer&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;digit&gt;\"</span><span class=\"token punctuation\">:</span> crange<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token string\">\"&lt;credit-card-number&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digits&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;digits&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digit-block&gt;&lt;digit-block&gt;&lt;digit-block&gt;&lt;digit-block&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"&lt;digit-block&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;digit&gt;&lt;digit&gt;&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nCHARGE_GRAMMAR<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;float&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>pre<span class=\"token operator\">=</span>high_charge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># high_charge是函数名称</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nCHARGE_GRAMMAR<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;float&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;\"</span><span class=\"token punctuation\">,</span>\n                 opts<span class=\"token punctuation\">(</span>pre<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 或者选择使用lambda表达式</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另一种就是在Seeds的生成之后了：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">CHARGE_GRAMMAR<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"&lt;credit-card-number&gt;\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;digits&gt;\"</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">(</span>post<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> digits<span class=\"token punctuation\">:</span> fix_credit_card<span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>比如生成的digits不能满足Fuzz的需求，我们就可以通过这种方式来进行及时的修正，以提高Fuzz的效率。</p>\n<h3 id=\"Greybox-Fuzzing-with-Grammars\"><a href=\"#Greybox-Fuzzing-with-Grammars\" class=\"headerlink\" title=\"Greybox Fuzzing with Grammars\"></a>Greybox Fuzzing with Grammars</h3><p>​  除了Fuzzing性能类的问题之外的另一个问题就是变异的导向问题，在Grammars Fuzz生成Input的过程中对于Grammar的内部解析是随机的，但是对于Fuzz目标来说，大量的Input可能会触发相同的分支进而导致代码覆盖率难以达到理想的值。对于AFL类似的覆盖引导型Fuzz来说，因为白盒Fuzz的源代码插桩缘故可以统计代码覆盖率来进行不错的引导，但是还存在很多情况，比如黑盒，甚至是以一种WebServer为目标的Fuzz，统计代码覆盖率并不是一件简单的事情，这时候采取的措施应该是不断的增加Inputs生成的多样性，比如在上述的派生树的子节点的扩展过程进行统计，使其在生成Input语料的时候偏向于还没扩展过的节点。这时候就会面临新的问题，如何快速提升代码覆盖率？</p>\n<p>​  在进行Fuzz的时候，有时候一些输入的部分会被识别为关键字，比如C语言里面的int等，如果告诉Fuzz这些关键字就可以在短时间内极大的提升代码覆盖率，但是就长远来看整体的代码覆盖率还是要差于不使用关键字字典的情况。下面是使用关键字字典的变异Inputs生成器。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DictMutator</span><span class=\"token punctuation\">(</span>Mutator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Mutate strings using keywords from a dictionary\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dictionary<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Constructor. `dictionary` is the list of keywords to use.\"\"\"</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dictionary <span class=\"token operator\">=</span> dictionary\n        self<span class=\"token punctuation\">.</span>mutators<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>insert_from_dictionary<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert_from_dictionary</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Returns s with a keyword from the dictionary inserted\"\"\"</span>\n        pos <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        random_keyword <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>dictionary<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> random_keyword <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是问题在于关键字通过字典随机引入的方式很可能破坏了Input本来的正确输入结构进而引发不必要的损耗。解决的方法其实也很简单：<code>Fuzzing with Input Fragments</code>.</p>\n<ol>\n<li>对原有的Input进行Parse，形成派生树。</li>\n<li>对派生树进行节点互换或者节点替换等操作。</li>\n<li>对派生树进行还原，形成新的Input。</li>\n</ol>\n<p>以上的所有操作都在派生树上进行。为了更方便的进行编译操作，可以建立一个派生树的碎片池，每个碎片都由子树组成，子树包括符号和对应的Node节点和其子节点。不过对于派生树的parse其实是非常耗时的，因此可以设置一些时间限制来防止速度过低。不过以Fragments为基础的变异虽然可以很好的符合Inputs合法性的要求但是在代码覆盖率提升方面并不亮眼。而且以此为基础的<code>LangFuzz</code>其实在Inputs生成的速度上也远低于平常的结构化黑盒Fuzz。下面是两组对比数据：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LangFuzz\nFrom the 300 generated inputs, 152 (50.67%) can be parsed.In total, 91 statements are covered.\n\nBlackFuzz\nFrom the 300 generated inputs, 36 (12.00%) can be parsed.In total, 161 statements are covered.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出以Fragments为基础的变异的优势在于它可以很好的生成符合结构化语法的变异。那么现在的疑问就是如何在保证输入语法正确性的前提下提升代码覆盖率？</p>\n<p>​  一种方法是利用类似AFL的覆盖引导方式，利用代码覆盖率不断作为变异的反馈，以此来不断的增添提高代码覆盖率的种子，同时提供<code>structural mutations</code>和<code>32 byte-level mutations</code>两种变异方式，如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GreyboxGrammarFuzzer</span><span class=\"token punctuation\">(</span>GreyboxFuzzer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Greybox fuzzer using grammars.\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> seeds<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                 byte_mutator<span class=\"token punctuation\">:</span> Mutator<span class=\"token punctuation\">,</span> tree_mutator<span class=\"token punctuation\">:</span> FragmentMutator<span class=\"token punctuation\">,</span>\n                 schedule<span class=\"token punctuation\">:</span> PowerSchedule<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Constructor.\n        `seeds` - set of inputs to mutate.\n        `byte_mutator` - a byte-level mutator.\n        `tree_mutator` = a tree-level mutator.\n        `schedule` - a power schedule.\n        \"\"\"</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>seeds<span class=\"token punctuation\">,</span> byte_mutator<span class=\"token punctuation\">,</span> schedule<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>tree_mutator <span class=\"token operator\">=</span> tree_mutator\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_candidate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Returns an input generated by structural mutation \n           of a seed in the population\"\"\"</span>\n        seed <span class=\"token operator\">=</span> cast<span class=\"token punctuation\">(</span>SeedWithStructure<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">.</span>choose<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>population<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Structural mutation</span>\n        trials <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>trials<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            seed <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>tree_mutator<span class=\"token punctuation\">.</span>mutate<span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Byte-level mutation</span>\n        candidate <span class=\"token operator\">=</span> seed<span class=\"token punctuation\">.</span>data\n        <span class=\"token keyword\">if</span> trials <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> seed<span class=\"token punctuation\">.</span>has_structure <span class=\"token keyword\">or</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            dumb_trials <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>dumb_trials<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                candidate <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mutator<span class=\"token punctuation\">.</span>mutate<span class=\"token punctuation\">(</span>candidate<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> candidate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>想通的种子和变异次数的条件下，测试结果如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">From the <span class=\"token number\">300</span> generated inputs<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.33</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span> can be parsed<span class=\"token punctuation\">.</span>\nIn total<span class=\"token punctuation\">,</span> <span class=\"token number\">180</span> statements are covered<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>同时，在Inputs生成的速度方面极大提升，较高的代码覆盖率，但是在Inputs的合法性方面表现是最差的。那这个问题该如何解决呢？答案就是<code>Fuzzing with Input Regions</code>，这种Fuzz的变异方法不再使用派生树节点拆分重组等方式，而是通过将合法种子的不同区域直接进行拆分重组的方式，这里的区域指的是可以和派生树符号对应的连续的字节序列，这样的好处其实在于它操作的对象可能比Fragments更大或者更小，以此种方式进行变异在和上述变异条件相同的情况下测试结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">It took the structural greybox fuzzer with region mutator\n        11.35 seconds to generate and execute 300 inputs.\n\nFrom the 300 generated inputs, 4 (1.33%) can be parsed.\nIn total, 168 statements are covered.\nOn average, 9.1% of a seed in the population can be successfully parsed.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到存在较高的代码覆盖率，在速度方面虽然优于Fragments Fuzz但是还是弱于普通的黑盒Fuzz，在代码覆盖率方面高于Fragments Fuzz并和GreyboxGrammarFuzzer维持在相差无几的水平。不过核心原因还是在于，通过的合法Inputs其实占比很低。那么如何解决这个问题？首先要让Fuzzer可以聚焦合法的Inputs。这一点其实前面已经讨论过了，只需要利用<code>schedule</code>给合法Inputs的相关结构赋予更多的权重。测试结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">It took AFLSmart 20.75 seconds to generate and execute 300 inputs.\n\nFrom the 300 generated inputs, 46 (15.33%) can be parsed.\nIn total, 162 statements are covered.\nOn average, 23.7% of a seed in the population can be successfully parsed.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出在代码覆盖率保持较高水平的情况下，Inputs的合法性也得到了大幅度的提升，但是在Inputs的生成速度上来看，还是远弱于普通的GrammarFuzz。</p>\n<p>​  从上面可以看出，在选择Fuzz的时候本身就是一个取舍的问题，通过二次开发或者针对不同场景的选择才能更好的达到我们想要的结果。</p>\n<h3 id=\"Parser-input\"><a href=\"#Parser-input\" class=\"headerlink\" title=\"Parser input\"></a>Parser input</h3><p>​  假设你在做一个模糊测试，无论是Grammar Fuzz 或者其他的Fuzz也好，如果没有合适的种子那么通过不断变异形成合适的Inputs是非常困难的，当然AFL的作者展示了通过简单的输入不断向目标进化的可能性，但是这毕竟十分浪费时间和性能，效果在很多场景下估计也是不尽人意的。</p>\n<p>​  因此在进行模糊测试的时候如果可以获取一些poc，或者其它较好种子，比如在Fuzz js解释器的一个比较经常的做法就是将一些公开的poc，如下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> haystack <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> re_text <span class=\"token operator\">=</span> <span class=\"token string\">\"^foo\"</span><span class=\"token punctuation\">;</span>\nhaystack <span class=\"token operator\">+=</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span>\nre_text <span class=\"token operator\">+=</span> <span class=\"token string\">\"(x)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>re_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nre<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRegExp<span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>RegExp<span class=\"token punctuation\">.</span>$1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>作为seeds进行变异，将生成的Inputs用来Fuzz解释器。表现出来不错的结果。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Tips:如何判断对面的代码覆盖率，一般黑盒情况下可以试时间，如果一个Input在对面耗费了更多的时间来运行，那么可以猜测其走过了更多的代码分支。</p></blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​  在面对Fuzz的目标的时候最重要的是选择合适的变异方式以及较好的初始种子，根据目标和测试目的不断地进行取舍和针对性开发才能得到比较理想的结果。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://www.fuzzingbook.org/\">https://www.fuzzingbook.org</a></p>\n<p>文中数据测试来源大多为Fuzzingbook，因为根据电脑不同，其实具体数值结果会有一定偏差，但是结论都是一样的，因此就展示了书中的测试数据。</p></blockquote>\n","text":"Fuzzing之GrammarsFuzzing input​ Fuzzing的一大核心思想其实就是通过大量的Input去触发程序的各个分支逻辑，因此Fuzzing的成功与否和Input的生成关系密切。...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"Fuzz","slug":"Fuzz","count":4,"path":"api/tags/Fuzz.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Fuzzing%E4%B9%8BGrammars\"><span class=\"toc-text\">Fuzzing之Grammars</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Fuzzing-input\"><span class=\"toc-text\">Fuzzing input</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Grammars%E5%88%9D%E6%8E%A2\"><span class=\"toc-text\">Grammars初探</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sample-Grammar-Fuzz\"><span class=\"toc-text\">Sample Grammar Fuzz</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Grammar-Toolbox\"><span class=\"toc-text\">Grammar Toolbox</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E6%95%88Grammars-Fuzz\"><span class=\"toc-text\">高效Grammars Fuzz</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B4%BE%E7%94%9F%E6%A0%91%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">派生树算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ProbabilisticGrammarFuzzer\"><span class=\"toc-text\">ProbabilisticGrammarFuzzer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Generator-With-Pre-or-Post-or-order-Func\"><span class=\"toc-text\">Generator With Pre or Post or order Func</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Greybox-Fuzzing-with-Grammars\"><span class=\"toc-text\">Greybox Fuzzing with Grammars</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Parser-input\"><span class=\"toc-text\">Parser input</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"一次攻防小记","uid":"caead448310a4a1bf0047aa168443e2c","slug":"一次攻防小记","date":"2022-08-24T10:38:45.000Z","updated":"2023-04-12T02:36:51.335Z","comments":true,"path":"api/articles/一次攻防小记.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220824/scan.6q7shyuek6k0.png","text":"一次攻防小记​ 一次攻防，第一天师傅rmi直接进了总公司内网，笔者在核心资产段打了好久没能进去，水了几天边缘分公司，队长又让打核心段，看看之前的一些弱口令，后台能不能后续利用，没办法硬着头皮打。​ 这...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Webshell工具加密流量解析","uid":"06322427d537eca1634c7950b5477253","slug":"Webshell工具加密流量解析","date":"2022-07-19T11:48:45.000Z","updated":"2023-04-12T02:36:51.335Z","comments":true,"path":"api/articles/Webshell工具加密流量解析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220722/bingxie.10ryoh4zjlxs.png","text":"前言webshell管理工具作为进一步信息收集、内网渗透、获取更高权限等功能的好帮手，常出现在攻防对抗和渗透测试场景下，其自带的流量加密用来绕过其waf、ids等安全设备的连接，这里简单说下蚁剑、哥斯...","link":"","photos":[],"count_time":{"symbolsCount":"49k","symbolsTime":"45 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}