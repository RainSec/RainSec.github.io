{"title":"云原生项目Fuzz特点及思考","uid":"5c3101d9d1523d1869d7d8a2235ebd0e","slug":"Go-Fuzz解析与思考","date":"2022-03-25T10:48:45.000Z","updated":"2023-04-11T11:39:19.889Z","comments":true,"path":"api/articles/Go-Fuzz解析与思考.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzzcover.png","content":"<h1 id=\"Go-fuzz的解析与思考\"><a href=\"#Go-fuzz的解析与思考\" class=\"headerlink\" title=\"Go-fuzz的解析与思考\"></a>Go-fuzz的解析与思考</h1><h2 id=\"go-fuzz\"><a href=\"#go-fuzz\" class=\"headerlink\" title=\"go-fuzz\"></a>go-fuzz</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Go-fuzz的原理很多都是基于AFL，这里只分析了一些它独特的地方，收获很多，也希望可以和大家交流，如有分析错误还望交流指正。</p></blockquote>\n<p>​        go-fuzz是google开源的一款go语言fuzz框架，它和AFL很大的一个不同是在于，AFL通常通过对未修改的文件的输入进行操作，而go-fuzz需要你编写一个Fuzz函数，go-fuzz通过不断的调用该函数来进行fuzz，前者通常会为每一个输入创建一个新的进程，后者则是不断的调用Fuzz函数因此不需要经常启动或者重启进程。</p>\n<h2 id=\"什么是覆盖引导型Fuzz\"><a href=\"#什么是覆盖引导型Fuzz\" class=\"headerlink\" title=\"什么是覆盖引导型Fuzz\"></a>什么是覆盖引导型Fuzz</h2><p>​        覆盖引导型Fuzz通过代码覆盖率信息来决定一个突变是否有效，如果代码覆盖率增长就保存该输入并对其进行持续变异，否则就丢弃该变异：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz01.jpg\" alt=\"img\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz02.jpg\" alt=\"img\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz03.jpg\" alt=\"img\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz04.jpg\" alt=\"img\"></p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"go-fuzz-build模块\"><a href=\"#go-fuzz-build模块\" class=\"headerlink\" title=\"go-fuzz-build模块\"></a>go-fuzz-build模块</h3><p>​        该模块的主要作用在于将需要测试的包信息和测试用例信息打包方便进行测试。</p>\n<ol>\n<li>利用PProf进行性能分析</li>\n<li>加载选中的go语言包和github.com/dvyukov/go-fuzz/go-fuzz-dep这个fuzz材料包</li>\n<li>遍历加载的go语言包里面所有的函数名查找所有的名为Fuzz的函数，同时进行签名认证，但是Fuzz函数的个数应该大于0同时小于等于255</li>\n<li>获取环境变量，大多是和go有关的环境变量.</li>\n<li>加载go语言标准库</li>\n<li>忽略一些标准库中的包和github.com/dvyukov/go-fuzz/go-fuzz-dep这个包，因为没有理由进行fuzz测试，为了避免陷入循环（具体为啥我也不是很清楚）</li>\n<li>在/tmp下创建临时文件夹保存需要使用的tools和包</li>\n<li>接下来就是很高阶的语法树等的建立过程，这个过程中会使用gatherLiterals获取到你提供的初始材料<ol>\n<li>获取到需要fuzz的包的具体信息，进而可以生成go-fuzz的元数据</li>\n<li>将存储信息的cover.exe和sonar.exe已经metadata打包生成zip文件夹</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"语法树插桩实现\"><a href=\"#语法树插桩实现\" class=\"headerlink\" title=\"语法树插桩实现\"></a>语法树插桩实现</h3><p>​        go语言不同于C语言可以as等汇编工具来较为方便的实现编译时插桩（具体可以参考AFL的插桩方式），为了实现go语言的编译时插桩，我们首先要了解go语言整体的编译流程：</p>\n<ol>\n<li>词法与语法分析</li>\n<li>类型检查</li>\n<li>中间代码生成</li>\n<li>机器码生成</li>\n</ol>\n<p>那么其实大致就可以看出比较理想的地方就是词法与语法分析的时候对抽象语法书进行插桩了，同时go标准库也提供了scanner，ast和token等相关库来帮助很好的扫描，解析和创建相关抽象语法树，在整个插桩的过程中其实是把go的包一个个遍历插桩的，然后因为go-fuzz不允许导入main包，其实是因为它在插桩完成之后会自己加入相关的main函数。</p>\n<p>​        在go-fuzz-build中实现了结构体File和结构体Sonar，这两个结构体都实现了自己的Visit()函数用来遍历相关的语法树：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> File <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tfset     <span class=\"token operator\">*</span>token<span class=\"token punctuation\">.</span>FileSet\n\tpkg      <span class=\"token builtin\">string</span>\n\tfullName <span class=\"token builtin\">string</span>\n\tastFile  <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>File\n\tblocks   <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>CoverBlock\n\tinfo     <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Info\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Sonar <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tfset     <span class=\"token operator\">*</span>token<span class=\"token punctuation\">.</span>FileSet\n\tfullName <span class=\"token builtin\">string</span>\n\tpkg      <span class=\"token builtin\">string</span>\n\tblocks   <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>CoverBlock\n\tinfo     <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Info\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在整个的build的过程中也会生成coverBin和sonarBin两个文件分别对应上述两个结构体的语法树遍历函数执行结果。</p>\n<h4 id=\"File遍历\"><a href=\"#File遍历\" class=\"headerlink\" title=\"File遍历\"></a>File遍历</h4><p>​        在生成coverBin的时候使用的是File结构体对应的Visit遍历函数，不过在开始遍历之前会通过自身实现的addImport来实现go-fuzz-dep包相关内容的导入：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>file.addImport(“go-fuzz-dep”, fuzzdepPkg, “CoverTab”)</p></blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>File<span class=\"token punctuation\">)</span> <span class=\"token function\">addImport</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> anyIdent <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tnewImport <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>ImportSpec<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> ast<span class=\"token punctuation\">.</span><span class=\"token function\">NewIdent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tPath<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>BasicLit<span class=\"token punctuation\">{</span>\n\t\t\tKind<span class=\"token punctuation\">:</span>  token<span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">,</span>\n\t\t\tValue<span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%q\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\timpDecl <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>GenDecl<span class=\"token punctuation\">{</span>\n\t\tLparen<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">.</span>astFile<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tTok<span class=\"token punctuation\">:</span>    token<span class=\"token punctuation\">.</span>IMPORT<span class=\"token punctuation\">,</span>\n\t\tSpecs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Spec<span class=\"token punctuation\">{</span>\n\t\t\tnewImport<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tRparen<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">.</span>astFile<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Make the new import the first Decl in the file.</span>\n\tastFile <span class=\"token operator\">:=</span> f<span class=\"token punctuation\">.</span>astFile\n\tastFile<span class=\"token punctuation\">.</span>Decls <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>astFile<span class=\"token punctuation\">.</span>Decls<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>astFile<span class=\"token punctuation\">.</span>Decls<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> astFile<span class=\"token punctuation\">.</span>Decls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tastFile<span class=\"token punctuation\">.</span>Decls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> impDecl\n\tastFile<span class=\"token punctuation\">.</span>Imports <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>astFile<span class=\"token punctuation\">.</span>Imports<span class=\"token punctuation\">,</span> newImport<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Now refer to the package, just in case it ends up unused.</span>\n\t<span class=\"token comment\">// That is, append to the end of the file the declaration</span>\n\t<span class=\"token comment\">//\tvar _ = _cover_atomic_.AddUint32</span>\n\treference <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>GenDecl<span class=\"token punctuation\">{</span>\n\t\tTok<span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>VAR<span class=\"token punctuation\">,</span>\n\t\tSpecs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Spec<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>ValueSpec<span class=\"token punctuation\">{</span>\n\t\t\t\tNames<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>Ident<span class=\"token punctuation\">{</span>\n\t\t\t\t\tast<span class=\"token punctuation\">.</span><span class=\"token function\">NewIdent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\tValues<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>SelectorExpr<span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tX<span class=\"token punctuation\">:</span>   ast<span class=\"token punctuation\">.</span><span class=\"token function\">NewIdent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\tSel<span class=\"token punctuation\">:</span> ast<span class=\"token punctuation\">.</span><span class=\"token function\">NewIdent</span><span class=\"token punctuation\">(</span>anyIdent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\tastFile<span class=\"token punctuation\">.</span>Decls <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>astFile<span class=\"token punctuation\">.</span>Decls<span class=\"token punctuation\">,</span> reference<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>观察源码其实逻辑也很简单，首先创建了一个基本声明信息节点来将相关的包导入原本的语法树中，同时为了避免导入包但是未使用，所以导入简单的声明语句。导入完成之后使用ast.Walk()来遍历语法树，该函数会调用File结构体对应的Visit函数。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 源码太长，只贴部分</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>File<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>node ast<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> ast<span class=\"token punctuation\">.</span>Visitor <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> n <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>FuncDecl<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"init\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Don't instrument init functions.</span>\n\t\t\t<span class=\"token comment\">// They run regardless of what we do, so it is just noise.</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>GenDecl<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>Tok <span class=\"token operator\">!=</span> token<span class=\"token punctuation\">.</span>VAR <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span> <span class=\"token comment\">// constants and types are not interesting</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>BlockStmt<span class=\"token punctuation\">:</span> <span class=\"token comment\">// {}中间的语句</span>\n\t\t<span class=\"token comment\">// If it's a switch or select, the body is a list of case clauses; don't tag the block itself.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">switch</span> n<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>CaseClause<span class=\"token punctuation\">:</span> <span class=\"token comment\">// switch</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> n<span class=\"token punctuation\">.</span>List <span class=\"token punctuation\">{</span>\n\t\t\t\t\tclause <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>CaseClause<span class=\"token punctuation\">)</span>\n\t\t\t\t\tclause<span class=\"token punctuation\">.</span>Body <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">addCounters</span><span class=\"token punctuation\">(</span>clause<span class=\"token punctuation\">.</span><span class=\"token function\">Pos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clause<span class=\"token punctuation\">.</span><span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clause<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> f\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>CommClause<span class=\"token punctuation\">:</span> <span class=\"token comment\">// select</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> n<span class=\"token punctuation\">.</span>List <span class=\"token punctuation\">{</span>\n\t\t\t\t\tclause <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>CommClause<span class=\"token punctuation\">)</span>\n\t\t\t\t\tclause<span class=\"token punctuation\">.</span>Body <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">addCounters</span><span class=\"token punctuation\">(</span>clause<span class=\"token punctuation\">.</span><span class=\"token function\">Pos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clause<span class=\"token punctuation\">.</span><span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clause<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> f\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>List <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">addCounters</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>Lbrace<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>Rbrace<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// +1 to step past closing brace.</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出在遍历语法树的过程中对节点的类型进行了判断，然后对{}中间的内容进行一个判断和插桩，具体的插桩函数如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>File<span class=\"token punctuation\">)</span> <span class=\"token function\">addCounters</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> blockEnd token<span class=\"token punctuation\">.</span>Pos<span class=\"token punctuation\">,</span> list <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Stmt<span class=\"token punctuation\">,</span> extendToClosingBrace <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Stmt <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Special case: make sure we add a counter to an empty block. Can't do this below</span>\n\t<span class=\"token comment\">// or we will add a counter to an empty statement list after, say, a return statement.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Stmt<span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">newCounter</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> blockEnd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// We have a block (statement list), but it may have several basic blocks due to the</span>\n\t<span class=\"token comment\">// appearance of statements that affect the flow of control.</span>\n\t<span class=\"token keyword\">var</span> newList <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Stmt\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Find first statement that affects flow of control (break, continue, if, etc.).</span>\n\t\t<span class=\"token comment\">// It will be the last statement of this basic block.</span>\n\t\t<span class=\"token keyword\">var</span> last <span class=\"token builtin\">int</span>\n\t\tend <span class=\"token operator\">:=</span> blockEnd\n\t\t<span class=\"token keyword\">for</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> last <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> last<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tend <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">statementBoundary</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">endsBasicSourceBlock</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\textendToClosingBrace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// Block is broken up now.</span>\n\t\t\t\tlast<span class=\"token operator\">++</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> extendToClosingBrace <span class=\"token punctuation\">{</span>\n\t\t\tend <span class=\"token operator\">=</span> blockEnd\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> pos <span class=\"token operator\">!=</span> end <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Can have no source to cover if e.g. blocks abut.</span>\n\t\t\tnewList <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">newCounter</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在List里面增加counter计数器</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tnewList <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>newList<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>last<span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t\tlist <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpos <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Pos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> newList\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>假设现在有一个switch的demo</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">switch</span> n <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is 0\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is 1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这一步的具体操作就是把每一个case拿出来，然后将case相关的语法树的起始位置和结束位置还有body部分全部传入addCounters，addCounters的逻辑起始也非常简单，如果body为空就直接返回一个Counter的ast.Stmt声明语法树结构，</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> Counter是作者自定义的一种插桩计数器，这种计数器主要包括两个部分:</p>\n<ol>\n<li>对于每个包的File的结构体都维护了一个*[]CoverBlock，每次增加Counter都会在这个数组里面增加一个CoverBlock里面记录了插桩语法树的位置以及内部是否还包含多少其他声明。</li>\n<li>一个是ast.IncDecStmt节点，这个是newCounter()函数的返回值</li>\n</ol></blockquote>\n<p>如果body不为空就找到所有影响控制流的声明，比如if，switch, break ,goto等都会开启或者中断一个新的控制流，找到边界声明之后判断其是否属于刚才的类型：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>File<span class=\"token punctuation\">)</span> <span class=\"token function\">endsBasicSourceBlock</span><span class=\"token punctuation\">(</span>s ast<span class=\"token punctuation\">.</span>Stmt<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> s <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>BlockStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// Treat blocks like basic blocks to avoid overlapping counters.</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>BranchStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>ForStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>IfStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>LabeledStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">endsBasicSourceBlock</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>Stmt<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>RangeStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>SwitchStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>SelectStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>TypeSwitchStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>ExprStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\">// Calls to panic change the flow.</span>\n\t\t<span class=\"token comment\">// We really should verify that \"panic\" is the predefined function,</span>\n\t\t<span class=\"token comment\">// but without type checking we can't and the likelihood of it being</span>\n\t\t<span class=\"token comment\">// an actual problem is vanishingly small.</span>\n\t\t<span class=\"token keyword\">if</span> call<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>CallExpr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> ident<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> call<span class=\"token punctuation\">.</span>Fun<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>Ident<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token operator\">&amp;&amp;</span> ident<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"panic\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tfound<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">hasFuncLiteral</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> found\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其实就是大量的switch语句，如果是的话，就可以将直接边界作为end进行插桩，这一步的意义其实就是在于把{}里面的body不断的分割成一个个可以影响控制流的小块进行分别插桩。其实到这里我们就可以洞悉go-fuzz整个的插桩思想：在语法分析的时候就通过go-fuzz本身所包含的一个包的内容插桩到各个可以影响控制流的语句块中，那么接下来对应的工作就应该是如何对这些进行插桩语句块进行感知，这其实就是Sonar结构体的作用，这是go-fuzz发明的声呐系统。</p>\n<h4 id=\"Sonar遍历\"><a href=\"#Sonar遍历\" class=\"headerlink\" title=\"Sonar遍历\"></a>Sonar遍历</h4><p>​        Sonar结构体同样实现了Visit方法来用于遍历语法树，部分源码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Sonar<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>n ast<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> ast<span class=\"token punctuation\">.</span>Visitor <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">switch</span> nn <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>BinaryExpr<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">break</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>SwitchStmt<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> nn<span class=\"token punctuation\">.</span>Tag <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">||</span> nn<span class=\"token punctuation\">.</span>Body <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> s <span class=\"token comment\">// recurse</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// Replace:</span>\n\t\t<span class=\"token comment\">//\tswitch a := foo(); bar(a) {</span>\n\t\t<span class=\"token comment\">//\tcase x: ...</span>\n\t\t<span class=\"token comment\">//\tcase y: ...</span>\n\t\t<span class=\"token comment\">//\t}</span>\n\t\t<span class=\"token comment\">// with:</span>\n\t\t<span class=\"token comment\">//\tswitch {</span>\n\t\t<span class=\"token comment\">//\tdefault:</span>\n\t\t<span class=\"token comment\">//\t\ta := foo()</span>\n\t\t<span class=\"token comment\">//\t\t__tmp := bar(a)</span>\n\t\t<span class=\"token comment\">//\t\tswitch {</span>\n\t\t<span class=\"token comment\">//\t\tcase __tmp == x: ...</span>\n\t\t<span class=\"token comment\">//\t\tcase __tmp == y: ...</span>\n\t\t<span class=\"token comment\">//\t\t}</span>\n\t\t<span class=\"token comment\">//\t}</span>\n\t\t<span class=\"token comment\">// The == comparisons will be instrumented later when we recurse.</span>\n\t\tsw <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>SwitchStmt<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>sw <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>nn\n\t\t<span class=\"token keyword\">var</span> stmts <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Stmt\n\t\t<span class=\"token keyword\">if</span> sw<span class=\"token punctuation\">.</span>Init <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tstmts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stmts<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">.</span>Init<span class=\"token punctuation\">)</span>\n\t\t\tsw<span class=\"token punctuation\">.</span>Init <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> tmpvar <span class=\"token operator\">=</span> <span class=\"token string\">\"__go_fuzz_tmp\"</span>\n\t\ttmp <span class=\"token operator\">:=</span> ast<span class=\"token punctuation\">.</span><span class=\"token function\">NewIdent</span><span class=\"token punctuation\">(</span>tmpvar<span class=\"token punctuation\">)</span>\n\t\ttyp <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">[</span>sw<span class=\"token punctuation\">.</span>Tag<span class=\"token punctuation\">]</span>\n\t\ts<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> typ\n\t\tstmts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stmts<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>AssignStmt<span class=\"token punctuation\">{</span>Lhs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">{</span>tmp<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Tok<span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>DEFINE<span class=\"token punctuation\">,</span> Rhs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">{</span>sw<span class=\"token punctuation\">.</span>Tag<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\tstmts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stmts<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>AssignStmt<span class=\"token punctuation\">{</span>Lhs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">{</span>ast<span class=\"token punctuation\">.</span><span class=\"token function\">NewIdent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Tok<span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>ASSIGN<span class=\"token punctuation\">,</span> Rhs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Expr<span class=\"token punctuation\">{</span>tmp<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\tsw<span class=\"token punctuation\">.</span>Tag <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\tstmts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stmts<span class=\"token punctuation\">,</span> sw<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> cas1 <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> sw<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span>List <span class=\"token punctuation\">{</span>\n\t\t\tcas <span class=\"token operator\">:=</span> cas1<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>CaseClause<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> expr <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> cas<span class=\"token punctuation\">.</span>List <span class=\"token punctuation\">{</span>\n\t\t\t\ttmp <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>Ident<span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">:</span> tmpvar<span class=\"token punctuation\">,</span> NamePos<span class=\"token punctuation\">:</span> expr<span class=\"token punctuation\">.</span><span class=\"token function\">Pos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\t\t\t\ts<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> typ\n\t\t\t\tcas<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>BinaryExpr<span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> tmp<span class=\"token punctuation\">,</span> Op<span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">.</span>EQL<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">:</span> expr<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tnn<span class=\"token punctuation\">.</span>Tag <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\tnn<span class=\"token punctuation\">.</span>Init <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\tnn<span class=\"token punctuation\">.</span>Body <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>BlockStmt<span class=\"token punctuation\">{</span>List<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ast<span class=\"token punctuation\">.</span>Stmt<span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>ast<span class=\"token punctuation\">.</span>CaseClause<span class=\"token punctuation\">{</span>Body<span class=\"token punctuation\">:</span> stmts<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> s <span class=\"token comment\">// recurse</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第一步先根据节点类型找到Switch和For这种结构进行语法树级别的变化，整体的替换逻辑已经在注释里面体现出来了，其实就是类似把switch的条件都提出来放在body内部，然后再body里面建立一个新的switch结构，主要作用可能就是方便识别和统计，对于ast.BinaryExpr结构则是通过自定义的flag进行标注。</p>\n<p>​        整体来看其实就是对包内代码各种语法树节点进行类型检查和过滤，因为一些代码是肯定顺序执行的，然后再需要的地方都插入一些标志，同时在结构体里面记录标志的总量，方便在fuzz执行的时候确定自己的代码位置从而更方便进行统计，具体的可以细看相关代码。</p>\n<h4 id=\"插桩总结\"><a href=\"#插桩总结\" class=\"headerlink\" title=\"插桩总结\"></a>插桩总结</h4><p>​        其实无论是File还是Sonar，个人认为都算是一种插桩，方便对代码覆盖率进行统计，在结束之后都通过createFuzzMain函数进行了封装，这个地方其实也是go-fuzz不支持fuzz的代码包含main函数的具体原因：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token function\">createFuzzMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\tmainPkg <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>fuzzpkg<span class=\"token punctuation\">.</span>PkgPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"go.fuzz.main\"</span><span class=\"token punctuation\">)</span>\n\tpath <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>workdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gopath\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> mainPkg<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"main.go\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">funcMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> mainPkg\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其实就是将已经写好的main函数模板写入：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> ainSrc <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">`\npackage main\n\nimport (\n\ttarget \"{{.Pkg}}\"\n\tdep \"go-fuzz-dep\"\n)\n\nfunc main() {\n\tfns := []func([]byte)int {\n\t\t{{range .AllFuncs}}\n\t\t\ttarget.{{.}},\n\t\t{{end}}\n\t}\n\tdep.Main(fns)\n}\n`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>主要作用还是调用包内的Fuzz代码。</p>\n<h3 id=\"go-fuzz-1\"><a href=\"#go-fuzz-1\" class=\"headerlink\" title=\"go-fuzz\"></a>go-fuzz</h3><ol>\n<li>首先通过丢弃触发相同代码路径的的样本来最小化语料库。</li>\n<li>开始改变输入并将数据传递给Fuzz函数，不失败（return 1），然后扩展代码覆盖率的突变会被保留和迭代形成新的样本。</li>\n<li>当程序出现Crash的时候，会保存报告并重新启动程序。</li>\n</ol>\n<p>Fuzz这块的具体原理其实都是参考的AFL，就不多说了，详细也可以参考AFL的Fuzz方式和源码。</p>\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><p>​        首先简单介绍一下go的Fuzz函数的基本信息：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Fuzz</span><span class=\"token punctuation\">(</span>data <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>该函数以int作为返回值，因此当其返回值为0的时候说明Fuzz对于数据不敢影响，可能的原因是测试目标发生了无意义的错误，比如输入内容不合法等，返回值为1说明该数据已经被成功解析，简单来说就是Fuzz输入的data被目标所接受。</p>\n<h3 id=\"DNS解析器Fuzz\"><a href=\"#DNS解析器Fuzz\" class=\"headerlink\" title=\"DNS解析器Fuzz\"></a>DNS解析器Fuzz</h3><p>首先第一步是创建初始语料库，其实就是通过拆解pcap数据包来创造数据：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"crypto/rand\"</span>\n\t<span class=\"token string\">\"encoding/hex\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\n\t<span class=\"token string\">\"github.com/miekg/pcap\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">fatalIfErr</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thandle<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> pcap<span class=\"token punctuation\">.</span><span class=\"token function\">OpenOffline</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">fatalIfErr</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\n\tb <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">fatalIfErr</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\tprefix <span class=\"token operator\">:=</span> hex<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> pkt <span class=\"token operator\">:=</span> handle<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> pkt <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">;</span> pkt <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpkt<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p_\"</span> <span class=\"token operator\">+</span> prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">fatalIfErr</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>pkt<span class=\"token punctuation\">.</span>Payload<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">fatalIfErr</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">fatalIfErr</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\ti<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编写初步的Fuzz函数：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Fuzz</span><span class=\"token punctuation\">(</span>rawMsg <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    msg <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>dns<span class=\"token punctuation\">.</span>Msg<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> unpackErr <span class=\"token operator\">:=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">Unpack</span><span class=\"token punctuation\">(</span>rawMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> unpackErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> packErr <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">Pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> packErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to pack back a message\"</span><span class=\"token punctuation\">)</span>\n        spew<span class=\"token punctuation\">.</span><span class=\"token function\">Dump</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>packErr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>作者在发现了越界：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">unpackTxt</span><span class=\"token punctuation\">(</span>msg <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> rdend <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n\t<span class=\"token keyword\">var</span> ss <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\t<span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span>\n\t<span class=\"token keyword\">for</span> offset <span class=\"token operator\">&lt;</span> rdend <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\ts<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">unpackTxtString</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tss <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> ss<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是因为这些越界使得程序经常崩溃，并且Fuzz变的缓慢，于是作者先进行了阶段性的修复工作，主要修复是使用len(msg)而不是使用保留的偏移量：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">unpackTxt</span><span class=\"token punctuation\">(</span>msg <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> off0 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ss <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> off <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\toff <span class=\"token operator\">=</span> off0\n\t<span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span>\n\t<span class=\"token keyword\">for</span> off <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\ts<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">unpackTxtString</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tss <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>之后修改好的Fuzz，主要的修改在于增加了ParseDNSPacketSafely，并抛弃了一些无意义的错误，也可能不断测试，不断排除已知的错误:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Fuzz</span><span class=\"token punctuation\">(</span>rawMsg <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n        msg<span class=\"token punctuation\">,</span> msgOld <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>dns<span class=\"token punctuation\">.</span>Msg<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>old<span class=\"token punctuation\">.</span>Msg<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        buf<span class=\"token punctuation\">,</span> bufOld <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">,</span> resOld <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\n        unpackErr<span class=\"token punctuation\">,</span> unpackErrOld <span class=\"token builtin\">error</span>\n        packErr<span class=\"token punctuation\">,</span> packErrOld     <span class=\"token builtin\">error</span>\n    <span class=\"token punctuation\">)</span>\n\n    unpackErr <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">Unpack</span><span class=\"token punctuation\">(</span>rawMsg<span class=\"token punctuation\">)</span>\n    unpackErrOld <span class=\"token operator\">=</span> <span class=\"token function\">ParseDNSPacketSafely</span><span class=\"token punctuation\">(</span>rawMsg<span class=\"token punctuation\">,</span> msgOld<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> unpackErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> unpackErrOld <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> unpackErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> unpackErr<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"dns: out of order NSEC block\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 97b0a31 - rewrite NSEC bitmap [un]packing to account for out-of-order</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> unpackErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> unpackErr<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"dns: bad rdlength\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 3157620 - unpackStructValue: drop rdlen, reslice msg instead</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> unpackErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> unpackErr<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"dns: bad address family\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// f37c7ea - Reject a bad EDNS0_SUBNET family on unpack (not only on pack)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> unpackErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> unpackErr<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"dns: bad netmask\"</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 6d5de0a - EDNS0_SUBNET: refactor netmask handling</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> unpackErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> unpackErrOld <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new code fails to unpack valid packets\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>unpackErr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    res<span class=\"token punctuation\">,</span> packErr <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">PackBuffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> packErr <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to pack back a message\"</span><span class=\"token punctuation\">)</span>\n        spew<span class=\"token punctuation\">.</span><span class=\"token function\">Dump</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>packErr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> unpackErrOld <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\n        resOld<span class=\"token punctuation\">,</span> packErrOld <span class=\"token operator\">=</span> msgOld<span class=\"token punctuation\">.</span><span class=\"token function\">PackBuffer</span><span class=\"token punctuation\">(</span>bufOld<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> packErrOld <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> resOld<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new code changed behavior of valid packets:\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span><span class=\"token function\">Dump</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span><span class=\"token function\">Dump</span><span class=\"token punctuation\">(</span>resOld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Tips：</p>\n<p>​        其实在Fuzz过程中也会遇到一些结构化的问题，毕竟大型项目都会存在大量的复杂结构体难以变异，这时候才为大家提供一个神器go-fuzz-header：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://adalogics.com/blog/structure-aware-go-fuzzing-complex-types\">https://adalogics.com/blog/structure-aware-go-fuzzing-complex-types</a></p></blockquote>\n<h2 id=\"云原生下的Fuzz思考\"><a href=\"#云原生下的Fuzz思考\" class=\"headerlink\" title=\"云原生下的Fuzz思考\"></a>云原生下的Fuzz思考</h2><p>​        云原生的很多新技术其实都是在老技术的交叉上形成的，其实可以类似go项目结构里面的不同的包，对于很多Fuzz目标来言，像以前那样直接从最根本处下手已经不太现实可行，比如容器Fuzz其实很难通过生成大量镜像或者docker client的命令来解决，恰恰相反深入程序内部针对不同函数来编写Fuzz或许更有价值。</p>\n<p>​        但是缺点也很明显，首先必须和代码审计相结合，其次就是由于代码是否用户可达或者crash是否真的引发漏洞效果都有待评估，正如go-fuzz创始人所说：“go-fuzz其实更适合开发者来寻求自己项目中存在的bug”，但是漏洞挖掘技术也是在不断的进步之中，或许可以思考如何把找到的bug发展成漏洞，毕竟对于内存安全的高级语言来说直接谋求可利用漏洞相对困难。</p>\n<p>​        其实在内存漏洞越来越少的现在，这种bug最终演变成漏洞的例子还是有的，就比如linux pkexec提权漏洞，过去几年大家都认为这是一个bug，但是等利用方式被真正发掘，就能变化成为严重的安全问题。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/dvyukov/go-fuzz\">https://github.com/dvyukov/go-fuzz</a></p></blockquote>\n","text":"Go-fuzz的解析与思考go-fuzz Go-fuzz的原理很多都是基于AFL，这里只分析了一些它独特的地方，收获很多，也希望可以和大家交流，如有分析错误还望交流指正。 ​ go-fuzz是google开源的一款go语言fuzz框架，它和AFL很大的一个不同是在于，AFL通常通过对未修改的文件的输入进行操作，而go-fuzz需要你编写一个Fuzz函数，go-fuzz通过不断的调用该函数来进行fuzz，前者通常会为每一个输入创建一个新的进程，后者则是不断的调用Fuzz函数因此不需要经常启动或者重...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"Fuzz","slug":"Fuzz","count":4,"path":"api/tags/Fuzz.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go-fuzz%E7%9A%84%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83\"><span class=\"toc-text\">Go-fuzz的解析与思考</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#go-fuzz\"><span class=\"toc-text\">go-fuzz</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%A6%86%E7%9B%96%E5%BC%95%E5%AF%BC%E5%9E%8BFuzz\"><span class=\"toc-text\">什么是覆盖引导型Fuzz</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">源码解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#go-fuzz-build%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">go-fuzz-build模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E6%A0%91%E6%8F%92%E6%A1%A9%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">语法树插桩实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#File%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">File遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Sonar%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">Sonar遍历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%92%E6%A1%A9%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">插桩总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#go-fuzz-1\"><span class=\"toc-text\">go-fuzz</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">测试用例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DNS%E8%A7%A3%E6%9E%90%E5%99%A8Fuzz\"><span class=\"toc-text\">DNS解析器Fuzz</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%91%E5%8E%9F%E7%94%9F%E4%B8%8B%E7%9A%84Fuzz%E6%80%9D%E8%80%83\"><span class=\"toc-text\">云原生下的Fuzz思考</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol>","author":{"name":"Clock","slug":"clock","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/clocklogo.jpg","link":"https://rainsec.cn","description":"","socials":{}},"mapped":true,"prev_post":{"title":"Tomcat内存马简析","uid":"a5eb3b6436793531605058c41325d8af","slug":"Tomcat内存马解析","date":"2022-03-26T10:48:45.000Z","updated":"2023-04-11T11:40:19.169Z","comments":true,"path":"api/articles/Tomcat内存马解析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221025/images.7i3pppfv9fc.jpg","text":"Tomcat内存马简析 webshell木马配合webshell管理工具可以方便对于服务器、内网进行进一步的维权、入侵，随着对文件内容查杀、以Ai对流量特征和行为模式的查杀等等手段，普通文件形式的webshell木马可靠性越来越差。也许好不容易绕过waf传上去两分钟不到就被杀掉了，所以攻击方在近些年也慢慢的研发出“无文件”的webshell木马，即内存马。内存马的概念提出比较久的，但走进视野就近几年的事情，每隔一段时间总能看到不少师傅提出新的内存马实现方法，这里简单说下利用JavaWeb的三大组...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"KID","slug":"kid","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/KID.5419jujfw8s0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},"next_post":{"title":"EventListener XSS","uid":"68bdee9933fc5dc89a593d8b4b4eaea6","slug":"EventListener XSS","date":"2022-03-25T10:38:45.000Z","updated":"2023-04-11T11:38:59.969Z","comments":true,"path":"api/articles/EventListener XSS.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/XSS_cover.jpg","text":"EventListener XSSXSS作为混”低保“的最佳漏洞，我们在日常测试中没少碰到，但是DOM型XSS就相对来说不容易被发现了，而本文要介绍的则是更难发现并利用的监听postMessage所导致漏洞。首先从事件监听器开始说起 事件监听器事件监控器可以为指定对象设置一个回调函数，当该对象的指定事件被触发时会被执行： &lt;table id=\"outside\"&gt; &lt;tr&gt;&lt;td id=\"t1\"&gt;one&lt;/td&gt;&lt;/tr&gt; &lt;tr&...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"XSS","slug":"XSS","count":1,"path":"api/tags/XSS.json"}],"author":{"name":"Noel","slug":"noel","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220211/noel.47xsfyg7vt40.webp","link":"https://rainsec.cn","description":"","socials":{}}}}