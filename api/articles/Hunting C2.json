{"title":"手把手带你用空间测绘Hunting C2","uid":"81b11b69f267fe5182e5e57519e56f32","slug":"Hunting C2","date":"2023-04-06T10:38:45.000Z","updated":"2023-04-12T02:36:52.423Z","comments":true,"path":"api/articles/Hunting C2.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/Shodan-filters-to-Hunt-Adversaries-Infrastructure-and-C2-min1.1q0ho87ttly8.jpg","content":"<h1 id=\"手把手带你用空间测绘Hunting-C2\"><a href=\"#手把手带你用空间测绘Hunting-C2\" class=\"headerlink\" title=\"手把手带你用空间测绘Hunting C2\"></a>手把手带你用空间测绘Hunting C2</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>笔者最近工作接触到了情报方面，觉得蛮有意思的，就尝试通过空间测绘引擎来Hunting一些C2生产情报，觉得这个流程蛮有意思，开个新坑手把手带你情报入门。</p>\n<h2 id=\"什么是情报\"><a href=\"#什么是情报\" class=\"headerlink\" title=\"什么是情报\"></a>什么是情报</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>威胁情报（Threat Intelligence）是指收集、分析和利用关于各种安全威胁的数据和信息的过程，以帮助组织识别和应对安全威胁。威胁情报可以来自多个来源，包括公共情报、私人情报、开源情报以及企业内部情报</p></blockquote>\n<p>本章中我们可以通过Hunting C2来对捕获到的IP进行一个<code>C2</code>标签的加，这样该IP就可以作为一个恶意IP进入到我们的情报库中。</p>\n<p>此外对于某些集中攻击、流量特征明显或者针对具体行业的攻击者还可以具象化为一个家族或者团伙，以Cobalt Strike为例，<code>Ryuk</code>，<code>Conti</code>，<code>Egregor</code>和<code>DoppelPaymer</code>等几种勒索软件已经开始使用Cobalt Strike来加速其<strong>勒索软件</strong>部署。根据思科的报告显示，66%的勒索软件攻击涉及Cobalt Strike。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>Hunting C2最重要的工作就是调研一下C2服务器或者行为的一些特征，就像出去钓鱼，不同的鱼生活的环境、季节、水质情况等条件都要明确。</p>\n<p>还是以Cobalt Strike为例，这里给出几种常见的Hunting CS服务器时关注的点：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Cobalt Strike Beacon\nSSL证书和序列号\n默认404未找到响应\n默认端口50050和Banner Hash\n默认SSH客户端Hash\nJA3指纹、JA3S指纹和JARM TLS指纹\n网站的HTML Hash\n读懂C2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于笔者妹有Fofa账号（Big 穷逼一个），所以本文以shadon和Quake为例</p>\n<h2 id=\"开始Hunting\"><a href=\"#开始Hunting\" class=\"headerlink\" title=\"开始Hunting\"></a>开始Hunting</h2><h3 id=\"Cobalt-Strike-Beacon\"><a href=\"#Cobalt-Strike-Beacon\" class=\"headerlink\" title=\"Cobalt Strike Beacon\"></a>Cobalt Strike Beacon</h3><p>Shodan已经将”Cobal Strike Beacon”添加到了<code> Shodan Product</code>字段的值列表中，所以可以直接通过语法<code>product:\"Cobalt Strike Beacon\"</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406113440102.613znzx3c1c0.png\"></p>\n<p>笔者在写文章时能够Hunting到的CS服务器有1200+，其中中国和美国以及中国香港行政区是出现C2服务器最多的三个地方</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406113707264.1nvscjmai18g.png\"></p>\n<p><del>（小声BB：它们的默认页面返回都是404 Not Found哦）</del></p>\n<p><code>80</code>、<code>443</code> 和<code>8443</code>是出现次数TOP3的端口</p>\n<p>除此之外还可以看到在世界各地托管Cobalt Strike服务器的主要ISP是谁，腾讯和阿里巴巴真是一路领先</p>\n<p>这种非常精确的特定搜索将用于在一些技术中确定CS服务器的独特属性</p>\n<h3 id=\"SSL证书和序列号\"><a href=\"#SSL证书和序列号\" class=\"headerlink\" title=\"SSL证书和序列号\"></a>SSL证书和序列号</h3><p>Cobalt Strike本身是附带用于HTTPS通信的默认SSL证书的，所以可以通过Hunting SSL证书的值来搜索CS服务器。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">默认证书: \nmd5:950098276A495286EB2A2556FBAB6D83\nsha1:6ECE5ECE4192683D2D84E25B0BA7E04F9CB7EB7C\nsha256:87F2085C32B6A2CC709B365F55873E207A9CAA10BFFECF2FD16D3CF9D94D390C\n\n默认序列号:ssl.cert.serial:146473198<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以可以使用<code>ssl:\"6ECE5ECE4192683D2D84E25B0BA7E04F9CB7EB7C\"</code>或者<code>ssl.cert.serial:\"146473198\"</code>进行查询</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406114616366.4zbpku2emr40.png\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406114848496.1b424hq6ks1s.png\"></p>\n<p>发现了吗，通过SHA1和通过Cert号搜索的结果是相同的，这是因为这两个字段链接在一起。</p>\n<p>我们还可以加上之前的<code>product</code>字段查看CS出现的cert指纹趋势</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406115331386.1p8bvycpo8bk.png\"></p>\n<p>大多数都是使用的默认证书，SSL 指纹是唯一的并且与Cobalt Strike特别相关，但是默认证书可以替换为有效的 SSL 证书，或者可以使用 Malleable C2 配置文件更改其参数（上面有一些不一样的cert就可以看出这一点）,除此之外还有不同的序列号：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406115741012.7ey3pyccjq80.png\"></p>\n<h3 id=\"默认404未找到响应\"><a href=\"#默认404未找到响应\" class=\"headerlink\" title=\"默认404未找到响应\"></a>默认404未找到响应</h3><p>上面的方法我们Hunting到的CS服务器可以看到默认全都是404，所以我们也可以从这个点去入手，但是对于结果需要谨慎的进行后续判断。</p>\n<p>Cobalt Strike服务器默认的404 Not Found HTTP响应标头的<code>Content-Length</code>为 0，<code>Content-Type</code>为 <code>text/plain</code>，如下所示</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">HTTP/1.1 404 Not Found\nContent-Type: text/plain\nContent-Length: 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>所以可以结合这三处特征使用<code>\"HTTP/1.1 404 Not Found Date:\" \"Content-Type: text/plain\" \"Content-Length</code>进行搜索</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406135438418.5hbwd6kmeeo0.png\"></p>\n<p>有亿点小多。。。</p>\n<p>攻击者可以通过不同的方式逃避这种检测方法，例如通过使用可拓展的C2配置文件更改默认响应，或者调整服务器参数和标头数据以使其与合法服务器保持一致。所以这种方式需要进行手续的威胁分析，这个本篇暂时不考虑。</p>\n<h3 id=\"默认端口50050和Banner-Hash\"><a href=\"#默认端口50050和Banner-Hash\" class=\"headerlink\" title=\"默认端口50050和Banner Hash\"></a>默认端口50050和Banner Hash</h3><p>CS服务器可以默认接收TCP 50050上的客户端连接</p>\n<p>我们通过<code>port:50050</code>进行搜索：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406144140325.79d1fnuhbo00.png\"></p>\n<p>75w条的数据基数过于庞大，这时候的数据我们是不可以拿来投入生产的，需要进行更多的过滤，其中的一个方法就是对<code>banner</code>的hash做限制，CS默认的hash（2007783223）可以在这里作为过滤条件</p>\n<p>所以我们的条件变更为<code>port:50050 hash:-2007783223</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406144955761.iipscpxe260.png\"></p>\n<p>加上hash的限制之后直接锐减到19条，我焯</p>\n<p>19条的数据人工去判断的成本也是完全可以接受的，quake目前好像不支持hash的搜索，这里就不展示了</p>\n<h3 id=\"默认SSH客户端Hash\"><a href=\"#默认SSH客户端Hash\" class=\"headerlink\" title=\"默认SSH客户端Hash\"></a>默认SSH客户端Hash</h3><p>依托于项目[hassh](<a href=\"https://github.com/salesforce/hassh\">salesforce/hassh: HASSH is a network fingerprinting standard which can be used to identify specific Client and Server SSH implementations. The fingerprints can be easily stored, searched and shared in the form of a small MD5 fingerprint. (github.com)</a>),我们可以计算SSH客户端的信息，然后通过搜索这些hash相关的IP来捕获一些恶意IP，这里使用<code>greynoise</code>进行搜索，这个东西感觉和微步在线X情报社区搜IP的时候的那个IP画像功能差不多，有对IP打的tag。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hassh(CobaltStrike_SSH-client) = a7a87fbe86774c2e40cc4a7ea2ab1b3c\nrelated to: SSH-2.0-libssh2_1.8.0 || SSH-2.0-libssh2_1.7.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>[搜索](<a href=\"https://viz.greynoise.io/query?gnql=raw_data.hassh.fingerprint:a7a87fbe86774c2e40cc4a7ea2ab1b3c\">Query Results | GreyNoise Visualizer</a>)</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406145749547.401fcm8y4f40.png\"></p>\n<p>可以看到结果中已经有被标记为恶意的CS SSH CLIENT的数据了，但是和之前不同，TOP榜里的地区居然不是中国第一名了。。。。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406145900919.1glocgfyj6w0.png\"></p>\n<h3 id=\"JA3的指纹们\"><a href=\"#JA3的指纹们\" class=\"headerlink\" title=\"JA3的指纹们\"></a>JA3的指纹们</h3><h4 id=\"JA3\"><a href=\"#JA3\" class=\"headerlink\" title=\"JA3\"></a>JA3</h4><p>JA3是一个开源项目，可以为客户端和服务器之间的通信创建SSL指纹。这些独特的签名可以代表客户端Hello数据包中的多个字段值。</p>\n<p>与CS相关的已知JA3签名包括以下内容。例如，CS的Beacon使用Windows套接字来启动TLS通信,但是这种方法并不特定于Cobalt Strike。</p>\n<h4 id=\"JA3S\"><a href=\"#JA3S\" class=\"headerlink\" title=\"JA3S\"></a>JA3S</h4><p>在创建了JA3之后，为TLS握手服务器端指纹创建了一种新的方法，即TLS服务器Hello消息。JA3S方法是收集以下字段在服务器Hello数据包中的字节的十进制值：版本、可接受的加密方式和扩展列表。</p>\n<p>可以从已知的C2列表中提取所有的JA3S以对它们进行聚类，并基于其他相似之处扩大搜索范围。但是这超出了本文的范围，存在太多的误报风险。</p>\n<p>这里结合<code>product</code>字段贴出出现频率比较高的指纹</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406150442410.6iy2okcv10g0.png\"></p>\n<h4 id=\"JARM\"><a href=\"#JARM\" class=\"headerlink\" title=\"JARM\"></a>JARM</h4><p>与JA3/JA3S类似，JARM能够对远程服务器的TLS数值进行指纹识别。它通过与目标服务器进行交互发送10个TLS客户端Hello数据包，并记录回复中的特定属性。然后，它将哈希结果值并创建最终的JARM指纹。</p>\n<p>但是如果使用JARM扫描Cobalt Strike服务器，获得的结果取决于服务器所使用的Java版本。CS的文档中建议使用时首选OpenJDK 11。这使得容易识别潜在的Cobalt Strike服务器，但是也容易产生误报。<del>（Java的东西在互联网上真是太多了）</del></p>\n<p>默认配置的Cobalt Strike对应的JARM指纹是<code>07d14d16d21d21d00042d41d00041de5fb3038104f457d92ba02e9311512c2</code></p>\n<p>搜索如下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406150942842.b4nzw2x47fs.png\"></p>\n<p>其他与Cobalt Strike服务器有关的JARM如下，更多JARM指纹可以参考[JARM](<a href=\"https://github.com/carbonblack/active_c2_ioc_public/blob/main/cobaltstrike/JARM/jarm_cs_202107_uniq_sorted.txt\">active_c2_ioc_public/jarm_cs_202107_uniq_sorted.txt at main · carbonblack/active_c2_ioc_public (github.com)</a>)：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406151039740.2on56795c0q0.png\"></p>\n<p>这种方法容易出现许多误报，并且只能帮助你了解一个IP是否可能与CS有关，工作中不要将其作为主要方法。</p>\n<h3 id=\"拓展网站的HTML-Hash\"><a href=\"#拓展网站的HTML-Hash\" class=\"headerlink\" title=\"拓展网站的HTML Hash\"></a>拓展网站的HTML Hash</h3><p>Shodan的爬虫可以计算网站的Hash。要找到相同的网站，可以使用http.html_hash，它是网站HTML的Hash。也可以使用这个[工具](<a href=\"https://github.com/ninoseki/apullo\">ninoseki/apullo: A scanner for taking basic fingerprints (github.com)</a>)生成哈希值。</p>\n<p>根据CS服务器的配置方式，哈希值可能基于默认设置为null。如果攻击者修改了默认配置，那么就会生成Hash。可以在html_hash上进行判断，以找出具有相同哈希值的其服务器。</p>\n<p>例如我们首先使用<code>product</code>字段查看已经明确的CS服务器的html hash：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152318659.32hc65tk27.png\"></p>\n<p>可以看到有一条hash为<code>2101032290</code>的数据，然后我们去除<code>product</code>标签直接进行搜索：</p>\n<p><code>http.html_hash:\"2101032290\"</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152456003.5jlbu44hbsw0.png\"></p>\n<p>可以看到结果有17条，后续就可以将刚才三条过滤掉对剩下的14条进行分析和确认。</p>\n<p>同样的，这个思路还可以被用在<code>HTTP Header hash</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152701128.4nwmfsuforg0.png\"></p>\n<p>例如这个<code>316618825</code>，按照上面所说的思路进行拓展之后：</p>\n<p><code>http.headers_hash:\"316618825\"</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152856180.3926dztng840.png\"></p>\n<h3 id=\"读懂C2\"><a href=\"#读懂C2\" class=\"headerlink\" title=\"读懂C2\"></a>读懂C2</h3><p>这条方法主要是针对一些开源的C2框架或者能够搞到源码的C2，例如<code>HavocFramework</code></p>\n<p>通过观察HavocFramework的代码，可以看到[代码](<a href=\"https://github.com/HavocFramework/Havoc/blob/1248ff9ecc964325447128ae3ea819f1ad10b790/Teamserver/pkg/common/certs/https.go#L95\">Havoc/https.go at 1248ff9ecc964325447128ae3ea819f1ad10b790 · HavocFramework/Havoc (github.com)</a>)中存在定义：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">orgNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>string<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ACME\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Partners\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Tech\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Cloud\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Synergy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Debug\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\norgSuffixes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>string<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"co\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"llc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"inc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"corp\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ltd\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这其中就包含了生成的证书：ACME、Partners、Tech、Cloud、Synergy、Test、Debug</p>\n<p>我们使用其中的一个特征来进行搜索</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406160626037.3ohiiq4ulqm0.png\"></p>\n<p>同时，sliver也使用了这几种随机的org，[代码](sliver/subject.go at 97d3da75b6e24defb3a2a97443a15a632b3a8448 · BishopFox/sliver (github.com))</p>\n<p>通过列表中的属性能够方便我们快速确定一台C2服务器</p>\n<h2 id=\"其他的“歪门邪道”\"><a href=\"#其他的“歪门邪道”\" class=\"headerlink\" title=\"其他的“歪门邪道”\"></a>其他的“歪门邪道”</h2><p>Quake支持对相应包的搜索，所以我们可以寻找到一些在互联网上开放了目录的服务器，查看其中的内容</p>\n<p>打开目录页面标题主要由正在使用的 Web 服务器决定。如果它是一个 Apache2 服务器，标题将是“Index of /”，如果它是一个 Python HTTP 服务器，内容将会是目录列表</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406162221830.2q4iegvp2wy0.png\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406162241139.1tauenzfghmo.png\"></p>\n<p>攻击者通常倾向于使用Python搭建临时HTTP文件服务器，但是有时他们会忘记及时关闭Python HTTP服务器，导致我们可以通过HTTP响应进行过滤。例如我们可以输入任何安全工具或恶意软件的名称来进行过滤：</p>\n<p><code>title: \"Directory listing for /\" and response:\"cobaltstrike\"</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163112762.13kzjybm42n4.png\"></p>\n<p>看到目前或曾经有68个服务器托管了Cobalt Strike供攻击者下载</p>\n<p><code>title: \"Directory listing for /\" and response:\"mimikatz\"</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163729176.5knj6jimp2s0.png\"></p>\n<p><code>title: \"Directory listing for /\" and response:\"exp\"</code></p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163822103.3bl98n5rj0k0.png\"></p>\n<p>碰巧逮到个没关的</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163851107.3a6jpttkl5s0.png\"></p>\n<p>虽然妹有C2，但也是个用于托管恶意代码的服务器，可以将样本下载进行分析</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>由于作者比较菜，所以这里给出的方式还是比较少的，后续等弟弟精进一下分享些高级的Hunting手法</p>\n<p>其中分享的手法有的只能用来进行辅助判断，在实际的生产时需要考虑误报的情况，毕竟情报误报还是比</p>\n<p>较严重的。</p>\n<p>其中还有一些手法例如通过地区、托管的服务商、Nmap扫描等大家感兴趣可以拓展一下。</p>\n<p>（希望各位大师傅不吝赐教，轻喷</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://gustavshen.medium.com/\">Gustav Shen – Medium</a></li>\n<li><a href=\"https://twitter.com/MichalKoczwara\">Michael Koczwara (@MichalKoczwara) / Twitter</a></li>\n</ul>\n","feature":true,"text":"手把手带你用空间测绘Hunting C2前言笔者最近工作接触到了情报方面，觉得蛮有意思的，就尝试通过空间测绘引擎来Hunting一些C2生产情报，觉得这个流程蛮有意思，开个新坑手把手带你情报入门。 什...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"情报","slug":"情报","count":1,"path":"api/categories/情报.json"}],"tags":[{"name":"Hunting","slug":"Hunting","count":1,"path":"api/tags/Hunting.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E6%B5%8B%E7%BB%98Hunting-C2\"><span class=\"toc-text\">手把手带你用空间测绘Hunting C2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%83%85%E6%8A%A5\"><span class=\"toc-text\">什么是情报</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">准备工作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8BHunting\"><span class=\"toc-text\">开始Hunting</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cobalt-Strike-Beacon\"><span class=\"toc-text\">Cobalt Strike Beacon</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SSL%E8%AF%81%E4%B9%A6%E5%92%8C%E5%BA%8F%E5%88%97%E5%8F%B7\"><span class=\"toc-text\">SSL证书和序列号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4404%E6%9C%AA%E6%89%BE%E5%88%B0%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">默认404未找到响应</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A350050%E5%92%8CBanner-Hash\"><span class=\"toc-text\">默认端口50050和Banner Hash</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4SSH%E5%AE%A2%E6%88%B7%E7%AB%AFHash\"><span class=\"toc-text\">默认SSH客户端Hash</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JA3%E7%9A%84%E6%8C%87%E7%BA%B9%E4%BB%AC\"><span class=\"toc-text\">JA3的指纹们</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JA3\"><span class=\"toc-text\">JA3</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JA3S\"><span class=\"toc-text\">JA3S</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JARM\"><span class=\"toc-text\">JARM</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95%E7%BD%91%E7%AB%99%E7%9A%84HTML-Hash\"><span class=\"toc-text\">拓展网站的HTML Hash</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E6%87%82C2\"><span class=\"toc-text\">读懂C2</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%9A%84%E2%80%9C%E6%AD%AA%E9%97%A8%E9%82%AA%E9%81%93%E2%80%9D\"><span class=\"toc-text\">其他的“歪门邪道”</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reference\"><span class=\"toc-text\">Reference</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"初识Java agent类型内存马","uid":"0a365c2eded74277e35f4b4f4e3376ba","slug":"Java Agent","date":"2023-03-30T10:38:45.000Z","updated":"2023-04-12T02:36:51.355Z","comments":true,"path":"api/articles/Java Agent.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image.39di12j6mwk0.png","text":"初识Java agent类型内存马前言你是否遇到过这样的场景，springboot环境下各种反序列化的点，但是可用的反序列化链不能直接加载类打入内存马，只能执行系统命令，甚至目标环境不出网，或者已经反...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"攻防研究","slug":"攻防研究","count":1,"path":"api/categories/攻防研究.json"}],"tags":[{"name":"攻防研究","slug":"攻防研究","count":1,"path":"api/tags/攻防研究.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}