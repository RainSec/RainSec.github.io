{"title":"qiling 框架IotFuzz之Boa","uid":"dda4d51b385ad6b8fb41614a58891fc8","slug":"Qiling partial fuzz I","date":"2023-01-30T04:38:45.000Z","updated":"2023-04-11T13:08:49.244Z","comments":true,"path":"api/articles/Qiling partial fuzz I.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/images.4wcohedooqg0.png","content":"<h1 id=\"qiling-框架IotFuzz之Boa\"><a href=\"#qiling-框架IotFuzz之Boa\" class=\"headerlink\" title=\"qiling 框架IotFuzz之Boa\"></a>qiling 框架IotFuzz之Boa</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在搞Iot的时候接触到Qiling框架，用了一段时间后感觉确实模拟功能挺强大的，还支持Fuzz，于是开始学习对Iot webserver这样的程序进行Fuzz。</p>\n<p>官方给出了类似的例子如Tenda AC15 的httpd的fuzz脚本，但是也就光秃秃一个脚本还是需要自己来一遍才能学到一些东西；因为面向的是Iot webserver的Fuzz因此需要对嵌入式设备中常用web开源框架有一些了解，这里是对于Boa框架的fuzz案例</p>\n<hr>\n<p><strong>环境准备</strong>：</p>\n<ul>\n<li><p>qiling-dev branch：这里并没有选择直接pip安装，方便修改源码</p>\n</li>\n<li><p>AFL++：在python中可以<code>import unicornafl</code>就行</p>\n<ul>\n<li>```bash<br>git clone <a href=\"https://github.com/AFLplusplus/AFLplusplus.git\">https://github.com/AFLplusplus/AFLplusplus.git</a><br>make -C AFLplusplus<br>cd AFLplusplus/unicorn_mode ; ./build_unicorn_support.sh<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n  - 一个坑是最好获取版本高于3.15的`cmake`要不然编译的时候有些cmake参数识别有问题，我遇到的就是:`cmake -S unicorn/ -B unicorn/build -D BUILD_SHARED_LIBS=no`问题\n\n- 需要对Qiling，AFL有些了解\n\n**Fuzz思路**：\nIot设备就连环境模拟都比较棘手就就更别说Fuzz了，但是Qiling提供的`进程快照(snapshot)`功能给了我们一个不错的思路，这也是Qiling官方Fuzz案例的一个思路：**即对某函数部分Fuzz(Partial Fuzz)**\n\n# Tenda-AC15\n\nQiling使用4个脚本来实现对该款路由器上httpd程序的Fuzz\n\n![image-20221213114209793](https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213114209793.1nvl9946t1hc.png)\n\n首先是`saver_tendaac15_httpd.py`用于保存fuzz的起始状态快照，主要代码如下：\n\n```python\ndef save_context(ql, *args, **kw):\n    ql.save(cpu_context=False, snapshot=\"snapshot.bin\")\n\ndef check_pc(ql):\n    print(\"=\" * 50)\n    print(\"Hit fuzz point, stop at PC = 0x%x\" % ql.arch.regs.arch_pc)\n    print(\"=\" * 50)\n    ql.emu_stop()\n\n\ndef my_sandbox(path, rootfs):\n    ql = Qiling(path, rootfs, verbose=QL_VERBOSE.DEBUG)\n    ql.add_fs_mapper(\"/dev/urandom\",\"/dev/urandom\")\n    ql.hook_address(save_context, 0x10930)        #&lt;=======\n    ql.hook_address(patcher, ql.loader.elf_entry)\n    ql.hook_address(check_pc, 0x7a0cc)            #&lt;=======\n    ql.run()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<p>ql.hook_address(save_context, 0x10930)：表示当程序跑到0x10930地址时调用save_context函数将保存此刻模拟状态</p>\n<p>但需要输入来触发程序按照预想的跑到0x10930位置，带上面脚本跑起来后使用<code>addressNat_overflow.sh</code>触发</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token function\">curl</span> -v -H <span class=\"token string\">\"X-Requested-With: XMLHttpRequest\"</span> -b <span class=\"token string\">\"password=1234\"</span> -e http://localhost:8080/samba.html -H <span class=\"token string\">\"Content-Type:application/x-www-form-urlencoded\"</span> --data <span class=\"token string\">\"entrys=sync\"</span> --data <span class=\"token string\">\"page=CCCCAAAA\"</span> http://localhost:8080/goform/addressNat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>那么我们就获得了模拟进程快照<code>snapshot.bin</code>之后fuzz就重复利用该文件启动就行，对应<code>fuzz_tendaac15_httpd.py</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">,</span> enable_trace<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ql <span class=\"token operator\">=</span> Qiling<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"rootfs/bin/httpd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rootfs\"</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span>QL_VERBOSE<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">,</span> console <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">if</span> enable_trace <span class=\"token keyword\">else</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># save current emulated status</span>\n    ql<span class=\"token punctuation\">.</span>restore<span class=\"token punctuation\">(</span>snapshot<span class=\"token operator\">=</span><span class=\"token string\">\"snapshot.bin\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># return should be 0x7ff3ca64</span>\n    fuzz_mem<span class=\"token operator\">=</span>ql<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b\"CCCCAAAA\"</span><span class=\"token punctuation\">)</span>\n    target_address <span class=\"token operator\">=</span> fuzz_mem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">place_input_callback</span><span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        _ql<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>target_address<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">start_afl</span><span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Callback from inside\n        \"\"\"</span>\n        ql_afl_fuzz<span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">,</span> input_file<span class=\"token operator\">=</span>input_file<span class=\"token punctuation\">,</span> place_input_callback<span class=\"token operator\">=</span>place_input_callback<span class=\"token punctuation\">,</span> exits<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>exit_point<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    ql<span class=\"token punctuation\">.</span>hook_address<span class=\"token punctuation\">(</span>callback<span class=\"token operator\">=</span>start_afl<span class=\"token punctuation\">,</span> address<span class=\"token operator\">=</span><span class=\"token number\">0x10930</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        ql<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>begin <span class=\"token operator\">=</span> <span class=\"token number\">0x10930</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0x7a0cc</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>_exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> enable_trace<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nFuzzer Went Shit\"</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>_exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>        \n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"No input file provided.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token keyword\">and</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-t\"</span><span class=\"token punctuation\">:</span>\n        main<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> enable_trace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        main<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>恢复快照：ql.restore(snapshot=”snapshot.bin”)</p>\n</li>\n<li><p>变异数据缓存定位：fuzz_mem=ql.mem.search(b”CCCCAAAA”)</p>\n</li>\n<li><p>以hook方式从起始地址附近的开始fuzz：ql.hook_address(callback=start_afl, address=0x10930+8)</p>\n</li>\n</ul>\n<p>最后开始Fuzz</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/sh</span>\n\n<span class=\"token assign-left variable\">AFL_DEBUG_CHILD_OUTPUT</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">AFL_AUTORESUME</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">AFL_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>realpath ./AFLplusplus<span class=\"token variable\">)</span></span>\"</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$AFL_PATH</span>:<span class=\"token environment constant\">$PATH</span>\"</span> ./AFLplusplus/afl-fuzz -i afl_inputs -o afl_outputs -U -- python3 ./fuzz_tendaac15_httpd.py @@<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>说实话这样连最关键的fuzz范围<code>0x10930</code>，<code>0x7a0cc</code>怎么来的都不知道当时逆向定位这两个地址也是一头雾水毫无特征，还是得自己实操</strong></p>\n<p>因此选定了Boa框架(之前了解过源码)从零开始对其进行Fuzz</p>\n<h1 id=\"Boa-Fuzz\"><a href=\"#Boa-Fuzz\" class=\"headerlink\" title=\"Boa Fuzz\"></a>Boa Fuzz</h1><p>选择一个网上有许多漏洞分析的设备：vivetok 摄像头，固件<a href=\"https://objects.githubusercontent.com/github-production-repository-file-5c1aeb/84257798/3128058?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20221208/us-east-1/s3/aws4_request&amp;X-Amz-Date=20221208T052257Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=9a257e351faa9f25e49c6ddc70e3fe94bc94eed63d940d5c70fe1f71570f4120&amp;X-Amz-SignedHeaders=host&amp;actor_id=57476305&amp;key_id=0&amp;repo_id=84257798&amp;response-content-disposition=attachment;filename=CC8160-VVTK-0100d.flash.zip&amp;response-content-type=application/x-zip-compressed\">链接</a>；而且webservre为Boa框架</p>\n<p>Poc：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> -en <span class=\"token string\">\"POST /cgi-bin/admin/upgrade.cgi HTTP/1.0<span class=\"token entity\" title=\"\\n\">\\n</span>Content-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX<span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token entity\" title=\"\\r\">\\r</span><span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token entity\" title=\"\\r\">\\r</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>  <span class=\"token operator\">|</span> ncat -v <span class=\"token number\">192.168</span>.57.20 <span class=\"token number\">80</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><em><strong>Boa框架</strong></em>：</p>\n<p>主要处理逻辑在<code>process_requests</code>函数中：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">       <span class=\"token comment\">/*获取就绪队列并处理*/</span>\ncurrent <span class=\"token operator\">=</span> request_ready<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>current_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>buffer_end <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">/* there is data in the buffer */</span>\n        current<span class=\"token operator\">-&gt;</span>status <span class=\"token operator\">!=</span> DEAD <span class=\"token operator\">&amp;&amp;</span> current<span class=\"token operator\">-&gt;</span>status <span class=\"token operator\">!=</span> DONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        retval <span class=\"token operator\">=</span> <span class=\"token function\">req_flush</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*\n         * retval can be -2=error, -1=blocked, or bytes left\n         */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retval <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* error */</span>\n            current<span class=\"token operator\">-&gt;</span>status <span class=\"token operator\">=</span> DEAD<span class=\"token punctuation\">;</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retval <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* notice the &gt;= which is different from below?\n               Here, we may just be flushing headers.\n               We don't want to return 0 because we are not DONE\n               or DEAD */</span>\n\n            retval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*主要处理请求部分在这里*/</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> READ_HEADER<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> ONE_CR<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> ONE_LF<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> TWO_CR<span class=\"token operator\">:</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token function\">read_header</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//解析request头部，该函数类似与FILE_IO</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>                            <span class=\"token comment\">//函数request内部有8192+1字节的buffer，data的头尾指针等，最终调用</span>\n        <span class=\"token keyword\">case</span> BODY_READ<span class=\"token operator\">:</span>                       <span class=\"token comment\">//bytes = read(req-&gt;fd, buffer + req-&gt;client_stream_pos, buf_bytes_left);读取</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token function\">read_body</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> BODY_WRITE<span class=\"token operator\">:</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token function\">write_body</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> WRITE<span class=\"token operator\">:</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token function\">process_get</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> PIPE_READ<span class=\"token operator\">:</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token function\">read_from_pipe</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> PIPE_WRITE<span class=\"token operator\">:</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token function\">write_from_pipe</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> DONE<span class=\"token operator\">:</span>\n            <span class=\"token comment\">/* a non-status that will terminate the request */</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token function\">req_flush</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/*\n             * retval can be -2=error, -1=blocked, or bytes left\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retval <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* error */</span>\n                current<span class=\"token operator\">-&gt;</span>status <span class=\"token operator\">=</span> DEAD<span class=\"token punctuation\">;</span>\n                retval <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retval <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                retval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> DEAD<span class=\"token operator\">:</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            current<span class=\"token operator\">-&gt;</span>buffer_end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">SQUASH_KA</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            retval <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unknown status (%d), \"</span>\n                    <span class=\"token string\">\"closing!\\n\"</span><span class=\"token punctuation\">,</span> current<span class=\"token operator\">-&gt;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            current<span class=\"token operator\">-&gt;</span>status <span class=\"token operator\">=</span> DEAD<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>主要看中间的Switch case：</p>\n<ul>\n<li>read_header：解析request头部，该函数类似FILE_IO函数<ul>\n<li>request内部有8192+1字节的buffer，data的头尾指针等，最终调用bytes = read(req-&gt;fd, buffer + req-&gt;client_stream_pos, buf_bytes_left);读取client发送的请求</li>\n<li>会提取并解析头部信息</li>\n</ul>\n</li>\n<li>对于GET传参，主要使用read_header, read_from_pipe, write_from_pipe完成cgi的调用</li>\n<li>对于POST传参，主要调用read_header, read_body, write_body完成cgi调用</li>\n</ul>\n<p>就拿read_header函数来说，厂商应该会在里面增加一些url过虑以及响应处理，在这个摄像头中漏洞也确实出在这个函数：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213133117933.3iy0y3zs8pk0.png\" alt=\"image-20221213133117933\"></p>\n<p>没有对<code>Content-Length</code>成员做限制；<strong>根据源码中提示字符串<code>Unknown status (%d), closing</code>可以轻松定位到这几个函数</strong>:</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213133545416.2lz530gitdw0.png\" alt=\"image-20221213133545416\"></p>\n<p>那么接下来就尝试利用Qiling 启动这个程序并且Partial Fuzz函数”read_header”</p>\n<h2 id=\"模拟启动\"><a href=\"#模拟启动\" class=\"headerlink\" title=\"模拟启动\"></a>模拟启动</h2><p><strong>模拟启动的宗旨(我的)是遇到啥错误修最后一个报错点</strong></p>\n<p>启动模板：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/iot/workspace/Emulator/qiling-dev'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> qiling <span class=\"token keyword\">import</span> Qiling\n<span class=\"token keyword\">from</span> qiling<span class=\"token punctuation\">.</span>const <span class=\"token keyword\">import</span> QL_INTERCEPT<span class=\"token punctuation\">,</span> QL_VERBOSE\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">boa_run</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> rootfs<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> profile<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ql <span class=\"token operator\">=</span> Qiling<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> rootfs<span class=\"token punctuation\">,</span> profile<span class=\"token operator\">=</span>profile<span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span>QL_VERBOSE<span class=\"token punctuation\">.</span>OFF<span class=\"token punctuation\">,</span> multithread<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"setup files\"\"\"</span>\n    ql<span class=\"token punctuation\">.</span>add_fs_mapper<span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/null'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/dev/null'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token triple-quoted-string string\">\"\"\"hooks\"\"\"</span>\n\n    ql<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/iot/workspace/Emulator/qiling-dev/vivetok'</span><span class=\"token punctuation\">)</span>\n    path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./rootfs/usr/sbin/httpd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/etc/conf.d/boa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-d\"</span><span class=\"token punctuation\">]</span>\n    rootfs <span class=\"token operator\">=</span> <span class=\"token string\">'./rootfs'</span>\n    profile <span class=\"token operator\">=</span> <span class=\"token string\">'./boa_arm.ql'</span>\n    boa_run<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span>path<span class=\"token punctuation\">,</span> rootfs<span class=\"token operator\">=</span>rootfs<span class=\"token punctuation\">,</span> profile<span class=\"token operator\">=</span>profile<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<p><strong>尝试启动</strong></p>\n<p>首先遇到的是：gethostbyname:: Success</p>\n<p>在IDA中定位到：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213134138571.5lp8sulizs80.png\" alt=\"image-20221213134138571\"></p>\n<p>函数原型：</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">struct hostent *gethostbyname(const char *hostname);\nstruct hostent{\n    char *h_name;  //official name\n    char **h_aliases;  //alias list\n    int  h_addrtype;  //host address type\n    int  h_length;  //address lenght\n    char **h_addr_list;  //address list\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>获取返回的结构体还挺复杂的，问题的原因是 在调用<code>gethostname</code>将获得<strong>ql_vm</strong>作为主机名所以当以此调用<code>gethostbyname</code>无法获得主机信息，所以hook这个函数，并提前开辟空间存放伪造信息：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">\"\"\"\nstruct hostent{\n    char *h_name;  //official name\n    char **h_aliases;  //alias list\n    int  h_addrtype;  //host address type\n    int  h_length;  //address lenght\n    char **h_addr_list;  //address list\n}\n\"\"\"\ndef hook_memSpace(ql: Qiling):\n    ql.mem.map(0x1000, 0x1000, info='my_hook')\n    data = struct.pack('&lt;IIIII', 0x1100, 0x1100, AF_INET, 4, 0x1100)\n    ql.mem.write(0x1000, data)\n    ql.mem.write(0x1100, b'qiling')\n\ndef lib_gethostbyname(ql: Qiling):\n    args = ql.os.resolve_fcall_params({'name':STRING})\n    print('[gethostbyname]: ' + args['name'])\n    ql.arch.regs.write('r0', 0x1000)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>还有一个严重问题就是模拟过程中程序自动采用<code>ipv6</code>协议，这就很烦因为qiling的ipv6协议支持的不是很好</p>\n<h3 id=\"ipv6-socket\"><a href=\"#ipv6-socket\" class=\"headerlink\" title=\"ipv6 socket\"></a>ipv6 socket</h3><p><em><strong>AttributeError: ‘sockaddr_in’ object has no attribute ‘sin6_addr’</strong></em></p>\n<p>问题处在对ipv6的系统调用bind：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">elif sa_family == AF_INET6 and ql.os.ipv6:\n    sockaddr_in6 = make_sockaddr_in(abits, endian)\n    sockaddr_obj = sockaddr_in6.from_buffer(data)\n\n    port = ntohs(ql, sockaddr_obj.sin_port)\n    host = inet6_ntoa(sockaddr_obj.sin6_addr.s6_addr)\n\n    if ql.os.bindtolocalhost:\n        host = '::1'\n\n    if not ql.os.root and port &lt;= 1024:\n        port = port + 8000\n\ndef make_sockaddr_in(archbits: int, endian: QL_ENDIAN):\n    Struct = struct.get_aligned_struct(archbits, endian)\n\n    class in_addr(Struct):\n        _fields_ = (\n            ('s_addr', ctypes.c_uint32),\n        )\n\n    class sockaddr_in(Struct):\n        _fields_ = (\n            ('sin_family', ctypes.c_int16),\n            ('sin_port',   ctypes.c_uint16),\n            ('sin_addr',   in_addr),\n            ('sin_zero',   ctypes.c_byte * 8)\n        )\n\n    return sockaddr_in\n\ndef make_sockaddr_in6(archbits: int, endian: QL_ENDIAN):\n    Struct = struct.get_aligned_struct(archbits, endian)\n\n    class in6_addr(Struct):\n        _fields_ = (\n            ('s6_addr', ctypes.c_uint8 * 16),\n        )\n\n    class sockaddr_in6(Struct):\n        _fields_ = (\n            ('sin6_family',   ctypes.c_int16),\n            ('sin6_port',     ctypes.c_uint16),\n            ('sin6_flowinfo', ctypes.c_uint32),\n            ('sin6_addr',     in6_addr),\n            ('sin6_scope_id', ctypes.c_uint32)\n        )\n\n    return sockaddr_in6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>make_sockaddr_in, make_sockaddr_in6基于<code>ctypes</code>构造严格的sockaddr结构体，因为是ipv6所以得用<code>make_sockaddr_in6</code></p>\n<p>还有就是函数<code>(function) inet6_ntoa: (addr: bytes) -&gt; str</code>需要bytes对象而sockaddr_obj.sin6_addr.s6_addr是cbytes类型所以得<strong>bytes转</strong></p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">sockaddr_in6 = make_sockaddr_in6(abits, endian)\nsockaddr_obj = sockaddr_in6.from_buffer(data)\nport = ntohs(ql, sockaddr_obj.sin6_port)\nhost = inet6_ntoa(bytes(sockaddr_obj.sin6_addr.s6_addr))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>OSError: [Errno 98] Address already in use</strong></em></p>\n<p>还是在调用bind时候，因为qiling会对低于1024的端口bind进行修改：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">if not ql.os.root and port &lt;= 1024:\n        port = port + 8000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>而后面还对8080端口进行一次bind，所以这里得改，然后其实就能进入核心处理逻辑了 ：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213134113202.3u77el0qrm40.png\" alt=\"image-20221213134113202\"></p>\n<p>当然还得看看链接有没有问题：尝试访问又出现问题</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">$ echo -en \"GET /index.html HTTP/1.0\\n\\rContent-Length:20\\n\\r\\n\\r\"  | nc -v ::1 9080\nConnection to ::1 9080 port [tcp/*] succeeded!\n\nFile \"/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/syscall/socket.py\", line 669, in ql_syscall_accept\n    host, port = address\nValueError: too many values to unpack (expected 2)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>ValueError: too many values to unpack (expected 2)</strong></em></p>\n<p>经调试原来在python中accept ipv6的连接后会返回一个长度为4的元组的address：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213134207632.g2an31i3w54.png\" alt=\"image-20221213134207632\"></p>\n<p>同样的问题还发生在ql_syscall_getsockname：<code>sockname = sock.getsockname()</code></p>\n<p><em><strong>TypeError: expected c_ubyte_Array_16 instance, got int</strong></em></p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">[x]     Syscall ERROR: ql_syscall_accept DEBUG: expected c_ubyte_Array_16 instance, got int\nTraceback (most recent call last):\n  File \"/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/posix.py\", line 280, in load_syscall\n    retval = syscall_hook(self.ql, *params)\n  File \"/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/syscall/socket.py\", line 674, in ql_syscall_accept\n    obj.sin6_addr.s6_addr = inet6_aton(str(host))\nTypeError: expected c_ubyte_Array_16 instance, got int<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解决：bytes转cbyts类</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">obj.sin6_addr.s6_addr = (ctypes.c_ubyte * 16).from_buffer_copy(inet6_aton(str(host)).to_bytes(16, 'big'))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>主要问题就这些(修了挺久的)，然后就可以对一些函数进行fuzz了</p>\n<h2 id=\"Fuzz-Partial\"><a href=\"#Fuzz-Partial\" class=\"headerlink\" title=\"Fuzz Partial\"></a>Fuzz Partial</h2><p>确定Fuzz范围，这个范围主要是给到ql_afl_fuzz函数，这里是打算Fuzz read_header函数(sub_17F80)，那么从数据入口下手：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213135606979.6757a5dv0ck0.png\" alt=\"image-20221213135606979\"></p>\n<p>读取POST或者GET方法的http包那么肯定要解析处理的，处理完成返回一个状态(源码中retval)来指示下一步处理，找到退出点：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213135843221.u4ef529g3hc.png\" alt=\"image-20221213135843221\"><br>因此要从<code>0x180F8</code>附近开始Fuzz，然后<code>0x18398</code>表示函数正常退出将执行下一轮fuzz</p>\n<p>脚本模板：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/iot/workspace/Emulator/qiling-dev'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> qiling<span class=\"token punctuation\">.</span>const <span class=\"token keyword\">import</span> QL_INTERCEPT<span class=\"token punctuation\">,</span> QL_VERBOSE\n<span class=\"token keyword\">from</span> qiling <span class=\"token keyword\">import</span> Qiling\n\n<span class=\"token keyword\">from</span> qiling<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span>afl <span class=\"token keyword\">import</span> ql_afl_fuzz\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> trace<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ql <span class=\"token operator\">=</span> Qiling<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'./rootfs/usr/sbin/httpd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/etc/conf.d/boa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rootfs<span class=\"token operator\">=</span><span class=\"token string\">'./rootfs'</span><span class=\"token punctuation\">,</span> profile<span class=\"token operator\">=</span><span class=\"token string\">'./boa_arm.ql'</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span>QL_VERBOSE<span class=\"token punctuation\">.</span>OFF<span class=\"token punctuation\">,</span> console <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">if</span> trace <span class=\"token keyword\">else</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    ql<span class=\"token punctuation\">.</span>restore<span class=\"token punctuation\">(</span>snapshot<span class=\"token operator\">=</span><span class=\"token string\">'./context.bin'</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">place_input_callback</span><span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># print(b\"**************** \" + input)</span>\n        _ql<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>target_addr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">start_afl</span><span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Callback from inside\n        \"\"\"</span>\n        ql_afl_fuzz<span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">,</span> input_file<span class=\"token operator\">=</span>input_file<span class=\"token punctuation\">,</span> place_input_callback<span class=\"token operator\">=</span>place_input_callback<span class=\"token punctuation\">,</span> exits<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x018398</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    ql<span class=\"token punctuation\">.</span>hook_address<span class=\"token punctuation\">(</span>callback<span class=\"token operator\">=</span>start_afl<span class=\"token punctuation\">,</span> address<span class=\"token operator\">=</span><span class=\"token number\">0x180F8</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># ql.debugger = True</span>\n        ql<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>begin<span class=\"token operator\">=</span><span class=\"token number\">0x180F8</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>_exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> trace<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nFuzzer Went Shit\"</span><span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>_exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  \n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"No input file provided.\"</span><span class=\"token punctuation\">)</span>\n    \n    os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token string\">'/home/iot/workspace/Emulator/qiling-dev/vivetok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token keyword\">and</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"-t\"</span><span class=\"token punctuation\">:</span>\n        main<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> trace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        main<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>ql.hook_address(callback=start_afl, address=0x180F8)：在执行到<code>0x180F8</code>这个位置时调用start_afl函数</li>\n<li>ql.run(begin=0x180F8)：从<code>0x180F8</code>开始执行</li>\n<li>ql_afl_fuzz：就是unicornafl提供的fuzz接口<code>uc_afl_fuzz_custom</code>的一个wrapper</li>\n<li>place_input_callback：ql_afl_fuzz会调用的回调函数，负责写入fuzz数据</li>\n</ul>\n<h2 id=\"Fuzz-buf\"><a href=\"#Fuzz-buf\" class=\"headerlink\" title=\"Fuzz buf\"></a>Fuzz buf</h2><p>根据网上的漏洞分析比对源码框架，利用:</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">cho -en \"POST /cgi-bin/admin/upgrade.cgi HTTP/1.0nContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXXnrnrn\"  | nc -v ::1 9080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可以触发漏洞，具体位于框架中http头部解析函数：read_header，位于httpd中17F80位置</p>\n<p>那么该如何fuzz呢，根据网上unicorn-afl官方用例和qiling官方用例：buf-fuzz，即定位代码中读取数据位置，然后读取完后劫持搜索特定字符串定位fuzz的buff_addr，当然需要状态保存(当然这个方法肯定不是很严谨，因此后面还会介绍劫持read函数方法)</p>\n<h3 id=\"快照\"><a href=\"#快照\" class=\"headerlink\" title=\"快照\"></a>快照</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">import os, sys, struct\nfrom socket import AF_INET\nsys.path.append('/home/iot/workspace/Emulator/qiling-dev')\nfrom qiling import Qiling\nfrom qiling.const import QL_INTERCEPT, QL_VERBOSE\nfrom qiling.os.const import STRING\nfrom unicorn.unicorn import UcError\n\"\"\"\nstruct hostent{\n    char *h_name;  //official name\n    char **h_aliases;  //alias list\n    int  h_addrtype;  //host address type\n    int  h_length;  //address lenght\n    char **h_addr_list;  //address list\n}\n\"\"\"\ndef hook_memSpace(ql: Qiling):\n    ql.mem.map(0x1000, 0x1000, info='my_hook')\n    data = struct.pack('&lt;IIIII', 0x1100, 0x1100, AF_INET, 4, 0x1100)\n    ql.mem.write(0x1000, data)\n    ql.mem.write(0x1100, b'qiling')\n\ndef lib_gethostbyname(ql: Qiling):\n    args = ql.os.resolve_fcall_params({'name':STRING})\n    print('[gethostbyname]: ' + args['name'])\n    ql.arch.regs.write('r0', 0x1000)\n    \n\ndef saver(ql: Qiling):\n    print('[!] Hit Saver 0x%X'%(ql.arch.regs.arch_pc))\n    ql.save(cpu_context=False, snapshot='./context.bin')\n    print(ql.mem.search(b'fuck'))\n\n\n#[read(5,  0x4edca,  0x2000)] locate buf\ndef read_syscall(ql: Qiling, fd: int, buf: int, size: int, *args) -&gt; None:\n    print(f'[read({fd}, {buf: #x}, {size: #x})]')\n\ndef boa_run(path: list, rootfs: str, profile: str = 'default'):\n    ql = Qiling(path, rootfs, profile=profile, verbose=QL_VERBOSE.OFF, multithread=False)\n    \"\"\"setup files\"\"\"\n    ql.add_fs_mapper('/dev/null', '/dev/null')\n\n    \"\"\"set ram\"\"\"\n    hook_memSpace(ql)\n\n    \"\"\"hooks\"\"\"\n    ql.os.set_api('gethostbyname', lib_gethostbyname, QL_INTERCEPT.CALL)\n    ql.os.set_syscall('read', read_syscall, QL_INTERCEPT.ENTER)\n\n    \"\"\"setup saver\"\"\"\n    ql.hook_address(saver, 0x0180FC)        #read finish\n\n    ql.run()\n    \n\n\nif __name__ == '__main__':\n    os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')\n    path = ['./rootfs/usr/sbin/httpd', \"-c\", \"/etc/conf.d/boa\", \"-d\"]\n    rootfs = './rootfs'\n    profile = './boa_arm.ql'\n    boa_run(path=path, rootfs=rootfs, profile=profile)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后使用poc触发就行</p>\n<h3 id=\"fuzz\"><a href=\"#fuzz\" class=\"headerlink\" title=\"fuzz\"></a>fuzz</h3><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">import os, sys, struct\nimport capstone as Cs\nsys.path.append('/home/iot/workspace/Emulator/qiling-dev')\nfrom qiling.const import QL_INTERCEPT, QL_VERBOSE\nfrom qiling import Qiling\nfrom qiling.extensions.afl import ql_afl_fuzz\n\ndef simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -&gt; None:\n    buf = ql.mem.read(address, size)\n\n    for insn in md.disasm(buf, address):\n        ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')\n\ndef main(input_file: str, trace: bool = False):\n    ql = Qiling(['./rootfs/usr/sbin/httpd', \"-c\", \"/etc/conf.d/boa\", \"-d\"], rootfs='./rootfs', profile='./boa_arm.ql', verbose=QL_VERBOSE.OFF, console = True if trace else False)\n    ql.restore(snapshot='./context.bin')\n\n    fuzz_mem = ql.mem.search(b'fuck')\n    \n    target_addr = fuzz_mem[0]\n\n    def place_input_callback(_ql: Qiling, input: bytes, _):\n        # print(b\"**************** \" + input)\n        _ql.mem.write(target_addr, input)\n        \n\n    def start_afl(_ql: Qiling):\n        \"\"\"\n        Callback from inside\n        \"\"\"\n        ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[0x018398])\n\n    ql.hook_address(callback=start_afl, address=0x0180FC+4)\n    # ql.hook_code(simple_diassembler, begin=0x0180FC, end=0x018600, user_data=ql.arch.disassembler)\n\n    try:\n        # ql.debugger = True\n        ql.run(begin=0x0180FC+4, end=0x018600)    #注意arm函数返回地址比较奇怪，不一定在函数末尾\n        os._exit(0)\n    except:\n        if trace:\n            print(\"\\nFuzzer Went Shit\")\n        os._exit(0)  \n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 1:\n        raise ValueError(\"No input file provided.\")\n    \n    os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')\n    if len(sys.argv) &gt; 2 and sys.argv[1] == \"-t\":\n        main(sys.argv[2], trace=True)\n    else:\n        main(sys.argv[1])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里很坑的一点是，在漏洞中因为<code>Content-Length</code>成员不以\\n结尾时就会让v31等于0会让strncpy报错但是不一定是pc指针错误，而是某些指令地址操作数问题</p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">v30 = strstr(haystack, \"Content-Length\");\nv31 = strchr(v30, '\\n');\nv32 = strchr(v30, ':');\nstrncpy(dest, v32 + 1, v31 - (v32 + 1));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在源码中AFL模块调用以下函数完成fuzz执行：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">def _dummy_fuzz_callback(_ql: \"Qiling\"):\n            if isinstance(_ql.arch, QlArchARM):\n                pc = _ql.arch.effective_pc\n            else:\n                pc = _ql.arch.regs.arch_pc\n            try:\n                _ql.uc.emu_start(pc, 0, 0, 0)\n            except UcError as e:\n                os.abort() \t\t\t\t#添加部分\n                return e.errno\n            <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因此添加<code>os.abort</code>通知AFL程序崩溃</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213140214049.5ht4oquer8o0.png\" alt=\"image-20221213140214049\"></p>\n<h2 id=\"Fuzz-sys-read\"><a href=\"#Fuzz-sys-read\" class=\"headerlink\" title=\"Fuzz sys_read\"></a>Fuzz sys_read</h2><p>上面直接对buf写入Fuzz数据肯定不是一个很理想的办法(比如Fuzz数据超出读取长度)，当然人家给的例子就是这么Fuzz的也不失一种方法；之后</p>\n<p>就尝试利用Qiling的系统调用劫持功能让Fuzz效果更好。</p>\n<p>从read函数调用处开始执行，在这之前劫持read函数调用让程序直接读取文件输入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">read_syscall</span><span class=\"token punctuation\">(</span>ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># print(fd, buf, size)</span>\n    data <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># print(data)</span>\n    ql<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">place_input_callback</span><span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># print(b\"**************** \" + input)</span>\n    ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">start_afl</span><span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Callback from inside\n    \"\"\"</span>\n    ql_afl_fuzz<span class=\"token punctuation\">(</span>_ql<span class=\"token punctuation\">,</span> input_file<span class=\"token operator\">=</span>input_file<span class=\"token punctuation\">,</span> place_input_callback<span class=\"token operator\">=</span>place_input_callback<span class=\"token punctuation\">,</span> exits<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x018398</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"效果-1\"><a href=\"#效果-1\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>同样写个脚本把服务并且设置debugger等待gdb连接：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213143927097.6wze3o97x280.png\" alt=\"image-20221213143927097\"></p>\n<p>然后将crash中的数据发送：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213144007558.8e078zxvleo.png\" alt=\"image-20221213144007558\"></p>\n<p>也确实触发到了漏洞：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">0x900a5d74 <span class=\"token keyword\">in</span> strncpy <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> from target:/lib/libc.so.0\ngef➤  backtrace \n<span class=\"token comment\">#0  0x900a5d74 in strncpy () from target:/lib/libc.so.0</span>\n<span class=\"token comment\">#1  0x0001853c in ?? ()</span>\nBacktrace stopped: previous frame identical to this frame <span class=\"token punctuation\">(</span>corrupt stack?<span class=\"token punctuation\">)</span>\ngef➤  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h3><p>fuzz过程中不好调试连写的harness有没有效果都不知道，可以使用capstone同步解析执行汇编情况：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">def simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -&gt; None:\n    buf = ql.mem.read(address, size)\n\n    for insn in md.disasm(buf, address):\n        ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://docs.qiling.io/en/latest/demo/\">Demo - Qiling Framework Documentation</a></li>\n<li><a href=\"https://blog.csdn.net/jazrynwong/article/details/117228447\">IOT Fuzz 两种思路</a></li>\n<li><a href=\"https://www.anquanke.com/post/id/185336#h2-2\">vivetok 摄像头远程栈溢出漏洞分析-安全客 - 安全资讯平台 (anquanke.com)</a></li>\n<li><a href=\"https://xz.aliyun.com/t/5054\">Vivotek远程栈溢出漏洞分析与复现 - 先知社区 (aliyun.com)</a></li>\n<li><a href=\"http://galaxylab.com.cn/%e5%9f%ba%e4%ba%8eunicorn%e5%92%8clibfuzzer%e7%9a%84%e6%a8%a1%e6%8b%9f%e6%89%a7%e8%a1%8cfuzzing/\">http://galaxylab.com.cn/%e5%9f%ba%e4%ba%8eunicorn%e5%92%8clibfuzzer%e7%9a%84%e6%a8%a1%e6%8b%9f%e6%89%a7%e8%a1%8cfuzzing/</a></li>\n<li><a href=\"http://galaxylab.pingan.com.cn/%E5%9F%BA%E4%BA%8E-unicorn-%E7%9A%84%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%92%8C-fuzzer-%E5%AE%9E%E7%8E%B0/\">http://galaxylab.pingan.com.cn/%E5%9F%BA%E4%BA%8E-unicorn-%E7%9A%84%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%92%8C-fuzzer-%E5%AE%9E%E7%8E%B0/</a></li>\n</ul>\n","text":"qiling 框架IotFuzz之Boa前言最近在搞Iot的时候接触到Qiling框架，用了一段时间...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Fuzz","slug":"Fuzz","count":1,"path":"api/categories/Fuzz.json"}],"tags":[{"name":"Fuzz","slug":"Fuzz","count":4,"path":"api/tags/Fuzz.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#qiling-%E6%A1%86%E6%9E%B6IotFuzz%E4%B9%8BBoa\"><span class=\"toc-text\">qiling 框架IotFuzz之Boa</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Boa-Fuzz\"><span class=\"toc-text\">Boa Fuzz</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9F%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">模拟启动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ipv6-socket\"><span class=\"toc-text\">ipv6 socket</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Fuzz-Partial\"><span class=\"toc-text\">Fuzz Partial</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Fuzz-buf\"><span class=\"toc-text\">Fuzz buf</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E7%85%A7\"><span class=\"toc-text\">快照</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fuzz\"><span class=\"toc-text\">fuzz</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">效果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Fuzz-sys-read\"><span class=\"toc-text\">Fuzz sys_read</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%88%E6%9E%9C-1\"><span class=\"toc-text\">效果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">技巧</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"实现一个简单的调试器","uid":"a9b1e85dae1254bf8475b6c81571a4ad","slug":"实现一个简单的调试器","date":"2023-02-23T09:56:45.000Z","updated":"2023-04-11T13:09:54.228Z","comments":true,"path":"api/articles/实现一个简单的调试器.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230223/image.4ftnu4l1g540.png","text":"实现一个简单的调试器​ 以经典的GDB为例其项目代码共有十几万行代码，但是很多情况下只会使用到几个常...","link":"","photos":[],"count_time":{"symbolsCount":"36k","symbolsTime":"33 mins."},"categories":[{"name":"二进制","slug":"二进制","count":1,"path":"api/categories/二进制.json"}],"tags":[{"name":"二进制","slug":"二进制","count":1,"path":"api/tags/二进制.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Burp-Montoya","uid":"6412321264c6d157e1df07971f4aa071","slug":"Burp-Montoya","date":"2022-11-01T04:38:45.000Z","updated":"2023-04-11T13:09:34.348Z","comments":true,"path":"api/articles/Burp-Montoya.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221101/burp-suite-180820162011-thumbnail.5ag1ra9f7s0.jpg","text":" Burp的新版本更新了新的API接口，刚好最近有写插件的想法，所以简单的了解了下。 简介 单从文档...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"BurpSuite","slug":"BurpSuite","count":2,"path":"api/tags/BurpSuite.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}