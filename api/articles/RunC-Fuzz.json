{"title":"runC-fuzz","uid":"280c433ecf11c03958de8f79adb38b6b","slug":"RunC-Fuzz","date":"2022-03-11T10:48:45.000Z","updated":"2023-09-29T03:48:35.105Z","comments":true,"path":"api/articles/RunC-Fuzz.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220720/runc.7k7938728c80.webp","content":"<h1 id=\"runC-fuzz\"><a href=\"#runC-fuzz\" class=\"headerlink\" title=\"runC-fuzz\"></a>runC-fuzz</h1><p>​本文主要是根据AdaLogics开源的<a href=\"https://github.com/AdaLogics/runc-fuzzers\">runc-fuzzers</a>和自己之前做的一些fuzz，研究一下可能的问题和相关的解决方案。在此之前可能会有朋友对runc比较陌生，可以参考一下之前的文章：<a href=\"https://bbs.pediy.com/thread-271130.htm\">https://bbs.pediy.com/thread-271130.htm</a></p>\n<h2 id=\"AdaLogics如何fuzz\"><a href=\"#AdaLogics如何fuzz\" class=\"headerlink\" title=\"AdaLogics如何fuzz\"></a>AdaLogics如何fuzz</h2><p>​runC是go语言编写的，那么对于fuzz引擎的选择毫无疑问应该是go-fuzz，纵观runC的项目结构，其实就是包裹了libcontainer，这也不难理解，因为在我的印象里面runC项目本身就是为了符合OCI标准拆分出来的。</p>\n<p>​如果是fuzz的话，go语言里面最经常出现的问题其实就是索引超出边界，切片边界超出范围nil指针解引用等等，因此对于go-fuzz这种深入项目内部编写Fuzz函数的引擎，其实对于项目内部目标的选取十分关键。在AdaLogics的报告中指出runC具备较少的fuzz引擎入口点，因为现代模糊测试引擎其实更加适合解析，比如文本解析，编码解码或者各种其它API，但是这其实在runC里面比较少。</p>\n<p>​首先分析AdaLogics是怎么做的，在思考了上述问题之后他们把目标放在了API和信息解析上面，相对于信息解析还好说，本身利用go-fuzz引擎生成的大量数据可以轻松实现fuzz，但是对于API来说，其输入内容还是相对结构化的，可以看看下面的例子：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 抽取的runC代码片段</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">parseCgroupFromReader</span><span class=\"token punctuation\">(</span>r io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\t\ttext  <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tparts <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitN</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid cgroup entry: %q\"</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// text is like \"0::/user.slice/user-1001.slice/session-1.scope\"</span>\n\t\t<span class=\"token keyword\">if</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">&amp;&amp;</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cgroup path not found\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的代码显然就比较适合利用go-fuzz引擎生成的测试用例直接跑fuzz，但是对于下面的例子：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">statPids</span><span class=\"token punctuation\">(</span>dirPath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> stats <span class=\"token operator\">*</span>cgroups<span class=\"token punctuation\">.</span>Stats<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tcurrent<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> fscommon<span class=\"token punctuation\">.</span><span class=\"token function\">GetCgroupParamUint</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pids.current\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">IsNotExist</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">statPidsFromCgroupProcs</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">,</span> stats<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tmax<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> fscommon<span class=\"token punctuation\">.</span><span class=\"token function\">GetCgroupParamUint</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pids.max\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// If no limit is set, read from pids.max returns \"max\", which is</span>\n\t<span class=\"token comment\">// converted to MaxUint64 by GetCgroupParamUint. Historically, we</span>\n\t<span class=\"token comment\">// represent \"no limit\" for pids as 0, thus this conversion.</span>\n\t<span class=\"token keyword\">if</span> max <span class=\"token operator\">==</span> math<span class=\"token punctuation\">.</span>MaxUint64 <span class=\"token punctuation\">{</span>\n\t\tmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstats<span class=\"token punctuation\">.</span>PidsStats<span class=\"token punctuation\">.</span>Current <span class=\"token operator\">=</span> current\n\tstats<span class=\"token punctuation\">.</span>PidsStats<span class=\"token punctuation\">.</span>Limit <span class=\"token operator\">=</span> max\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这显然就是比较结构化的输入了，其实这种问题在面对其它语言的时候也有遇到，结构化Fuzz一直是Fuzz的难点之一，但是和go-fuzz项目，因为引擎和fuzz方式的不同其实在结构化上面也有很大的差异，比如一些C/C++项目，可能会用protobuf或者中间语言IR的方式来实现数据结构化，但是go-fuzz的话在对应的Fuzz函数内部引入这些功能无疑是比较麻烦。这里AdaLogics实现了<a href=\"https://github.com/AdaLogics/go-fuzz-headers\">go-fuzz-headers</a>来帮助实现结构化。</p>\n<p>​        从<code>statPids</code>就可以看出，在结构化的目标中大多都是相关结构体：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Stats <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tCpuStats    CpuStats    <span class=\"token string\">`json:\"cpu_stats,omitempty\"`</span>\n\tCPUSetStats CPUSetStats <span class=\"token string\">`json:\"cpuset_stats,omitempty\"`</span>\n\tMemoryStats MemoryStats <span class=\"token string\">`json:\"memory_stats,omitempty\"`</span>\n\tPidsStats   PidsStats   <span class=\"token string\">`json:\"pids_stats,omitempty\"`</span>\n\tBlkioStats  BlkioStats  <span class=\"token string\">`json:\"blkio_stats,omitempty\"`</span>\n\t<span class=\"token comment\">// the map is in the format \"size of hugepage: stats of the hugepage\"</span>\n\tHugetlbStats <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>HugetlbStats <span class=\"token string\">`json:\"hugetlb_stats,omitempty\"`</span>\n\tRdmaStats    RdmaStats               <span class=\"token string\">`json:\"rdma_stats,omitempty\"`</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因此其实只需要吧go-fuzz根据种子数据生成的脏数据进行结构体类型转化就能实现这个目标，这也正是go-fuzz-headers所做的，当然实际要做的工作比这个目标要麻烦的多。</p>\n<p>​        在实现了结构化之后接下来其实就比较简单了，选取目标进行Fuzz，AdaLogics对项目结构进行分析之后决定选取下面库作为目标：</p>\n<ul>\n<li>fs2</li>\n<li>specconv</li>\n<li>devices</li>\n<li>fscommon</li>\n<li>intelrdt</li>\n<li>libcontainer</li>\n<li>user</li>\n<li>userns</li>\n<li>configs</li>\n</ul>\n<p>总共建立了12个Fuzz，在库中选取符合文本解析，编码解码或者各种其它API这些目标的函数进行了Fuzz。</p>\n<h2 id=\"我如何Fuzz\"><a href=\"#我如何Fuzz\" class=\"headerlink\" title=\"我如何Fuzz\"></a>我如何Fuzz</h2><p>​        其实在runc-fuzzers开源以前本人就开始思考如何对容器相关的目标进行fuzz，对比该开源项目其实在runc的fuzz上面我们撞了很多库和函数，因此对于这一部分就不多说了，本人做的不足的是没有实现类似go-fuzz-headers这样的辅助库来帮助生成更强大的语料库，而是通过裁剪目标函数来让目标更适合fuzz引擎，对比之下本人的语料库显然low了很多，但是这种裁剪也使得目标每一部分的代码更清晰明了，个人觉得还是有助于发现一些细节问题的，并且fuzz的速度也应该更快。</p>\n<p>​        在对于目标的选取上，本人也更加“放肆”，因为因为容器的安全模型还不完善不必过于考虑引擎入口点的问题（也可能是我拆代码的原因）对apparmor这类的库也进行了Fuzz编写，但是问题在于合理的属于也可能带来灾难性的后果，详情可以参考之前分析的<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3NzczOTA3OQ==&amp;tempkey=MTE1MV9wVHdrYTBGZW8yVjVxOEFuNXFKRC1UNHJGMDE4clNTdG15Ni1NM05Va3dhQ2tGLVYwTFM3U3o3YjBRNlBFaW1CN08tdEFWR0NuOHAya2dFeFpJcElsTWpfS01ycXdSaHFKZ3dzNWM0WXJ3OWNiRjlLQU5yOTdreWRGREtmMGxqOWlVNjFKLTVubTlDd0pGVmt3ejF1YjNkZHdQVE84cVppclgzV0tBfn4=&amp;chksm=4f1f2e957868a783215742944470f7dbb2a5355bc3bc586c4e2b6adf667ea9bcff445928f0d6&amp;scene=0&amp;xtrack=1&amp;previewkey=Vic7j%252B%252BS0aUVSaKkG5ZwE8wqSljwj2bfCUaCyDofEow%253D#wechat_redirect\">apparmor漏洞</a>，但是这些逻辑类型的漏洞很难通过fuzz来找到，希望大佬们有啥更好的办法可以提出吧。</p>\n<h2 id=\"结果如何\"><a href=\"#结果如何\" class=\"headerlink\" title=\"结果如何\"></a>结果如何</h2><p>​        其实结果对于一个安全研究者来说是绝望的，可以看下AdaLogics发布的漏洞报告：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The fuzzers found no bug during the assessment, which is a great achievement to the RunC and Umoci authors. However, we acknowledge that there is a reasonable expectation that bugs will occur once the pending pull requests are merged in. We go into details with this in the next section.</p></blockquote>\n<p>本人自己的Fuzz在跑了2天之后也是no bug found，这也说明或许对于这些go项目来说，它们一边自身不断的集成Fuzz：比如runC的fuzz pr，或者是argo的fuzz项目都开始利用oss-fuzz将fuzz演变为常态化的手段来不断测试新加入的项目代码，同时从报告里看出，fuzz也确实需要常态化：</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220720/runcfuzz.png\" alt=\"image-20220311110516312\"></p>\n<h2 id=\"未来展望\"><a href=\"#未来展望\" class=\"headerlink\" title=\"未来展望\"></a>未来展望</h2><p>​        一方面，这些其实只是对于runc项目进行了部分测试，就代码覆盖率而言其实完全不能算是达标，同时fuzz本身的运行时间过短其实不能算是一次合格的模糊测试，就长期来看Fuzz需要在CI tests中不断继承来确保软件的内生安全问题，通过持续不断的Fuzz运行也会不断的对新代码进行安全测试。</p>\n<p>​        就长远来看AdaLogics提出了一种观点，在fuzz中产生容器同时在容器内运行大量不同进程来进行整体性的安全测试，但是就目前fuzz的成熟度而言，还远不能达到这种效果。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\terr <span class=\"token operator\">:=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  logrus<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"runC-fuzz​本文主要是根据AdaLogics开源的runc-fuzzers和自己之前做的一些fuzz，研究一下可能的问题和相关的解决方案。在此之前可能会有朋友对runc比较陌生，可以参考一下之...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"Fuzz","slug":"Fuzz","count":4,"path":"api/tags/Fuzz.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#runC-fuzz\"><span class=\"toc-text\">runC-fuzz</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AdaLogics%E5%A6%82%E4%BD%95fuzz\"><span class=\"toc-text\">AdaLogics如何fuzz</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%91%E5%A6%82%E4%BD%95Fuzz\"><span class=\"toc-text\">我如何Fuzz</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E5%A6%82%E4%BD%95\"><span class=\"toc-text\">结果如何</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B\"><span class=\"toc-text\">未来展望</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"EventListener XSS","uid":"68bdee9933fc5dc89a593d8b4b4eaea6","slug":"EventListener XSS","date":"2022-03-25T10:38:45.000Z","updated":"2023-09-29T03:48:35.085Z","comments":true,"path":"api/articles/EventListener XSS.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220720/XSS_cover.jpg","text":"EventListener XSSXSS作为混”低保“的最佳漏洞，我们在日常测试中没少碰到，但是DOM型XSS就相对来说不容易被发现了，而本文要介绍的则是更难发现并利用的监听postMessage所导...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"XSS","slug":"XSS","count":1,"path":"api/tags/XSS.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"灵活的修改Burp请求","uid":"49976eacba4bfec6b25d67dd692a855b","slug":"灵活的修改Burp请求","date":"2022-03-05T10:38:45.000Z","updated":"2023-09-29T03:48:35.033Z","comments":true,"path":"api/articles/灵活的修改Burp请求.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220720/burp.png","text":"灵活的修改Burp请求 在日常渗透测试中经常会遇到请求头需要替换、请求或响应内容需要解密等一系列麻烦的事。更换请求头可以通过Burp的Match and Replace功能来实现，加解密也有一些插件可...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"BurpSuite","slug":"BurpSuite","count":2,"path":"api/tags/BurpSuite.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}