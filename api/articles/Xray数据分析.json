{"title":"对Xray 5.6W条结果的简单分析","uid":"7865cd0898eb778742478bf73fa460c6","slug":"Xray数据分析","date":"2022-10-12T11:48:45.000Z","updated":"2023-09-29T03:48:35.105Z","comments":true,"path":"api/articles/Xray数据分析.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221012/image-20221009230905837.2jiiuh6lk5s0.png","content":"<h1 id=\"对Xray-5-6W条结果的简单分析\"><a href=\"#对Xray-5-6W条结果的简单分析\" class=\"headerlink\" title=\"对Xray 5.6W条结果的简单分析\"></a>对Xray 5.6W条结果的简单分析</h1><p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221012/image-20221009230905837.2jiiuh6lk5s0.png\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>自动化扫描src已经做一段时间了，各类问题累计扫出来7.3w+，其中xray作为扫描漏洞的主力之一，上报了5.6w+问题 。目前应该是全网使用xray漏洞记录最多的一个了吧。</p>\n<p>这里便根据这5.6w+扫描结果来对xray做一个简单的分析及复盘，先说下我目前使用方式:</p>\n<p><strong>扫描目标</strong></p>\n<ul>\n<li>各大国内src相关资产</li>\n</ul>\n<p><strong>扫描方式</strong></p>\n<ul>\n<li>crawlgergo爬取网站请求并发送到xray</li>\n<li>xray扫描爬取的网站请求将结果发送给webhook</li>\n<li>webhook收集并报告漏洞</li>\n</ul>\n<p>简单来说就是: crawlgergo—-&gt;xray—-&gt;webhook</p>\n<p><strong>开局套个盾</strong></p>\n<ul>\n<li>统计结果仅包含src的资产，一般有src厂商的网站安全性要比普通厂商的安全性要高出很多，不同src对应厂商的安全性也不相同，分析结果仅供娱乐，不代表某个具体公司，亦不代表整体情况。</li>\n<li>随着扫描结果越来越多，后续根据我的扫描习惯关闭了一些误报过高和没有太大利用价值的插件，所以对于对于一些插件的统计结果是偏低的。</li>\n<li>本次取的是xray直接的报告结果，其中包含了xray的误报。</li>\n</ul>\n<h2 id=\"正片\"><a href=\"#正片\" class=\"headerlink\" title=\"正片\"></a>正片</h2><p>本次统计漏洞总数为56666，这里将漏洞分为xray内置插件扫描和加载yaml插件扫描两类，其中</p>\n<ul>\n<li>内置插件漏洞数量：54507</li>\n<li>yaml插件漏洞数量：2159</li>\n</ul>\n<h3 id=\"xray自带插件分析\"><a href=\"#xray自带插件分析\" class=\"headerlink\" title=\"xray自带插件分析\"></a>xray自带插件分析</h3><p>xray自带插件可以分为10个大类</p>\n<ul>\n<li>dirscan</li>\n<li>baseline</li>\n<li>xss</li>\n<li>redirect</li>\n<li>brute-force</li>\n<li>sqldet</li>\n<li>jsonp</li>\n<li>path-traversal</li>\n<li>cmd-injection</li>\n<li>crlf-injection</li>\n</ul>\n<p>细分总计有60个小类（ps:实际不止60，这里取的是报告结果统计出来的分类），具体如下</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221012/image-20221009230921064.2kjckdgpmdk0.png\"></p>\n<h4 id=\"对整体漏洞统计如下\"><a href=\"#对整体漏洞统计如下\" class=\"headerlink\" title=\"对整体漏洞统计如下\"></a>对整体漏洞统计如下</h4><p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221012/image-20221009230929980.13eoorebzubk.png\"></p>\n<p>dirscan和baseline远高于其他插件，下面具体说说各类漏洞的情况及使用体验</p>\n<h4 id=\"baseline\"><a href=\"#baseline\" class=\"headerlink\" title=\"baseline\"></a>baseline</h4><p>baseline下面具体说说各类漏洞的情况及使用体验</p>\n<ul>\n<li>baseline/cors/allow-https-downgrade/cors/allow-https-downgrade/cors/allow-https-downgrade</li>\n<li>baseline/cors/allow-null-with-credential</li>\n<li>baseline/cors/any-origin-with-credential</li>\n<li>baseline/cors/reflected</li>\n<li>baseline/sensitive/server-error</li>\n</ul>\n<p>其中server-error最多，达到20711条。baseline对自动化挖src来说，没有太多价值，为了减少干扰，后来直接在配置文件关掉这个大类检测，所以这块的实际统计是偏少的。</p>\n<h4 id=\"dirscan\"><a href=\"#dirscan\" class=\"headerlink\" title=\"dirscan\"></a>dirscan</h4><p>感觉xray花了大量精力来做这个插件，直接分了45个小类，漏洞种类它占了三分之一</p>\n<p>由于分的太细，有些漏洞名字完全不知道干嘛的，这里根据具体的报告做了个简单的记录</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221012/image-20221009230937872.5qfhlala10o0.png\"></p>\n<p>导致dirscan数量偏高的主要是以下4个插件，总计22971个。</p>\n<ul>\n<li>dirscan/debug/readme</li>\n<li>dirscan/sourcemap/default</li>\n<li>dirscan/sensitive/crossdomain</li>\n<li>dirscan/directory/default</li>\n</ul>\n<p>第一个第三个价值不大</p>\n<p>第二个是js.map泄漏，第四个是目录遍历，由于xray没做相关去重，一个网站有问题，那么连带着可能报上来几十甚至上百条报告。</p>\n<p>仔细梳理下来，dirscan细分了很多类，其实有些是相似的，可以合并到一起，分成两级其实更简洁明了。</p>\n<p>diarscan中实际可直接利用的并不多，可以把其中的一些高价值或命中高价值关键字的漏洞做一些醒目的提醒，减少干扰。比如目录遍历的文件可进一步读取。泄漏密码或者其他重要配置。</p>\n<p>部分插件可以做进一步扫描的，比如发现phpmyadmin和tomcat可以尝试爆破。</p>\n<p>git/svn插件误报有点多。</p>\n<h4 id=\"sqldet\"><a href=\"#sqldet\" class=\"headerlink\" title=\"sqldet\"></a>sqldet</h4><p>sql注入检测插件</p>\n<ul>\n<li>sqldet/blind-based/default</li>\n<li>sqldet/error-based/default</li>\n<li>sqldet/time-based/default</li>\n</ul>\n<p>报错注入，bool盲注，时间盲注都有检测。</p>\n<p>实际使用中扫出来过报错注入，在本地扫描的时候扫出来过被我漏掉的时间盲注。</p>\n<p>但是bool盲注，时间盲注在这套自动化测试流程中全是误报，而且误报特别多，后来直接关闭这俩检测，只保留了报错注入。</p>\n<h4 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h4><p>基于语义化检测的检测逻辑，检测过程无明显流量特征，对于有防护的场景依然有很高的准确度。</p>\n<p>最开始的时候手工验证了很多报告，很多防御不严谨的都被识别出来了，基本上绕一下就能触发xss，算得上扫xss神器。</p>\n<p>可惜是国内的xss，还是反射型xss，有的还有条件限制。即时交了给的赏金还不够写报告的手工费。后来扫出来的越来越多，也懒得挨个看了，现在默认忽略xss漏洞。</p>\n<h4 id=\"redirect\"><a href=\"#redirect\" class=\"headerlink\" title=\"redirect\"></a>redirect</h4><p>检测payload设计的挺巧妙的，payload自带绕过能力，精确度也挺高。</p>\n<p>可惜不值钱，也被我当做默认忽略的漏洞之一了。</p>\n<h4 id=\"brute-force\"><a href=\"#brute-force\" class=\"headerlink\" title=\"brute-force\"></a>brute-force</h4><ul>\n<li>brute-force/basic-auth/default</li>\n<li>brute-force/form-brute/default</li>\n</ul>\n<p>这个模块，基本都是误报= =.</p>\n<p>basic-auth报告3个全是误报，form-brute报告378条具体正确多少个忘记了，但不超过5个，这个插件怎么说呢，关掉吧，万一命中一个说不准就是个高危漏洞，不关吧，命中率实在感人，自己写一个吧，不经过大量测试写出来的命中率估计还不如这个呢。。</p>\n<h4 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h4><p>扫出来的结果并不多，且利用价值都不高。纯依靠插件来检测这类漏洞中高价值的还是有点难度的。</p>\n<h4 id=\"cmd-injection、crlf-injection、path-traversal\"><a href=\"#cmd-injection、crlf-injection、path-traversal\" class=\"headerlink\" title=\"cmd-injection、crlf-injection、path-traversal\"></a>cmd-injection、crlf-injection、path-traversal</h4><p>这三个的报告很少，而且报上来的也是全是误报。</p>\n<h3 id=\"xray加载的yaml插件分析\"><a href=\"#xray加载的yaml插件分析\" class=\"headerlink\" title=\"xray加载的yaml插件分析\"></a>xray加载的yaml插件分析</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在写这篇文章前的印象是除了两三个特别容易误报的插件外，其他插件相对较好的。然而在写这篇文章的时候重新整理了一下这些结果，发现这里面的误报真的多，很多插件直接全是误报。。。这里直接不展开分析了。</p></blockquote>\n<p>简单说一下结果：</p>\n<p>yaml插件总计352个，有报告漏洞的插件共36个。</p>\n<p>将插件根据发现漏洞数量排序，原本想挑几个效果比较好的插件分析下的，结果发现好多插件插件误报率百分百，一直找到第20个才凑齐10个，直接放弃。（ps:这里说的是误报不是漏报，造成原因是目前扫描的目标里面没有这些漏洞。）</p>\n<p>这里放个排除掉误报比较高的插件后的前十插件占比。</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221012/image-20221009230953068.1gp4el8ndfkw.png\"></p>\n<p>yaml插件估计是官方在审核插件的时候只是审核插件是否会漏报，并没有进行大范围的测试。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>最后简单总结下在这段时间使用下来后对于xray的评价</p>\n<p>先说优势</p>\n<ul>\n<li>在基础普通漏洞验证上做的相对完善。部分类型的漏洞验证方式及思路非常巧妙。</li>\n<li>支持额外加载yaml插件来补充其对1day漏洞的扫描能力</li>\n<li>有官方运营的社区，可不断补充1day插件</li>\n</ul>\n<p>然后缺点</p>\n<ul>\n<li>编译型语言的导致的硬伤，不如脚本语言灵活。只能通过解析yaml文件来进行poc编写，但yaml在应对复杂场景的检测局限性很大。</li>\n<li>针对新的影响范围较广的漏洞等的补充只能等待官方更新，比如log4j到目前都没有支持。</li>\n<li>不支持被动扫描插件编写。</li>\n<li>用于大范围扫描时很多插件误报严重。</li>\n</ul>\n<p>在最初了解到基于流量的被动扫描时就感觉这是个很好的漏洞扫描思路，能做的事情应该远高于传统扫描器。</p>\n<p>xray作为最火的被动扫描，在长时间使用下来的体验是相比传统扫描器有一定特色，除具备传统扫描器功能外，也有一定的灵活性。</p>\n<p>但由于其不开源，开放出来的版本本质还是基于传统漏洞和僵硬的1day扫描，无法完成被动扫描插件的开发，没有将被动扫描真正的灵活性完全的体现出来。想要完全发挥被动扫描的能力仍然需要配合其他的被动扫描工具。</p>\n","text":"对Xray 5.6W条结果的简单分析 前言自动化扫描src已经做一段时间了，各类问题累计扫出来7.3w+，其中xray作为扫描漏洞的主力之一，上报了5.6w+问题 。目前应该是全网使用xray漏洞记录...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%B9Xray-5-6W%E6%9D%A1%E7%BB%93%E6%9E%9C%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90\"><span class=\"toc-text\">对Xray 5.6W条结果的简单分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E7%89%87\"><span class=\"toc-text\">正片</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#xray%E8%87%AA%E5%B8%A6%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">xray自带插件分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%95%B4%E4%BD%93%E6%BC%8F%E6%B4%9E%E7%BB%9F%E8%AE%A1%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">对整体漏洞统计如下</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#baseline\"><span class=\"toc-text\">baseline</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dirscan\"><span class=\"toc-text\">dirscan</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sqldet\"><span class=\"toc-text\">sqldet</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#xss\"><span class=\"toc-text\">xss</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#redirect\"><span class=\"toc-text\">redirect</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#brute-force\"><span class=\"toc-text\">brute-force</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#jsonp\"><span class=\"toc-text\">jsonp</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cmd-injection%E3%80%81crlf-injection%E3%80%81path-traversal\"><span class=\"toc-text\">cmd-injection、crlf-injection、path-traversal</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#xray%E5%8A%A0%E8%BD%BD%E7%9A%84yaml%E6%8F%92%E4%BB%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">xray加载的yaml插件分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8E%E8%AE%B0\"><span class=\"toc-text\">后记</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Burp-Montoya","uid":"6412321264c6d157e1df07971f4aa071","slug":"Burp-Montoya","date":"2022-11-01T04:38:45.000Z","updated":"2023-09-29T03:48:35.105Z","comments":true,"path":"api/articles/Burp-Montoya.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221101/burp-suite-180820162011-thumbnail.5ag1ra9f7s0.jpg","text":" Burp的新版本更新了新的API接口，刚好最近有写插件的想法，所以简单的了解了下。 简介 单从文档界面来看，结构清晰了不少-&gt;MontoyaApi 同时官方提供了一个demo 使用 与老版本类...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"BurpSuite","slug":"BurpSuite","count":2,"path":"api/tags/BurpSuite.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"AddressSanitizer 漏洞检测技术剖析","uid":"9830e1ecf0b844b9805cff1f477e18bc","slug":"AddressSanitizer","date":"2022-10-08T07:07:45.000Z","updated":"2023-09-29T03:48:35.021Z","comments":true,"path":"api/articles/AddressSanitizer.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20221015/sanitizers.5w0qyt2gbqg0.webp","text":"AddressSanitizer 漏洞检测技术剖析 类似AFL之类的Fuzzing技术不断强大的一个核心原因就是漏洞检测能力的不断增强，作为AFL这款经典工具的核心，ASAN的漏洞检测核心能力值得关注...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":2,"path":"api/tags/漏洞挖掘.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}