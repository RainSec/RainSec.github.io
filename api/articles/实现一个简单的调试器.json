{"title":"实现一个简单的调试器","uid":"a9b1e85dae1254bf8475b6c81571a4ad","slug":"实现一个简单的调试器","date":"2023-02-23T09:56:45.000Z","updated":"2023-09-29T03:48:35.085Z","comments":true,"path":"api/articles/实现一个简单的调试器.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20230223/image.4ftnu4l1g540.png","content":"<h1 id=\"实现一个简单的调试器\"><a href=\"#实现一个简单的调试器\" class=\"headerlink\" title=\"实现一个简单的调试器\"></a>实现一个简单的调试器</h1><p>​    以经典的GDB为例其项目代码共有十几万行代码，但是很多情况下只会使用到几个常用功能：单步，断点，查看变量，线程/进程切换。而GDB基本上是依赖于<code>ptrace</code>系统调用，主要用于编写调试程序。大部分实现思路参考<a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-breakpoints/\">Writing a Linux Debugger Part 2: Breakpoints (tartanllama.xyz)</a>系列文章，强烈推荐阅读</p>\n<p>目标功能：</p>\n<ul>\n<li>单步</li>\n<li>断点</li>\n<li>查看内存/寄存器</li>\n<li>查看汇编</li>\n</ul>\n<h1 id=\"ptrace-原理\"><a href=\"#ptrace-原理\" class=\"headerlink\" title=\"ptrace 原理\"></a>ptrace 原理</h1><p>​    先来看看ptrace系统调用的函数签名：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ptrace.h&gt;</span></span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">__ptrace_request</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*DESCRIPTION\n       The  ptrace()  system  call  provides  a  means  by  which one process (the\n       \"tracer\") may observe and control the execution  of  another  process  (the\n       \"tracee\"), and examine and change the tracee's memory and registers.  It is\n       primarily used to implement breakpoint debugging and system call tracing.\n\t   即ptrace系统调用提供给tracer控制，读取，修改另一个进程(tracee)的能力，由此可以实现断点和系统调用追踪\n\t   \n       A tracee first needs to be attached to the tracer.  Attachment  and  subse‐\n       quent commands are per thread: in a multithreaded process, every thread can\n       be individually attached to a (potentially different) tracer, or  left  not\n       attached  and  thus  not debugged.  Therefore, \"tracee\" always means \"(one)\n       thread\", never \"a (possibly multithreaded) process\".  Ptrace  commands  are\n       always sent to a specific tracee using a call of the form\n       即tracer通过ptrace进行附加(attach)和发送命令都是针对某一个线程的而不是进程\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>request：调试者(<strong>tracer</strong>)要执行的操作，常见的有PTRACE_TRACEME，PTRACE_ATTACH，PTRACE_PEEKUSER，PTRACE_SINGLESTEP等</li>\n<li>pid：被调试进程(<strong>tracee</strong>)pid</li>\n<li>addr：要读写的内存地址</li>\n<li>data：如果要向目标进程写入数据那么data就是我们数据地址；如果要读取目标进程数据那么data就是保留数据的地址</li>\n</ul>\n<p>ptrace系统调用会根据不同的request完成不同功能如：</p>\n<ul>\n<li>PTRACE_TRACEME：表示此进程即将被父进程trace，此时其他参数被忽略</li>\n<li>PTRACE_PEEKTEXT, PTRACE_PEEKDATA：读取tracee在<strong>addr</strong>(虚拟内存空间)处的一个字，返回值就是读取到的字</li>\n<li>PTRACE_PEEKUSER：读取tracee的<strong>USER area</strong>，其包含了该进程的寄存器以及其他信息</li>\n<li>PTRACE_POKETEXT, PTRACE_POKEDATA：复制<strong>data</strong>所指向的一个字到tracee的<strong>addr</strong>(虚拟内存空间)处</li>\n<li>PTRACE_POKEUSER：复制data所指的一个字带tracee的<strong>USER area</strong></li>\n<li>PTRACE_GETREGS, PTRACE_GETFPREGS：复制<strong>tracee</strong>的<code>通用寄存器</code>或者<code>浮点寄存器</code>到<strong>tracer</strong>的<strong>data</strong>所指的位置，addr被忽略</li>\n<li>PTRACE_SETREGS, PTRACE_SETFPREGS：修改tracee的通用寄存器或者浮点寄存器</li>\n<li>PTRACE_CONT：运行被暂停的tracee进程。如果data参数非0那么就表示data是传给tracee的<strong>信号数值</strong></li>\n<li>PTRACE_SYSCALL, PTRACE_SINGLESTEP：运行被暂停的tracee进程就像PTRACE_CONT功能，不同的是PTRACE_SYSCALL表示运行到下一个系统调用(进入或返回)，PTRACE_SINGLESTEP表示仅运行一条指令便停止</li>\n</ul>\n<p>以下是Linux-2.4.16内核的ptrace系统调用内部实现源码：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">asmlinkage <span class=\"token keyword\">int</span> <span class=\"token function\">sys_ptrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> pid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> data<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">//asmlinkage是指明该函数用堆栈来传递参数</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span>child<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">user</span> <span class=\"token operator\">*</span> dummy <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EPERM<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token operator\">==</span> PTRACE_TRACEME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t\t<span class=\"token comment\">/*检查traced状态是否重复*/</span>\n\t\t<span class=\"token comment\">/* are we already being traced? */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;</span> PT_PTRACED<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/* set the ptrace bit in the process flags. */</span>\n\t\tcurrent<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">|=</span> PT_PTRACED<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//current指向当前进程(task_struct)，因此PTRACE_TRACEME将当前进程设置为PT_PTRACED状态(traced)即被trace者(tracee)</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>ESRCH<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">read_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tasklist_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//调度链表上读锁</span>\n\tchild <span class=\"token operator\">=</span> <span class=\"token function\">find_task_by_pid</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//获取目标pid进程结构体(task_struct)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">get_task_struct</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">read_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tasklist_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>child<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n\n\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EPERM<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">/* you may not mess with init */</span>\n\t\t<span class=\"token keyword\">goto</span> out_tsk<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/*就像gdb有直接启动并调试一个程序和附加一个进程并调试两个功能，也是基于ptrace的PTRACE_ATTACH让目标进程处于traced状态*/</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token operator\">==</span> PTRACE_ATTACH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">ptrace_attach</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">goto</span> out_tsk<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\">/*这就是ptrace的主体，通过switch case和request完成，这里先了解部分*/</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* when I and D space are separate, these will need to be fixed. */</span>\n    <span class=\"token comment\">/*PTRACE_PEEKTEXT，PTRACE_PEEKDATA功能相同都是从虚拟地址addr中读取数据到data指针中*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_PEEKTEXT<span class=\"token operator\">:</span> <span class=\"token comment\">/* read word at location addr. */</span> \n\t<span class=\"token keyword\">case</span> PTRACE_PEEKDATA<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> tmp<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> copied<span class=\"token punctuation\">;</span>\n\n\t\tcopied <span class=\"token operator\">=</span> <span class=\"token function\">access_process_vm</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>copied <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* read the word at location addr in the USER area. */</span>\n    <span class=\"token comment\">/*可以检查用户态内存区域(USER area),从USER区域中读取一个字节，偏移量为addr*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_PEEKUSR<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> tmp<span class=\"token punctuation\">;</span>\n\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> addr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> \n\t\t    addr <span class=\"token operator\">&gt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\ttmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Default return condition */</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&lt;</span> FRAME_SIZE<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\ttmp <span class=\"token operator\">=</span> <span class=\"token function\">getreg</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   addr <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\taddr <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\taddr <span class=\"token operator\">=</span> addr <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\ttmp <span class=\"token operator\">=</span> child<span class=\"token operator\">-&gt;</span>thread<span class=\"token punctuation\">.</span>debugreg<span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* when I and D space are separate, this will have to be fixed. */</span>\n    <span class=\"token comment\">/*PTRACE_POKETEXT和PTRACE_POKEDATA功能相同都是向虚拟地址addr写入来自data的数据*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_POKETEXT<span class=\"token operator\">:</span> <span class=\"token comment\">/* write the word at location addr. */</span>\n\t<span class=\"token keyword\">case</span> PTRACE_POKEDATA<span class=\"token operator\">:</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">access_process_vm</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">case</span> PTRACE_POKEUSR<span class=\"token operator\">:</span> <span class=\"token comment\">/* write the word at location addr in the USER area */</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> addr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> \n\t\t    addr <span class=\"token operator\">&gt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&lt;</span> FRAME_SIZE<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">putreg</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">/* We need to be very careful here.  We implicitly\n\t\t   want to modify a portion of the task_struct, and we\n\t\t   have to be selective about what portions we allow someone\n\t\t   to modify. */</span>\n\n\t\t  ret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&gt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t     addr <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t     <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> TASK_SIZE<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t  \n\t\t\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t  data <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>DR_CONTROL_RESERVED<span class=\"token punctuation\">;</span>\n\t\t\t\t  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x5f54</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t  <span class=\"token keyword\">goto</span> out_tsk<span class=\"token punctuation\">;</span>\n\t\t\t  <span class=\"token punctuation\">}</span>\n\n\t\t\t  addr <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token operator\">-&gt;</span>u_debugreg<span class=\"token punctuation\">;</span>\n\t\t\t  addr <span class=\"token operator\">=</span> addr <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t  child<span class=\"token operator\">-&gt;</span>thread<span class=\"token punctuation\">.</span>debugreg<span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t\t\t  ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token punctuation\">}</span>\n\t\t  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/*都是让tracee继续运行，只是啥时候停止不同*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_SYSCALL<span class=\"token operator\">:</span> <span class=\"token comment\">/* continue and stop at next (return from) syscall */</span>\n\t<span class=\"token keyword\">case</span> PTRACE_CONT<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* restart after signal. */</span>\n\t\t<span class=\"token keyword\">long</span> tmp<span class=\"token punctuation\">;</span>\n\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> data <span class=\"token operator\">&gt;</span> _NSIG<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//data为tracer传给tracee的信号数值，这里检查范围</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token operator\">==</span> PTRACE_SYSCALL<span class=\"token punctuation\">)</span>\n\t\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">|=</span> PT_TRACESYS<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//设置PT_TRACESYS标志，为了在下一个系统调用处停止</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PT_TRACESYS<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//清除PT_TRACESYS标志，不停止</span>\n\t\tchild<span class=\"token operator\">-&gt;</span>exit_code <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* make sure the single step bit is not set. 清除EFLAGS的单步标志(Trap Flag)*/</span>\n\t\ttmp <span class=\"token operator\">=</span> <span class=\"token function\">get_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>TRAP_FLAG<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">put_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">wake_up_process</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//唤醒进程</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n * make the child exit.  Best I can do is send it a sigkill. \n * perhaps it should be put in the status that it wants to \n * exit.\n */</span>\n\t<span class=\"token keyword\">case</span> PTRACE_KILL<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">long</span> tmp<span class=\"token punctuation\">;</span>\n\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">-&gt;</span>state <span class=\"token operator\">==</span> TASK_ZOMBIE<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">/* already dead */</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\tchild<span class=\"token operator\">-&gt;</span>exit_code <span class=\"token operator\">=</span> SIGKILL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/* make sure the single step bit is not set. */</span>\n\t\ttmp <span class=\"token operator\">=</span> <span class=\"token function\">get_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>TRAP_FLAG<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">put_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">wake_up_process</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/*设置单步运行很简单只需将eflags的Trap Flag置1即可*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_SINGLESTEP<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">/* set the trap flag. */</span>\n\t\t<span class=\"token keyword\">long</span> tmp<span class=\"token punctuation\">;</span>\n\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> data <span class=\"token operator\">&gt;</span> _NSIG<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PT_TRACESYS<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;</span> PT_DTRACE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">/* Spurious delayed TF traps may occur */</span>\n\t\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">|=</span> PT_DTRACE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttmp <span class=\"token operator\">=</span> <span class=\"token function\">get_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> TRAP_FLAG<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//Trap Flag置1</span>\n\t\t<span class=\"token function\">put_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tchild<span class=\"token operator\">-&gt;</span>exit_code <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/* give it a chance to run. */</span>\n\t\t<span class=\"token function\">wake_up_process</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">case</span> PTRACE_DETACH<span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\">/* detach a process that was attached. */</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">ptrace_detach</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/*读取所有通用寄存器值*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_GETREGS<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Get all gp regs from the child. */</span>\n\t  \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">access_ok</span><span class=\"token punctuation\">(</span>VERIFY_WRITE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span> FRAME_SIZE<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> FRAME_SIZE<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">__put_user</span><span class=\"token punctuation\">(</span><span class=\"token function\">getreg</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdata <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/*设置所有通用寄存器值*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_SETREGS<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Set all gp regs in the child. */</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> tmp<span class=\"token punctuation\">;</span>\n\t  \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">access_ok</span><span class=\"token punctuation\">(</span>VERIFY_READ<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span> FRAME_SIZE<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> FRAME_SIZE<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">__get_user</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">putreg</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdata <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/*获取浮点寄存器值*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_GETFPREGS<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Get the child FPU state. */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">access_ok</span><span class=\"token punctuation\">(</span>VERIFY_WRITE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span>\n\t\t\t       <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_i387_struct</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>child<span class=\"token operator\">-&gt;</span>used_math <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">/* Simulate an empty FPU. */</span>\n\t\t\t<span class=\"token function\">set_fpu_cwd</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token number\">0x037f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">set_fpu_swd</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">set_fpu_twd</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">get_fpregs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_i387_struct</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/*设置浮点寄存器值*/</span>\n\t<span class=\"token keyword\">case</span> PTRACE_SETFPREGS<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Set the child FPU state. */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">access_ok</span><span class=\"token punctuation\">(</span>VERIFY_READ<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span>\n\t\t\t       <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_i387_struct</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tchild<span class=\"token operator\">-&gt;</span>used_math <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">set_fpregs</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_i387_struct</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">case</span> PTRACE_GETFPXREGS<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Get the child extended FPU state. */</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">case</span> PTRACE_SETFPXREGS<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Set the child extended FPU state. */</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">case</span> PTRACE_SETOPTIONS<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;</span> PTRACE_O_TRACESYSGOOD<span class=\"token punctuation\">)</span>\n\t\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">|=</span> PT_TRACESYSGOOD<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PT_TRACESYSGOOD<span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\nout_tsk<span class=\"token operator\">:</span>\n\t<span class=\"token function\">free_task_struct</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nout<span class=\"token operator\">:</span>\n\t<span class=\"token function\">unlock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意这个函数<code>get_stack_long(proccess, offset)</code>：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*\n * this routine will get a word off of the processes privileged stack. \n * the offset is how far from the base addr as stored in the TSS.  \n * this routine assumes that all the privileged stacks are in our\n * data space.\n */</span>   \n<span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get_stack_long</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span>task<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stack<span class=\"token punctuation\">;</span>\n\n\tstack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>task<span class=\"token operator\">-&gt;</span>thread<span class=\"token punctuation\">.</span>esp0<span class=\"token punctuation\">;</span>\n\tstack <span class=\"token operator\">+=</span> offset<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中task-&gt;thread.esp0是堆栈指针，通用的寄存器在堆栈中按顺序排放，通过偏移量0ffset便可以依次读取</p>\n<h2 id=\"PTRACE-TRACEME\"><a href=\"#PTRACE-TRACEME\" class=\"headerlink\" title=\"PTRACE_TRACEME\"></a>PTRACE_TRACEME</h2><p>​    当要调试一个进程时需要其进入被追踪状态(traced)，有两种方法进入该状态：</p>\n<ul>\n<li>被调试进程<strong>主动</strong>调用<code>ptrace(PTRACE_TRACEME, ...)</code>进入traced状态</li>\n<li>调试进程调用<code>ptrace(PTRACE_ATTACH, pid, ...)</code>来使指定进程进入</li>\n</ul>\n<p> 总之被调试进程必须进入traced状态才能进行调试，因为Linux会对处于traced状态的进程进行特殊操作。以第一种方式来说明：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token operator\">==</span> PTRACE_TRACEME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* are we already being traced? */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;</span> PT_PTRACED<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/* set the ptrace bit in the process flags. */</span>\n\t\tcurrent<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">|=</span> PT_PTRACED<span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">goto</span> out<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​    只是将当前进程标记为<strong>PT_PTRACED</strong>状态，但是如果该进程接下来进行<strong>execve</strong>系统调用去执行一个外部程序时会<strong>暂停当前进程</strong>，并且发送<strong>SIGCHLD</strong>信号给<strong>父进程</strong>，父进程接收到该信号时就可以对被调试进程进行调试。</p>\n<p><strong>sys_execve() -&gt; do_execve() -&gt; load_elf_binary()：</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">load_elf_binary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">linux_binprm</span> <span class=\"token operator\">*</span> bprm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">pt_regs</span> <span class=\"token operator\">*</span> regs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;</span> PT_PTRACED<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">send_sig</span><span class=\"token punctuation\">(</span>SIGTRAP<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于处于traced状态的进程执行<strong>execve</strong>系统调用时会发送一个<strong>SIGTRAP给当前进程</strong>。这个信号将在<code>do_signal</code>函数处理：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">do_signal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pt_regs</span> <span class=\"token operator\">*</span>regs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">sigset_t</span> <span class=\"token operator\">*</span>oldset<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> signr<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">spin_lock_irq</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>current<span class=\"token operator\">-&gt;</span>sigmask_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        signr <span class=\"token operator\">=</span> <span class=\"token function\">dequeue_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>current<span class=\"token operator\">-&gt;</span>blocked<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">spin_unlock_irq</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>current<span class=\"token operator\">-&gt;</span>sigmask_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 如果进程被标记为 PTRACE 状态</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>current<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;</span> PT_PTRACED<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> signr <span class=\"token operator\">!=</span> SIGKILL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t<span class=\"token comment\">//除了SIGKILL信号，都将让tracee停止并通知tracer</span>\n            <span class=\"token comment\">/* 让调试器运行  */</span>\n            current<span class=\"token operator\">-&gt;</span>exit_code <span class=\"token operator\">=</span> signr<span class=\"token punctuation\">;</span>\n            current<span class=\"token operator\">-&gt;</span>state <span class=\"token operator\">=</span> TASK_STOPPED<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 让自己进入停止运行状态</span>\n            <span class=\"token function\">notify_parent</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> SIGCHLD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送 SIGCHLD 信号给父进程表示子进程\"死亡(被替换)\"</span>\n            <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 让出CPU的执行权限</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以调试器使用这种方式调试某个程序时大致例程为：</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20230223/image-20230129132429982.4su930ro2vq0.png\" alt=\"image-20230129132429982\"></p>\n<p>当父进程（调试进程）接收到 <code>SIGCHLD</code> 信号后，表示被调试进程已经标记为<strong>被追踪状态并且停止运行</strong>，那么调试进程就可以开始进行调试了。</p>\n<h2 id=\"PTRACE-SINGLESTEP\"><a href=\"#PTRACE-SINGLESTEP\" class=\"headerlink\" title=\"PTRACE_SINGLESTEP\"></a>PTRACE_SINGLESTEP</h2><p>​    单步运行是最为常用的，当把tracee设置为单步运行模式时，tracee每执行一条指令CPU都会停止然后向父进程发送一个<strong>SIGCHLD</strong>信号，在ptrace中实现是将eflags设置trap_flag标志位：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> PTRACE_SINGLESTEP<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">/* set the trap flag. */</span>\n\t\t<span class=\"token keyword\">long</span> tmp<span class=\"token punctuation\">;</span>\n\n\t\tret <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EIO<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> data <span class=\"token operator\">&gt;</span> _NSIG<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PT_TRACESYS<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">&amp;</span> PT_DTRACE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">/* Spurious delayed TF traps may occur */</span>\n\t\t\tchild<span class=\"token operator\">-&gt;</span>ptrace <span class=\"token operator\">|=</span> PT_DTRACE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttmp <span class=\"token operator\">=</span> <span class=\"token function\">get_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> TRAP_FLAG<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">put_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tchild<span class=\"token operator\">-&gt;</span>exit_code <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/* give it a chance to run. */</span>\n\t\t<span class=\"token function\">wake_up_process</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​    能够这样做是基于X86 intel CPU提供一个硬件机制，就是当eflags的<code>Trap Flag</code>置为1时，CPU每执行一条指令都会产生一个异常然后Linux异常处理机制进程处理，由此会发送一个<strong>SIGTRAP</strong>信号给<strong>tracee</strong>；核心是：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">tmp <span class=\"token operator\">=</span> <span class=\"token function\">get_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> TRAP_FLAG<span class=\"token punctuation\">;</span>\n<span class=\"token function\">put_stack_long</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> EFL_OFFSET<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol>\n<li>获取进程的 <code>eflags</code> 寄存器的值，并且设置 <code>Trap Flag</code> 标志。</li>\n<li>把新的值设置到进程的 <code>eflags</code> 寄存器中。</li>\n</ol>\n<p>设置完寄存器后唤醒(wake_up_process)进程，让其进入运行状态：</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20230223/image-20230129132429982.4su930ro2vq0.png\" alt=\"image-20230129132429982\"></p>\n<p>​    同样的当tracee执行完一条指令获取<strong>SIGTRAP</strong>信号，在<strong>do_signal</strong>函数处理信号时，由于<code>current-&gt;ptrace &amp; PT_PTRACED</code>将停止执行并发送<strong>SIGCHLD</strong>信号给父进程tracer。父进程接收到SIGCHLD信号后就知道tracee停止，可以发送命令来读取或者修改tracee的内存数据或寄存器，或者通过调用 <code>ptrace(PTRACE_CONT, child,...)</code> 来让被调试进程进行运行等</p>\n<h1 id=\"Debugger-基本功能实现\"><a href=\"#Debugger-基本功能实现\" class=\"headerlink\" title=\"Debugger 基本功能实现\"></a>Debugger 基本功能实现</h1><p>​    实现一个简单的debugger，大致模型如下：主程序fork一个子程序去执行待调试程序；然后主程序循环等待用户输入命令，停止主程序停止并等待输入命令的条件就是子程序停止，这会在<strong>首次execute一个程序</strong>发生，以及<strong>单步(PTRACE_SINGLESTEP)<strong>或者</strong>断点</strong>发生。子程序很简单只需要调用execute系统调用启动一个新程序即可</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20230223/image-20230208214054408.2e6f4s8cndog.png\" alt=\"image-20230208214054408\"></p>\n<p>待实现的debugger有三个基本功能：单步，读写寄存器，读写内存。基于这三个功能再添加其他类似于gdb的功能。初始框架如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Expecting program name.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">pid_t</span> pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//child process</span>\n        <span class=\"token comment\">//execute tracee</span>\n        <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_TRACEME<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">execl</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//parent process</span>\n        <span class=\"token comment\">//execute tracer</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fork.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>子程序部分很简单调用exec族函数即可。</p>\n<h2 id=\"Parent\"><a href=\"#Parent\" class=\"headerlink\" title=\"Parent\"></a>Parent</h2><p>​    首先考虑使用一个结构体记录子进程的信息，然后父进程进入一个读取用户命令的循环，这里使用<a href=\"https://github.com/antirez/linenoise\">linenoise</a>开源项目实现命令补全，命令记录等功能当然还需要处理命令：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/**\n * debugger uitls\n*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Debugger</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>d_name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> d_pid<span class=\"token punctuation\">;</span>\n    Breakpoint <span class=\"token operator\">*</span>d_brks<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//记录断点</span>\n<span class=\"token punctuation\">}</span>Debugger<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dbg_run</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> wait_status<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wait_status<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*UI for start up*/</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">=</span> <span class=\"token function\">linenoise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minidbg$ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dbg_handle_command</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">linenoiseHistoryAdd</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">linenoiseFree</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​    使用Debugger结构体记录程序状态，主要是子程序pid和之后的断点信息；<code>linenoise(\"minidbg$ \")</code>会打印<code>minidbg$ </code>并等待输入，使用<code>dbg_handle_command</code>处理命令包括读写内存，寄存器，下断点等。<code>linenoiseHistoryAdd(cmd)</code>将命令添加到历史记录中</p>\n<p>在<code>dbg_handle_command</code>函数中大致结构为：很方便添加新功能，<strong>is_prefix</strong>辅助函数用于判断缩写指令</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">dbg_handle_command</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>lcmd <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>command<span class=\"token punctuation\">;</span>\n\n    argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span>lcmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    command <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token string\">\"continue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">/*do_command*/</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unkown command: %s.\\n\"</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>lcmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> ss <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> ss<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"读写寄存器\"><a href=\"#读写寄存器\" class=\"headerlink\" title=\"读写寄存器\"></a>读写寄存器</h2><p>​    一个非常基础的功能，基于<code>ptrace(PTRACE_GETREGS, ...)</code>和<code>ptrace(PTRACE_SETREGS, ...)</code>读写寄存器，为了保留寄存器信息在**&lt;sys/user.h&gt;**头文件中定义了如下结构体：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_regs_struct</span>\n<span class=\"token punctuation\">{</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r15<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r14<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r13<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r12<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rbp<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rbx<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r11<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r10<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r9<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> r8<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rax<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rcx<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rdx<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rsi<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rdi<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> orig_rax<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rip<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> cs<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> eflags<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rsp<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ss<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> fs_base<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> gs_base<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ds<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> es<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> fs<span class=\"token punctuation\">;</span>\n  __extension__ <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> gs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配合ptrace可以直接按照以上结构体读写寄存器，所以一次读写至少是所有通用寄存器。根据结构体排序定义了如下数据结构体来记录寄存器信息：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*utils.h*/</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">reg</span><span class=\"token punctuation\">{</span>\n    en_rax<span class=\"token punctuation\">,</span> en_rbx<span class=\"token punctuation\">,</span> en_rcx<span class=\"token punctuation\">,</span> en_rdx<span class=\"token punctuation\">,</span>\n    en_rdi<span class=\"token punctuation\">,</span> en_rsi<span class=\"token punctuation\">,</span> en_rbp<span class=\"token punctuation\">,</span> en_rsp<span class=\"token punctuation\">,</span>\n    en_r8<span class=\"token punctuation\">,</span>  en_r9<span class=\"token punctuation\">,</span>  en_r10<span class=\"token punctuation\">,</span> en_r11<span class=\"token punctuation\">,</span>\n    en_r12<span class=\"token punctuation\">,</span> en_r13<span class=\"token punctuation\">,</span> en_r14<span class=\"token punctuation\">,</span> en_r15<span class=\"token punctuation\">,</span>\n    en_rip<span class=\"token punctuation\">,</span> en_rflags<span class=\"token punctuation\">,</span>    en_cs<span class=\"token punctuation\">,</span>\n    en_orig_rax<span class=\"token punctuation\">,</span> en_fs_base<span class=\"token punctuation\">,</span>\n    en_gs_base<span class=\"token punctuation\">,</span>\n    en_fs<span class=\"token punctuation\">,</span> en_gs<span class=\"token punctuation\">,</span> en_ss<span class=\"token punctuation\">,</span> en_ds<span class=\"token punctuation\">,</span> en_es\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">reg_descriptor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">reg</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*utils.c*/</span>\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> n_regs <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">reg_descriptor</span> g_register_descriptors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span> en_r15<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r15\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_r14<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r14\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_r13<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r13\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_r12<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r12\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rbp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rbp\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rbx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rbx\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_r11<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r11\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_r10<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r10\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_r9<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r9\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_r8<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r8\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rax<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rax\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rcx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rcx\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rdx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rdx\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rsi<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rsi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rdi<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rdi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_orig_rax<span class=\"token punctuation\">,</span> <span class=\"token string\">\"orig_rax\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rip<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rip\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_cs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cs\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rflags<span class=\"token punctuation\">,</span> <span class=\"token string\">\"eflags\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_rsp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rsp\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_ss<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ss\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_fs_base<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fs_base\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_gs_base<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gs_base\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_ds<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ds\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_es<span class=\"token punctuation\">,</span> <span class=\"token string\">\"es\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_fs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fs\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> en_gs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gs\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为只能一次读写所有寄存器，因此要读写某个寄存器时先用ptrace把所有的读取出来在通过寄存器表查找<strong>g_register_descriptors</strong>，并且因为寄存器表和<code>struct user_regs_struct</code>结构体排序一致可以直接用表中的偏移读写结构体：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">set_register_value</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">reg</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint64_t</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_regs_struct</span> regs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> reg_descriptor_idx<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_GETREGS<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*locate reg_r`s index in user_regs_struct struct*/</span>\n    reg_descriptor_idx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n_regs<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g_register_descriptors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            reg_descriptor_idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>regs <span class=\"token operator\">+</span> reg_descriptor_idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SETREGS<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">uint64_t</span> <span class=\"token function\">get_register_value</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">reg</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">user_regs_struct</span> regs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> reg_descriptor_idx<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint64_t</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_GETREGS<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>regs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*locate reg_r`s index in user_regs_struct struct*/</span>\n    reg_descriptor_idx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n_regs<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g_register_descriptors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            reg_descriptor_idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reg_descriptor_idx <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>regs <span class=\"token operator\">+</span> reg_descriptor_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error] get_register_value(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*辅助函数*/</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">get_register_name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">reg</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n_regs<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g_register_descriptors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> g_register_descriptors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">reg</span> <span class=\"token function\">get_register_from_name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n_regs<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcasecmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> g_register_descriptors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> g_register_descriptors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">/*-1 is impossible in reg_descriptor-&gt;r*/</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"读写内存\"><a href=\"#读写内存\" class=\"headerlink\" title=\"读写内存\"></a>读写内存</h3><p>​    读写内存和寄存器很类似，但使用ptrace一次性只能读写8字节(64位)：<code>ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, address, NULL)</code>需要提供子进程的虚拟内存地址(address)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token class-name\">uint64_t</span> <span class=\"token function\">dbg_read_memory</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint64_t</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dbg_write_memory</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint64_t</span> address<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint64_t</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_POKEDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h2><p>​    断点其实有两种：硬断点和软断点。其中硬断点涉及到CPU架构数量有限比如x86结构提供4个硬件断点(断点寄存器)，但可以检测读写执行三种情况。而软断点通过在指定位置插入<strong>断点指令</strong>，然后程序运行到此处执行断点指令让debugger获取<code>SIGTRAP</code>信号并停止运行，因此软断点可以有无数个；这里主要实现软断点，如x86的断点指令为<code>int 3</code>(机器码 0xcc)，需要考虑断点插入，断点记录，触发断点后如何继续运行等</p>\n<p>使用如下结构体存储断点信息：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/**\n * breakpoints utils\n*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Breakpoint</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> b_pid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> b_addr<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//map key</span>\n    <span class=\"token keyword\">int</span> b_enabled<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b_saved_data<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//需要保存插入0xcc位置的数据</span>\n    UT_hash_handle hh<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>Breakpoint<span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>借助[uthash](<a href=\"https://github.com/troydhanson/uthash\">troydhanson/uthash: C macros for hash tables and more (github.com)</a>)开源项目实现一个hash表来记录断点信息，只需在结构体中包含<strong>UT_hash_handle</strong>成员即可；其提供宏HASH_FIND_PTR：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">HASH_FIND_PTR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span>findptr<span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">)</span> <span class=\"token function\">HASH_FIND</span><span class=\"token punctuation\">(</span>hh<span class=\"token punctuation\">,</span>head<span class=\"token punctuation\">,</span>findptr<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">)</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可以通过结构体中的<strong>b_addr</strong>作为key，其表头在初始化<code>Debugger</code>结构体时设置为NULL即可：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">Debugger dbg<span class=\"token punctuation\">;</span>\ndbg<span class=\"token punctuation\">.</span>d_brks <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* important! initialize to NULL related to breakpoints` map*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>然后实现两个断点函数：brk_enable，brk_disable；分别进行插入断点和去除断点：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utils.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">brk_enable</span><span class=\"token punctuation\">(</span>Breakpoint <span class=\"token operator\">*</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_pid<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bp<span class=\"token operator\">-&gt;</span>b_saved_data <span class=\"token operator\">=</span> data <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//save LSB</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> INT3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_POKEDATA<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_pid<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_addr<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bp<span class=\"token operator\">-&gt;</span>b_enabled <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>Breakpoint <span class=\"token operator\">*</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_pid<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> bp<span class=\"token operator\">-&gt;</span>b_saved_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_POKEDATA<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_pid<span class=\"token punctuation\">,</span> bp<span class=\"token operator\">-&gt;</span>b_addr<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bp<span class=\"token operator\">-&gt;</span>b_enabled <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"单步\"><a href=\"#单步\" class=\"headerlink\" title=\"单步\"></a>单步</h2><p>​    单步运行时除了普通指令，需要考虑是否跳过函数调用(<strong>call</strong>)也就是需要<strong>步过</strong>的情况，还有如果当前为断点处单步时需要格外的断点处理。基于<code>ptrace(PTRACE_SINGLESTEP, ...)</code>单步步入时需要考虑两种情况，涉及断点；其他非断点情况直接<code>PTRACE_SINGLESTEP</code>单步运行即可</p>\n<ul>\n<li>pc刚好触发一个断点，即执行了<code>0xcc</code></li>\n<li>pc即将触发一个断点</li>\n</ul>\n<p>使用如下函数处理单步命令：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*we can show UI here*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dbg_step_in</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">uint64_t</span> possible_pc <span class=\"token operator\">=</span> <span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/*if this is breakpoint int 3 executed*/</span>\n    Breakpoint <span class=\"token operator\">*</span>bp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>possible_pc<span class=\"token punctuation\">,</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/*step over breakpoint*/</span>\n        <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> possible_pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SINGLESTEP<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">wait_for_signal</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">brk_enable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SINGLESTEP<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">wait_for_signal</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">show_UI</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是后来发现一个bug：当断点设置在一个单机器码的指令处时(如 push rbp 0x55)，以上逻辑会陷入死循环，因为每次单步时都会检测<code>pc-1</code>是否为断点；所以得想办法面对单机器码断点的情况避免该逻辑，不可能把所有单机器码指令全列出来然后比对，所以这里使用反编译引擎<strong>capstone</strong>。如果pc-1是个断点那么先判断pc-1处的指令长度是否为1，如果是那么设置一个静态flag表示已经步过一个单机器码的断点下一次单步时不再考虑pc-1：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/**\n * This function invoked in situation:\n * 1.PTRACE_SINGLESTEP the current instruction which maybe inserted a breakpoint OR maybe not\n * 2.already triggered a breakpoint(0xcc) PTRACE_SINGLESTEP the broken instruction\n * we can show UI here\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dbg_step_in</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> bool one_machine_code_flag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint64_t</span> possible_pc<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">;</span>\n    Breakpoint <span class=\"token operator\">*</span>bp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    csh handle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    cs_insn<span class=\"token operator\">*</span> insn<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> child_status<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>one_machine_code_flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        possible_pc <span class=\"token operator\">=</span> <span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">/*if this is breakpoint int 3 executed*/</span>\n        <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>possible_pc<span class=\"token punctuation\">,</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/*check for single machine code instruction*/</span>\n            data <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> possible_pc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cs_open</span><span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error]: Failed to initialize capstone engine!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">cs_disasm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>insn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>insn<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                one_machine_code_flag <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                one_machine_code_flag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">set_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> possible_pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SINGLESTEP<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">wait_for_signal</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">brk_enable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/*if we are here then this`s caused by PTRACE_SINGLESTEP and maybe we going to trigger a breakpoint or maybe not*/</span>\n            possible_pc <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            one_machine_code_flag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>possible_pc<span class=\"token punctuation\">,</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SINGLESTEP<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">wait_for_signal</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">brk_enable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SINGLESTEP<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">wait_for_signal</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>   \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/*the previous instruction is a single machine code instruction and breakpoint*/</span>\n        possible_pc <span class=\"token operator\">=</span> <span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">/*check current pc*/</span>\n        one_machine_code_flag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>possible_pc<span class=\"token punctuation\">,</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SINGLESTEP<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">wait_for_signal</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">brk_enable</span><span class=\"token punctuation\">(</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_SINGLESTEP<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">wait_for_signal</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">show_UI</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>​    步过主要用在函数调用上，在使用步过时主要考虑以下几种情况：</p>\n<ul>\n<li>pc触发了需要步过的call指令上的断点，即pc执行了0xcc</li>\n<li>pc即将步过的call指令上被插入了断点</li>\n<li>其他就是单步情况</li>\n</ul>\n<p>这里步过一个call采用的方式是在call指令下一条指令下断点然后PTRACE_CONT。同样使用capstone计算call指令长度然后断下后面一条指令，这样需要考虑如果被step over的函数如果没有中断那么将触发call指令后面一条指令，<strong>那么INT3被执行还需让pc-1</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/**\n * This function invoked in 4 situation:\n * 1.Just work as step in\n * 2.jump over a call but has triggered an breakpoint(0xcc)\n * 3.jump over a call but no breakpoint in current call instruction\n * 4.jump over a call but there is 0xcc in current call instruction\n * we can show UI here\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dbg_step_over</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">uint64_t</span> possible_pc_prev <span class=\"token operator\">=</span> <span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/*if this is breakpoint int 3 executed*/</span>\n    <span class=\"token class-name\">uint64_t</span> possible_pc_currn <span class=\"token operator\">=</span> possible_pc_prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/*if current instruction is breakpoint*/</span>\n    Breakpoint <span class=\"token operator\">*</span>bp_prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    Breakpoint <span class=\"token operator\">*</span>bp_currn <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint64_t</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint64_t</span> next_addr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*Maybe stoped for triggered a breakpoint*/</span>\n    <span class=\"token comment\">/*previous instruction. Jump over a call but has triggered an breakpoint(0xcc)*/</span>\n    <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>possible_pc_prev<span class=\"token punctuation\">,</span> bp_prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp_prev <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp_prev<span class=\"token operator\">-&gt;</span>b_enabled <span class=\"token operator\">&amp;&amp;</span> bp_prev<span class=\"token operator\">-&gt;</span>b_saved_data <span class=\"token operator\">==</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>     <span class=\"token comment\">/*call`s op code is 0xE8*/</span>\n        <span class=\"token comment\">/*call instruction has been triggered*/</span>\n        <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp_prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> possible_pc_prev<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        csh handle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cs_insn<span class=\"token operator\">*</span> insn<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> child_status<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cs_open</span><span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error]: Failed to initialize capstone engine!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">cs_disasm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> possible_pc_prev<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>insn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        next_addr <span class=\"token operator\">=</span> possible_pc_prev <span class=\"token operator\">+</span> insn<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dbg_set_breakpoint_at_address</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> possible_pc_prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">continue_execution</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">/*Probably trigger another breakpoint in the function. So we need to disable it when stop*/</span>\n        <span class=\"token function\">brk_enable</span><span class=\"token punctuation\">(</span>bp_prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>next_addr<span class=\"token punctuation\">,</span> bp_prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp_prev <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp_prev<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp_prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">/*disable it*/</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>             <span class=\"token comment\">/*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/</span>\n            <span class=\"token function\">set_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">cs_free</span><span class=\"token punctuation\">(</span>insn<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cs_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp_prev <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp_prev<span class=\"token operator\">-&gt;</span>b_enabled <span class=\"token operator\">&amp;&amp;</span> bp_prev<span class=\"token operator\">-&gt;</span>b_saved_data <span class=\"token operator\">!=</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/*normal instruction has been triggered. Just work as step in*/</span>\n        <span class=\"token function\">dbg_step_in</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/*stoped for PTRACE_SINGLESTEP*/</span>\n    <span class=\"token comment\">/*current instruction. Jump over a call but there is 0xcc in current call instruction*/</span>\n    <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>possible_pc_currn<span class=\"token punctuation\">,</span> bp_currn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp_currn <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp_currn<span class=\"token operator\">-&gt;</span>b_enabled <span class=\"token operator\">&amp;&amp;</span> bp_currn<span class=\"token operator\">-&gt;</span>b_saved_data <span class=\"token operator\">==</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/*current instruction is breakpoint and it`s a function invoking*/</span>\n        <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp_currn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> possible_pc_currn<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        csh handle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cs_insn<span class=\"token operator\">*</span> insn<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> child_status<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cs_open</span><span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error]: Failed to initialize capstone engine!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">cs_disasm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> possible_pc_currn<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>insn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        next_addr <span class=\"token operator\">=</span> possible_pc_currn <span class=\"token operator\">+</span> insn<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dbg_set_breakpoint_at_address</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">continue_execution</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">/*Probably trigger another breakpoint in the function. So we need to disable it when stop*/</span>\n        <span class=\"token function\">brk_enable</span><span class=\"token punctuation\">(</span>bp_currn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>next_addr<span class=\"token punctuation\">,</span> bp_currn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp_currn <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp_currn<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp_currn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">/*disable it*/</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>             <span class=\"token comment\">/*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/</span>\n            <span class=\"token function\">set_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">cs_free</span><span class=\"token punctuation\">(</span>insn<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cs_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp_currn <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp_currn<span class=\"token operator\">-&gt;</span>b_enabled <span class=\"token operator\">&amp;&amp;</span> bp_currn<span class=\"token operator\">-&gt;</span>b_saved_data <span class=\"token operator\">!=</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/*current instruction is a breakpoint but not a calling so we could just step over. Just work as step in */</span>\n        <span class=\"token function\">dbg_step_in</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">show_UI</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    \n    <span class=\"token comment\">/*not breakpoint in current invoking OR current normal instruction*/</span>\n    data <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> possible_pc_currn<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>          \n        <span class=\"token comment\">/*Current instruction is a call.Set breakpoint at next instruction then continue*/</span>\n        csh handle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        cs_insn<span class=\"token operator\">*</span> insn<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> child_status<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cs_open</span><span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error]: Failed to initialize capstone engine!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">cs_disasm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> possible_pc_currn<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>insn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        next_addr <span class=\"token operator\">=</span> possible_pc_currn <span class=\"token operator\">+</span> insn<span class=\"token operator\">-&gt;</span>size<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dbg_set_breakpoint_at_address</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">continue_execution</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>next_addr<span class=\"token punctuation\">,</span> bp_currn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp_currn <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp_currn<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">brk_disable</span><span class=\"token punctuation\">(</span>bp_currn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>             <span class=\"token comment\">/*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/</span>\n            <span class=\"token function\">set_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> next_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">cs_free</span><span class=\"token punctuation\">(</span>insn<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cs_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>\n        <span class=\"token function\">dbg_step_in</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">/*Current instruction is normal. Just work as step in*/</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>到这里已经具备基本功能了，可以在<code>dbg_handle_command</code>中添加命令支持：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">dbg_handle_command</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>lcmd <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>command<span class=\"token punctuation\">;</span>\n\n    argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span>lcmd<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    command <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token string\">\"continue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">continue_execution</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">exit_debugger</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token string\">\"break\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>      <span class=\"token comment\">/*format: break/b [addr]*/</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"command break expect an address!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dbg_set_breakpoint_at_address</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token string\">\"register\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token comment\">/*format: reg/r dump OR reg/r read/write [reg] value(hex)*/</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dbg_dump_all_regs</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value:\\t0x%08lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_register_value</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token function\">get_register_from_name</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">set_register_value</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> <span class=\"token function\">get_register_from_name</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token string\">\"memory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>     <span class=\"token comment\">/*memory/m read [addr] OR write [addr] [value]*/</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value:\\t0x%08lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dbg_read_memory</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%08lx\\t-&gt;\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dbg_read_memory</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dbg_write_memory</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%08lx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dbg_read_memory</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">,</span> <span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token string\">\"step\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>       <span class=\"token comment\">/*step in OR step over*/</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dbg_step_in</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_prefix</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"over\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dbg_step_over</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: step in / step over\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unkown command: %s.\\n\"</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>lcmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这些是目前完成的功能，还有进程和线程支持还未完成</p>\n<h2 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h2><p>​    一般debugger是要支持显示汇编的，这里实现的只是在每次单步和触发断点时打印寄存器信息和汇编。可以在每次单步或者触发断点时读取当前pc处的机器码借助capstone反汇编，<strong>但需要注意的是对于x86_64架构最长汇编指令为15字节但很少出现比较长的指令</strong>，所以实现汇编打印的时候每次仅读取16个字节进行反汇编并打印指令</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/**\n * consider of the longest instruction is 15bytes(x86_64) then we read 16bytes everytime\n * and disassemble it with capstone engine\n * befor invoking show_asm the caller should make sure current pc is not a breakpoint\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_asm</span><span class=\"token punctuation\">(</span>Debugger <span class=\"token operator\">*</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    csh handle<span class=\"token punctuation\">;</span>\n    cs_insn <span class=\"token operator\">*</span>insn<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>code<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> size <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint64_t</span> address<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">cs_open</span><span class=\"token punctuation\">(</span>CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[error] cs_open(%d, %d, 0x%08lx)\\n\"</span><span class=\"token punctuation\">,</span> CS_ARCH_X86<span class=\"token punctuation\">,</span> CS_MODE_64<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    code <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    address <span class=\"token operator\">=</span> <span class=\"token function\">get_pc</span><span class=\"token punctuation\">(</span>dbg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>code <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>code <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">ptrace</span><span class=\"token punctuation\">(</span>PTRACE_PEEKDATA<span class=\"token punctuation\">,</span> dbg<span class=\"token operator\">-&gt;</span>d_pid<span class=\"token punctuation\">,</span> address <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/*before we show assembly after pc we should consider if there is breakpoint in machine code behind*/</span>\n    Breakpoint <span class=\"token operator\">*</span>bp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint64_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tmp <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">HASH_FIND_PTR</span><span class=\"token punctuation\">(</span>dbg<span class=\"token operator\">-&gt;</span>d_brks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tmp<span class=\"token punctuation\">,</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> bp<span class=\"token operator\">-&gt;</span>b_enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    \n            <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>code <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> bp<span class=\"token operator\">-&gt;</span>b_saved_data<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        tmp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------[Assembly]-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    insn <span class=\"token operator\">=</span> <span class=\"token function\">cs_malloc</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">cs_disasm_iter</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>code<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>address<span class=\"token punctuation\">,</span> insn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">+</span> insn<span class=\"token operator\">-&gt;</span>size <span class=\"token operator\">==</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[96m0x%08lx:\\t%s\\t%s\\t&lt;======RIP\\e[0m\\n\"</span><span class=\"token punctuation\">,</span> insn<span class=\"token operator\">-&gt;</span>address<span class=\"token punctuation\">,</span> insn<span class=\"token operator\">-&gt;</span>mnemonic<span class=\"token punctuation\">,</span> insn<span class=\"token operator\">-&gt;</span>op_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%08lx:\\t%s\\t%s\\n\"</span><span class=\"token punctuation\">,</span> insn<span class=\"token operator\">-&gt;</span>address<span class=\"token punctuation\">,</span> insn<span class=\"token operator\">-&gt;</span>mnemonic<span class=\"token punctuation\">,</span> insn<span class=\"token operator\">-&gt;</span>op_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">cs_free</span><span class=\"token punctuation\">(</span>insn<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cs_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>还有就是如果读取的15个字节中<strong>有断点(0xcc)那么反汇编结果是不准确的</strong>，因此先遍历是否存在断点并resotre原来的数据再进行反汇编。</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>​    这里还没有实现多线程/进程调试的功能，<a href=\"https://github.com/squarepants0/minidbg\">源码</a>，但也算有个调试器的架子了</p>\n<p><img src=\"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20230223/image-20230210153302686.5bym3zeddbk0.png\" alt=\"image-20230210153302686\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><p><a href=\"https://github.com/kabeor/Capstone-Engine-Documentation/blob/master/Capstone-Engine%20Documentation.md\">https://github.com/kabeor/Capstone-Engine-Documentation/blob/master/Capstone-Engine%20Documentation.md</a></p>\n</li>\n<li><p><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/\">Writing a Linux Debugger Part 1: Setup (tartanllama.xyz)</a>：作者讲解非常详细，还涉及源码调试功能，这里就没有加入该功能</p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NzYzODg1OA==&amp;mid=2648465474&amp;idx=2&amp;sn=52dfd43e8f376e1ff16b2f81c3c002a7&amp;scene=21#wechat_redirect\">一文看懂 | GDB底层实现原理</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NzYzODg1OA==&amp;mid=2648466708&amp;idx=1&amp;sn=fd765d1e3c958c194010f35728e46fb0&amp;scene=21#wechat_redirect\">自己动手写一个GDB｜基本功能</a></p>\n</li>\n<li><p><a href=\"https://github.com/squarepants0/minidbg\">squarepants0/minidbg: Writing a minidbg on Linux with C (github.com)</a></p>\n</li>\n<li><p><a href=\"https://github.com/troydhanson/uthash\">troydhanson/uthash: C macros for hash tables and more (github.com)</a></p>\n</li>\n<li><p><a href=\"https://github.com/antirez/linenoise\">antirez/linenoise: A small self-contained alternative to readline and libedit (github.com)</a></p>\n</li>\n</ul>\n","text":"实现一个简单的调试器​ 以经典的GDB为例其项目代码共有十几万行代码，但是很多情况下只会使用到几个常用功能：单步，断点，查看变量，线程/进程切换。而GDB基本上是依赖于ptrace系统调用，主要用于编...","link":"","photos":[],"count_time":{"symbolsCount":"36k","symbolsTime":"33 mins."},"categories":[{"name":"二进制","slug":"二进制","count":1,"path":"api/categories/二进制.json"}],"tags":[{"name":"二进制","slug":"二进制","count":1,"path":"api/tags/二进制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%B0%83%E8%AF%95%E5%99%A8\"><span class=\"toc-text\">实现一个简单的调试器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ptrace-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">ptrace 原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PTRACE-TRACEME\"><span class=\"toc-text\">PTRACE_TRACEME</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PTRACE-SINGLESTEP\"><span class=\"toc-text\">PTRACE_SINGLESTEP</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Debugger-%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Debugger 基本功能实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Parent\"><span class=\"toc-text\">Parent</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%86%99%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">读写寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98\"><span class=\"toc-text\">读写内存</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%AD%E7%82%B9\"><span class=\"toc-text\">断点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E6%AD%A5\"><span class=\"toc-text\">单步</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96\"><span class=\"toc-text\">汇编</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">效果</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Angr Taint Analysis","uid":"1ac0942cada2f27dfbac108a2c01d426","slug":"Angr Taint Analysis","date":"2023-03-14T07:07:45.000Z","updated":"2023-09-29T03:48:35.105Z","comments":true,"path":"api/articles/Angr Taint Analysis.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/picx-images-hosting@master/20230406/image.7j4ghfi4dy00.png","text":"Angr Taint Analysis 本人一直致力于二进制分析和自动化漏洞挖掘领域，这次抛砖引玉，希望可以大家多多指导 污点分析的基本分类： 动态污点分析 静态污点分析 上述分析方式都有自己的优缺点...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":2,"path":"api/tags/漏洞挖掘.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"qiling 框架IotFuzz之Boa","uid":"dda4d51b385ad6b8fb41614a58891fc8","slug":"Qiling partial fuzz I","date":"2023-01-30T04:38:45.000Z","updated":"2023-09-29T03:48:35.085Z","comments":true,"path":"api/articles/Qiling partial fuzz I.json","keywords":null,"cover":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20230130/images.4wcohedooqg0.png","text":"qiling 框架IotFuzz之Boa前言最近在搞Iot的时候接触到Qiling框架，用了一段时间后感觉确实模拟功能挺强大的，还支持Fuzz，于是开始学习对Iot webserver这样的程序进行F...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Fuzz","slug":"Fuzz","count":1,"path":"api/categories/Fuzz.json"}],"tags":[{"name":"Fuzz","slug":"Fuzz","count":4,"path":"api/tags/Fuzz.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://jsd.cdn.zzko.cn/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}