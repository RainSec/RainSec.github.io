{"name":"渗透测试","slug":"渗透测试","count":10,"postlist":[{"title":"Burp-Montoya","uid":"6412321264c6d157e1df07971f4aa071","slug":"Burp-Montoya","date":"2022-11-01T04:38:45.000Z","updated":"2023-04-11T11:38:46.769Z","comments":true,"path":"api/articles/Burp-Montoya.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221101/burp-suite-180820162011-thumbnail.5ag1ra9f7s0.jpg","text":" Burp的新版本更新了新的API接口，刚好最近有写插件的想法，所以简单的了解了下。 简介 单从文档界面来看，结构清晰了不少-&gt;MontoyaApi 同时官方提供了一个demo 使用 与老版本类似，创建一个插件项目需要继承类BurpExtension，它只包含了一个初始化函数 public interface BurpExtension { void initialize(MontoyaApi var1); } 同样的，想要调用扫描等功能，也需要进行注册，比如我们注册一个扫描 public...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"BurpSuite","slug":"BurpSuite","count":2,"path":"api/tags/BurpSuite.json"}],"author":{"name":"Noel","slug":"noel","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220211/noel.47xsfyg7vt40.webp","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"EventListener XSS","uid":"68bdee9933fc5dc89a593d8b4b4eaea6","slug":"EventListener XSS","date":"2022-03-25T10:38:45.000Z","updated":"2023-04-11T11:38:59.969Z","comments":true,"path":"api/articles/EventListener XSS.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/XSS_cover.jpg","text":"EventListener XSSXSS作为混”低保“的最佳漏洞，我们在日常测试中没少碰到，但是DOM型XSS就相对来说不容易被发现了，而本文要介绍的则是更难发现并利用的监听postMessage所导致漏洞。首先从事件监听器开始说起 事件监听器事件监控器可以为指定对象设置一个回调函数，当该对象的指定事件被触发时会被执行： &lt;table id=\"outside\"&gt; &lt;tr&gt;&lt;td id=\"t1\"&gt;one&lt;/td&gt;&lt;/tr&gt; &lt;tr&...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"XSS","slug":"XSS","count":1,"path":"api/tags/XSS.json"}],"author":{"name":"Noel","slug":"noel","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220211/noel.47xsfyg7vt40.webp","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Goby指纹与POC提取复现","uid":"84026449195101da50b0cdf96b2a3940","slug":"Goby指纹和POC提取","date":"2022-09-30T02:48:45.000Z","updated":"2023-04-11T11:39:24.009Z","comments":true,"path":"api/articles/Goby指纹和POC提取.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220930/image.x02df1872g.webp","text":"Goby指纹与POC提取复现最近看了w8ay师傅发的关于提取Goby指纹的帖子，发现自己加入师傅的知识星球却一直没认真学习过实在是难顶嗷，根据师傅的帖子来复现自己提取一下，补上第一期的作业。 Goby指纹提取首先是指纹提取，这里也分别准备了三个版本的Goby文件进行复现，分别是1.4.76、1.7.192和1.8.279 1.4.76因为版本比较低所以不需要我们手动去从goby程序里提crules，直接用winhex打开笔者从事的工作与Yara息息相关，但是从来没有深入的去了解Yara的原理和流...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"Zitui","slug":"zitui","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/zitui_logo.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"URLDNS调试那些小事","uid":"609cb3bd3160d9a24e01a566229d052d","slug":"URLDNS调试那些小事","date":"2022-03-26T10:48:45.000Z","updated":"2023-04-11T11:40:27.921Z","comments":true,"path":"api/articles/URLDNS调试那些小事.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/what-is-dns.3wivpbhx9do.png","text":"URLDNS调试那些小事近期在看javaweb相关的知识，ysoserial作为反序列化利用链的神器，想稍微利用它来调试一个简单的urldns利用链，进而了解这个工具。 ysoserial链接：下载地址: https://github.com/frohoff/ysoserial 这里用jdk1.8来编译 编译ysoserial用JIdea打开导入，会自动导入依赖，导入以后可能还会出现pom.xml红色表示找不到对应依赖的情况，这时可以进入依赖文件夹，可能是用于多个版本jar下载到了其他版本，删除...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"KID","slug":"kid","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/KID.5419jujfw8s0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Tomcat内存马简析","uid":"a5eb3b6436793531605058c41325d8af","slug":"Tomcat内存马解析","date":"2022-03-26T10:48:45.000Z","updated":"2023-04-11T11:40:19.169Z","comments":true,"path":"api/articles/Tomcat内存马解析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221025/images.7i3pppfv9fc.jpg","text":"Tomcat内存马简析 webshell木马配合webshell管理工具可以方便对于服务器、内网进行进一步的维权、入侵，随着对文件内容查杀、以Ai对流量特征和行为模式的查杀等等手段，普通文件形式的webshell木马可靠性越来越差。也许好不容易绕过waf传上去两分钟不到就被杀掉了，所以攻击方在近些年也慢慢的研发出“无文件”的webshell木马，即内存马。内存马的概念提出比较久的，但走进视野就近几年的事情，每隔一段时间总能看到不少师傅提出新的内存马实现方法，这里简单说下利用JavaWeb的三大组...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"KID","slug":"kid","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/KID.5419jujfw8s0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"对Xray 5.6W条结果的简单分析","uid":"7865cd0898eb778742478bf73fa460c6","slug":"Xray数据分析","date":"2022-10-12T11:48:45.000Z","updated":"2023-04-11T11:40:37.049Z","comments":true,"path":"api/articles/Xray数据分析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221012/image-20221009230905837.2jiiuh6lk5s0.png","text":"对Xray 5.6W条结果的简单分析 前言自动化扫描src已经做一段时间了，各类问题累计扫出来7.3w+，其中xray作为扫描漏洞的主力之一，上报了5.6w+问题 。目前应该是全网使用xray漏洞记录最多的一个了吧。 这里便根据这5.6w+扫描结果来对xray做一个简单的分析及复盘，先说下我目前使用方式: 扫描目标 各大国内src相关资产 扫描方式 crawlgergo爬取网站请求并发送到xray xray扫描爬取的网站请求将结果发送给webhook webhook收集并报告漏洞 简单来说就是:...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"Young","slug":"young","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220721/gg.3a3ld9g2kaq0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Webshell工具加密流量解析","uid":"06322427d537eca1634c7950b5477253","slug":"Webshell工具加密流量解析","date":"2022-07-19T11:48:45.000Z","updated":"2023-04-11T11:40:32.157Z","comments":true,"path":"api/articles/Webshell工具加密流量解析.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220722/bingxie.10ryoh4zjlxs.png","text":"前言webshell管理工具作为进一步信息收集、内网渗透、获取更高权限等功能的好帮手，常出现在攻防对抗和渗透测试场景下，其自带的流量加密用来绕过其waf、ids等安全设备的连接，这里简单说下蚁剑、哥斯拉、冰蝎3.0这三款较为流行的工具在默认情况下的流量加密方式和解密方法，可以帮助守方在复盘时更好的攻击链还原和检测。 蚁剑蚁剑的加密手段比较简单，在配置界面的加密手段只有base64和rot13，这两者都是无需密钥可直接进行解密的密码类型，这里以base64为例：提取参数后的编码直接进行base64...","link":"","photos":[],"count_time":{"symbolsCount":"49k","symbolsTime":"45 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"KID","slug":"kid","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/KID.5419jujfw8s0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Fastjson 1.2.80调试小记","uid":"fb1b22e9cffe64caefaaf1ad19f54d41","slug":"fastjson 1.2.80调试小记","date":"2022-09-27T10:38:45.000Z","updated":"2023-04-11T11:39:08.097Z","comments":true,"path":"api/articles/fastjson 1.2.80调试小记.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220930/image.5hsjeydq0cg0.png","text":"fastjson 1.2.68 反序列化rce探索前言 fastjson 1.2.68 目前公开的利用链中比较好用的是voidfyoo师傅的Commons IO 写文件链子，但是在spring环境下，仅仅通过写文件rce较为困难，本文更多的是结合多位师傅的文章理出一条通过写文件稳定rce方法 JDK8任意文件写场景下的Fastjson RCE 通过覆盖charsets.jar缺点太多，一是文件大，二是java版本不适配。另外笔者觉得还有一个致命因素，一般来说项目中只要使用了Charset.for...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发||","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"一次攻防小记","uid":"caead448310a4a1bf0047aa168443e2c","slug":"一次攻防小记","date":"2022-08-24T10:38:45.000Z","updated":"2023-04-11T11:38:25.117Z","comments":true,"path":"api/articles/一次攻防小记.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220824/scan.6q7shyuek6k0.png","text":"一次攻防小记​ 一次攻防，第一天师傅rmi直接进了总公司内网，笔者在核心资产段打了好久没能进去，水了几天边缘分公司，队长又让打核心段，看看之前的一些弱口令，后台能不能后续利用，没办法硬着头皮打。​ 这个弱口令属于那种爆破可以爆破出的，但是随手试肯定不会试的，后台功能点比较多，但是生产也不敢乱动，之前师傅进后台挖过，找到了个跨目录上传和文件读取（都仅限jpg后缀），笔者经过细挖，找到个sql注入（mysql，支持堆叠，mysql用户权限较低）和fastjson（1.2.47&lt;版本&lt;1....","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"RainSec","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220714/logo.jpg","link":"/","description":"艺术家思维去思考问题，工匠创造精神去开发||","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"灵活的修改Burp请求","uid":"49976eacba4bfec6b25d67dd692a855b","slug":"灵活的修改Burp请求","date":"2022-03-05T10:38:45.000Z","updated":"2023-04-11T11:38:07.665Z","comments":true,"path":"api/articles/灵活的修改Burp请求.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/burp.png","text":"灵活的修改Burp请求 在日常渗透测试中经常会遇到请求头需要替换、请求或响应内容需要解密等一系列麻烦的事。更换请求头可以通过Burp的Match and Replace功能来实现，加解密也有一些插件可以实现，但是它们普遍存在着以下缺陷： 自定义数据不能进行保存 加解密不能灵活的指定位置 带着这些需求，笔者在寻找工具时发现了一款有趣的插件Python Scripter: https://github.com/PortSwigger/python-scripter 简介 与其说这是一个插件，不如说其...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"BurpSuite","slug":"BurpSuite","count":2,"path":"api/tags/BurpSuite.json"}],"author":{"name":"Noel","slug":"noel","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220211/noel.47xsfyg7vt40.webp","link":"https://rainsec.cn","description":"","socials":{}}}]}