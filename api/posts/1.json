{"total":24,"pageSize":12,"pageCount":2,"data":[{"title":"手把手带你用空间测绘Hunting C2","uid":"81b11b69f267fe5182e5e57519e56f32","slug":"Hunting C2","date":"2023-04-06T10:38:45.000Z","updated":"2023-04-11T11:48:53.304Z","comments":true,"path":"api/articles/Hunting C2.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/Shodan-filters-to-Hunt-Adversaries-Infrastructure-and-C2-min1.1q0ho87ttly8.jpg","text":"手把手带你用空间测绘Hunting C2前言笔者最近工作接触到了情报方面，觉得蛮有意思的，就尝试通过空间测绘引擎来Hunting一些C2生产情报，觉得这个流程蛮有意思，开个新坑手把手带你情报入门。 什么是情报 威胁情报（Threat Intelligence）是指收集、分析和利用关于各种安全威胁的数据和信息的过程，以帮助组织识别和应对安全威胁。威胁情报可以来自多个来源，包括公共情报、私人情报、开源情报以及企业内部情报 本章中我们可以通过Hunting C2来对捕获到的IP进行一个C2标签的加，这...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"情报","slug":"情报","count":1,"path":"api/categories/情报.json"}],"tags":[{"name":"Hunting","slug":"Hunting","count":1,"path":"api/tags/Hunting.json"}],"author":{"name":"Zitui","slug":"zitui","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/zitui_logo.jpg","link":"https://rainsec.cn","description":"","socials":{}},"feature":true},{"title":"初识Java agent类型内存马","uid":"0a365c2eded74277e35f4b4f4e3376ba","slug":"Java Agent","date":"2023-03-30T10:38:45.000Z","updated":"2023-04-11T11:39:37.561Z","comments":true,"path":"api/articles/Java Agent.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image.39di12j6mwk0.png","text":"初识Java agent类型内存马前言你是否遇到过这样的场景，springboot环境下各种反序列化的点，但是可用的反序列化链不能直接加载类打入内存马，只能执行系统命令，甚至目标环境不出网，或者已经反弹shell或cs上线成功了，但是想要注入一个webshell。这时候就需要用到agent类型内存马了。 前置知识点JavaAgent 是JDK 1.5 以后引入的，可以在Java程序运行之前或运行期间修改类的字节码，Java agent可以是一个编译好的jar文件，使用方式有两种：-实现prema...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"攻防研究","slug":"攻防研究","count":1,"path":"api/categories/攻防研究.json"}],"tags":[{"name":"攻防研究","slug":"攻防研究","count":1,"path":"api/tags/攻防研究.json"}],"author":{"name":"COP","slug":"cop","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220721/cop.3c6tiszrlxs0.jpg","link":"https://rainsec.cn","description":"","socials":{}},"feature":true},{"title":"Angr Taint Analysis","uid":"1ac0942cada2f27dfbac108a2c01d426","slug":"Angr Taint Analysis","date":"2023-03-14T07:07:45.000Z","updated":"2023-04-11T11:38:41.065Z","comments":true,"path":"api/articles/Angr Taint Analysis.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image.7j4ghfi4dy00.png","text":"Angr Taint Analysis 本人一直致力于二进制分析和自动化漏洞挖掘领域，这次抛砖引玉，希望可以大家多多指导 污点分析的基本分类： 动态污点分析 静态污点分析 上述分析方式都有自己的优缺点，对于动态污点分析来说，缺点如下： 分析结果依赖输入。 一些隐式调用难以跟踪。 静态污点分析的缺点如下： 路径爆炸问题。 一些程序特性只有在动态执行的过程中才会展示出来。 angr本身的知识内容多而且杂乱，下面对一些核心的基础知识进行一下讲解。 angr https://web.wpi.edu/Pu...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":2,"path":"api/tags/漏洞挖掘.json"}],"author":{"name":"Clock","slug":"clock","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/clocklogo.jpg","link":"https://rainsec.cn","description":"","socials":{}},"feature":true},{"title":"实现一个简单的调试器","uid":"a9b1e85dae1254bf8475b6c81571a4ad","slug":"实现一个简单的调试器","date":"2023-02-23T09:56:45.000Z","updated":"2023-04-11T11:38:20.241Z","comments":true,"path":"api/articles/实现一个简单的调试器.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230223/image.4ftnu4l1g540.png","text":"实现一个简单的调试器​ 以经典的GDB为例其项目代码共有十几万行代码，但是很多情况下只会使用到几个常用功能：单步，断点，查看变量，线程/进程切换。而GDB基本上是依赖于ptrace系统调用，主要用于编写调试程序。大部分实现思路参考Writing a Linux Debugger Part 2: Breakpoints (tartanllama.xyz)系列文章，强烈推荐阅读 目标功能： 单步 断点 查看内存/寄存器 查看汇编 ptrace 原理​ 先来看看ptrace系统调用的函数签名： #in...","link":"","photos":[],"count_time":{"symbolsCount":"36k","symbolsTime":"33 mins."},"categories":[{"name":"二进制","slug":"二进制","count":1,"path":"api/categories/二进制.json"}],"tags":[{"name":"二进制","slug":"二进制","count":1,"path":"api/tags/二进制.json"}],"author":{"name":"崎山松形","slug":"崎山松形","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230112/yuanh.3xe42oas0b80.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"qiling 框架IotFuzz之Boa","uid":"dda4d51b385ad6b8fb41614a58891fc8","slug":"Qiling partial fuzz I","date":"2023-01-30T04:38:45.000Z","updated":"2023-04-11T11:40:04.161Z","comments":true,"path":"api/articles/Qiling partial fuzz I.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/images.4wcohedooqg0.png","text":"qiling 框架IotFuzz之Boa前言最近在搞Iot的时候接触到Qiling框架，用了一段时间后感觉确实模拟功能挺强大的，还支持Fuzz，于是开始学习对Iot webserver这样的程序进行Fuzz。 官方给出了类似的例子如Tenda AC15 的httpd的fuzz脚本，但是也就光秃秃一个脚本还是需要自己来一遍才能学到一些东西；因为面向的是Iot webserver的Fuzz因此需要对嵌入式设备中常用web开源框架有一些了解，这里是对于Boa框架的fuzz案例 环境准备： qiling...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"Fuzz","slug":"Fuzz","count":1,"path":"api/categories/Fuzz.json"}],"tags":[{"name":"Fuzz","slug":"Fuzz","count":4,"path":"api/tags/Fuzz.json"}],"author":{"name":"崎山松形","slug":"崎山松形","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230112/yuanh.3xe42oas0b80.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Burp-Montoya","uid":"6412321264c6d157e1df07971f4aa071","slug":"Burp-Montoya","date":"2022-11-01T04:38:45.000Z","updated":"2023-04-11T11:38:46.769Z","comments":true,"path":"api/articles/Burp-Montoya.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221101/burp-suite-180820162011-thumbnail.5ag1ra9f7s0.jpg","text":" Burp的新版本更新了新的API接口，刚好最近有写插件的想法，所以简单的了解了下。 简介 单从文档界面来看，结构清晰了不少-&gt;MontoyaApi 同时官方提供了一个demo 使用 与老版本类似，创建一个插件项目需要继承类BurpExtension，它只包含了一个初始化函数 public interface BurpExtension { void initialize(MontoyaApi var1); } 同样的，想要调用扫描等功能，也需要进行注册，比如我们注册一个扫描 public...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"BurpSuite","slug":"BurpSuite","count":2,"path":"api/tags/BurpSuite.json"}],"author":{"name":"Noel","slug":"noel","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220211/noel.47xsfyg7vt40.webp","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"对Xray 5.6W条结果的简单分析","uid":"7865cd0898eb778742478bf73fa460c6","slug":"Xray数据分析","date":"2022-10-12T11:48:45.000Z","updated":"2023-04-11T11:40:37.049Z","comments":true,"path":"api/articles/Xray数据分析.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221012/image-20221009230905837.2jiiuh6lk5s0.png","text":"对Xray 5.6W条结果的简单分析 前言自动化扫描src已经做一段时间了，各类问题累计扫出来7.3w+，其中xray作为扫描漏洞的主力之一，上报了5.6w+问题 。目前应该是全网使用xray漏洞记录最多的一个了吧。 这里便根据这5.6w+扫描结果来对xray做一个简单的分析及复盘，先说下我目前使用方式: 扫描目标 各大国内src相关资产 扫描方式 crawlgergo爬取网站请求并发送到xray xray扫描爬取的网站请求将结果发送给webhook webhook收集并报告漏洞 简单来说就是:...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[],"author":{"name":"Young","slug":"young","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220721/gg.3a3ld9g2kaq0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"AddressSanitizer 漏洞检测技术剖析","uid":"9830e1ecf0b844b9805cff1f477e18bc","slug":"AddressSanitizer","date":"2022-10-08T07:07:45.000Z","updated":"2023-04-11T11:38:30.765Z","comments":true,"path":"api/articles/AddressSanitizer.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221015/sanitizers.5w0qyt2gbqg0.webp","text":"AddressSanitizer 漏洞检测技术剖析 类似AFL之类的Fuzzing技术不断强大的一个核心原因就是漏洞检测能力的不断增强，作为AFL这款经典工具的核心，ASAN的漏洞检测核心能力值得关注。 ASAN简介 ASAN其实本身是作为LLVM项目的一部分存在于Clang里面，其作用就是一个强大的内存错误检测器，它由一个编译插桩模块和一个运行时库组成，据官网介绍其可以检测以下类型的漏洞： Out-of-bounds accesses to heap, stack and globals. U...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":2,"path":"api/tags/漏洞挖掘.json"}],"author":{"name":"Clock","slug":"clock","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/clocklogo.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Goby指纹与POC提取复现","uid":"84026449195101da50b0cdf96b2a3940","slug":"Goby指纹和POC提取","date":"2022-09-30T02:48:45.000Z","updated":"2023-04-11T11:39:24.009Z","comments":true,"path":"api/articles/Goby指纹和POC提取.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220930/image.x02df1872g.webp","text":"Goby指纹与POC提取复现最近看了w8ay师傅发的关于提取Goby指纹的帖子，发现自己加入师傅的知识星球却一直没认真学习过实在是难顶嗷，根据师傅的帖子来复现自己提取一下，补上第一期的作业。 Goby指纹提取首先是指纹提取，这里也分别准备了三个版本的Goby文件进行复现，分别是1.4.76、1.7.192和1.8.279 1.4.76因为版本比较低所以不需要我们手动去从goby程序里提crules，直接用winhex打开笔者从事的工作与Yara息息相关，但是从来没有深入的去了解Yara的原理和流...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"Zitui","slug":"zitui","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/zitui_logo.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Fastjson 1.2.80调试小记","uid":"fb1b22e9cffe64caefaaf1ad19f54d41","slug":"fastjson 1.2.80调试小记","date":"2022-09-27T10:38:45.000Z","updated":"2023-04-11T11:39:08.097Z","comments":true,"path":"api/articles/fastjson 1.2.80调试小记.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220930/image.5hsjeydq0cg0.png","text":"fastjson 1.2.68 反序列化rce探索前言 fastjson 1.2.68 目前公开的利用链中比较好用的是voidfyoo师傅的Commons IO 写文件链子，但是在spring环境下，仅仅通过写文件rce较为困难，本文更多的是结合多位师傅的文章理出一条通过写文件稳定rce方法 JDK8任意文件写场景下的Fastjson RCE 通过覆盖charsets.jar缺点太多，一是文件大，二是java版本不适配。另外笔者觉得还有一个致命因素，一般来说项目中只要使用了Charset.for...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"COP","slug":"cop","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220721/cop.3c6tiszrlxs0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"一次攻防小记","uid":"caead448310a4a1bf0047aa168443e2c","slug":"一次攻防小记","date":"2022-08-24T10:38:45.000Z","updated":"2023-04-11T11:38:25.117Z","comments":true,"path":"api/articles/一次攻防小记.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220824/scan.6q7shyuek6k0.png","text":"一次攻防小记​ 一次攻防，第一天师傅rmi直接进了总公司内网，笔者在核心资产段打了好久没能进去，水了几天边缘分公司，队长又让打核心段，看看之前的一些弱口令，后台能不能后续利用，没办法硬着头皮打。​ 这个弱口令属于那种爆破可以爆破出的，但是随手试肯定不会试的，后台功能点比较多，但是生产也不敢乱动，之前师傅进后台挖过，找到了个跨目录上传和文件读取（都仅限jpg后缀），笔者经过细挖，找到个sql注入（mysql，支持堆叠，mysql用户权限较低）和fastjson（1.2.47&lt;版本&lt;1....","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"渗透测试","slug":"渗透测试","count":10,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"渗透测试","slug":"渗透测试","count":3,"path":"api/tags/渗透测试.json"}],"author":{"name":"COP","slug":"cop","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220721/cop.3c6tiszrlxs0.jpg","link":"https://rainsec.cn","description":"","socials":{}}},{"title":"Fuzzing之Grammars","uid":"001f56a1173240fc9f846bb4717903d4","slug":"Fuzzing之Grammers","date":"2022-07-31T08:42:45.000Z","updated":"2023-04-11T11:39:14.837Z","comments":true,"path":"api/articles/Fuzzing之Grammers.json","cover":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/fuzzinggrammar.jpeg","text":"Fuzzing之GrammarsFuzzing input​ Fuzzing的一大核心思想其实就是通过大量的Input去触发程序的各个分支逻辑，因此Fuzzing的成功与否和Input的生成关系密切。Input的格式多种多样，可以是文件，代码，json数据等等。但是各种各样的数据都有自己的格式，程序的输入也是如此，那么在生成Input的过程中，格式化非常关键，程序无法接受的输入对于Fuzzing来说是毫无意义的。 ​ 为了很好的描述一个程序的输入，一个很有必要的事情是为输入制定一些语法规范。比如...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"漏洞挖掘","slug":"漏洞挖掘","count":6,"path":"api/categories/漏洞挖掘.json"}],"tags":[{"name":"Fuzz","slug":"Fuzz","count":4,"path":"api/tags/Fuzz.json"}],"author":{"name":"Clock","slug":"clock","avatar":"https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/clocklogo.jpg","link":"https://rainsec.cn","description":"","socials":{}}}]}